//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/plugins/PPluginModuleParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/plugins/PluginMessageUtils.h"
#include "mozilla/plugins/PluginModuleParent.h"
#include "nsID.h"

#include "mozilla/plugins/PPluginInstanceParent.h"
#include "mozilla/plugins/PPluginScriptableObjectParent.h"
#include "mozilla/dom/PContentParent.h"
#include "mozilla/PProfilerParent.h"
#include "mozilla/plugins/PFunctionBrokerParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace plugins {


auto PPluginModuleParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PPluginModuleParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PPluginModuleParent::EnteredCxxStack() -> void
{
}

auto PPluginModuleParent::ExitedCxxStack() -> void
{
}

auto PPluginModuleParent::EnteredCall() -> void
{
}

auto PPluginModuleParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PPluginModuleParent::PPluginModuleParent() :
    mozilla::ipc::IToplevelProtocol("PPluginModuleParent", PPluginModuleMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PPluginModuleParent);
}

PPluginModuleParent::~PPluginModuleParent()
{
    MOZ_COUNT_DTOR(PPluginModuleParent);
}

auto PPluginModuleParent::ManagedPPluginInstanceParent(nsTArray<PPluginInstanceParent*>& aArr) const -> void
{
    mManagedPPluginInstanceParent.ToArray(aArr);
}

auto PPluginModuleParent::ManagedPPluginInstanceParent() const -> const ManagedContainer<PPluginInstanceParent>&
{
    return mManagedPPluginInstanceParent;
}

auto PPluginModuleParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPPluginInstanceParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPPluginInstanceParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PPluginModuleParent::OpenPPluginInstanceEndpoint(PPluginInstanceParent* aActor) -> ManagedEndpoint<PPluginInstanceChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginInstanceParent actor");
        return ManagedEndpoint<PPluginInstanceChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPluginInstanceParent.PutEntry(aActor);

    return ManagedEndpoint<PPluginInstanceChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPluginModuleParent::BindPPluginInstanceEndpoint(
        ManagedEndpoint<PPluginInstanceParent> aEndpoint,
        PPluginInstanceParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginInstanceParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPluginInstanceParent.PutEntry(aActor);

    return true;
}

auto PPluginModuleParent::SendProcessNativeEventsInInterruptCall() -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_ProcessNativeEventsInInterruptCall(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_ProcessNativeEventsInInterruptCall", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleParent::SendInitProfiler(Endpoint<mozilla::PProfilerChild>&& aEndPoint) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_InitProfiler(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(aEndPoint));
    // Sentinel = 'aEndPoint'
    (msg__)->WriteSentinel(281740163);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_InitProfiler", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleParent::SendDisableFlashProtectedMode() -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_DisableFlashProtectedMode(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_DisableFlashProtectedMode", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleParent::CallModuleSupportsAsyncRender(bool* result) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_ModuleSupportsAsyncRender(MSG_ROUTING_CONTROL);




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_ModuleSupportsAsyncRender", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginModule::Msg_ModuleSupportsAsyncRender", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginModuleParent::CallNP_GetEntryPoints(NPError* rv) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_NP_GetEntryPoints(MSG_ROUTING_CONTROL);




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_NP_GetEntryPoints", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginModule::Msg_NP_GetEntryPoints", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, rv)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'rv'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 22806761)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginModuleParent::CallNP_Initialize(
        const PluginSettings& settings,
        NPError* rv) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_NP_Initialize(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, settings);
    // Sentinel = 'settings'
    (msg__)->WriteSentinel(260965234);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_NP_Initialize", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginModule::Msg_NP_Initialize", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, rv)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'rv'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 22806761)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginModuleParent::SendPPluginInstanceConstructor(
        const nsCString& aMimeType,
        const nsTArray<nsCString>& aNames,
        const nsTArray<nsCString>& aValues) -> PPluginInstanceParent*
{
    PPluginInstanceParent* actor = (static_cast<PluginModuleParent*>(this))->AllocPPluginInstanceParent(aMimeType, aNames, aValues);
    return SendPPluginInstanceConstructor(actor, aMimeType, aNames, aValues);
}

auto PPluginModuleParent::SendPPluginInstanceConstructor(
        PPluginInstanceParent* actor,
        const nsCString& aMimeType,
        const nsTArray<nsCString>& aNames,
        const nsTArray<nsCString>& aValues) -> PPluginInstanceParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PPluginInstanceParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPPluginInstanceParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PPluginModule::Msg_PPluginInstanceConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aMimeType);
    // Sentinel = 'aMimeType'
    (msg__)->WriteSentinel(289407884);
    WriteIPDLParam(msg__, this, aNames);
    // Sentinel = 'aNames'
    (msg__)->WriteSentinel(131727958);
    WriteIPDLParam(msg__, this, aValues);
    // Sentinel = 'aValues'
    (msg__)->WriteSentinel(182649554);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_PPluginInstanceConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PPluginInstanceParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PPluginInstanceMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PPluginModuleParent::CallSyncNPP_New(
        PPluginInstanceParent* aActor,
        NPError* rv) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_SyncNPP_New(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(aActor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, aActor);
    // Sentinel = 'aActor'
    (msg__)->WriteSentinel(130613851);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_SyncNPP_New", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginModule::Msg_SyncNPP_New", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, rv)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'rv'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 22806761)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginModuleParent::CallNP_Shutdown(NPError* rv) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_NP_Shutdown(MSG_ROUTING_CONTROL);




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_NP_Shutdown", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginModule::Msg_NP_Shutdown", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, rv)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'rv'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 22806761)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginModuleParent::CallOptionalFunctionsSupported(
        bool* aURLRedirectNotify,
        bool* aClearSiteData,
        bool* aGetSitesWithData) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_OptionalFunctionsSupported(MSG_ROUTING_CONTROL);




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_OptionalFunctionsSupported", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginModule::Msg_OptionalFunctionsSupported", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aURLRedirectNotify)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aURLRedirectNotify'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 1065420544)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aClearSiteData)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aClearSiteData'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 664405336)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aGetSitesWithData)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aGetSitesWithData'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 992216736)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginModuleParent::SendNPP_ClearSiteData(
        const nsCString& site,
        const uint64_t& flags,
        const uint64_t& maxAge,
        const uint64_t& aCallbackId) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_NPP_ClearSiteData(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, site);
    // Sentinel = 'site'
    (msg__)->WriteSentinel(72876470);
    WriteIPDLParam(msg__, this, flags);
    // Sentinel = 'flags'
    (msg__)->WriteSentinel(102171150);
    WriteIPDLParam(msg__, this, maxAge);
    // Sentinel = 'maxAge'
    (msg__)->WriteSentinel(139395668);
    WriteIPDLParam(msg__, this, aCallbackId);
    // Sentinel = 'aCallbackId'
    (msg__)->WriteSentinel(411370524);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_NPP_ClearSiteData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleParent::SendNPP_GetSitesWithData(const uint64_t& aCallbackId) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_NPP_GetSitesWithData(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aCallbackId);
    // Sentinel = 'aCallbackId'
    (msg__)->WriteSentinel(411370524);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_NPP_GetSitesWithData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleParent::SendSetAudioSessionData(
        const nsID& aID,
        const nsString& aDisplayName,
        const nsString& aIconPath) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_SetAudioSessionData(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aDisplayName);
    // Sentinel = 'aDisplayName'
    (msg__)->WriteSentinel(509215929);
    WriteIPDLParam(msg__, this, aIconPath);
    // Sentinel = 'aIconPath'
    (msg__)->WriteSentinel(283247480);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_SetAudioSessionData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleParent::SendSetParentHangTimeout(const uint32_t& seconds) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_SetParentHangTimeout(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, seconds);
    // Sentinel = 'seconds'
    (msg__)->WriteSentinel(196739824);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_SetParentHangTimeout", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleParent::CallInitCrashReporter(NativeThreadId* tid) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_InitCrashReporter(MSG_ROUTING_CONTROL);




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_InitCrashReporter", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginModule::Msg_InitCrashReporter", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, tid)))) {
        FatalError("Error deserializing 'NativeThreadId'");
        return false;
    }
    // Sentinel = 'tid'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43319618)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NativeThreadId'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginModuleParent::SendSettingChanged(const PluginSettings& settings) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_SettingChanged(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, settings);
    // Sentinel = 'settings'
    (msg__)->WriteSentinel(260965234);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_SettingChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleParent::SendNPP_SetValue_NPNVaudioDeviceChangeDetails(const NPAudioDeviceChangeDetailsIPC& changeDetails) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_NPP_SetValue_NPNVaudioDeviceChangeDetails(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, changeDetails);
    // Sentinel = 'changeDetails'
    (msg__)->WriteSentinel(599393581);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_NPP_SetValue_NPNVaudioDeviceChangeDetails", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleParent::SendNPP_SetValue_NPNVaudioDeviceStateChanged(const NPAudioDeviceStateChangedIPC& deviceState) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_NPP_SetValue_NPNVaudioDeviceStateChanged(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, deviceState);
    // Sentinel = 'deviceState'
    (msg__)->WriteSentinel(447284338);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_NPP_SetValue_NPNVaudioDeviceStateChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleParent::SendInitPluginModuleChild(Endpoint<mozilla::plugins::PPluginModuleChild>&& endpoint) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_InitPluginModuleChild(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(endpoint));
    // Sentinel = 'endpoint'
    (msg__)->WriteSentinel(251724642);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_InitPluginModuleChild", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleParent::SendInitPluginFunctionBroker(Endpoint<mozilla::plugins::PFunctionBrokerChild>&& endpoint) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_InitPluginFunctionBroker(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(endpoint));
    // Sentinel = 'endpoint'
    (msg__)->WriteSentinel(251724642);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_InitPluginFunctionBroker", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PPluginInstanceMsgStart:
{
            PPluginInstanceParent* actor = static_cast<PPluginInstanceParent*>(aListener);
            auto& container = mManagedPPluginInstanceParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PPluginModuleParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PPluginInstanceMsgStart:
        static_cast<PluginModuleParent*>(this)->DeallocPPluginInstanceParent(static_cast<PPluginInstanceParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PPluginModuleParent::OnMessageReceived(const Message& msg__) -> PPluginModuleParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PPluginModule::Msg_ProcessNativeEventsInInterruptCall__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_ProcessNativeEventsInInterruptCall", OTHER);

            if ((!((static_cast<PluginModuleParent*>(this))->RecvProcessNativeEventsInInterruptCall()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Reply_PPluginInstanceConstructor__ID:
        {
            return MsgProcessed;
        }
    case PPluginModule::Msg_BackUpXResources__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_BackUpXResources", OTHER);

            PickleIterator iter__{msg__};
            FileDescriptor aXSocketFd{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aXSocketFd)))))) {
                FatalError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'aXSocketFd'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 349569997)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleParent*>(this))->RecvBackUpXResources(std::move(aXSocketFd))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_PluginShowWindow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_PluginShowWindow", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aWindowId{};
            bool aModal{};
            int32_t aX{};
            int32_t aY{};
            double aWidth{};
            double aHeight{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWindowId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWindowId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 296223623)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aModal)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aModal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132317775)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aX)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aX'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18612410)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aY)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aY'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18677947)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWidth)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'aWidth'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136249954)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHeight)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'aHeight'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 175375035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleParent*>(this))->RecvPluginShowWindow(std::move(aWindowId), std::move(aModal), std::move(aX), std::move(aY), std::move(aWidth), std::move(aHeight))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_PluginHideWindow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_PluginHideWindow", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aWindowId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWindowId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWindowId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 296223623)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleParent*>(this))->RecvPluginHideWindow(std::move(aWindowId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_SetCursor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_SetCursor", OTHER);

            PickleIterator iter__{msg__};
            NSCursorInfo cursorInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(cursorInfo)))))) {
                FatalError("Error deserializing 'NSCursorInfo'");
                return MsgValueError;
            }
            // Sentinel = 'cursorInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 389481515)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NSCursorInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleParent*>(this))->RecvSetCursor(std::move(cursorInfo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_ShowCursor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_ShowCursor", OTHER);

            PickleIterator iter__{msg__};
            bool show{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(show)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'show'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 73204162)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleParent*>(this))->RecvShowCursor(std::move(show))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_PushCursor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_PushCursor", OTHER);

            PickleIterator iter__{msg__};
            NSCursorInfo cursorInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(cursorInfo)))))) {
                FatalError("Error deserializing 'NSCursorInfo'");
                return MsgValueError;
            }
            // Sentinel = 'cursorInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 389481515)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NSCursorInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleParent*>(this))->RecvPushCursor(std::move(cursorInfo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_PopCursor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_PopCursor", OTHER);

            if ((!((static_cast<PluginModuleParent*>(this))->RecvPopCursor()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_NPN_ReloadPlugins__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_NPN_ReloadPlugins", OTHER);

            PickleIterator iter__{msg__};
            bool aReloadPages{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReloadPages)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aReloadPages'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 500761769)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleParent*>(this))->RecvNPN_ReloadPlugins(std::move(aReloadPages))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_NotifyContentModuleDestroyed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_NotifyContentModuleDestroyed", OTHER);

            if ((!((static_cast<PluginModuleParent*>(this))->RecvNotifyContentModuleDestroyed()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_ReturnClearSiteData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_ReturnClearSiteData", OTHER);

            PickleIterator iter__{msg__};
            NPError aRv{};
            uint64_t aCallbackId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRv)))))) {
                FatalError("Error deserializing 'NPError'");
                return MsgValueError;
            }
            // Sentinel = 'aRv'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 37749034)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCallbackId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCallbackId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 411370524)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleParent*>(this))->RecvReturnClearSiteData(std::move(aRv), std::move(aCallbackId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_ReturnSitesWithData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_ReturnSitesWithData", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<nsCString> aSites{};
            uint64_t aCallbackId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSites)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aSites'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136839786)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCallbackId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCallbackId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 411370524)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleParent*>(this))->RecvReturnSitesWithData(std::move(aSites), std::move(aCallbackId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PPluginModuleParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PPluginModuleParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    switch (msg__.type()) {
    case PPluginModule::Msg_NPN_SetException__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_NPN_SetException", OTHER);

            PickleIterator iter__{msg__};
            nsCString message{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(message)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'message'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 197198566)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            if ((!((static_cast<PluginModuleParent*>(this))->RecvNPN_SetException(std::move(message))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginModule::Reply_NPN_SetException(id__);


            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPluginModuleParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PPluginModuleParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnCallReceived(msg__, reply__);
    }

    switch (msg__.type()) {
    case PPluginModule::Msg_ProcessSomeEvents__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_ProcessSomeEvents", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            if ((!((static_cast<PluginModuleParent*>(this))->AnswerProcessSomeEvents()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginModule::Reply_ProcessSomeEvents(id__);


            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginModule::Msg_NPN_SetValue_NPPVpluginRequiresAudioDeviceChanges__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_NPN_SetValue_NPPVpluginRequiresAudioDeviceChanges", OTHER);

            PickleIterator iter__{msg__};
            bool shouldRegister{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(shouldRegister)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'shouldRegister'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 734332373)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            NPError result{};
            if ((!((static_cast<PluginModuleParent*>(this))->AnswerNPN_SetValue_NPPVpluginRequiresAudioDeviceChanges(std::move(shouldRegister), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginModule::Reply_NPN_SetValue_NPPVpluginRequiresAudioDeviceChanges(id__);

            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPluginModuleParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PPluginModuleParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PPluginModuleParent::ProcessNativeEventsInInterruptCall() -> void
{
#ifdef OS_WIN
    GetIPCChannel()->ProcessNativeEventsInInterruptCall();
#else
    FatalError("This method is Windows-only");
#endif
}

auto PPluginModuleParent::ClearSubtree() -> void
{
    for (auto it = mManagedPPluginInstanceParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPluginInstanceParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPluginInstanceParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPluginInstanceParent.Clear();

}



} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::plugins::PPluginModuleParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::plugins::PPluginModuleParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PPluginModule", PPluginModuleMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::plugins::PPluginModuleParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
