//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/dom/PWebAuthnTransaction.h"
#include "mozilla/dom/PWebAuthnTransactionParent.h"
#include "mozilla/dom/PWebAuthnTransactionChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace PWebAuthnTransaction {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PWebAuthnTransactionParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PWebAuthnTransactionChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_RequestRegister(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestRegister__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RequestSign(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestSign__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RequestCancel(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestCancel__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DestroyMe(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DestroyMe__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ConfirmRegister(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ConfirmRegister__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ConfirmSign(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ConfirmSign__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Abort(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Abort__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}

} // namespace PWebAuthnTransaction
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebAuthnAuthenticatorSelection|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebAuthnAuthenticatorSelection>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requireResidentKey());
    // Sentinel = 'requireResidentKey'
    (aMsg)->WriteSentinel(1190725477);
    WriteIPDLParam(aMsg, aActor, (aVar).userVerificationRequirement());
    // Sentinel = 'userVerificationRequirement'
    (aMsg)->WriteSentinel(2623474484);
    WriteIPDLParam(aMsg, aActor, (aVar).authenticatorAttachment());
    // Sentinel = 'authenticatorAttachment'
    (aMsg)->WriteSentinel(1921649029);
}

auto IPDLParamTraits<mozilla::dom::WebAuthnAuthenticatorSelection>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requireResidentKey())))))) {
        aActor->FatalError("Error deserializing 'requireResidentKey' (bool) member of 'WebAuthnAuthenticatorSelection'");
        return false;
    }
    // Sentinel = 'requireResidentKey'
    if ((!((aMsg)->ReadSentinel(aIter, 1190725477)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requireResidentKey' (bool) member of 'WebAuthnAuthenticatorSelection'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->userVerificationRequirement())))))) {
        aActor->FatalError("Error deserializing 'userVerificationRequirement' (UserVerificationRequirement) member of 'WebAuthnAuthenticatorSelection'");
        return false;
    }
    // Sentinel = 'userVerificationRequirement'
    if ((!((aMsg)->ReadSentinel(aIter, 2623474484)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'userVerificationRequirement' (UserVerificationRequirement) member of 'WebAuthnAuthenticatorSelection'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->authenticatorAttachment())))))) {
        aActor->FatalError("Error deserializing 'authenticatorAttachment' (AuthenticatorAttachment?) member of 'WebAuthnAuthenticatorSelection'");
        return false;
    }
    // Sentinel = 'authenticatorAttachment'
    if ((!((aMsg)->ReadSentinel(aIter, 1921649029)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'authenticatorAttachment' (AuthenticatorAttachment?) member of 'WebAuthnAuthenticatorSelection'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebAuthnScopedCredential|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebAuthnScopedCredential>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).id());
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
    (aMsg)->WriteBytes((&((aVar).transports())), 1);
    // Sentinel = 'transports'
    (aMsg)->WriteSentinel(401409121);
}

auto IPDLParamTraits<mozilla::dom::WebAuthnScopedCredential>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->id())))))) {
        aActor->FatalError("Error deserializing 'id' (uint8_t[]) member of 'WebAuthnScopedCredential'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'id' (uint8_t[]) member of 'WebAuthnScopedCredential'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->transports())), 1)))) {
        aActor->FatalError("Error bulk reading fields from uint8_t");
        return false;
    }
    // Sentinel = 'transports'
    if ((!((aMsg)->ReadSentinel(aIter, 401409121)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint8_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebAuthnExtensionAppId|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebAuthnExtensionAppId>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).AppId());
    // Sentinel = 'AppId'
    (aMsg)->WriteSentinel(89129423);
    WriteIPDLParam(aMsg, aActor, (aVar).appIdentifier());
    // Sentinel = 'appIdentifier'
    (aMsg)->WriteSentinel(610665797);
}

auto IPDLParamTraits<mozilla::dom::WebAuthnExtensionAppId>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->AppId())))))) {
        aActor->FatalError("Error deserializing 'AppId' (uint8_t[]) member of 'WebAuthnExtensionAppId'");
        return false;
    }
    // Sentinel = 'AppId'
    if ((!((aMsg)->ReadSentinel(aIter, 89129423)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'AppId' (uint8_t[]) member of 'WebAuthnExtensionAppId'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->appIdentifier())))))) {
        aActor->FatalError("Error deserializing 'appIdentifier' (nsString) member of 'WebAuthnExtensionAppId'");
        return false;
    }
    // Sentinel = 'appIdentifier'
    if ((!((aMsg)->ReadSentinel(aIter, 610665797)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'appIdentifier' (nsString) member of 'WebAuthnExtensionAppId'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebAuthnExtensionHmacSecret|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebAuthnExtensionHmacSecret>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).hmacCreateSecret());
    // Sentinel = 'hmacCreateSecret'
    (aMsg)->WriteSentinel(890963540);
}

auto IPDLParamTraits<mozilla::dom::WebAuthnExtensionHmacSecret>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hmacCreateSecret())))))) {
        aActor->FatalError("Error deserializing 'hmacCreateSecret' (bool) member of 'WebAuthnExtensionHmacSecret'");
        return false;
    }
    // Sentinel = 'hmacCreateSecret'
    if ((!((aMsg)->ReadSentinel(aIter, 890963540)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hmacCreateSecret' (bool) member of 'WebAuthnExtensionHmacSecret'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union WebAuthnExtension|
//
namespace mozilla {
namespace dom {
auto WebAuthnExtension::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TWebAuthnExtensionAppId:
        {
            (ptr_WebAuthnExtensionAppId())->~WebAuthnExtensionAppId__tdef();
            break;
        }
    case TWebAuthnExtensionHmacSecret:
        {
            (ptr_WebAuthnExtensionHmacSecret())->~WebAuthnExtensionHmacSecret__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT WebAuthnExtension::WebAuthnExtension(const WebAuthnExtensionAppId& aOther)
{
    new (mozilla::KnownNotNull, ptr_WebAuthnExtensionAppId()) WebAuthnExtensionAppId(aOther);
    mType = TWebAuthnExtensionAppId;
}

MOZ_IMPLICIT WebAuthnExtension::WebAuthnExtension(WebAuthnExtensionAppId&& aOther)
{
    new (mozilla::KnownNotNull, ptr_WebAuthnExtensionAppId()) WebAuthnExtensionAppId(std::move(aOther));
    mType = TWebAuthnExtensionAppId;
}

MOZ_IMPLICIT WebAuthnExtension::WebAuthnExtension(const WebAuthnExtensionHmacSecret& aOther)
{
    new (mozilla::KnownNotNull, ptr_WebAuthnExtensionHmacSecret()) WebAuthnExtensionHmacSecret(aOther);
    mType = TWebAuthnExtensionHmacSecret;
}

MOZ_IMPLICIT WebAuthnExtension::WebAuthnExtension(WebAuthnExtensionHmacSecret&& aOther)
{
    new (mozilla::KnownNotNull, ptr_WebAuthnExtensionHmacSecret()) WebAuthnExtensionHmacSecret(std::move(aOther));
    mType = TWebAuthnExtensionHmacSecret;
}

MOZ_IMPLICIT WebAuthnExtension::WebAuthnExtension(const WebAuthnExtension& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TWebAuthnExtensionAppId:
        {
            new (mozilla::KnownNotNull, ptr_WebAuthnExtensionAppId()) WebAuthnExtensionAppId((aOther).get_WebAuthnExtensionAppId());
            break;
        }
    case TWebAuthnExtensionHmacSecret:
        {
            new (mozilla::KnownNotNull, ptr_WebAuthnExtensionHmacSecret()) WebAuthnExtensionHmacSecret((aOther).get_WebAuthnExtensionHmacSecret());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT WebAuthnExtension::WebAuthnExtension(WebAuthnExtension&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TWebAuthnExtensionAppId:
        {
            new (mozilla::KnownNotNull, ptr_WebAuthnExtensionAppId()) WebAuthnExtensionAppId(std::move((aOther).get_WebAuthnExtensionAppId()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TWebAuthnExtensionHmacSecret:
        {
            new (mozilla::KnownNotNull, ptr_WebAuthnExtensionHmacSecret()) WebAuthnExtensionHmacSecret(std::move((aOther).get_WebAuthnExtensionHmacSecret()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

WebAuthnExtension::~WebAuthnExtension()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto WebAuthnExtension::operator=(const WebAuthnExtensionAppId& aRhs) -> WebAuthnExtension&
{
    if (MaybeDestroy(TWebAuthnExtensionAppId)) {
        new (mozilla::KnownNotNull, ptr_WebAuthnExtensionAppId()) WebAuthnExtensionAppId;
    }
    (*(ptr_WebAuthnExtensionAppId())) = aRhs;
    mType = TWebAuthnExtensionAppId;
    return (*(this));
}

auto WebAuthnExtension::operator=(WebAuthnExtensionAppId&& aRhs) -> WebAuthnExtension&
{
    if (MaybeDestroy(TWebAuthnExtensionAppId)) {
        new (mozilla::KnownNotNull, ptr_WebAuthnExtensionAppId()) WebAuthnExtensionAppId;
    }
    (*(ptr_WebAuthnExtensionAppId())) = std::move(aRhs);
    mType = TWebAuthnExtensionAppId;
    return (*(this));
}

auto WebAuthnExtension::operator=(const WebAuthnExtensionHmacSecret& aRhs) -> WebAuthnExtension&
{
    if (MaybeDestroy(TWebAuthnExtensionHmacSecret)) {
        new (mozilla::KnownNotNull, ptr_WebAuthnExtensionHmacSecret()) WebAuthnExtensionHmacSecret;
    }
    (*(ptr_WebAuthnExtensionHmacSecret())) = aRhs;
    mType = TWebAuthnExtensionHmacSecret;
    return (*(this));
}

auto WebAuthnExtension::operator=(WebAuthnExtensionHmacSecret&& aRhs) -> WebAuthnExtension&
{
    if (MaybeDestroy(TWebAuthnExtensionHmacSecret)) {
        new (mozilla::KnownNotNull, ptr_WebAuthnExtensionHmacSecret()) WebAuthnExtensionHmacSecret;
    }
    (*(ptr_WebAuthnExtensionHmacSecret())) = std::move(aRhs);
    mType = TWebAuthnExtensionHmacSecret;
    return (*(this));
}

auto WebAuthnExtension::operator=(const WebAuthnExtension& aRhs) -> WebAuthnExtension&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TWebAuthnExtensionAppId:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_WebAuthnExtensionAppId()) WebAuthnExtensionAppId;
            }
            (*(ptr_WebAuthnExtensionAppId())) = (aRhs).get_WebAuthnExtensionAppId();
            break;
        }
    case TWebAuthnExtensionHmacSecret:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_WebAuthnExtensionHmacSecret()) WebAuthnExtensionHmacSecret;
            }
            (*(ptr_WebAuthnExtensionHmacSecret())) = (aRhs).get_WebAuthnExtensionHmacSecret();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto WebAuthnExtension::operator=(WebAuthnExtension&& aRhs) -> WebAuthnExtension&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TWebAuthnExtensionAppId:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_WebAuthnExtensionAppId()) WebAuthnExtensionAppId;
            }
            (*(ptr_WebAuthnExtensionAppId())) = std::move((aRhs).get_WebAuthnExtensionAppId());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TWebAuthnExtensionHmacSecret:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_WebAuthnExtensionHmacSecret()) WebAuthnExtensionHmacSecret;
            }
            (*(ptr_WebAuthnExtensionHmacSecret())) = std::move((aRhs).get_WebAuthnExtensionHmacSecret());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebAuthnExtension>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::WebAuthnExtension union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'WebAuthnExtension'
    (aMsg)->WriteSentinel(1003030236);

    switch (type) {
    case union__::TWebAuthnExtensionAppId:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_WebAuthnExtensionAppId());
            // Sentinel = 'TWebAuthnExtensionAppId'
            (aMsg)->WriteSentinel(1793919230);
            return;
        }
    case union__::TWebAuthnExtensionHmacSecret:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_WebAuthnExtensionHmacSecret());
            // Sentinel = 'TWebAuthnExtensionHmacSecret'
            (aMsg)->WriteSentinel(2650737423);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::WebAuthnExtension>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::WebAuthnExtension union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union WebAuthnExtension");
        return false;
    }
    // Sentinel = 'WebAuthnExtension'
    if ((!((aMsg)->ReadSentinel(aIter, 1003030236)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union WebAuthnExtension");
        return false;
    }

    switch (type) {
    case union__::TWebAuthnExtensionAppId:
        {
            mozilla::dom::WebAuthnExtensionAppId tmp = mozilla::dom::WebAuthnExtensionAppId();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_WebAuthnExtensionAppId())))))) {
                aActor->FatalError("Error deserializing variant TWebAuthnExtensionAppId of union WebAuthnExtension");
                return false;
            }
            // Sentinel = 'TWebAuthnExtensionAppId'
            if ((!((aMsg)->ReadSentinel(aIter, 1793919230)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TWebAuthnExtensionAppId of union WebAuthnExtension");
                return false;
            }
            return true;
        }
    case union__::TWebAuthnExtensionHmacSecret:
        {
            mozilla::dom::WebAuthnExtensionHmacSecret tmp = mozilla::dom::WebAuthnExtensionHmacSecret();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_WebAuthnExtensionHmacSecret())))))) {
                aActor->FatalError("Error deserializing variant TWebAuthnExtensionHmacSecret of union WebAuthnExtension");
                return false;
            }
            // Sentinel = 'TWebAuthnExtensionHmacSecret'
            if ((!((aMsg)->ReadSentinel(aIter, 2650737423)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TWebAuthnExtensionHmacSecret of union WebAuthnExtension");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebAuthnExtensionResultAppId|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebAuthnExtensionResultAppId>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).AppId());
    // Sentinel = 'AppId'
    (aMsg)->WriteSentinel(89129423);
}

auto IPDLParamTraits<mozilla::dom::WebAuthnExtensionResultAppId>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->AppId())))))) {
        aActor->FatalError("Error deserializing 'AppId' (bool) member of 'WebAuthnExtensionResultAppId'");
        return false;
    }
    // Sentinel = 'AppId'
    if ((!((aMsg)->ReadSentinel(aIter, 89129423)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'AppId' (bool) member of 'WebAuthnExtensionResultAppId'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebAuthnExtensionResultHmacSecret|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebAuthnExtensionResultHmacSecret>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).hmacCreateSecret());
    // Sentinel = 'hmacCreateSecret'
    (aMsg)->WriteSentinel(890963540);
}

auto IPDLParamTraits<mozilla::dom::WebAuthnExtensionResultHmacSecret>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hmacCreateSecret())))))) {
        aActor->FatalError("Error deserializing 'hmacCreateSecret' (bool) member of 'WebAuthnExtensionResultHmacSecret'");
        return false;
    }
    // Sentinel = 'hmacCreateSecret'
    if ((!((aMsg)->ReadSentinel(aIter, 890963540)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hmacCreateSecret' (bool) member of 'WebAuthnExtensionResultHmacSecret'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union WebAuthnExtensionResult|
//
namespace mozilla {
namespace dom {
auto WebAuthnExtensionResult::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TWebAuthnExtensionResultAppId:
        {
            (ptr_WebAuthnExtensionResultAppId())->~WebAuthnExtensionResultAppId__tdef();
            break;
        }
    case TWebAuthnExtensionResultHmacSecret:
        {
            (ptr_WebAuthnExtensionResultHmacSecret())->~WebAuthnExtensionResultHmacSecret__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT WebAuthnExtensionResult::WebAuthnExtensionResult(const WebAuthnExtensionResultAppId& aOther)
{
    new (mozilla::KnownNotNull, ptr_WebAuthnExtensionResultAppId()) WebAuthnExtensionResultAppId(aOther);
    mType = TWebAuthnExtensionResultAppId;
}

MOZ_IMPLICIT WebAuthnExtensionResult::WebAuthnExtensionResult(WebAuthnExtensionResultAppId&& aOther)
{
    new (mozilla::KnownNotNull, ptr_WebAuthnExtensionResultAppId()) WebAuthnExtensionResultAppId(std::move(aOther));
    mType = TWebAuthnExtensionResultAppId;
}

MOZ_IMPLICIT WebAuthnExtensionResult::WebAuthnExtensionResult(const WebAuthnExtensionResultHmacSecret& aOther)
{
    new (mozilla::KnownNotNull, ptr_WebAuthnExtensionResultHmacSecret()) WebAuthnExtensionResultHmacSecret(aOther);
    mType = TWebAuthnExtensionResultHmacSecret;
}

MOZ_IMPLICIT WebAuthnExtensionResult::WebAuthnExtensionResult(WebAuthnExtensionResultHmacSecret&& aOther)
{
    new (mozilla::KnownNotNull, ptr_WebAuthnExtensionResultHmacSecret()) WebAuthnExtensionResultHmacSecret(std::move(aOther));
    mType = TWebAuthnExtensionResultHmacSecret;
}

MOZ_IMPLICIT WebAuthnExtensionResult::WebAuthnExtensionResult(const WebAuthnExtensionResult& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TWebAuthnExtensionResultAppId:
        {
            new (mozilla::KnownNotNull, ptr_WebAuthnExtensionResultAppId()) WebAuthnExtensionResultAppId((aOther).get_WebAuthnExtensionResultAppId());
            break;
        }
    case TWebAuthnExtensionResultHmacSecret:
        {
            new (mozilla::KnownNotNull, ptr_WebAuthnExtensionResultHmacSecret()) WebAuthnExtensionResultHmacSecret((aOther).get_WebAuthnExtensionResultHmacSecret());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT WebAuthnExtensionResult::WebAuthnExtensionResult(WebAuthnExtensionResult&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TWebAuthnExtensionResultAppId:
        {
            new (mozilla::KnownNotNull, ptr_WebAuthnExtensionResultAppId()) WebAuthnExtensionResultAppId(std::move((aOther).get_WebAuthnExtensionResultAppId()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TWebAuthnExtensionResultHmacSecret:
        {
            new (mozilla::KnownNotNull, ptr_WebAuthnExtensionResultHmacSecret()) WebAuthnExtensionResultHmacSecret(std::move((aOther).get_WebAuthnExtensionResultHmacSecret()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

WebAuthnExtensionResult::~WebAuthnExtensionResult()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto WebAuthnExtensionResult::operator=(const WebAuthnExtensionResultAppId& aRhs) -> WebAuthnExtensionResult&
{
    if (MaybeDestroy(TWebAuthnExtensionResultAppId)) {
        new (mozilla::KnownNotNull, ptr_WebAuthnExtensionResultAppId()) WebAuthnExtensionResultAppId;
    }
    (*(ptr_WebAuthnExtensionResultAppId())) = aRhs;
    mType = TWebAuthnExtensionResultAppId;
    return (*(this));
}

auto WebAuthnExtensionResult::operator=(WebAuthnExtensionResultAppId&& aRhs) -> WebAuthnExtensionResult&
{
    if (MaybeDestroy(TWebAuthnExtensionResultAppId)) {
        new (mozilla::KnownNotNull, ptr_WebAuthnExtensionResultAppId()) WebAuthnExtensionResultAppId;
    }
    (*(ptr_WebAuthnExtensionResultAppId())) = std::move(aRhs);
    mType = TWebAuthnExtensionResultAppId;
    return (*(this));
}

auto WebAuthnExtensionResult::operator=(const WebAuthnExtensionResultHmacSecret& aRhs) -> WebAuthnExtensionResult&
{
    if (MaybeDestroy(TWebAuthnExtensionResultHmacSecret)) {
        new (mozilla::KnownNotNull, ptr_WebAuthnExtensionResultHmacSecret()) WebAuthnExtensionResultHmacSecret;
    }
    (*(ptr_WebAuthnExtensionResultHmacSecret())) = aRhs;
    mType = TWebAuthnExtensionResultHmacSecret;
    return (*(this));
}

auto WebAuthnExtensionResult::operator=(WebAuthnExtensionResultHmacSecret&& aRhs) -> WebAuthnExtensionResult&
{
    if (MaybeDestroy(TWebAuthnExtensionResultHmacSecret)) {
        new (mozilla::KnownNotNull, ptr_WebAuthnExtensionResultHmacSecret()) WebAuthnExtensionResultHmacSecret;
    }
    (*(ptr_WebAuthnExtensionResultHmacSecret())) = std::move(aRhs);
    mType = TWebAuthnExtensionResultHmacSecret;
    return (*(this));
}

auto WebAuthnExtensionResult::operator=(const WebAuthnExtensionResult& aRhs) -> WebAuthnExtensionResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TWebAuthnExtensionResultAppId:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_WebAuthnExtensionResultAppId()) WebAuthnExtensionResultAppId;
            }
            (*(ptr_WebAuthnExtensionResultAppId())) = (aRhs).get_WebAuthnExtensionResultAppId();
            break;
        }
    case TWebAuthnExtensionResultHmacSecret:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_WebAuthnExtensionResultHmacSecret()) WebAuthnExtensionResultHmacSecret;
            }
            (*(ptr_WebAuthnExtensionResultHmacSecret())) = (aRhs).get_WebAuthnExtensionResultHmacSecret();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto WebAuthnExtensionResult::operator=(WebAuthnExtensionResult&& aRhs) -> WebAuthnExtensionResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TWebAuthnExtensionResultAppId:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_WebAuthnExtensionResultAppId()) WebAuthnExtensionResultAppId;
            }
            (*(ptr_WebAuthnExtensionResultAppId())) = std::move((aRhs).get_WebAuthnExtensionResultAppId());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TWebAuthnExtensionResultHmacSecret:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_WebAuthnExtensionResultHmacSecret()) WebAuthnExtensionResultHmacSecret;
            }
            (*(ptr_WebAuthnExtensionResultHmacSecret())) = std::move((aRhs).get_WebAuthnExtensionResultHmacSecret());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebAuthnExtensionResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::WebAuthnExtensionResult union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'WebAuthnExtensionResult'
    (aMsg)->WriteSentinel(1833765211);

    switch (type) {
    case union__::TWebAuthnExtensionResultAppId:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_WebAuthnExtensionResultAppId());
            // Sentinel = 'TWebAuthnExtensionResultAppId'
            (aMsg)->WriteSentinel(2867071869);
            return;
        }
    case union__::TWebAuthnExtensionResultHmacSecret:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_WebAuthnExtensionResultHmacSecret());
            // Sentinel = 'TWebAuthnExtensionResultHmacSecret'
            (aMsg)->WriteSentinel(3933277582);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::WebAuthnExtensionResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::WebAuthnExtensionResult union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union WebAuthnExtensionResult");
        return false;
    }
    // Sentinel = 'WebAuthnExtensionResult'
    if ((!((aMsg)->ReadSentinel(aIter, 1833765211)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union WebAuthnExtensionResult");
        return false;
    }

    switch (type) {
    case union__::TWebAuthnExtensionResultAppId:
        {
            mozilla::dom::WebAuthnExtensionResultAppId tmp = mozilla::dom::WebAuthnExtensionResultAppId();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_WebAuthnExtensionResultAppId())))))) {
                aActor->FatalError("Error deserializing variant TWebAuthnExtensionResultAppId of union WebAuthnExtensionResult");
                return false;
            }
            // Sentinel = 'TWebAuthnExtensionResultAppId'
            if ((!((aMsg)->ReadSentinel(aIter, 2867071869)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TWebAuthnExtensionResultAppId of union WebAuthnExtensionResult");
                return false;
            }
            return true;
        }
    case union__::TWebAuthnExtensionResultHmacSecret:
        {
            mozilla::dom::WebAuthnExtensionResultHmacSecret tmp = mozilla::dom::WebAuthnExtensionResultHmacSecret();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_WebAuthnExtensionResultHmacSecret())))))) {
                aActor->FatalError("Error deserializing variant TWebAuthnExtensionResultHmacSecret of union WebAuthnExtensionResult");
                return false;
            }
            // Sentinel = 'TWebAuthnExtensionResultHmacSecret'
            if ((!((aMsg)->ReadSentinel(aIter, 3933277582)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TWebAuthnExtensionResultHmacSecret of union WebAuthnExtensionResult");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebAuthnMakeCredentialRpInfo|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebAuthnMakeCredentialRpInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).Name());
    // Sentinel = 'Name'
    (aMsg)->WriteSentinel(60686722);
    WriteIPDLParam(aMsg, aActor, (aVar).Icon());
    // Sentinel = 'Icon'
    (aMsg)->WriteSentinel(60621194);
}

auto IPDLParamTraits<mozilla::dom::WebAuthnMakeCredentialRpInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Name())))))) {
        aActor->FatalError("Error deserializing 'Name' (nsString) member of 'WebAuthnMakeCredentialRpInfo'");
        return false;
    }
    // Sentinel = 'Name'
    if ((!((aMsg)->ReadSentinel(aIter, 60686722)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Name' (nsString) member of 'WebAuthnMakeCredentialRpInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Icon())))))) {
        aActor->FatalError("Error deserializing 'Icon' (nsString) member of 'WebAuthnMakeCredentialRpInfo'");
        return false;
    }
    // Sentinel = 'Icon'
    if ((!((aMsg)->ReadSentinel(aIter, 60621194)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Icon' (nsString) member of 'WebAuthnMakeCredentialRpInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebAuthnMakeCredentialUserInfo|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebAuthnMakeCredentialUserInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).Id());
    // Sentinel = 'Id'
    (aMsg)->WriteSentinel(16253102);
    WriteIPDLParam(aMsg, aActor, (aVar).Name());
    // Sentinel = 'Name'
    (aMsg)->WriteSentinel(60686722);
    WriteIPDLParam(aMsg, aActor, (aVar).Icon());
    // Sentinel = 'Icon'
    (aMsg)->WriteSentinel(60621194);
    WriteIPDLParam(aMsg, aActor, (aVar).DisplayName());
    // Sentinel = 'DisplayName'
    (aMsg)->WriteSentinel(432866392);
}

auto IPDLParamTraits<mozilla::dom::WebAuthnMakeCredentialUserInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Id())))))) {
        aActor->FatalError("Error deserializing 'Id' (uint8_t[]) member of 'WebAuthnMakeCredentialUserInfo'");
        return false;
    }
    // Sentinel = 'Id'
    if ((!((aMsg)->ReadSentinel(aIter, 16253102)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Id' (uint8_t[]) member of 'WebAuthnMakeCredentialUserInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Name())))))) {
        aActor->FatalError("Error deserializing 'Name' (nsString) member of 'WebAuthnMakeCredentialUserInfo'");
        return false;
    }
    // Sentinel = 'Name'
    if ((!((aMsg)->ReadSentinel(aIter, 60686722)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Name' (nsString) member of 'WebAuthnMakeCredentialUserInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Icon())))))) {
        aActor->FatalError("Error deserializing 'Icon' (nsString) member of 'WebAuthnMakeCredentialUserInfo'");
        return false;
    }
    // Sentinel = 'Icon'
    if ((!((aMsg)->ReadSentinel(aIter, 60621194)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Icon' (nsString) member of 'WebAuthnMakeCredentialUserInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->DisplayName())))))) {
        aActor->FatalError("Error deserializing 'DisplayName' (nsString) member of 'WebAuthnMakeCredentialUserInfo'");
        return false;
    }
    // Sentinel = 'DisplayName'
    if ((!((aMsg)->ReadSentinel(aIter, 432866392)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'DisplayName' (nsString) member of 'WebAuthnMakeCredentialUserInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CoseAlg|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::CoseAlg>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).alg());
    // Sentinel = 'alg'
    (aMsg)->WriteSentinel(40173877);
}

auto IPDLParamTraits<mozilla::dom::CoseAlg>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->alg())))))) {
        aActor->FatalError("Error deserializing 'alg' (long) member of 'CoseAlg'");
        return false;
    }
    // Sentinel = 'alg'
    if ((!((aMsg)->ReadSentinel(aIter, 40173877)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'alg' (long) member of 'CoseAlg'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebAuthnMakeCredentialExtraInfo|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebAuthnMakeCredentialExtraInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).Rp());
    // Sentinel = 'Rp'
    (aMsg)->WriteSentinel(18219203);
    WriteIPDLParam(aMsg, aActor, (aVar).User());
    // Sentinel = 'User'
    (aMsg)->WriteSentinel(65864096);
    WriteIPDLParam(aMsg, aActor, (aVar).coseAlgs());
    // Sentinel = 'coseAlgs'
    (aMsg)->WriteSentinel(240976690);
    WriteIPDLParam(aMsg, aActor, (aVar).Extensions());
    // Sentinel = 'Extensions'
    (aMsg)->WriteSentinel(376046641);
    WriteIPDLParam(aMsg, aActor, (aVar).AuthenticatorSelection());
    // Sentinel = 'AuthenticatorSelection'
    (aMsg)->WriteSentinel(1720125698);
    WriteIPDLParam(aMsg, aActor, (aVar).attestationConveyancePreference());
    // Sentinel = 'attestationConveyancePreference'
    (aMsg)->WriteSentinel(3454864571);
}

auto IPDLParamTraits<mozilla::dom::WebAuthnMakeCredentialExtraInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Rp())))))) {
        aActor->FatalError("Error deserializing 'Rp' (WebAuthnMakeCredentialRpInfo) member of 'WebAuthnMakeCredentialExtraInfo'");
        return false;
    }
    // Sentinel = 'Rp'
    if ((!((aMsg)->ReadSentinel(aIter, 18219203)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Rp' (WebAuthnMakeCredentialRpInfo) member of 'WebAuthnMakeCredentialExtraInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->User())))))) {
        aActor->FatalError("Error deserializing 'User' (WebAuthnMakeCredentialUserInfo) member of 'WebAuthnMakeCredentialExtraInfo'");
        return false;
    }
    // Sentinel = 'User'
    if ((!((aMsg)->ReadSentinel(aIter, 65864096)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'User' (WebAuthnMakeCredentialUserInfo) member of 'WebAuthnMakeCredentialExtraInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->coseAlgs())))))) {
        aActor->FatalError("Error deserializing 'coseAlgs' (CoseAlg[]) member of 'WebAuthnMakeCredentialExtraInfo'");
        return false;
    }
    // Sentinel = 'coseAlgs'
    if ((!((aMsg)->ReadSentinel(aIter, 240976690)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'coseAlgs' (CoseAlg[]) member of 'WebAuthnMakeCredentialExtraInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Extensions())))))) {
        aActor->FatalError("Error deserializing 'Extensions' (WebAuthnExtension[]) member of 'WebAuthnMakeCredentialExtraInfo'");
        return false;
    }
    // Sentinel = 'Extensions'
    if ((!((aMsg)->ReadSentinel(aIter, 376046641)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Extensions' (WebAuthnExtension[]) member of 'WebAuthnMakeCredentialExtraInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->AuthenticatorSelection())))))) {
        aActor->FatalError("Error deserializing 'AuthenticatorSelection' (WebAuthnAuthenticatorSelection) member of 'WebAuthnMakeCredentialExtraInfo'");
        return false;
    }
    // Sentinel = 'AuthenticatorSelection'
    if ((!((aMsg)->ReadSentinel(aIter, 1720125698)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'AuthenticatorSelection' (WebAuthnAuthenticatorSelection) member of 'WebAuthnMakeCredentialExtraInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->attestationConveyancePreference())))))) {
        aActor->FatalError("Error deserializing 'attestationConveyancePreference' (AttestationConveyancePreference) member of 'WebAuthnMakeCredentialExtraInfo'");
        return false;
    }
    // Sentinel = 'attestationConveyancePreference'
    if ((!((aMsg)->ReadSentinel(aIter, 3454864571)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'attestationConveyancePreference' (AttestationConveyancePreference) member of 'WebAuthnMakeCredentialExtraInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebAuthnMakeCredentialInfo|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebAuthnMakeCredentialInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).Origin());
    // Sentinel = 'Origin'
    (aMsg)->WriteSentinel(137560681);
    WriteIPDLParam(aMsg, aActor, (aVar).RpId());
    // Sentinel = 'RpId'
    (aMsg)->WriteSentinel(59900272);
    WriteIPDLParam(aMsg, aActor, (aVar).Challenge());
    // Sentinel = 'Challenge'
    (aMsg)->WriteSentinel(285213572);
    WriteIPDLParam(aMsg, aActor, (aVar).ClientDataJSON());
    // Sentinel = 'ClientDataJSON'
    (aMsg)->WriteSentinel(659031316);
    WriteIPDLParam(aMsg, aActor, (aVar).ExcludeList());
    // Sentinel = 'ExcludeList'
    (aMsg)->WriteSentinel(433456231);
    WriteIPDLParam(aMsg, aActor, (aVar).Extra());
    // Sentinel = 'Extra'
    (aMsg)->WriteSentinel(98501125);
    (aMsg)->WriteBytes((&((aVar).BrowsingContextId())), 8);
    // Sentinel = 'BrowsingContextId'
    (aMsg)->WriteSentinel(1037108958);
    (aMsg)->WriteBytes((&((aVar).TimeoutMS())), 4);
    // Sentinel = 'TimeoutMS'
    (aMsg)->WriteSentinel(300286856);
}

auto IPDLParamTraits<mozilla::dom::WebAuthnMakeCredentialInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Origin())))))) {
        aActor->FatalError("Error deserializing 'Origin' (nsString) member of 'WebAuthnMakeCredentialInfo'");
        return false;
    }
    // Sentinel = 'Origin'
    if ((!((aMsg)->ReadSentinel(aIter, 137560681)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Origin' (nsString) member of 'WebAuthnMakeCredentialInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->RpId())))))) {
        aActor->FatalError("Error deserializing 'RpId' (nsString) member of 'WebAuthnMakeCredentialInfo'");
        return false;
    }
    // Sentinel = 'RpId'
    if ((!((aMsg)->ReadSentinel(aIter, 59900272)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'RpId' (nsString) member of 'WebAuthnMakeCredentialInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Challenge())))))) {
        aActor->FatalError("Error deserializing 'Challenge' (uint8_t[]) member of 'WebAuthnMakeCredentialInfo'");
        return false;
    }
    // Sentinel = 'Challenge'
    if ((!((aMsg)->ReadSentinel(aIter, 285213572)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Challenge' (uint8_t[]) member of 'WebAuthnMakeCredentialInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ClientDataJSON())))))) {
        aActor->FatalError("Error deserializing 'ClientDataJSON' (nsCString) member of 'WebAuthnMakeCredentialInfo'");
        return false;
    }
    // Sentinel = 'ClientDataJSON'
    if ((!((aMsg)->ReadSentinel(aIter, 659031316)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ClientDataJSON' (nsCString) member of 'WebAuthnMakeCredentialInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ExcludeList())))))) {
        aActor->FatalError("Error deserializing 'ExcludeList' (WebAuthnScopedCredential[]) member of 'WebAuthnMakeCredentialInfo'");
        return false;
    }
    // Sentinel = 'ExcludeList'
    if ((!((aMsg)->ReadSentinel(aIter, 433456231)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ExcludeList' (WebAuthnScopedCredential[]) member of 'WebAuthnMakeCredentialInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Extra())))))) {
        aActor->FatalError("Error deserializing 'Extra' (WebAuthnMakeCredentialExtraInfo?) member of 'WebAuthnMakeCredentialInfo'");
        return false;
    }
    // Sentinel = 'Extra'
    if ((!((aMsg)->ReadSentinel(aIter, 98501125)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Extra' (WebAuthnMakeCredentialExtraInfo?) member of 'WebAuthnMakeCredentialInfo'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->BrowsingContextId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'BrowsingContextId'
    if ((!((aMsg)->ReadSentinel(aIter, 1037108958)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->TimeoutMS())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'TimeoutMS'
    if ((!((aMsg)->ReadSentinel(aIter, 300286856)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebAuthnMakeCredentialResult|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebAuthnMakeCredentialResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).ClientDataJSON());
    // Sentinel = 'ClientDataJSON'
    (aMsg)->WriteSentinel(659031316);
    WriteIPDLParam(aMsg, aActor, (aVar).AttestationObject());
    // Sentinel = 'AttestationObject'
    (aMsg)->WriteSentinel(1039009512);
    WriteIPDLParam(aMsg, aActor, (aVar).KeyHandle());
    // Sentinel = 'KeyHandle'
    (aMsg)->WriteSentinel(282657654);
    WriteIPDLParam(aMsg, aActor, (aVar).RegistrationData());
    // Sentinel = 'RegistrationData'
    (aMsg)->WriteSentinel(923403894);
    WriteIPDLParam(aMsg, aActor, (aVar).Extensions());
    // Sentinel = 'Extensions'
    (aMsg)->WriteSentinel(376046641);
}

auto IPDLParamTraits<mozilla::dom::WebAuthnMakeCredentialResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ClientDataJSON())))))) {
        aActor->FatalError("Error deserializing 'ClientDataJSON' (nsCString) member of 'WebAuthnMakeCredentialResult'");
        return false;
    }
    // Sentinel = 'ClientDataJSON'
    if ((!((aMsg)->ReadSentinel(aIter, 659031316)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ClientDataJSON' (nsCString) member of 'WebAuthnMakeCredentialResult'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->AttestationObject())))))) {
        aActor->FatalError("Error deserializing 'AttestationObject' (uint8_t[]) member of 'WebAuthnMakeCredentialResult'");
        return false;
    }
    // Sentinel = 'AttestationObject'
    if ((!((aMsg)->ReadSentinel(aIter, 1039009512)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'AttestationObject' (uint8_t[]) member of 'WebAuthnMakeCredentialResult'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->KeyHandle())))))) {
        aActor->FatalError("Error deserializing 'KeyHandle' (uint8_t[]) member of 'WebAuthnMakeCredentialResult'");
        return false;
    }
    // Sentinel = 'KeyHandle'
    if ((!((aMsg)->ReadSentinel(aIter, 282657654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'KeyHandle' (uint8_t[]) member of 'WebAuthnMakeCredentialResult'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->RegistrationData())))))) {
        aActor->FatalError("Error deserializing 'RegistrationData' (uint8_t[]) member of 'WebAuthnMakeCredentialResult'");
        return false;
    }
    // Sentinel = 'RegistrationData'
    if ((!((aMsg)->ReadSentinel(aIter, 923403894)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'RegistrationData' (uint8_t[]) member of 'WebAuthnMakeCredentialResult'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Extensions())))))) {
        aActor->FatalError("Error deserializing 'Extensions' (WebAuthnExtensionResult[]) member of 'WebAuthnMakeCredentialResult'");
        return false;
    }
    // Sentinel = 'Extensions'
    if ((!((aMsg)->ReadSentinel(aIter, 376046641)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Extensions' (WebAuthnExtensionResult[]) member of 'WebAuthnMakeCredentialResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebAuthnGetAssertionExtraInfo|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebAuthnGetAssertionExtraInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).Extensions());
    // Sentinel = 'Extensions'
    (aMsg)->WriteSentinel(376046641);
    WriteIPDLParam(aMsg, aActor, (aVar).userVerificationRequirement());
    // Sentinel = 'userVerificationRequirement'
    (aMsg)->WriteSentinel(2623474484);
}

auto IPDLParamTraits<mozilla::dom::WebAuthnGetAssertionExtraInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Extensions())))))) {
        aActor->FatalError("Error deserializing 'Extensions' (WebAuthnExtension[]) member of 'WebAuthnGetAssertionExtraInfo'");
        return false;
    }
    // Sentinel = 'Extensions'
    if ((!((aMsg)->ReadSentinel(aIter, 376046641)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Extensions' (WebAuthnExtension[]) member of 'WebAuthnGetAssertionExtraInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->userVerificationRequirement())))))) {
        aActor->FatalError("Error deserializing 'userVerificationRequirement' (UserVerificationRequirement) member of 'WebAuthnGetAssertionExtraInfo'");
        return false;
    }
    // Sentinel = 'userVerificationRequirement'
    if ((!((aMsg)->ReadSentinel(aIter, 2623474484)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'userVerificationRequirement' (UserVerificationRequirement) member of 'WebAuthnGetAssertionExtraInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebAuthnGetAssertionInfo|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebAuthnGetAssertionInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).Origin());
    // Sentinel = 'Origin'
    (aMsg)->WriteSentinel(137560681);
    WriteIPDLParam(aMsg, aActor, (aVar).RpId());
    // Sentinel = 'RpId'
    (aMsg)->WriteSentinel(59900272);
    WriteIPDLParam(aMsg, aActor, (aVar).Challenge());
    // Sentinel = 'Challenge'
    (aMsg)->WriteSentinel(285213572);
    WriteIPDLParam(aMsg, aActor, (aVar).ClientDataJSON());
    // Sentinel = 'ClientDataJSON'
    (aMsg)->WriteSentinel(659031316);
    WriteIPDLParam(aMsg, aActor, (aVar).AllowList());
    // Sentinel = 'AllowList'
    (aMsg)->WriteSentinel(290980764);
    WriteIPDLParam(aMsg, aActor, (aVar).Extra());
    // Sentinel = 'Extra'
    (aMsg)->WriteSentinel(98501125);
    (aMsg)->WriteBytes((&((aVar).BrowsingContextId())), 8);
    // Sentinel = 'BrowsingContextId'
    (aMsg)->WriteSentinel(1037108958);
    (aMsg)->WriteBytes((&((aVar).TimeoutMS())), 4);
    // Sentinel = 'TimeoutMS'
    (aMsg)->WriteSentinel(300286856);
}

auto IPDLParamTraits<mozilla::dom::WebAuthnGetAssertionInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Origin())))))) {
        aActor->FatalError("Error deserializing 'Origin' (nsString) member of 'WebAuthnGetAssertionInfo'");
        return false;
    }
    // Sentinel = 'Origin'
    if ((!((aMsg)->ReadSentinel(aIter, 137560681)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Origin' (nsString) member of 'WebAuthnGetAssertionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->RpId())))))) {
        aActor->FatalError("Error deserializing 'RpId' (nsString) member of 'WebAuthnGetAssertionInfo'");
        return false;
    }
    // Sentinel = 'RpId'
    if ((!((aMsg)->ReadSentinel(aIter, 59900272)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'RpId' (nsString) member of 'WebAuthnGetAssertionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Challenge())))))) {
        aActor->FatalError("Error deserializing 'Challenge' (uint8_t[]) member of 'WebAuthnGetAssertionInfo'");
        return false;
    }
    // Sentinel = 'Challenge'
    if ((!((aMsg)->ReadSentinel(aIter, 285213572)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Challenge' (uint8_t[]) member of 'WebAuthnGetAssertionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ClientDataJSON())))))) {
        aActor->FatalError("Error deserializing 'ClientDataJSON' (nsCString) member of 'WebAuthnGetAssertionInfo'");
        return false;
    }
    // Sentinel = 'ClientDataJSON'
    if ((!((aMsg)->ReadSentinel(aIter, 659031316)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ClientDataJSON' (nsCString) member of 'WebAuthnGetAssertionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->AllowList())))))) {
        aActor->FatalError("Error deserializing 'AllowList' (WebAuthnScopedCredential[]) member of 'WebAuthnGetAssertionInfo'");
        return false;
    }
    // Sentinel = 'AllowList'
    if ((!((aMsg)->ReadSentinel(aIter, 290980764)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'AllowList' (WebAuthnScopedCredential[]) member of 'WebAuthnGetAssertionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Extra())))))) {
        aActor->FatalError("Error deserializing 'Extra' (WebAuthnGetAssertionExtraInfo?) member of 'WebAuthnGetAssertionInfo'");
        return false;
    }
    // Sentinel = 'Extra'
    if ((!((aMsg)->ReadSentinel(aIter, 98501125)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Extra' (WebAuthnGetAssertionExtraInfo?) member of 'WebAuthnGetAssertionInfo'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->BrowsingContextId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'BrowsingContextId'
    if ((!((aMsg)->ReadSentinel(aIter, 1037108958)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->TimeoutMS())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'TimeoutMS'
    if ((!((aMsg)->ReadSentinel(aIter, 300286856)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebAuthnGetAssertionResult|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebAuthnGetAssertionResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).ClientDataJSON());
    // Sentinel = 'ClientDataJSON'
    (aMsg)->WriteSentinel(659031316);
    WriteIPDLParam(aMsg, aActor, (aVar).KeyHandle());
    // Sentinel = 'KeyHandle'
    (aMsg)->WriteSentinel(282657654);
    WriteIPDLParam(aMsg, aActor, (aVar).Signature());
    // Sentinel = 'Signature'
    (aMsg)->WriteSentinel(301859763);
    WriteIPDLParam(aMsg, aActor, (aVar).AuthenticatorData());
    // Sentinel = 'AuthenticatorData'
    (aMsg)->WriteSentinel(1032586966);
    WriteIPDLParam(aMsg, aActor, (aVar).Extensions());
    // Sentinel = 'Extensions'
    (aMsg)->WriteSentinel(376046641);
    WriteIPDLParam(aMsg, aActor, (aVar).SignatureData());
    // Sentinel = 'SignatureData'
    (aMsg)->WriteSentinel(608568621);
    WriteIPDLParam(aMsg, aActor, (aVar).UserHandle());
    // Sentinel = 'UserHandle'
    (aMsg)->WriteSentinel(358810604);
}

auto IPDLParamTraits<mozilla::dom::WebAuthnGetAssertionResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ClientDataJSON())))))) {
        aActor->FatalError("Error deserializing 'ClientDataJSON' (nsCString) member of 'WebAuthnGetAssertionResult'");
        return false;
    }
    // Sentinel = 'ClientDataJSON'
    if ((!((aMsg)->ReadSentinel(aIter, 659031316)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ClientDataJSON' (nsCString) member of 'WebAuthnGetAssertionResult'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->KeyHandle())))))) {
        aActor->FatalError("Error deserializing 'KeyHandle' (uint8_t[]) member of 'WebAuthnGetAssertionResult'");
        return false;
    }
    // Sentinel = 'KeyHandle'
    if ((!((aMsg)->ReadSentinel(aIter, 282657654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'KeyHandle' (uint8_t[]) member of 'WebAuthnGetAssertionResult'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Signature())))))) {
        aActor->FatalError("Error deserializing 'Signature' (uint8_t[]) member of 'WebAuthnGetAssertionResult'");
        return false;
    }
    // Sentinel = 'Signature'
    if ((!((aMsg)->ReadSentinel(aIter, 301859763)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Signature' (uint8_t[]) member of 'WebAuthnGetAssertionResult'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->AuthenticatorData())))))) {
        aActor->FatalError("Error deserializing 'AuthenticatorData' (uint8_t[]) member of 'WebAuthnGetAssertionResult'");
        return false;
    }
    // Sentinel = 'AuthenticatorData'
    if ((!((aMsg)->ReadSentinel(aIter, 1032586966)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'AuthenticatorData' (uint8_t[]) member of 'WebAuthnGetAssertionResult'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Extensions())))))) {
        aActor->FatalError("Error deserializing 'Extensions' (WebAuthnExtensionResult[]) member of 'WebAuthnGetAssertionResult'");
        return false;
    }
    // Sentinel = 'Extensions'
    if ((!((aMsg)->ReadSentinel(aIter, 376046641)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Extensions' (WebAuthnExtensionResult[]) member of 'WebAuthnGetAssertionResult'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->SignatureData())))))) {
        aActor->FatalError("Error deserializing 'SignatureData' (uint8_t[]) member of 'WebAuthnGetAssertionResult'");
        return false;
    }
    // Sentinel = 'SignatureData'
    if ((!((aMsg)->ReadSentinel(aIter, 608568621)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'SignatureData' (uint8_t[]) member of 'WebAuthnGetAssertionResult'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->UserHandle())))))) {
        aActor->FatalError("Error deserializing 'UserHandle' (uint8_t[]) member of 'WebAuthnGetAssertionResult'");
        return false;
    }
    // Sentinel = 'UserHandle'
    if ((!((aMsg)->ReadSentinel(aIter, 358810604)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'UserHandle' (uint8_t[]) member of 'WebAuthnGetAssertionResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
