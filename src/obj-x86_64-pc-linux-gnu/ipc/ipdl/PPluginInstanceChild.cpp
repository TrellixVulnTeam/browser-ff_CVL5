//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/plugins/PPluginInstanceChild.h"
#include "gfxipc/ShadowLayerUtils.h"
#include "ipc/nsGUIEventIPC.h"
#include "mozilla/D3DMessageUtils.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/ipc/IPCCore.h"
#include "mozilla/layers/LayersMessageUtils.h"
#include "mozilla/plugins/PluginInstanceChild.h"
#include "mozilla/plugins/PluginMessageUtils.h"

#include "mozilla/plugins/PPluginBackgroundDestroyerChild.h"
#include "mozilla/plugins/PPluginModuleChild.h"
#include "mozilla/plugins/PPluginScriptableObjectChild.h"
#include "mozilla/plugins/PBrowserStreamChild.h"
#include "mozilla/plugins/PStreamNotifyChild.h"
#include "mozilla/plugins/PPluginSurfaceChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace plugins {


auto PPluginInstanceChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PPluginInstanceChild::RecvPPluginScriptableObjectConstructor(PPluginScriptableObjectChild* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PPluginInstanceChild::RecvPBrowserStreamConstructor(
        PBrowserStreamChild* actor,
        const nsCString& url,
        const uint32_t& length,
        const uint32_t& lastmodified,
        PStreamNotifyChild* notifyData,
        const nsCString& headers) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PPluginInstanceChild::RecvPPluginBackgroundDestroyerConstructor(PPluginBackgroundDestroyerChild* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PPluginInstanceChild::PPluginInstanceChild() :
    mozilla::ipc::IProtocol(PPluginInstanceMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PPluginInstanceChild);
}

PPluginInstanceChild::~PPluginInstanceChild()
{
    MOZ_COUNT_DTOR(PPluginInstanceChild);
}

auto PPluginInstanceChild::Manager() const -> PPluginModuleChild*
{
    return static_cast<PPluginModuleChild*>(IProtocol::Manager());
}

auto PPluginInstanceChild::ManagedPPluginBackgroundDestroyerChild(nsTArray<PPluginBackgroundDestroyerChild*>& aArr) const -> void
{
    mManagedPPluginBackgroundDestroyerChild.ToArray(aArr);
}

auto PPluginInstanceChild::ManagedPPluginBackgroundDestroyerChild() const -> const ManagedContainer<PPluginBackgroundDestroyerChild>&
{
    return mManagedPPluginBackgroundDestroyerChild;
}

auto PPluginInstanceChild::ManagedPPluginScriptableObjectChild(nsTArray<PPluginScriptableObjectChild*>& aArr) const -> void
{
    mManagedPPluginScriptableObjectChild.ToArray(aArr);
}

auto PPluginInstanceChild::ManagedPPluginScriptableObjectChild() const -> const ManagedContainer<PPluginScriptableObjectChild>&
{
    return mManagedPPluginScriptableObjectChild;
}

auto PPluginInstanceChild::ManagedPBrowserStreamChild(nsTArray<PBrowserStreamChild*>& aArr) const -> void
{
    mManagedPBrowserStreamChild.ToArray(aArr);
}

auto PPluginInstanceChild::ManagedPBrowserStreamChild() const -> const ManagedContainer<PBrowserStreamChild>&
{
    return mManagedPBrowserStreamChild;
}

auto PPluginInstanceChild::ManagedPStreamNotifyChild(nsTArray<PStreamNotifyChild*>& aArr) const -> void
{
    mManagedPStreamNotifyChild.ToArray(aArr);
}

auto PPluginInstanceChild::ManagedPStreamNotifyChild() const -> const ManagedContainer<PStreamNotifyChild>&
{
    return mManagedPStreamNotifyChild;
}

auto PPluginInstanceChild::ManagedPPluginSurfaceChild(nsTArray<PPluginSurfaceChild*>& aArr) const -> void
{
    mManagedPPluginSurfaceChild.ToArray(aArr);
}

auto PPluginInstanceChild::ManagedPPluginSurfaceChild() const -> const ManagedContainer<PPluginSurfaceChild>&
{
    return mManagedPPluginSurfaceChild;
}

auto PPluginInstanceChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPPluginBackgroundDestroyerChild.Count();
    total += mManagedPPluginScriptableObjectChild.Count();
    total += mManagedPBrowserStreamChild.Count();
    total += mManagedPStreamNotifyChild.Count();
    total += mManagedPPluginSurfaceChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPPluginBackgroundDestroyerChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPPluginScriptableObjectChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPBrowserStreamChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPStreamNotifyChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPPluginSurfaceChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PPluginInstanceChild::OpenPPluginBackgroundDestroyerEndpoint(PPluginBackgroundDestroyerChild* aActor) -> ManagedEndpoint<PPluginBackgroundDestroyerParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginBackgroundDestroyerChild actor");
        return ManagedEndpoint<PPluginBackgroundDestroyerParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPluginBackgroundDestroyerChild.PutEntry(aActor);

    return ManagedEndpoint<PPluginBackgroundDestroyerParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPluginInstanceChild::BindPPluginBackgroundDestroyerEndpoint(
        ManagedEndpoint<PPluginBackgroundDestroyerChild> aEndpoint,
        PPluginBackgroundDestroyerChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginBackgroundDestroyerChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPluginBackgroundDestroyerChild.PutEntry(aActor);

    return true;
}

auto PPluginInstanceChild::OpenPPluginScriptableObjectEndpoint(PPluginScriptableObjectChild* aActor) -> ManagedEndpoint<PPluginScriptableObjectParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginScriptableObjectChild actor");
        return ManagedEndpoint<PPluginScriptableObjectParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPluginScriptableObjectChild.PutEntry(aActor);

    return ManagedEndpoint<PPluginScriptableObjectParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPluginInstanceChild::BindPPluginScriptableObjectEndpoint(
        ManagedEndpoint<PPluginScriptableObjectChild> aEndpoint,
        PPluginScriptableObjectChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginScriptableObjectChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPluginScriptableObjectChild.PutEntry(aActor);

    return true;
}

auto PPluginInstanceChild::OpenPBrowserStreamEndpoint(PBrowserStreamChild* aActor) -> ManagedEndpoint<PBrowserStreamParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBrowserStreamChild actor");
        return ManagedEndpoint<PBrowserStreamParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBrowserStreamChild.PutEntry(aActor);

    return ManagedEndpoint<PBrowserStreamParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPluginInstanceChild::BindPBrowserStreamEndpoint(
        ManagedEndpoint<PBrowserStreamChild> aEndpoint,
        PBrowserStreamChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBrowserStreamChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBrowserStreamChild.PutEntry(aActor);

    return true;
}

auto PPluginInstanceChild::OpenPStreamNotifyEndpoint(PStreamNotifyChild* aActor) -> ManagedEndpoint<PStreamNotifyParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PStreamNotifyChild actor");
        return ManagedEndpoint<PStreamNotifyParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPStreamNotifyChild.PutEntry(aActor);

    return ManagedEndpoint<PStreamNotifyParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPluginInstanceChild::BindPStreamNotifyEndpoint(
        ManagedEndpoint<PStreamNotifyChild> aEndpoint,
        PStreamNotifyChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PStreamNotifyChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPStreamNotifyChild.PutEntry(aActor);

    return true;
}

auto PPluginInstanceChild::OpenPPluginSurfaceEndpoint(PPluginSurfaceChild* aActor) -> ManagedEndpoint<PPluginSurfaceParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginSurfaceChild actor");
        return ManagedEndpoint<PPluginSurfaceParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPluginSurfaceChild.PutEntry(aActor);

    return ManagedEndpoint<PPluginSurfaceParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPluginInstanceChild::BindPPluginSurfaceEndpoint(
        ManagedEndpoint<PPluginSurfaceChild> aEndpoint,
        PPluginSurfaceChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginSurfaceChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPluginSurfaceChild.PutEntry(aActor);

    return true;
}

auto PPluginInstanceChild::CallNPN_GetValue_NPNVWindowNPObject(
        PPluginScriptableObjectChild** value,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_GetValue_NPNVWindowNPObject(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_NPNVWindowNPObject", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_GetValue_NPNVWindowNPObject", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'PPluginScriptableObject'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'PPluginScriptableObject'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_GetValue_NPNVPluginElementNPObject(
        PPluginScriptableObjectChild** value,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_GetValue_NPNVPluginElementNPObject(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_NPNVPluginElementNPObject", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_GetValue_NPNVPluginElementNPObject", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'PPluginScriptableObject'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'PPluginScriptableObject'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_GetValue_NPNVprivateModeBool(
        bool* value,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_GetValue_NPNVprivateModeBool(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_NPNVprivateModeBool", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_GetValue_NPNVprivateModeBool", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_GetValue_NPNVnetscapeWindow(
        NativeWindowHandle* value,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_GetValue_NPNVnetscapeWindow(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_NPNVnetscapeWindow", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_GetValue_NPNVnetscapeWindow", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'NativeWindowHandle'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NativeWindowHandle'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_GetValue_NPNVdocumentOrigin(
        nsCString* value,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_GetValue_NPNVdocumentOrigin(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_NPNVdocumentOrigin", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_GetValue_NPNVdocumentOrigin", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'nsCString'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_GetValue_DrawingModelSupport(
        const NPNVariable& model,
        bool* value) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_GetValue_DrawingModelSupport(Id());

    WriteIPDLParam(msg__, this, model);
    // Sentinel = 'model'
    (msg__)->WriteSentinel(105120274);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_DrawingModelSupport", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_GetValue_DrawingModelSupport", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_GetValue_SupportsAsyncBitmapSurface(bool* value) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_GetValue_SupportsAsyncBitmapSurface(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_SupportsAsyncBitmapSurface", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_GetValue_SupportsAsyncBitmapSurface", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_GetValue_SupportsAsyncDXGISurface(bool* value) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_GetValue_SupportsAsyncDXGISurface(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_SupportsAsyncDXGISurface", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_GetValue_SupportsAsyncDXGISurface", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_GetValue_PreferredDXGIAdapter(DxgiAdapterDesc* desc) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_GetValue_PreferredDXGIAdapter(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_PreferredDXGIAdapter", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_GetValue_PreferredDXGIAdapter", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, desc)))) {
        FatalError("Error deserializing 'DxgiAdapterDesc'");
        return false;
    }
    // Sentinel = 'desc'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 67895712)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'DxgiAdapterDesc'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_SetValue_NPPVpluginWindow(
        const bool& windowed,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_SetValue_NPPVpluginWindow(Id());

    WriteIPDLParam(msg__, this, windowed);
    // Sentinel = 'windowed'
    (msg__)->WriteSentinel(259392354);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_SetValue_NPPVpluginWindow", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_SetValue_NPPVpluginWindow", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_SetValue_NPPVpluginTransparent(
        const bool& transparent,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_SetValue_NPPVpluginTransparent(Id());

    WriteIPDLParam(msg__, this, transparent);
    // Sentinel = 'transparent'
    (msg__)->WriteSentinel(474285235);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_SetValue_NPPVpluginTransparent", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_SetValue_NPPVpluginTransparent", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_SetValue_NPPVpluginUsesDOMForCursor(
        const bool& useDOMForCursor,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_SetValue_NPPVpluginUsesDOMForCursor(Id());

    WriteIPDLParam(msg__, this, useDOMForCursor);
    // Sentinel = 'useDOMForCursor'
    (msg__)->WriteSentinel(759432659);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_SetValue_NPPVpluginUsesDOMForCursor", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_SetValue_NPPVpluginUsesDOMForCursor", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_SetValue_NPPVpluginDrawingModel(
        const int& drawingModel,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_SetValue_NPPVpluginDrawingModel(Id());

    WriteIPDLParam(msg__, this, drawingModel);
    // Sentinel = 'drawingModel'
    (msg__)->WriteSentinel(535692510);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_SetValue_NPPVpluginDrawingModel", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_SetValue_NPPVpluginDrawingModel", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_SetValue_NPPVpluginEventModel(
        const int& eventModel,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_SetValue_NPPVpluginEventModel(Id());

    WriteIPDLParam(msg__, this, eventModel);
    // Sentinel = 'eventModel'
    (msg__)->WriteSentinel(379782164);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_SetValue_NPPVpluginEventModel", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_SetValue_NPPVpluginEventModel", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_SetValue_NPPVpluginIsPlayingAudio(
        const bool& isAudioPlaying,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_SetValue_NPPVpluginIsPlayingAudio(Id());

    WriteIPDLParam(msg__, this, isAudioPlaying);
    // Sentinel = 'isAudioPlaying'
    (msg__)->WriteSentinel(700843427);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_SetValue_NPPVpluginIsPlayingAudio", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_SetValue_NPPVpluginIsPlayingAudio", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_GetURL(
        const nsCString& url,
        const nsCString& target,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_GetURL(Id());

    WriteIPDLParam(msg__, this, url);
    // Sentinel = 'url'
    (msg__)->WriteSentinel(45220180);
    WriteIPDLParam(msg__, this, target);
    // Sentinel = 'target'
    (msg__)->WriteSentinel(148767368);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetURL", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_GetURL", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_PostURL(
        const nsCString& url,
        const nsCString& target,
        const nsCString& buffer,
        const bool& file,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_PostURL(Id());

    WriteIPDLParam(msg__, this, url);
    // Sentinel = 'url'
    (msg__)->WriteSentinel(45220180);
    WriteIPDLParam(msg__, this, target);
    // Sentinel = 'target'
    (msg__)->WriteSentinel(148767368);
    WriteIPDLParam(msg__, this, buffer);
    // Sentinel = 'buffer'
    (msg__)->WriteSentinel(144769659);
    WriteIPDLParam(msg__, this, file);
    // Sentinel = 'file'
    (msg__)->WriteSentinel(68420001);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_PostURL", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_PostURL", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallPStreamNotifyConstructor(
        const nsCString& url,
        const nsCString& target,
        const bool& post,
        const nsCString& buffer,
        const bool& file,
        NPError* result) -> PStreamNotifyChild*
{
    PStreamNotifyChild* actor = (static_cast<PluginInstanceChild*>(this))->AllocPStreamNotifyChild(url, target, post, buffer, file, result);
    return CallPStreamNotifyConstructor(actor, url, target, post, buffer, file, result);
}

auto PPluginInstanceChild::CallPStreamNotifyConstructor(
        PStreamNotifyChild* actor,
        const nsCString& url,
        const nsCString& target,
        const bool& post,
        const nsCString& buffer,
        const bool& file,
        NPError* result) -> PStreamNotifyChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PStreamNotifyChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPStreamNotifyChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PPluginInstance::Msg_PStreamNotifyConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, url);
    // Sentinel = 'url'
    (msg__)->WriteSentinel(45220180);
    WriteIPDLParam(msg__, this, target);
    // Sentinel = 'target'
    (msg__)->WriteSentinel(148767368);
    WriteIPDLParam(msg__, this, post);
    // Sentinel = 'post'
    (msg__)->WriteSentinel(74121671);
    WriteIPDLParam(msg__, this, buffer);
    // Sentinel = 'buffer'
    (msg__)->WriteSentinel(144769659);
    WriteIPDLParam(msg__, this, file);
    // Sentinel = 'file'
    (msg__)->WriteSentinel(68420001);




    // Synchronously send the constructor message to the other side. If
    // the send fails, e.g. due to the remote side shutting down, the
    // actor will be destroyed and potentially freed.
    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_PStreamNotifyConstructor", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_PStreamNotifyConstructor", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }


    if (!(sendok__)) {
        // Warn, destroy the actor and return null if the message
        // failed to send.
        NS_WARNING("Error sending constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PStreamNotifyMsgStart, actor);

        return nullptr;
    }


    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return nullptr;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return nullptr;
    }
    reply__.EndRead(iter__, reply__.type());

    return actor;
}

auto PPluginInstanceChild::SendNPN_InvalidateRect(const NPRect& rect) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_InvalidateRect(Id());

    WriteIPDLParam(msg__, this, rect);
    // Sentinel = 'rect'
    (msg__)->WriteSentinel(70582703);




    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_InvalidateRect", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginInstanceChild::SendRevokeCurrentDirectSurface() -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_RevokeCurrentDirectSurface(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_RevokeCurrentDirectSurface", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_RevokeCurrentDirectSurface", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PPluginInstanceChild::SendInitDXGISurface(
        const SurfaceFormat& format,
        const IntSize& size,
        WindowsHandle* handle,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_InitDXGISurface(Id());

    WriteIPDLParam(msg__, this, format);
    // Sentinel = 'format'
    (msg__)->WriteSentinel(148505226);
    WriteIPDLParam(msg__, this, size);
    // Sentinel = 'size'
    (msg__)->WriteSentinel(73662908);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_InitDXGISurface", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_InitDXGISurface", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, handle)))) {
        FatalError("Error deserializing 'WindowsHandle'");
        return false;
    }
    // Sentinel = 'handle'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 142344813)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'WindowsHandle'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::SendFinalizeDXGISurface(const WindowsHandle& handle) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_FinalizeDXGISurface(Id());

    WriteIPDLParam(msg__, this, handle);
    // Sentinel = 'handle'
    (msg__)->WriteSentinel(142344813);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_FinalizeDXGISurface", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_FinalizeDXGISurface", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PPluginInstanceChild::SendShowDirectBitmap(
        Shmem&& buffer,
        const SurfaceFormat& format,
        const uint32_t& stride,
        const IntSize& size,
        const IntRect& dirty) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_ShowDirectBitmap(Id());

    WriteIPDLParam(msg__, this, std::move(buffer));
    // Sentinel = 'buffer'
    (msg__)->WriteSentinel(144769659);
    WriteIPDLParam(msg__, this, format);
    // Sentinel = 'format'
    (msg__)->WriteSentinel(148505226);
    WriteIPDLParam(msg__, this, stride);
    // Sentinel = 'stride'
    (msg__)->WriteSentinel(153879180);
    WriteIPDLParam(msg__, this, size);
    // Sentinel = 'size'
    (msg__)->WriteSentinel(73662908);
    WriteIPDLParam(msg__, this, dirty);
    // Sentinel = 'dirty'
    (msg__)->WriteSentinel(106168877);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_ShowDirectBitmap", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_ShowDirectBitmap", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PPluginInstanceChild::SendShowDirectDXGISurface(
        const WindowsHandle& handle,
        const IntRect& dirty) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_ShowDirectDXGISurface(Id());

    WriteIPDLParam(msg__, this, handle);
    // Sentinel = 'handle'
    (msg__)->WriteSentinel(142344813);
    WriteIPDLParam(msg__, this, dirty);
    // Sentinel = 'dirty'
    (msg__)->WriteSentinel(106168877);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_ShowDirectDXGISurface", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_ShowDirectDXGISurface", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PPluginInstanceChild::SendShow(
        const NPRect& updatedRect,
        const SurfaceDescriptor& newSurface,
        SurfaceDescriptor* prevSurface) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_Show(Id());

    WriteIPDLParam(msg__, this, updatedRect);
    // Sentinel = 'updatedRect'
    (msg__)->WriteSentinel(455935094);
    WriteIPDLParam(msg__, this, newSurface);
    // Sentinel = 'newSurface'
    (msg__)->WriteSentinel(381551636);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_Show", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_Show", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, prevSurface)))) {
        FatalError("Error deserializing 'SurfaceDescriptor'");
        return false;
    }
    // Sentinel = 'prevSurface'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 464454791)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceDescriptor'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::SendPPluginSurfaceConstructor(
        const WindowsSharedMemoryHandle& handle,
        const IntSize& size,
        const bool& transparent) -> PPluginSurfaceChild*
{
    PPluginSurfaceChild* actor = (static_cast<PluginInstanceChild*>(this))->AllocPPluginSurfaceChild(handle, size, transparent);
    return SendPPluginSurfaceConstructor(actor, handle, size, transparent);
}

auto PPluginInstanceChild::SendPPluginSurfaceConstructor(
        PPluginSurfaceChild* actor,
        const WindowsSharedMemoryHandle& handle,
        const IntSize& size,
        const bool& transparent) -> PPluginSurfaceChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PPluginSurfaceChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPPluginSurfaceChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PPluginInstance::Msg_PPluginSurfaceConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, handle);
    // Sentinel = 'handle'
    (msg__)->WriteSentinel(142344813);
    WriteIPDLParam(msg__, this, size);
    // Sentinel = 'size'
    (msg__)->WriteSentinel(73662908);
    WriteIPDLParam(msg__, this, transparent);
    // Sentinel = 'transparent'
    (msg__)->WriteSentinel(474285235);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_PPluginSurfaceConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PPluginSurfaceChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PPluginSurfaceMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PPluginInstanceChild::CallNPN_PushPopupsEnabledState(const bool& aState) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_PushPopupsEnabledState(Id());

    WriteIPDLParam(msg__, this, aState);
    // Sentinel = 'aState'
    (msg__)->WriteSentinel(137036387);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_PushPopupsEnabledState", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_PushPopupsEnabledState", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PPluginInstanceChild::CallNPN_PopPopupsEnabledState() -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_PopPopupsEnabledState(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_PopPopupsEnabledState", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_PopPopupsEnabledState", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PPluginInstanceChild::CallNPN_GetValueForURL(
        const NPNURLVariable& variable,
        const nsCString& url,
        nsCString* value,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_GetValueForURL(Id());

    WriteIPDLParam(msg__, this, variable);
    // Sentinel = 'variable'
    (msg__)->WriteSentinel(251593543);
    WriteIPDLParam(msg__, this, url);
    // Sentinel = 'url'
    (msg__)->WriteSentinel(45220180);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValueForURL", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_GetValueForURL", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'nsCString'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_SetValueForURL(
        const NPNURLVariable& variable,
        const nsCString& url,
        const nsCString& value,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_SetValueForURL(Id());

    WriteIPDLParam(msg__, this, variable);
    // Sentinel = 'variable'
    (msg__)->WriteSentinel(251593543);
    WriteIPDLParam(msg__, this, url);
    // Sentinel = 'url'
    (msg__)->WriteSentinel(45220180);
    WriteIPDLParam(msg__, this, value);
    // Sentinel = 'value'
    (msg__)->WriteSentinel(107610654);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_SetValueForURL", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_SetValueForURL", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::CallNPN_ConvertPoint(
        const double& sourceX,
        const bool& ignoreDestX,
        const double& sourceY,
        const bool& ignoreDestY,
        const NPCoordinateSpace& sourceSpace,
        const NPCoordinateSpace& destSpace,
        double* destX,
        double* destY,
        bool* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPN_ConvertPoint(Id());

    WriteIPDLParam(msg__, this, sourceX);
    // Sentinel = 'sourceX'
    (msg__)->WriteSentinel(203555562);
    WriteIPDLParam(msg__, this, ignoreDestX);
    // Sentinel = 'ignoreDestX'
    (msg__)->WriteSentinel(451347565);
    WriteIPDLParam(msg__, this, sourceY);
    // Sentinel = 'sourceY'
    (msg__)->WriteSentinel(203621099);
    WriteIPDLParam(msg__, this, ignoreDestY);
    // Sentinel = 'ignoreDestY'
    (msg__)->WriteSentinel(451413102);
    WriteIPDLParam(msg__, this, sourceSpace);
    // Sentinel = 'sourceSpace'
    (msg__)->WriteSentinel(465503358);
    WriteIPDLParam(msg__, this, destSpace);
    // Sentinel = 'destSpace'
    (msg__)->WriteSentinel(306119581);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_ConvertPoint", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPN_ConvertPoint", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, destX)))) {
        FatalError("Error deserializing 'double'");
        return false;
    }
    // Sentinel = 'destX'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 103154185)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'double'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, destY)))) {
        FatalError("Error deserializing 'double'");
        return false;
    }
    // Sentinel = 'destY'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 103219722)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'double'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::SendRedrawPlugin() -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_RedrawPlugin(Id());





    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_RedrawPlugin", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginInstanceChild::SendSetNetscapeWindowAsParent(const NativeWindowHandle& childWindow) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_SetNetscapeWindowAsParent(Id());

    WriteIPDLParam(msg__, this, childWindow);
    // Sentinel = 'childWindow'
    (msg__)->WriteSentinel(444138621);




    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_SetNetscapeWindowAsParent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginInstanceChild::SendGetCompositionString(
        const uint32_t& aType,
        nsTArray<uint8_t>* aDist,
        int32_t* aLength) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_GetCompositionString(Id());

    WriteIPDLParam(msg__, this, aType);
    // Sentinel = 'aType'
    (msg__)->WriteSentinel(99222020);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_GetCompositionString", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_GetCompositionString", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aDist)))) {
        FatalError("Error deserializing 'uint8_t[]'");
        return false;
    }
    // Sentinel = 'aDist'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 93258230)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aLength)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aLength'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 179045060)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceChild::SendRequestCommitOrCancel(const bool& aCommitted) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_RequestCommitOrCancel(Id());

    WriteIPDLParam(msg__, this, aCommitted);
    // Sentinel = 'aCommitted'
    (msg__)->WriteSentinel(362218504);




    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_RequestCommitOrCancel", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginInstanceChild::SendPPluginScriptableObjectConstructor() -> PPluginScriptableObjectChild*
{
    PPluginScriptableObjectChild* actor = (static_cast<PluginInstanceChild*>(this))->AllocPPluginScriptableObjectChild();
    return SendPPluginScriptableObjectConstructor(actor);
}

auto PPluginInstanceChild::SendPPluginScriptableObjectConstructor(PPluginScriptableObjectChild* actor) -> PPluginScriptableObjectChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PPluginScriptableObjectChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPPluginScriptableObjectChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PPluginInstance::Msg_PPluginScriptableObjectConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_PPluginScriptableObjectConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PPluginScriptableObjectChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PPluginScriptableObjectMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PPluginInstanceChild::CallPluginFocusChange(const bool& gotFocus) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_PluginFocusChange(Id());

    WriteIPDLParam(msg__, this, gotFocus);
    // Sentinel = 'gotFocus'
    (msg__)->WriteSentinel(245433163);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_PluginFocusChange", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_PluginFocusChange", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PPluginInstanceChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PPluginBackgroundDestroyerMsgStart:
{
            PPluginBackgroundDestroyerChild* actor = static_cast<PPluginBackgroundDestroyerChild*>(aListener);
            auto& container = mManagedPPluginBackgroundDestroyerChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PPluginScriptableObjectMsgStart:
{
            PPluginScriptableObjectChild* actor = static_cast<PPluginScriptableObjectChild*>(aListener);
            auto& container = mManagedPPluginScriptableObjectChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PBrowserStreamMsgStart:
{
            PBrowserStreamChild* actor = static_cast<PBrowserStreamChild*>(aListener);
            auto& container = mManagedPBrowserStreamChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PStreamNotifyMsgStart:
{
            PStreamNotifyChild* actor = static_cast<PStreamNotifyChild*>(aListener);
            auto& container = mManagedPStreamNotifyChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PPluginSurfaceMsgStart:
{
            PPluginSurfaceChild* actor = static_cast<PPluginSurfaceChild*>(aListener);
            auto& container = mManagedPPluginSurfaceChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PPluginInstanceChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PPluginBackgroundDestroyerMsgStart:
        static_cast<PluginInstanceChild*>(this)->DeallocPPluginBackgroundDestroyerChild(static_cast<PPluginBackgroundDestroyerChild*>(aListener));
        return;
    case PPluginScriptableObjectMsgStart:
        static_cast<PluginInstanceChild*>(this)->DeallocPPluginScriptableObjectChild(static_cast<PPluginScriptableObjectChild*>(aListener));
        return;
    case PBrowserStreamMsgStart:
        static_cast<PluginInstanceChild*>(this)->DeallocPBrowserStreamChild(static_cast<PBrowserStreamChild*>(aListener));
        return;
    case PStreamNotifyMsgStart:
        static_cast<PluginInstanceChild*>(this)->DeallocPStreamNotifyChild(static_cast<PStreamNotifyChild*>(aListener));
        return;
    case PPluginSurfaceMsgStart:
        static_cast<PluginInstanceChild*>(this)->DeallocPPluginSurfaceChild(static_cast<PPluginSurfaceChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PPluginInstanceChild::OnMessageReceived(const Message& msg__) -> PPluginInstanceChild::Result
{
    switch (msg__.type()) {
    case PPluginInstance::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PPluginInstanceChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PPluginInstance'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PPluginInstance'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PPluginInstance'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginInstanceChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PPluginInstanceMsgStart, actor);

            return MsgProcessed;
        }
    case PPluginInstance::Msg_CreateChildPopupSurrogate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_CreateChildPopupSurrogate", OTHER);

            PickleIterator iter__{msg__};
            NativeWindowHandle netscapeWindow{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(netscapeWindow)))))) {
                FatalError("Error deserializing 'NativeWindowHandle'");
                return MsgValueError;
            }
            // Sentinel = 'netscapeWindow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 728630732)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NativeWindowHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginInstanceChild*>(this))->RecvCreateChildPopupSurrogate(std::move(netscapeWindow))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginInstance::Msg_WindowPosChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_WindowPosChanged", OTHER);

            PickleIterator iter__{msg__};
            NPRemoteEvent event{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'NPRemoteEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPRemoteEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginInstanceChild*>(this))->RecvWindowPosChanged(std::move(event))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginInstance::Msg_ContentsScaleFactorChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_ContentsScaleFactorChanged", OTHER);

            PickleIterator iter__{msg__};
            double aContentsScaleFactor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContentsScaleFactor)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'aContentsScaleFactor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1391462391)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginInstanceChild*>(this))->RecvContentsScaleFactorChanged(std::move(aContentsScaleFactor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginInstance::Msg_AsyncSetWindow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_AsyncSetWindow", OTHER);

            PickleIterator iter__{msg__};
            gfxSurfaceType surfaceType{};
            NPRemoteWindow window{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(surfaceType)))))) {
                FatalError("Error deserializing 'gfxSurfaceType'");
                return MsgValueError;
            }
            // Sentinel = 'surfaceType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 464651404)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'gfxSurfaceType'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(window)))))) {
                FatalError("Error deserializing 'NPRemoteWindow'");
                return MsgValueError;
            }
            // Sentinel = 'window'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 152437401)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPRemoteWindow'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginInstanceChild*>(this))->RecvAsyncSetWindow(std::move(surfaceType), std::move(window))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginInstance::Msg_UpdateBackground__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_UpdateBackground", OTHER);

            PickleIterator iter__{msg__};
            SurfaceDescriptor background{};
            nsIntRect rect{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(background)))))) {
                FatalError("Error deserializing 'SurfaceDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'background'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 374015009)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceDescriptor'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(rect)))))) {
                FatalError("Error deserializing 'nsIntRect'");
                return MsgValueError;
            }
            // Sentinel = 'rect'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70582703)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIntRect'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginInstanceChild*>(this))->RecvUpdateBackground(std::move(background), std::move(rect))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPP_DidComposite__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_DidComposite", OTHER);

            if ((!((static_cast<PluginInstanceChild*>(this))->RecvNPP_DidComposite()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginInstance::Reply_PPluginSurfaceConstructor__ID:
        {
            return MsgProcessed;
        }
    case PPluginInstance::Reply_PPluginScriptableObjectConstructor__ID:
        {
            return MsgProcessed;
        }
    case PPluginInstance::Msg_PPluginScriptableObjectConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_PPluginScriptableObjectConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PPluginScriptableObjectChild* actor = (static_cast<PluginInstanceChild*>(this))->AllocPPluginScriptableObjectChild();
            if (!actor) {
                NS_WARNING("Cannot bind null PPluginScriptableObjectChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPPluginScriptableObjectChild.PutEntry(actor);

            if ((!((static_cast<PluginInstanceChild*>(this))->RecvPPluginScriptableObjectConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginInstance::Msg_PBrowserStreamConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_PBrowserStreamConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            nsCString url{};
            uint32_t length{};
            uint32_t lastmodified{};
            PStreamNotifyChild* notifyData{};
            nsCString headers{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(url)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'url'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45220180)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(length)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'length'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 147063427)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(lastmodified)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'lastmodified'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 548406518)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(notifyData)))))) {
                FatalError("Error deserializing 'PStreamNotify'");
                return MsgValueError;
            }
            // Sentinel = 'notifyData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 385418260)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PStreamNotify'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(headers)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'headers'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 188220125)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PBrowserStreamChild* actor = (static_cast<PluginInstanceChild*>(this))->AllocPBrowserStreamChild(url, length, lastmodified, notifyData, headers);
            if (!actor) {
                NS_WARNING("Cannot bind null PBrowserStreamChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPBrowserStreamChild.PutEntry(actor);

            if ((!((static_cast<PluginInstanceChild*>(this))->RecvPBrowserStreamConstructor(std::move(actor), std::move(url), std::move(length), std::move(lastmodified), std::move(notifyData), std::move(headers))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginInstance::Msg_PPluginBackgroundDestroyerConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_PPluginBackgroundDestroyerConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PPluginBackgroundDestroyerChild* actor = (static_cast<PluginInstanceChild*>(this))->AllocPPluginBackgroundDestroyerChild();
            if (!actor) {
                NS_WARNING("Cannot bind null PPluginBackgroundDestroyerChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPPluginBackgroundDestroyerChild.PutEntry(actor);

            if ((!((static_cast<PluginInstanceChild*>(this))->RecvPPluginBackgroundDestroyerConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPluginInstanceChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PPluginInstanceChild::Result
{
    return MsgNotKnown;
}

auto PPluginInstanceChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PPluginInstanceChild::Result
{
    switch (msg__.type()) {
    case PPluginInstance::Msg_CreateChildPluginWindow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_CreateChildPluginWindow", OTHER);

            int32_t id__ = Id();
            NativeWindowHandle childPluginWindow{};
            if ((!((static_cast<PluginInstanceChild*>(this))->AnswerCreateChildPluginWindow((&(childPluginWindow)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_CreateChildPluginWindow(id__);

            WriteIPDLParam(reply__, this, childPluginWindow);
            // Sentinel = 'childPluginWindow'
            (reply__)->WriteSentinel(1031145196);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPP_SetWindow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_SetWindow", OTHER);

            PickleIterator iter__{msg__};
            NPRemoteWindow window{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(window)))))) {
                FatalError("Error deserializing 'NPRemoteWindow'");
                return MsgValueError;
            }
            // Sentinel = 'window'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 152437401)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPRemoteWindow'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((static_cast<PluginInstanceChild*>(this))->AnswerNPP_SetWindow(std::move(window))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPP_SetWindow(id__);


            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPP_GetValue_NPPVpluginWantsAllNetworkStreams__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_GetValue_NPPVpluginWantsAllNetworkStreams", OTHER);

            int32_t id__ = Id();
            bool value{};
            NPError result{};
            if ((!((static_cast<PluginInstanceChild*>(this))->AnswerNPP_GetValue_NPPVpluginWantsAllNetworkStreams((&(value)), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPP_GetValue_NPPVpluginWantsAllNetworkStreams(id__);

            WriteIPDLParam(reply__, this, value);
            // Sentinel = 'value'
            (reply__)->WriteSentinel(107610654);
            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPP_GetValue_NPPVpluginScriptableNPObject__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_GetValue_NPPVpluginScriptableNPObject", OTHER);

            int32_t id__ = Id();
            PPluginScriptableObjectChild* value{};
            NPError result{};
            if ((!((static_cast<PluginInstanceChild*>(this))->AnswerNPP_GetValue_NPPVpluginScriptableNPObject((&(value)), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPP_GetValue_NPPVpluginScriptableNPObject(id__);

            WriteIPDLParam(reply__, this, value);
            // Sentinel = 'value'
            (reply__)->WriteSentinel(107610654);
            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPP_SetValue_NPNVprivateModeBool__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_SetValue_NPNVprivateModeBool", OTHER);

            PickleIterator iter__{msg__};
            bool value{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(value)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'value'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107610654)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            NPError result{};
            if ((!((static_cast<PluginInstanceChild*>(this))->AnswerNPP_SetValue_NPNVprivateModeBool(std::move(value), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPP_SetValue_NPNVprivateModeBool(id__);

            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId", OTHER);

            int32_t id__ = Id();
            nsCString plug_id{};
            NPError result{};
            if ((!((static_cast<PluginInstanceChild*>(this))->AnswerNPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId((&(plug_id)), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId(id__);

            WriteIPDLParam(reply__, this, plug_id);
            // Sentinel = 'plug_id'
            (reply__)->WriteSentinel(198640357);
            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPP_SetValue_NPNVCSSZoomFactor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_SetValue_NPNVCSSZoomFactor", OTHER);

            PickleIterator iter__{msg__};
            double value{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(value)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'value'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107610654)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            NPError result{};
            if ((!((static_cast<PluginInstanceChild*>(this))->AnswerNPP_SetValue_NPNVCSSZoomFactor(std::move(value), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPP_SetValue_NPNVCSSZoomFactor(id__);

            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPP_SetValue_NPNVmuteAudioBool__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_SetValue_NPNVmuteAudioBool", OTHER);

            PickleIterator iter__{msg__};
            bool muted{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(muted)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'muted'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 109314592)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            NPError result{};
            if ((!((static_cast<PluginInstanceChild*>(this))->AnswerNPP_SetValue_NPNVmuteAudioBool(std::move(muted), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPP_SetValue_NPNVmuteAudioBool(id__);

            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPP_HandleEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_HandleEvent", OTHER);

            PickleIterator iter__{msg__};
            NPRemoteEvent event{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'NPRemoteEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPRemoteEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int16_t handled{};
            if ((!((static_cast<PluginInstanceChild*>(this))->AnswerNPP_HandleEvent(std::move(event), (&(handled)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPP_HandleEvent(id__);

            WriteIPDLParam(reply__, this, handled);
            // Sentinel = 'handled'
            (reply__)->WriteSentinel(189596369);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPP_HandleEvent_Shmem__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_HandleEvent_Shmem", OTHER);

            PickleIterator iter__{msg__};
            NPRemoteEvent event{};
            Shmem buffer{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'NPRemoteEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPRemoteEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(buffer)))))) {
                FatalError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            // Sentinel = 'buffer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144769659)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int16_t handled{};
            Shmem rtnbuffer{};
            if ((!((static_cast<PluginInstanceChild*>(this))->AnswerNPP_HandleEvent_Shmem(std::move(event), std::move(buffer), (&(handled)), (&(rtnbuffer)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPP_HandleEvent_Shmem(id__);

            WriteIPDLParam(reply__, this, handled);
            // Sentinel = 'handled'
            (reply__)->WriteSentinel(189596369);
            WriteIPDLParam(reply__, this, std::move(rtnbuffer));
            // Sentinel = 'rtnbuffer'
            (reply__)->WriteSentinel(323486671);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPP_HandleEvent_IOSurface__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_HandleEvent_IOSurface", OTHER);

            PickleIterator iter__{msg__};
            NPRemoteEvent event{};
            uint32_t surfaceid{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'NPRemoteEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPRemoteEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(surfaceid)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'surfaceid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 320078775)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int16_t handled{};
            if ((!((static_cast<PluginInstanceChild*>(this))->AnswerNPP_HandleEvent_IOSurface(std::move(event), std::move(surfaceid), (&(handled)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPP_HandleEvent_IOSurface(id__);

            WriteIPDLParam(reply__, this, handled);
            // Sentinel = 'handled'
            (reply__)->WriteSentinel(189596369);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_Paint__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_Paint", OTHER);

            PickleIterator iter__{msg__};
            NPRemoteEvent event{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'NPRemoteEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPRemoteEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int16_t handled{};
            if ((!((static_cast<PluginInstanceChild*>(this))->AnswerPaint(std::move(event), (&(handled)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_Paint(id__);

            WriteIPDLParam(reply__, this, handled);
            // Sentinel = 'handled'
            (reply__)->WriteSentinel(189596369);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPP_Destroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_Destroy", OTHER);

            int32_t id__ = Id();
            NPError rv{};
            if ((!((static_cast<PluginInstanceChild*>(this))->AnswerNPP_Destroy((&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPP_Destroy(id__);

            WriteIPDLParam(reply__, this, rv);
            // Sentinel = 'rv'
            (reply__)->WriteSentinel(22806761);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPP_NewStream__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_NewStream", OTHER);

            PickleIterator iter__{msg__};
            PBrowserStreamChild* actor{};
            nsCString mimeType{};
            bool seekable{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PBrowserStream'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PBrowserStream'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBrowserStream'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(mimeType)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'mimeType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 248906571)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(seekable)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'seekable'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 247399229)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            NPError rv{};
            uint16_t stype{};
            if ((!((static_cast<PluginInstanceChild*>(this))->AnswerNPP_NewStream(std::move(actor), std::move(mimeType), std::move(seekable), (&(rv)), (&(stype)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPP_NewStream(id__);

            WriteIPDLParam(reply__, this, rv);
            // Sentinel = 'rv'
            (reply__)->WriteSentinel(22806761);
            WriteIPDLParam(reply__, this, stype);
            // Sentinel = 'stype'
            (reply__)->WriteSentinel(113508918);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_SetPluginFocus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_SetPluginFocus", OTHER);

            int32_t id__ = Id();
            if ((!((static_cast<PluginInstanceChild*>(this))->AnswerSetPluginFocus()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_SetPluginFocus(id__);


            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_UpdateWindow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_UpdateWindow", OTHER);

            int32_t id__ = Id();
            if ((!((static_cast<PluginInstanceChild*>(this))->AnswerUpdateWindow()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_UpdateWindow(id__);


            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPluginInstanceChild::ClearSubtree() -> void
{
    for (auto it = mManagedPPluginBackgroundDestroyerChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPluginBackgroundDestroyerChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPluginBackgroundDestroyerChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPluginBackgroundDestroyerChild.Clear();

    for (auto it = mManagedPPluginScriptableObjectChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPluginScriptableObjectChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPluginScriptableObjectChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPluginScriptableObjectChild.Clear();

    for (auto it = mManagedPBrowserStreamChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBrowserStreamChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBrowserStreamChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBrowserStreamChild.Clear();

    for (auto it = mManagedPStreamNotifyChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPStreamNotifyChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPStreamNotifyChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPStreamNotifyChild.Clear();

    for (auto it = mManagedPPluginSurfaceChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPluginSurfaceChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPluginSurfaceChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPluginSurfaceChild.Clear();

}



} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::plugins::PPluginInstanceChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::plugins::PPluginInstanceChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PPluginInstance", PPluginInstanceMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::plugins::PPluginInstanceChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
