//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PermissionMessageUtils.h"
#include "mozilla/dom/PBrowserParent.h"
#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/dom/PPaymentRequest.h"
#include "mozilla/dom/PPaymentRequestParent.h"
#include "mozilla/dom/PPaymentRequestChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace PPaymentRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PPaymentRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PPaymentRequestChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RequestPayment(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestPayment__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RespondPayment(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RespondPayment__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ChangeShippingAddress(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ChangeShippingAddress__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ChangeShippingOption(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ChangeShippingOption__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ChangePayerDetail(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ChangePayerDetail__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ChangePaymentMethod(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ChangePaymentMethod__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}

} // namespace PPaymentRequest
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentMethodData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentMethodData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).supportedMethods());
    // Sentinel = 'supportedMethods'
    (aMsg)->WriteSentinel(975111867);
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentMethodData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->supportedMethods())))))) {
        aActor->FatalError("Error deserializing 'supportedMethods' (nsString) member of 'IPCPaymentMethodData'");
        return false;
    }
    // Sentinel = 'supportedMethods'
    if ((!((aMsg)->ReadSentinel(aIter, 975111867)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'supportedMethods' (nsString) member of 'IPCPaymentMethodData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (nsString) member of 'IPCPaymentMethodData'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (nsString) member of 'IPCPaymentMethodData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentCurrencyAmount|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentCurrencyAmount>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).currency());
    // Sentinel = 'currency'
    (aMsg)->WriteSentinel(257295212);
    WriteIPDLParam(aMsg, aActor, (aVar).value());
    // Sentinel = 'value'
    (aMsg)->WriteSentinel(107610654);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentCurrencyAmount>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->currency())))))) {
        aActor->FatalError("Error deserializing 'currency' (nsString) member of 'IPCPaymentCurrencyAmount'");
        return false;
    }
    // Sentinel = 'currency'
    if ((!((aMsg)->ReadSentinel(aIter, 257295212)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'currency' (nsString) member of 'IPCPaymentCurrencyAmount'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->value())))))) {
        aActor->FatalError("Error deserializing 'value' (nsString) member of 'IPCPaymentCurrencyAmount'");
        return false;
    }
    // Sentinel = 'value'
    if ((!((aMsg)->ReadSentinel(aIter, 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'value' (nsString) member of 'IPCPaymentCurrencyAmount'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentItem|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentItem>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).label());
    // Sentinel = 'label'
    (aMsg)->WriteSentinel(100729345);
    WriteIPDLParam(aMsg, aActor, (aVar).amount());
    // Sentinel = 'amount'
    (aMsg)->WriteSentinel(148374165);
    WriteIPDLParam(aMsg, aActor, (aVar).pending());
    // Sentinel = 'pending'
    (aMsg)->WriteSentinel(195625702);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentItem>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->label())))))) {
        aActor->FatalError("Error deserializing 'label' (nsString) member of 'IPCPaymentItem'");
        return false;
    }
    // Sentinel = 'label'
    if ((!((aMsg)->ReadSentinel(aIter, 100729345)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'label' (nsString) member of 'IPCPaymentItem'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->amount())))))) {
        aActor->FatalError("Error deserializing 'amount' (IPCPaymentCurrencyAmount) member of 'IPCPaymentItem'");
        return false;
    }
    // Sentinel = 'amount'
    if ((!((aMsg)->ReadSentinel(aIter, 148374165)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'amount' (IPCPaymentCurrencyAmount) member of 'IPCPaymentItem'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->pending())))))) {
        aActor->FatalError("Error deserializing 'pending' (bool) member of 'IPCPaymentItem'");
        return false;
    }
    // Sentinel = 'pending'
    if ((!((aMsg)->ReadSentinel(aIter, 195625702)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'pending' (bool) member of 'IPCPaymentItem'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentDetailsModifier|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentDetailsModifier>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).supportedMethods());
    // Sentinel = 'supportedMethods'
    (aMsg)->WriteSentinel(975111867);
    WriteIPDLParam(aMsg, aActor, (aVar).total());
    // Sentinel = 'total'
    (aMsg)->WriteSentinel(110035493);
    WriteIPDLParam(aMsg, aActor, (aVar).additionalDisplayItems());
    // Sentinel = 'additionalDisplayItems'
    (aMsg)->WriteSentinel(1715407090);
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
    WriteIPDLParam(aMsg, aActor, (aVar).additionalDisplayItemsPassed());
    // Sentinel = 'additionalDisplayItemsPassed'
    (aMsg)->WriteSentinel(2751662930);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentDetailsModifier>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->supportedMethods())))))) {
        aActor->FatalError("Error deserializing 'supportedMethods' (nsString) member of 'IPCPaymentDetailsModifier'");
        return false;
    }
    // Sentinel = 'supportedMethods'
    if ((!((aMsg)->ReadSentinel(aIter, 975111867)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'supportedMethods' (nsString) member of 'IPCPaymentDetailsModifier'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->total())))))) {
        aActor->FatalError("Error deserializing 'total' (IPCPaymentItem) member of 'IPCPaymentDetailsModifier'");
        return false;
    }
    // Sentinel = 'total'
    if ((!((aMsg)->ReadSentinel(aIter, 110035493)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'total' (IPCPaymentItem) member of 'IPCPaymentDetailsModifier'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->additionalDisplayItems())))))) {
        aActor->FatalError("Error deserializing 'additionalDisplayItems' (IPCPaymentItem[]) member of 'IPCPaymentDetailsModifier'");
        return false;
    }
    // Sentinel = 'additionalDisplayItems'
    if ((!((aMsg)->ReadSentinel(aIter, 1715407090)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'additionalDisplayItems' (IPCPaymentItem[]) member of 'IPCPaymentDetailsModifier'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (nsString) member of 'IPCPaymentDetailsModifier'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (nsString) member of 'IPCPaymentDetailsModifier'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->additionalDisplayItemsPassed())))))) {
        aActor->FatalError("Error deserializing 'additionalDisplayItemsPassed' (bool) member of 'IPCPaymentDetailsModifier'");
        return false;
    }
    // Sentinel = 'additionalDisplayItemsPassed'
    if ((!((aMsg)->ReadSentinel(aIter, 2751662930)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'additionalDisplayItemsPassed' (bool) member of 'IPCPaymentDetailsModifier'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentShippingOption|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentShippingOption>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).id());
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
    WriteIPDLParam(aMsg, aActor, (aVar).label());
    // Sentinel = 'label'
    (aMsg)->WriteSentinel(100729345);
    WriteIPDLParam(aMsg, aActor, (aVar).amount());
    // Sentinel = 'amount'
    (aMsg)->WriteSentinel(148374165);
    WriteIPDLParam(aMsg, aActor, (aVar).selected());
    // Sentinel = 'selected'
    (aMsg)->WriteSentinel(251265866);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentShippingOption>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->id())))))) {
        aActor->FatalError("Error deserializing 'id' (nsString) member of 'IPCPaymentShippingOption'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'id' (nsString) member of 'IPCPaymentShippingOption'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->label())))))) {
        aActor->FatalError("Error deserializing 'label' (nsString) member of 'IPCPaymentShippingOption'");
        return false;
    }
    // Sentinel = 'label'
    if ((!((aMsg)->ReadSentinel(aIter, 100729345)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'label' (nsString) member of 'IPCPaymentShippingOption'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->amount())))))) {
        aActor->FatalError("Error deserializing 'amount' (IPCPaymentCurrencyAmount) member of 'IPCPaymentShippingOption'");
        return false;
    }
    // Sentinel = 'amount'
    if ((!((aMsg)->ReadSentinel(aIter, 148374165)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'amount' (IPCPaymentCurrencyAmount) member of 'IPCPaymentShippingOption'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->selected())))))) {
        aActor->FatalError("Error deserializing 'selected' (bool) member of 'IPCPaymentShippingOption'");
        return false;
    }
    // Sentinel = 'selected'
    if ((!((aMsg)->ReadSentinel(aIter, 251265866)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'selected' (bool) member of 'IPCPaymentShippingOption'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentDetails|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentDetails>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).id());
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
    WriteIPDLParam(aMsg, aActor, (aVar).total());
    // Sentinel = 'total'
    (aMsg)->WriteSentinel(110035493);
    WriteIPDLParam(aMsg, aActor, (aVar).displayItems());
    // Sentinel = 'displayItems'
    (aMsg)->WriteSentinel(541263097);
    WriteIPDLParam(aMsg, aActor, (aVar).shippingOptions());
    // Sentinel = 'shippingOptions'
    (aMsg)->WriteSentinel(845022799);
    WriteIPDLParam(aMsg, aActor, (aVar).modifiers());
    // Sentinel = 'modifiers'
    (aMsg)->WriteSentinel(313525187);
    WriteIPDLParam(aMsg, aActor, (aVar).error());
    // Sentinel = 'error'
    (aMsg)->WriteSentinel(107741739);
    WriteIPDLParam(aMsg, aActor, (aVar).shippingAddressErrors());
    // Sentinel = 'shippingAddressErrors'
    (aMsg)->WriteSentinel(1588463782);
    WriteIPDLParam(aMsg, aActor, (aVar).payerErrors());
    // Sentinel = 'payerErrors'
    (aMsg)->WriteSentinel(460326047);
    WriteIPDLParam(aMsg, aActor, (aVar).paymentMethodErrors());
    // Sentinel = 'paymentMethodErrors'
    (aMsg)->WriteSentinel(1316751325);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentDetails>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->id())))))) {
        aActor->FatalError("Error deserializing 'id' (nsString) member of 'IPCPaymentDetails'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'id' (nsString) member of 'IPCPaymentDetails'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->total())))))) {
        aActor->FatalError("Error deserializing 'total' (IPCPaymentItem) member of 'IPCPaymentDetails'");
        return false;
    }
    // Sentinel = 'total'
    if ((!((aMsg)->ReadSentinel(aIter, 110035493)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'total' (IPCPaymentItem) member of 'IPCPaymentDetails'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->displayItems())))))) {
        aActor->FatalError("Error deserializing 'displayItems' (IPCPaymentItem[]) member of 'IPCPaymentDetails'");
        return false;
    }
    // Sentinel = 'displayItems'
    if ((!((aMsg)->ReadSentinel(aIter, 541263097)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'displayItems' (IPCPaymentItem[]) member of 'IPCPaymentDetails'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->shippingOptions())))))) {
        aActor->FatalError("Error deserializing 'shippingOptions' (IPCPaymentShippingOption[]) member of 'IPCPaymentDetails'");
        return false;
    }
    // Sentinel = 'shippingOptions'
    if ((!((aMsg)->ReadSentinel(aIter, 845022799)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'shippingOptions' (IPCPaymentShippingOption[]) member of 'IPCPaymentDetails'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->modifiers())))))) {
        aActor->FatalError("Error deserializing 'modifiers' (IPCPaymentDetailsModifier[]) member of 'IPCPaymentDetails'");
        return false;
    }
    // Sentinel = 'modifiers'
    if ((!((aMsg)->ReadSentinel(aIter, 313525187)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'modifiers' (IPCPaymentDetailsModifier[]) member of 'IPCPaymentDetails'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->error())))))) {
        aActor->FatalError("Error deserializing 'error' (nsString) member of 'IPCPaymentDetails'");
        return false;
    }
    // Sentinel = 'error'
    if ((!((aMsg)->ReadSentinel(aIter, 107741739)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'error' (nsString) member of 'IPCPaymentDetails'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->shippingAddressErrors())))))) {
        aActor->FatalError("Error deserializing 'shippingAddressErrors' (nsString) member of 'IPCPaymentDetails'");
        return false;
    }
    // Sentinel = 'shippingAddressErrors'
    if ((!((aMsg)->ReadSentinel(aIter, 1588463782)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'shippingAddressErrors' (nsString) member of 'IPCPaymentDetails'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->payerErrors())))))) {
        aActor->FatalError("Error deserializing 'payerErrors' (nsString) member of 'IPCPaymentDetails'");
        return false;
    }
    // Sentinel = 'payerErrors'
    if ((!((aMsg)->ReadSentinel(aIter, 460326047)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'payerErrors' (nsString) member of 'IPCPaymentDetails'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->paymentMethodErrors())))))) {
        aActor->FatalError("Error deserializing 'paymentMethodErrors' (nsString) member of 'IPCPaymentDetails'");
        return false;
    }
    // Sentinel = 'paymentMethodErrors'
    if ((!((aMsg)->ReadSentinel(aIter, 1316751325)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'paymentMethodErrors' (nsString) member of 'IPCPaymentDetails'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentOptions|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentOptions>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestPayerName());
    // Sentinel = 'requestPayerName'
    (aMsg)->WriteSentinel(952632972);
    WriteIPDLParam(aMsg, aActor, (aVar).requestPayerEmail());
    // Sentinel = 'requestPayerEmail'
    (aMsg)->WriteSentinel(1067910899);
    WriteIPDLParam(aMsg, aActor, (aVar).requestPayerPhone());
    // Sentinel = 'requestPayerPhone'
    (aMsg)->WriteSentinel(1073153797);
    WriteIPDLParam(aMsg, aActor, (aVar).requestShipping());
    // Sentinel = 'requestShipping'
    (aMsg)->WriteSentinel(850986572);
    WriteIPDLParam(aMsg, aActor, (aVar).requestBillingAddress());
    // Sentinel = 'requestBillingAddress'
    (aMsg)->WriteSentinel(1591281809);
    WriteIPDLParam(aMsg, aActor, (aVar).shippingType());
    // Sentinel = 'shippingType'
    (aMsg)->WriteSentinel(552076549);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentOptions>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestPayerName())))))) {
        aActor->FatalError("Error deserializing 'requestPayerName' (bool) member of 'IPCPaymentOptions'");
        return false;
    }
    // Sentinel = 'requestPayerName'
    if ((!((aMsg)->ReadSentinel(aIter, 952632972)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestPayerName' (bool) member of 'IPCPaymentOptions'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestPayerEmail())))))) {
        aActor->FatalError("Error deserializing 'requestPayerEmail' (bool) member of 'IPCPaymentOptions'");
        return false;
    }
    // Sentinel = 'requestPayerEmail'
    if ((!((aMsg)->ReadSentinel(aIter, 1067910899)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestPayerEmail' (bool) member of 'IPCPaymentOptions'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestPayerPhone())))))) {
        aActor->FatalError("Error deserializing 'requestPayerPhone' (bool) member of 'IPCPaymentOptions'");
        return false;
    }
    // Sentinel = 'requestPayerPhone'
    if ((!((aMsg)->ReadSentinel(aIter, 1073153797)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestPayerPhone' (bool) member of 'IPCPaymentOptions'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestShipping())))))) {
        aActor->FatalError("Error deserializing 'requestShipping' (bool) member of 'IPCPaymentOptions'");
        return false;
    }
    // Sentinel = 'requestShipping'
    if ((!((aMsg)->ReadSentinel(aIter, 850986572)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestShipping' (bool) member of 'IPCPaymentOptions'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestBillingAddress())))))) {
        aActor->FatalError("Error deserializing 'requestBillingAddress' (bool) member of 'IPCPaymentOptions'");
        return false;
    }
    // Sentinel = 'requestBillingAddress'
    if ((!((aMsg)->ReadSentinel(aIter, 1591281809)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestBillingAddress' (bool) member of 'IPCPaymentOptions'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->shippingType())))))) {
        aActor->FatalError("Error deserializing 'shippingType' (nsString) member of 'IPCPaymentOptions'");
        return false;
    }
    // Sentinel = 'shippingType'
    if ((!((aMsg)->ReadSentinel(aIter, 552076549)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'shippingType' (nsString) member of 'IPCPaymentOptions'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentCreateActionRequest|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentCreateActionRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestId());
    // Sentinel = 'requestId'
    (aMsg)->WriteSentinel(320799671);
    WriteIPDLParam(aMsg, aActor, (aVar).topLevelPrincipal());
    // Sentinel = 'topLevelPrincipal'
    (aMsg)->WriteSentinel(1049167598);
    WriteIPDLParam(aMsg, aActor, (aVar).methodData());
    // Sentinel = 'methodData'
    (aMsg)->WriteSentinel(375063548);
    WriteIPDLParam(aMsg, aActor, (aVar).details());
    // Sentinel = 'details'
    (aMsg)->WriteSentinel(191824615);
    WriteIPDLParam(aMsg, aActor, (aVar).options());
    // Sentinel = 'options'
    (aMsg)->WriteSentinel(204735245);
    WriteIPDLParam(aMsg, aActor, (aVar).shippingOption());
    // Sentinel = 'shippingOption'
    (aMsg)->WriteSentinel(739182044);
    (aMsg)->WriteBytes((&((aVar).topOuterWindowId())), 8);
    // Sentinel = 'topOuterWindowId'
    (aMsg)->WriteSentinel(949356168);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentCreateActionRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestId())))))) {
        aActor->FatalError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentCreateActionRequest'");
        return false;
    }
    // Sentinel = 'requestId'
    if ((!((aMsg)->ReadSentinel(aIter, 320799671)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentCreateActionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->topLevelPrincipal())))))) {
        aActor->FatalError("Error deserializing 'topLevelPrincipal' (nsIPrincipal) member of 'IPCPaymentCreateActionRequest'");
        return false;
    }
    // Sentinel = 'topLevelPrincipal'
    if ((!((aMsg)->ReadSentinel(aIter, 1049167598)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'topLevelPrincipal' (nsIPrincipal) member of 'IPCPaymentCreateActionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->methodData())))))) {
        aActor->FatalError("Error deserializing 'methodData' (IPCPaymentMethodData[]) member of 'IPCPaymentCreateActionRequest'");
        return false;
    }
    // Sentinel = 'methodData'
    if ((!((aMsg)->ReadSentinel(aIter, 375063548)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'methodData' (IPCPaymentMethodData[]) member of 'IPCPaymentCreateActionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->details())))))) {
        aActor->FatalError("Error deserializing 'details' (IPCPaymentDetails) member of 'IPCPaymentCreateActionRequest'");
        return false;
    }
    // Sentinel = 'details'
    if ((!((aMsg)->ReadSentinel(aIter, 191824615)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'details' (IPCPaymentDetails) member of 'IPCPaymentCreateActionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->options())))))) {
        aActor->FatalError("Error deserializing 'options' (IPCPaymentOptions) member of 'IPCPaymentCreateActionRequest'");
        return false;
    }
    // Sentinel = 'options'
    if ((!((aMsg)->ReadSentinel(aIter, 204735245)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'options' (IPCPaymentOptions) member of 'IPCPaymentCreateActionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->shippingOption())))))) {
        aActor->FatalError("Error deserializing 'shippingOption' (nsString) member of 'IPCPaymentCreateActionRequest'");
        return false;
    }
    // Sentinel = 'shippingOption'
    if ((!((aMsg)->ReadSentinel(aIter, 739182044)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'shippingOption' (nsString) member of 'IPCPaymentCreateActionRequest'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->topOuterWindowId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'topOuterWindowId'
    if ((!((aMsg)->ReadSentinel(aIter, 949356168)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentCanMakeActionRequest|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentCanMakeActionRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestId());
    // Sentinel = 'requestId'
    (aMsg)->WriteSentinel(320799671);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentCanMakeActionRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestId())))))) {
        aActor->FatalError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentCanMakeActionRequest'");
        return false;
    }
    // Sentinel = 'requestId'
    if ((!((aMsg)->ReadSentinel(aIter, 320799671)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentCanMakeActionRequest'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentShowActionRequest|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentShowActionRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestId());
    // Sentinel = 'requestId'
    (aMsg)->WriteSentinel(320799671);
    WriteIPDLParam(aMsg, aActor, (aVar).isUpdating());
    // Sentinel = 'isUpdating'
    (aMsg)->WriteSentinel(376570905);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentShowActionRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestId())))))) {
        aActor->FatalError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentShowActionRequest'");
        return false;
    }
    // Sentinel = 'requestId'
    if ((!((aMsg)->ReadSentinel(aIter, 320799671)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentShowActionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isUpdating())))))) {
        aActor->FatalError("Error deserializing 'isUpdating' (bool) member of 'IPCPaymentShowActionRequest'");
        return false;
    }
    // Sentinel = 'isUpdating'
    if ((!((aMsg)->ReadSentinel(aIter, 376570905)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isUpdating' (bool) member of 'IPCPaymentShowActionRequest'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentAbortActionRequest|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentAbortActionRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestId());
    // Sentinel = 'requestId'
    (aMsg)->WriteSentinel(320799671);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentAbortActionRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestId())))))) {
        aActor->FatalError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentAbortActionRequest'");
        return false;
    }
    // Sentinel = 'requestId'
    if ((!((aMsg)->ReadSentinel(aIter, 320799671)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentAbortActionRequest'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentCompleteActionRequest|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentCompleteActionRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestId());
    // Sentinel = 'requestId'
    (aMsg)->WriteSentinel(320799671);
    WriteIPDLParam(aMsg, aActor, (aVar).completeStatus());
    // Sentinel = 'completeStatus'
    (aMsg)->WriteSentinel(732038622);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentCompleteActionRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestId())))))) {
        aActor->FatalError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentCompleteActionRequest'");
        return false;
    }
    // Sentinel = 'requestId'
    if ((!((aMsg)->ReadSentinel(aIter, 320799671)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentCompleteActionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->completeStatus())))))) {
        aActor->FatalError("Error deserializing 'completeStatus' (nsString) member of 'IPCPaymentCompleteActionRequest'");
        return false;
    }
    // Sentinel = 'completeStatus'
    if ((!((aMsg)->ReadSentinel(aIter, 732038622)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'completeStatus' (nsString) member of 'IPCPaymentCompleteActionRequest'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentUpdateActionRequest|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentUpdateActionRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestId());
    // Sentinel = 'requestId'
    (aMsg)->WriteSentinel(320799671);
    WriteIPDLParam(aMsg, aActor, (aVar).details());
    // Sentinel = 'details'
    (aMsg)->WriteSentinel(191824615);
    WriteIPDLParam(aMsg, aActor, (aVar).shippingOption());
    // Sentinel = 'shippingOption'
    (aMsg)->WriteSentinel(739182044);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentUpdateActionRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestId())))))) {
        aActor->FatalError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentUpdateActionRequest'");
        return false;
    }
    // Sentinel = 'requestId'
    if ((!((aMsg)->ReadSentinel(aIter, 320799671)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentUpdateActionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->details())))))) {
        aActor->FatalError("Error deserializing 'details' (IPCPaymentDetails) member of 'IPCPaymentUpdateActionRequest'");
        return false;
    }
    // Sentinel = 'details'
    if ((!((aMsg)->ReadSentinel(aIter, 191824615)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'details' (IPCPaymentDetails) member of 'IPCPaymentUpdateActionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->shippingOption())))))) {
        aActor->FatalError("Error deserializing 'shippingOption' (nsString) member of 'IPCPaymentUpdateActionRequest'");
        return false;
    }
    // Sentinel = 'shippingOption'
    if ((!((aMsg)->ReadSentinel(aIter, 739182044)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'shippingOption' (nsString) member of 'IPCPaymentUpdateActionRequest'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentCloseActionRequest|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentCloseActionRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestId());
    // Sentinel = 'requestId'
    (aMsg)->WriteSentinel(320799671);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentCloseActionRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestId())))))) {
        aActor->FatalError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentCloseActionRequest'");
        return false;
    }
    // Sentinel = 'requestId'
    if ((!((aMsg)->ReadSentinel(aIter, 320799671)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentCloseActionRequest'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentRetryActionRequest|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentRetryActionRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestId());
    // Sentinel = 'requestId'
    (aMsg)->WriteSentinel(320799671);
    WriteIPDLParam(aMsg, aActor, (aVar).error());
    // Sentinel = 'error'
    (aMsg)->WriteSentinel(107741739);
    WriteIPDLParam(aMsg, aActor, (aVar).payerErrors());
    // Sentinel = 'payerErrors'
    (aMsg)->WriteSentinel(460326047);
    WriteIPDLParam(aMsg, aActor, (aVar).paymentMethodErrors());
    // Sentinel = 'paymentMethodErrors'
    (aMsg)->WriteSentinel(1316751325);
    WriteIPDLParam(aMsg, aActor, (aVar).shippingAddressErrors());
    // Sentinel = 'shippingAddressErrors'
    (aMsg)->WriteSentinel(1588463782);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentRetryActionRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestId())))))) {
        aActor->FatalError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentRetryActionRequest'");
        return false;
    }
    // Sentinel = 'requestId'
    if ((!((aMsg)->ReadSentinel(aIter, 320799671)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentRetryActionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->error())))))) {
        aActor->FatalError("Error deserializing 'error' (nsString) member of 'IPCPaymentRetryActionRequest'");
        return false;
    }
    // Sentinel = 'error'
    if ((!((aMsg)->ReadSentinel(aIter, 107741739)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'error' (nsString) member of 'IPCPaymentRetryActionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->payerErrors())))))) {
        aActor->FatalError("Error deserializing 'payerErrors' (nsString) member of 'IPCPaymentRetryActionRequest'");
        return false;
    }
    // Sentinel = 'payerErrors'
    if ((!((aMsg)->ReadSentinel(aIter, 460326047)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'payerErrors' (nsString) member of 'IPCPaymentRetryActionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->paymentMethodErrors())))))) {
        aActor->FatalError("Error deserializing 'paymentMethodErrors' (nsString) member of 'IPCPaymentRetryActionRequest'");
        return false;
    }
    // Sentinel = 'paymentMethodErrors'
    if ((!((aMsg)->ReadSentinel(aIter, 1316751325)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'paymentMethodErrors' (nsString) member of 'IPCPaymentRetryActionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->shippingAddressErrors())))))) {
        aActor->FatalError("Error deserializing 'shippingAddressErrors' (nsString) member of 'IPCPaymentRetryActionRequest'");
        return false;
    }
    // Sentinel = 'shippingAddressErrors'
    if ((!((aMsg)->ReadSentinel(aIter, 1588463782)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'shippingAddressErrors' (nsString) member of 'IPCPaymentRetryActionRequest'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union IPCPaymentActionRequest|
//
namespace mozilla {
namespace dom {
auto IPCPaymentActionRequest::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TIPCPaymentCreateActionRequest:
        {
            (ptr_IPCPaymentCreateActionRequest())->~IPCPaymentCreateActionRequest__tdef();
            break;
        }
    case TIPCPaymentCanMakeActionRequest:
        {
            (ptr_IPCPaymentCanMakeActionRequest())->~IPCPaymentCanMakeActionRequest__tdef();
            break;
        }
    case TIPCPaymentShowActionRequest:
        {
            (ptr_IPCPaymentShowActionRequest())->~IPCPaymentShowActionRequest__tdef();
            break;
        }
    case TIPCPaymentAbortActionRequest:
        {
            (ptr_IPCPaymentAbortActionRequest())->~IPCPaymentAbortActionRequest__tdef();
            break;
        }
    case TIPCPaymentCompleteActionRequest:
        {
            (ptr_IPCPaymentCompleteActionRequest())->~IPCPaymentCompleteActionRequest__tdef();
            break;
        }
    case TIPCPaymentUpdateActionRequest:
        {
            (ptr_IPCPaymentUpdateActionRequest())->~IPCPaymentUpdateActionRequest__tdef();
            break;
        }
    case TIPCPaymentCloseActionRequest:
        {
            (ptr_IPCPaymentCloseActionRequest())->~IPCPaymentCloseActionRequest__tdef();
            break;
        }
    case TIPCPaymentRetryActionRequest:
        {
            (ptr_IPCPaymentRetryActionRequest())->~IPCPaymentRetryActionRequest__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(const IPCPaymentCreateActionRequest& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentCreateActionRequest()) IPCPaymentCreateActionRequest(aOther);
    mType = TIPCPaymentCreateActionRequest;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(IPCPaymentCreateActionRequest&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentCreateActionRequest()) IPCPaymentCreateActionRequest(std::move(aOther));
    mType = TIPCPaymentCreateActionRequest;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(const IPCPaymentCanMakeActionRequest& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentCanMakeActionRequest()) IPCPaymentCanMakeActionRequest(aOther);
    mType = TIPCPaymentCanMakeActionRequest;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(IPCPaymentCanMakeActionRequest&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentCanMakeActionRequest()) IPCPaymentCanMakeActionRequest(std::move(aOther));
    mType = TIPCPaymentCanMakeActionRequest;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(const IPCPaymentShowActionRequest& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentShowActionRequest()) IPCPaymentShowActionRequest(aOther);
    mType = TIPCPaymentShowActionRequest;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(IPCPaymentShowActionRequest&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentShowActionRequest()) IPCPaymentShowActionRequest(std::move(aOther));
    mType = TIPCPaymentShowActionRequest;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(const IPCPaymentAbortActionRequest& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentAbortActionRequest()) IPCPaymentAbortActionRequest(aOther);
    mType = TIPCPaymentAbortActionRequest;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(IPCPaymentAbortActionRequest&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentAbortActionRequest()) IPCPaymentAbortActionRequest(std::move(aOther));
    mType = TIPCPaymentAbortActionRequest;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(const IPCPaymentCompleteActionRequest& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentCompleteActionRequest()) IPCPaymentCompleteActionRequest(aOther);
    mType = TIPCPaymentCompleteActionRequest;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(IPCPaymentCompleteActionRequest&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentCompleteActionRequest()) IPCPaymentCompleteActionRequest(std::move(aOther));
    mType = TIPCPaymentCompleteActionRequest;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(const IPCPaymentUpdateActionRequest& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentUpdateActionRequest()) IPCPaymentUpdateActionRequest(aOther);
    mType = TIPCPaymentUpdateActionRequest;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(IPCPaymentUpdateActionRequest&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentUpdateActionRequest()) IPCPaymentUpdateActionRequest(std::move(aOther));
    mType = TIPCPaymentUpdateActionRequest;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(const IPCPaymentCloseActionRequest& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentCloseActionRequest()) IPCPaymentCloseActionRequest(aOther);
    mType = TIPCPaymentCloseActionRequest;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(IPCPaymentCloseActionRequest&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentCloseActionRequest()) IPCPaymentCloseActionRequest(std::move(aOther));
    mType = TIPCPaymentCloseActionRequest;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(const IPCPaymentRetryActionRequest& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentRetryActionRequest()) IPCPaymentRetryActionRequest(aOther);
    mType = TIPCPaymentRetryActionRequest;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(IPCPaymentRetryActionRequest&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentRetryActionRequest()) IPCPaymentRetryActionRequest(std::move(aOther));
    mType = TIPCPaymentRetryActionRequest;
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(const IPCPaymentActionRequest& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TIPCPaymentCreateActionRequest:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentCreateActionRequest()) IPCPaymentCreateActionRequest((aOther).get_IPCPaymentCreateActionRequest());
            break;
        }
    case TIPCPaymentCanMakeActionRequest:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentCanMakeActionRequest()) IPCPaymentCanMakeActionRequest((aOther).get_IPCPaymentCanMakeActionRequest());
            break;
        }
    case TIPCPaymentShowActionRequest:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentShowActionRequest()) IPCPaymentShowActionRequest((aOther).get_IPCPaymentShowActionRequest());
            break;
        }
    case TIPCPaymentAbortActionRequest:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentAbortActionRequest()) IPCPaymentAbortActionRequest((aOther).get_IPCPaymentAbortActionRequest());
            break;
        }
    case TIPCPaymentCompleteActionRequest:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentCompleteActionRequest()) IPCPaymentCompleteActionRequest((aOther).get_IPCPaymentCompleteActionRequest());
            break;
        }
    case TIPCPaymentUpdateActionRequest:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentUpdateActionRequest()) IPCPaymentUpdateActionRequest((aOther).get_IPCPaymentUpdateActionRequest());
            break;
        }
    case TIPCPaymentCloseActionRequest:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentCloseActionRequest()) IPCPaymentCloseActionRequest((aOther).get_IPCPaymentCloseActionRequest());
            break;
        }
    case TIPCPaymentRetryActionRequest:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentRetryActionRequest()) IPCPaymentRetryActionRequest((aOther).get_IPCPaymentRetryActionRequest());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT IPCPaymentActionRequest::IPCPaymentActionRequest(IPCPaymentActionRequest&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TIPCPaymentCreateActionRequest:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentCreateActionRequest()) IPCPaymentCreateActionRequest(std::move((aOther).get_IPCPaymentCreateActionRequest()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentCanMakeActionRequest:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentCanMakeActionRequest()) IPCPaymentCanMakeActionRequest(std::move((aOther).get_IPCPaymentCanMakeActionRequest()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentShowActionRequest:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentShowActionRequest()) IPCPaymentShowActionRequest(std::move((aOther).get_IPCPaymentShowActionRequest()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentAbortActionRequest:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentAbortActionRequest()) IPCPaymentAbortActionRequest(std::move((aOther).get_IPCPaymentAbortActionRequest()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentCompleteActionRequest:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentCompleteActionRequest()) IPCPaymentCompleteActionRequest(std::move((aOther).get_IPCPaymentCompleteActionRequest()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentUpdateActionRequest:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentUpdateActionRequest()) IPCPaymentUpdateActionRequest(std::move((aOther).get_IPCPaymentUpdateActionRequest()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentCloseActionRequest:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentCloseActionRequest()) IPCPaymentCloseActionRequest(std::move((aOther).get_IPCPaymentCloseActionRequest()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentRetryActionRequest:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentRetryActionRequest()) IPCPaymentRetryActionRequest(std::move((aOther).get_IPCPaymentRetryActionRequest()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

IPCPaymentActionRequest::~IPCPaymentActionRequest()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto IPCPaymentActionRequest::operator=(const IPCPaymentCreateActionRequest& aRhs) -> IPCPaymentActionRequest&
{
    if (MaybeDestroy(TIPCPaymentCreateActionRequest)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentCreateActionRequest()) IPCPaymentCreateActionRequest;
    }
    (*(ptr_IPCPaymentCreateActionRequest())) = aRhs;
    mType = TIPCPaymentCreateActionRequest;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(IPCPaymentCreateActionRequest&& aRhs) -> IPCPaymentActionRequest&
{
    if (MaybeDestroy(TIPCPaymentCreateActionRequest)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentCreateActionRequest()) IPCPaymentCreateActionRequest;
    }
    (*(ptr_IPCPaymentCreateActionRequest())) = std::move(aRhs);
    mType = TIPCPaymentCreateActionRequest;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(const IPCPaymentCanMakeActionRequest& aRhs) -> IPCPaymentActionRequest&
{
    if (MaybeDestroy(TIPCPaymentCanMakeActionRequest)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentCanMakeActionRequest()) IPCPaymentCanMakeActionRequest;
    }
    (*(ptr_IPCPaymentCanMakeActionRequest())) = aRhs;
    mType = TIPCPaymentCanMakeActionRequest;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(IPCPaymentCanMakeActionRequest&& aRhs) -> IPCPaymentActionRequest&
{
    if (MaybeDestroy(TIPCPaymentCanMakeActionRequest)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentCanMakeActionRequest()) IPCPaymentCanMakeActionRequest;
    }
    (*(ptr_IPCPaymentCanMakeActionRequest())) = std::move(aRhs);
    mType = TIPCPaymentCanMakeActionRequest;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(const IPCPaymentShowActionRequest& aRhs) -> IPCPaymentActionRequest&
{
    if (MaybeDestroy(TIPCPaymentShowActionRequest)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentShowActionRequest()) IPCPaymentShowActionRequest;
    }
    (*(ptr_IPCPaymentShowActionRequest())) = aRhs;
    mType = TIPCPaymentShowActionRequest;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(IPCPaymentShowActionRequest&& aRhs) -> IPCPaymentActionRequest&
{
    if (MaybeDestroy(TIPCPaymentShowActionRequest)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentShowActionRequest()) IPCPaymentShowActionRequest;
    }
    (*(ptr_IPCPaymentShowActionRequest())) = std::move(aRhs);
    mType = TIPCPaymentShowActionRequest;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(const IPCPaymentAbortActionRequest& aRhs) -> IPCPaymentActionRequest&
{
    if (MaybeDestroy(TIPCPaymentAbortActionRequest)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentAbortActionRequest()) IPCPaymentAbortActionRequest;
    }
    (*(ptr_IPCPaymentAbortActionRequest())) = aRhs;
    mType = TIPCPaymentAbortActionRequest;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(IPCPaymentAbortActionRequest&& aRhs) -> IPCPaymentActionRequest&
{
    if (MaybeDestroy(TIPCPaymentAbortActionRequest)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentAbortActionRequest()) IPCPaymentAbortActionRequest;
    }
    (*(ptr_IPCPaymentAbortActionRequest())) = std::move(aRhs);
    mType = TIPCPaymentAbortActionRequest;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(const IPCPaymentCompleteActionRequest& aRhs) -> IPCPaymentActionRequest&
{
    if (MaybeDestroy(TIPCPaymentCompleteActionRequest)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentCompleteActionRequest()) IPCPaymentCompleteActionRequest;
    }
    (*(ptr_IPCPaymentCompleteActionRequest())) = aRhs;
    mType = TIPCPaymentCompleteActionRequest;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(IPCPaymentCompleteActionRequest&& aRhs) -> IPCPaymentActionRequest&
{
    if (MaybeDestroy(TIPCPaymentCompleteActionRequest)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentCompleteActionRequest()) IPCPaymentCompleteActionRequest;
    }
    (*(ptr_IPCPaymentCompleteActionRequest())) = std::move(aRhs);
    mType = TIPCPaymentCompleteActionRequest;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(const IPCPaymentUpdateActionRequest& aRhs) -> IPCPaymentActionRequest&
{
    if (MaybeDestroy(TIPCPaymentUpdateActionRequest)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentUpdateActionRequest()) IPCPaymentUpdateActionRequest;
    }
    (*(ptr_IPCPaymentUpdateActionRequest())) = aRhs;
    mType = TIPCPaymentUpdateActionRequest;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(IPCPaymentUpdateActionRequest&& aRhs) -> IPCPaymentActionRequest&
{
    if (MaybeDestroy(TIPCPaymentUpdateActionRequest)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentUpdateActionRequest()) IPCPaymentUpdateActionRequest;
    }
    (*(ptr_IPCPaymentUpdateActionRequest())) = std::move(aRhs);
    mType = TIPCPaymentUpdateActionRequest;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(const IPCPaymentCloseActionRequest& aRhs) -> IPCPaymentActionRequest&
{
    if (MaybeDestroy(TIPCPaymentCloseActionRequest)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentCloseActionRequest()) IPCPaymentCloseActionRequest;
    }
    (*(ptr_IPCPaymentCloseActionRequest())) = aRhs;
    mType = TIPCPaymentCloseActionRequest;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(IPCPaymentCloseActionRequest&& aRhs) -> IPCPaymentActionRequest&
{
    if (MaybeDestroy(TIPCPaymentCloseActionRequest)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentCloseActionRequest()) IPCPaymentCloseActionRequest;
    }
    (*(ptr_IPCPaymentCloseActionRequest())) = std::move(aRhs);
    mType = TIPCPaymentCloseActionRequest;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(const IPCPaymentRetryActionRequest& aRhs) -> IPCPaymentActionRequest&
{
    if (MaybeDestroy(TIPCPaymentRetryActionRequest)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentRetryActionRequest()) IPCPaymentRetryActionRequest;
    }
    (*(ptr_IPCPaymentRetryActionRequest())) = aRhs;
    mType = TIPCPaymentRetryActionRequest;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(IPCPaymentRetryActionRequest&& aRhs) -> IPCPaymentActionRequest&
{
    if (MaybeDestroy(TIPCPaymentRetryActionRequest)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentRetryActionRequest()) IPCPaymentRetryActionRequest;
    }
    (*(ptr_IPCPaymentRetryActionRequest())) = std::move(aRhs);
    mType = TIPCPaymentRetryActionRequest;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(const IPCPaymentActionRequest& aRhs) -> IPCPaymentActionRequest&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TIPCPaymentCreateActionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentCreateActionRequest()) IPCPaymentCreateActionRequest;
            }
            (*(ptr_IPCPaymentCreateActionRequest())) = (aRhs).get_IPCPaymentCreateActionRequest();
            break;
        }
    case TIPCPaymentCanMakeActionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentCanMakeActionRequest()) IPCPaymentCanMakeActionRequest;
            }
            (*(ptr_IPCPaymentCanMakeActionRequest())) = (aRhs).get_IPCPaymentCanMakeActionRequest();
            break;
        }
    case TIPCPaymentShowActionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentShowActionRequest()) IPCPaymentShowActionRequest;
            }
            (*(ptr_IPCPaymentShowActionRequest())) = (aRhs).get_IPCPaymentShowActionRequest();
            break;
        }
    case TIPCPaymentAbortActionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentAbortActionRequest()) IPCPaymentAbortActionRequest;
            }
            (*(ptr_IPCPaymentAbortActionRequest())) = (aRhs).get_IPCPaymentAbortActionRequest();
            break;
        }
    case TIPCPaymentCompleteActionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentCompleteActionRequest()) IPCPaymentCompleteActionRequest;
            }
            (*(ptr_IPCPaymentCompleteActionRequest())) = (aRhs).get_IPCPaymentCompleteActionRequest();
            break;
        }
    case TIPCPaymentUpdateActionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentUpdateActionRequest()) IPCPaymentUpdateActionRequest;
            }
            (*(ptr_IPCPaymentUpdateActionRequest())) = (aRhs).get_IPCPaymentUpdateActionRequest();
            break;
        }
    case TIPCPaymentCloseActionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentCloseActionRequest()) IPCPaymentCloseActionRequest;
            }
            (*(ptr_IPCPaymentCloseActionRequest())) = (aRhs).get_IPCPaymentCloseActionRequest();
            break;
        }
    case TIPCPaymentRetryActionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentRetryActionRequest()) IPCPaymentRetryActionRequest;
            }
            (*(ptr_IPCPaymentRetryActionRequest())) = (aRhs).get_IPCPaymentRetryActionRequest();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto IPCPaymentActionRequest::operator=(IPCPaymentActionRequest&& aRhs) -> IPCPaymentActionRequest&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TIPCPaymentCreateActionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentCreateActionRequest()) IPCPaymentCreateActionRequest;
            }
            (*(ptr_IPCPaymentCreateActionRequest())) = std::move((aRhs).get_IPCPaymentCreateActionRequest());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentCanMakeActionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentCanMakeActionRequest()) IPCPaymentCanMakeActionRequest;
            }
            (*(ptr_IPCPaymentCanMakeActionRequest())) = std::move((aRhs).get_IPCPaymentCanMakeActionRequest());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentShowActionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentShowActionRequest()) IPCPaymentShowActionRequest;
            }
            (*(ptr_IPCPaymentShowActionRequest())) = std::move((aRhs).get_IPCPaymentShowActionRequest());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentAbortActionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentAbortActionRequest()) IPCPaymentAbortActionRequest;
            }
            (*(ptr_IPCPaymentAbortActionRequest())) = std::move((aRhs).get_IPCPaymentAbortActionRequest());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentCompleteActionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentCompleteActionRequest()) IPCPaymentCompleteActionRequest;
            }
            (*(ptr_IPCPaymentCompleteActionRequest())) = std::move((aRhs).get_IPCPaymentCompleteActionRequest());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentUpdateActionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentUpdateActionRequest()) IPCPaymentUpdateActionRequest;
            }
            (*(ptr_IPCPaymentUpdateActionRequest())) = std::move((aRhs).get_IPCPaymentUpdateActionRequest());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentCloseActionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentCloseActionRequest()) IPCPaymentCloseActionRequest;
            }
            (*(ptr_IPCPaymentCloseActionRequest())) = std::move((aRhs).get_IPCPaymentCloseActionRequest());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentRetryActionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentRetryActionRequest()) IPCPaymentRetryActionRequest;
            }
            (*(ptr_IPCPaymentRetryActionRequest())) = std::move((aRhs).get_IPCPaymentRetryActionRequest());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentActionRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::IPCPaymentActionRequest union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'IPCPaymentActionRequest'
    (aMsg)->WriteSentinel(1725761794);

    switch (type) {
    case union__::TIPCPaymentCreateActionRequest:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCPaymentCreateActionRequest());
            // Sentinel = 'TIPCPaymentCreateActionRequest'
            (aMsg)->WriteSentinel(2905344938);
            return;
        }
    case union__::TIPCPaymentCanMakeActionRequest:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCPaymentCanMakeActionRequest());
            // Sentinel = 'TIPCPaymentCanMakeActionRequest'
            (aMsg)->WriteSentinel(3058306022);
            return;
        }
    case union__::TIPCPaymentShowActionRequest:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCPaymentShowActionRequest());
            // Sentinel = 'TIPCPaymentShowActionRequest'
            (aMsg)->WriteSentinel(2550139639);
            return;
        }
    case union__::TIPCPaymentAbortActionRequest:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCPaymentAbortActionRequest());
            // Sentinel = 'TIPCPaymentAbortActionRequest'
            (aMsg)->WriteSentinel(2719157070);
            return;
        }
    case union__::TIPCPaymentCompleteActionRequest:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCPaymentCompleteActionRequest());
            // Sentinel = 'TIPCPaymentCompleteActionRequest'
            (aMsg)->WriteSentinel(3341159567);
            return;
        }
    case union__::TIPCPaymentUpdateActionRequest:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCPaymentUpdateActionRequest());
            // Sentinel = 'TIPCPaymentUpdateActionRequest'
            (aMsg)->WriteSentinel(2924284857);
            return;
        }
    case union__::TIPCPaymentCloseActionRequest:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCPaymentCloseActionRequest());
            // Sentinel = 'TIPCPaymentCloseActionRequest'
            (aMsg)->WriteSentinel(2719877964);
            return;
        }
    case union__::TIPCPaymentRetryActionRequest:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCPaymentRetryActionRequest());
            // Sentinel = 'TIPCPaymentRetryActionRequest'
            (aMsg)->WriteSentinel(2752383852);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentActionRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::IPCPaymentActionRequest union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union IPCPaymentActionRequest");
        return false;
    }
    // Sentinel = 'IPCPaymentActionRequest'
    if ((!((aMsg)->ReadSentinel(aIter, 1725761794)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union IPCPaymentActionRequest");
        return false;
    }

    switch (type) {
    case union__::TIPCPaymentCreateActionRequest:
        {
            mozilla::dom::IPCPaymentCreateActionRequest tmp = mozilla::dom::IPCPaymentCreateActionRequest();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCPaymentCreateActionRequest())))))) {
                aActor->FatalError("Error deserializing variant TIPCPaymentCreateActionRequest of union IPCPaymentActionRequest");
                return false;
            }
            // Sentinel = 'TIPCPaymentCreateActionRequest'
            if ((!((aMsg)->ReadSentinel(aIter, 2905344938)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCPaymentCreateActionRequest of union IPCPaymentActionRequest");
                return false;
            }
            return true;
        }
    case union__::TIPCPaymentCanMakeActionRequest:
        {
            mozilla::dom::IPCPaymentCanMakeActionRequest tmp = mozilla::dom::IPCPaymentCanMakeActionRequest();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCPaymentCanMakeActionRequest())))))) {
                aActor->FatalError("Error deserializing variant TIPCPaymentCanMakeActionRequest of union IPCPaymentActionRequest");
                return false;
            }
            // Sentinel = 'TIPCPaymentCanMakeActionRequest'
            if ((!((aMsg)->ReadSentinel(aIter, 3058306022)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCPaymentCanMakeActionRequest of union IPCPaymentActionRequest");
                return false;
            }
            return true;
        }
    case union__::TIPCPaymentShowActionRequest:
        {
            mozilla::dom::IPCPaymentShowActionRequest tmp = mozilla::dom::IPCPaymentShowActionRequest();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCPaymentShowActionRequest())))))) {
                aActor->FatalError("Error deserializing variant TIPCPaymentShowActionRequest of union IPCPaymentActionRequest");
                return false;
            }
            // Sentinel = 'TIPCPaymentShowActionRequest'
            if ((!((aMsg)->ReadSentinel(aIter, 2550139639)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCPaymentShowActionRequest of union IPCPaymentActionRequest");
                return false;
            }
            return true;
        }
    case union__::TIPCPaymentAbortActionRequest:
        {
            mozilla::dom::IPCPaymentAbortActionRequest tmp = mozilla::dom::IPCPaymentAbortActionRequest();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCPaymentAbortActionRequest())))))) {
                aActor->FatalError("Error deserializing variant TIPCPaymentAbortActionRequest of union IPCPaymentActionRequest");
                return false;
            }
            // Sentinel = 'TIPCPaymentAbortActionRequest'
            if ((!((aMsg)->ReadSentinel(aIter, 2719157070)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCPaymentAbortActionRequest of union IPCPaymentActionRequest");
                return false;
            }
            return true;
        }
    case union__::TIPCPaymentCompleteActionRequest:
        {
            mozilla::dom::IPCPaymentCompleteActionRequest tmp = mozilla::dom::IPCPaymentCompleteActionRequest();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCPaymentCompleteActionRequest())))))) {
                aActor->FatalError("Error deserializing variant TIPCPaymentCompleteActionRequest of union IPCPaymentActionRequest");
                return false;
            }
            // Sentinel = 'TIPCPaymentCompleteActionRequest'
            if ((!((aMsg)->ReadSentinel(aIter, 3341159567)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCPaymentCompleteActionRequest of union IPCPaymentActionRequest");
                return false;
            }
            return true;
        }
    case union__::TIPCPaymentUpdateActionRequest:
        {
            mozilla::dom::IPCPaymentUpdateActionRequest tmp = mozilla::dom::IPCPaymentUpdateActionRequest();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCPaymentUpdateActionRequest())))))) {
                aActor->FatalError("Error deserializing variant TIPCPaymentUpdateActionRequest of union IPCPaymentActionRequest");
                return false;
            }
            // Sentinel = 'TIPCPaymentUpdateActionRequest'
            if ((!((aMsg)->ReadSentinel(aIter, 2924284857)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCPaymentUpdateActionRequest of union IPCPaymentActionRequest");
                return false;
            }
            return true;
        }
    case union__::TIPCPaymentCloseActionRequest:
        {
            mozilla::dom::IPCPaymentCloseActionRequest tmp = mozilla::dom::IPCPaymentCloseActionRequest();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCPaymentCloseActionRequest())))))) {
                aActor->FatalError("Error deserializing variant TIPCPaymentCloseActionRequest of union IPCPaymentActionRequest");
                return false;
            }
            // Sentinel = 'TIPCPaymentCloseActionRequest'
            if ((!((aMsg)->ReadSentinel(aIter, 2719877964)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCPaymentCloseActionRequest of union IPCPaymentActionRequest");
                return false;
            }
            return true;
        }
    case union__::TIPCPaymentRetryActionRequest:
        {
            mozilla::dom::IPCPaymentRetryActionRequest tmp = mozilla::dom::IPCPaymentRetryActionRequest();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCPaymentRetryActionRequest())))))) {
                aActor->FatalError("Error deserializing variant TIPCPaymentRetryActionRequest of union IPCPaymentActionRequest");
                return false;
            }
            // Sentinel = 'TIPCPaymentRetryActionRequest'
            if ((!((aMsg)->ReadSentinel(aIter, 2752383852)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCPaymentRetryActionRequest of union IPCPaymentActionRequest");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentCanMakeActionResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentCanMakeActionResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestId());
    // Sentinel = 'requestId'
    (aMsg)->WriteSentinel(320799671);
    WriteIPDLParam(aMsg, aActor, (aVar).result());
    // Sentinel = 'result'
    (aMsg)->WriteSentinel(153223840);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentCanMakeActionResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestId())))))) {
        aActor->FatalError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentCanMakeActionResponse'");
        return false;
    }
    // Sentinel = 'requestId'
    if ((!((aMsg)->ReadSentinel(aIter, 320799671)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentCanMakeActionResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->result())))))) {
        aActor->FatalError("Error deserializing 'result' (bool) member of 'IPCPaymentCanMakeActionResponse'");
        return false;
    }
    // Sentinel = 'result'
    if ((!((aMsg)->ReadSentinel(aIter, 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'result' (bool) member of 'IPCPaymentCanMakeActionResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentAddress|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentAddress>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).country());
    // Sentinel = 'country'
    (aMsg)->WriteSentinel(202375957);
    WriteIPDLParam(aMsg, aActor, (aVar).addressLine());
    // Sentinel = 'addressLine'
    (aMsg)->WriteSentinel(445777007);
    WriteIPDLParam(aMsg, aActor, (aVar).region());
    // Sentinel = 'region'
    (aMsg)->WriteSentinel(147718789);
    WriteIPDLParam(aMsg, aActor, (aVar).regionCode());
    // Sentinel = 'regionCode'
    (aMsg)->WriteSentinel(375915520);
    WriteIPDLParam(aMsg, aActor, (aVar).city());
    // Sentinel = 'city'
    (aMsg)->WriteSentinel(69992890);
    WriteIPDLParam(aMsg, aActor, (aVar).dependentLocality());
    // Sentinel = 'dependentLocality'
    (aMsg)->WriteSentinel(1040451321);
    WriteIPDLParam(aMsg, aActor, (aVar).postalCode());
    // Sentinel = 'postalCode'
    (aMsg)->WriteSentinel(385680399);
    WriteIPDLParam(aMsg, aActor, (aVar).sortingCode());
    // Sentinel = 'sortingCode'
    (aMsg)->WriteSentinel(468714626);
    WriteIPDLParam(aMsg, aActor, (aVar).organization());
    // Sentinel = 'organization'
    (aMsg)->WriteSentinel(553387286);
    WriteIPDLParam(aMsg, aActor, (aVar).recipient());
    // Sentinel = 'recipient'
    (aMsg)->WriteSentinel(313590724);
    WriteIPDLParam(aMsg, aActor, (aVar).phone());
    // Sentinel = 'phone'
    (aMsg)->WriteSentinel(107151899);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentAddress>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->country())))))) {
        aActor->FatalError("Error deserializing 'country' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    // Sentinel = 'country'
    if ((!((aMsg)->ReadSentinel(aIter, 202375957)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'country' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->addressLine())))))) {
        aActor->FatalError("Error deserializing 'addressLine' (nsString[]) member of 'IPCPaymentAddress'");
        return false;
    }
    // Sentinel = 'addressLine'
    if ((!((aMsg)->ReadSentinel(aIter, 445777007)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'addressLine' (nsString[]) member of 'IPCPaymentAddress'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->region())))))) {
        aActor->FatalError("Error deserializing 'region' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    // Sentinel = 'region'
    if ((!((aMsg)->ReadSentinel(aIter, 147718789)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'region' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->regionCode())))))) {
        aActor->FatalError("Error deserializing 'regionCode' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    // Sentinel = 'regionCode'
    if ((!((aMsg)->ReadSentinel(aIter, 375915520)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'regionCode' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->city())))))) {
        aActor->FatalError("Error deserializing 'city' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    // Sentinel = 'city'
    if ((!((aMsg)->ReadSentinel(aIter, 69992890)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'city' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->dependentLocality())))))) {
        aActor->FatalError("Error deserializing 'dependentLocality' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    // Sentinel = 'dependentLocality'
    if ((!((aMsg)->ReadSentinel(aIter, 1040451321)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'dependentLocality' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->postalCode())))))) {
        aActor->FatalError("Error deserializing 'postalCode' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    // Sentinel = 'postalCode'
    if ((!((aMsg)->ReadSentinel(aIter, 385680399)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'postalCode' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sortingCode())))))) {
        aActor->FatalError("Error deserializing 'sortingCode' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    // Sentinel = 'sortingCode'
    if ((!((aMsg)->ReadSentinel(aIter, 468714626)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sortingCode' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->organization())))))) {
        aActor->FatalError("Error deserializing 'organization' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    // Sentinel = 'organization'
    if ((!((aMsg)->ReadSentinel(aIter, 553387286)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'organization' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->recipient())))))) {
        aActor->FatalError("Error deserializing 'recipient' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    // Sentinel = 'recipient'
    if ((!((aMsg)->ReadSentinel(aIter, 313590724)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'recipient' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->phone())))))) {
        aActor->FatalError("Error deserializing 'phone' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    // Sentinel = 'phone'
    if ((!((aMsg)->ReadSentinel(aIter, 107151899)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'phone' (nsString) member of 'IPCPaymentAddress'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCGeneralResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCGeneralResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
}

auto IPDLParamTraits<mozilla::dom::IPCGeneralResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (nsString) member of 'IPCGeneralResponse'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (nsString) member of 'IPCGeneralResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCBasicCardResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCBasicCardResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).cardholderName());
    // Sentinel = 'cardholderName'
    (aMsg)->WriteSentinel(709756314);
    WriteIPDLParam(aMsg, aActor, (aVar).cardNumber());
    // Sentinel = 'cardNumber'
    (aMsg)->WriteSentinel(365954052);
    WriteIPDLParam(aMsg, aActor, (aVar).expiryMonth());
    // Sentinel = 'expiryMonth'
    (aMsg)->WriteSentinel(471139496);
    WriteIPDLParam(aMsg, aActor, (aVar).expiryYear());
    // Sentinel = 'expiryYear'
    (aMsg)->WriteSentinel(392365107);
    WriteIPDLParam(aMsg, aActor, (aVar).cardSecurityCode());
    // Sentinel = 'cardSecurityCode'
    (aMsg)->WriteSentinel(914294382);
    WriteIPDLParam(aMsg, aActor, (aVar).billingAddress());
    // Sentinel = 'billingAddress'
    (aMsg)->WriteSentinel(705037736);
}

auto IPDLParamTraits<mozilla::dom::IPCBasicCardResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cardholderName())))))) {
        aActor->FatalError("Error deserializing 'cardholderName' (nsString) member of 'IPCBasicCardResponse'");
        return false;
    }
    // Sentinel = 'cardholderName'
    if ((!((aMsg)->ReadSentinel(aIter, 709756314)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cardholderName' (nsString) member of 'IPCBasicCardResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cardNumber())))))) {
        aActor->FatalError("Error deserializing 'cardNumber' (nsString) member of 'IPCBasicCardResponse'");
        return false;
    }
    // Sentinel = 'cardNumber'
    if ((!((aMsg)->ReadSentinel(aIter, 365954052)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cardNumber' (nsString) member of 'IPCBasicCardResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->expiryMonth())))))) {
        aActor->FatalError("Error deserializing 'expiryMonth' (nsString) member of 'IPCBasicCardResponse'");
        return false;
    }
    // Sentinel = 'expiryMonth'
    if ((!((aMsg)->ReadSentinel(aIter, 471139496)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'expiryMonth' (nsString) member of 'IPCBasicCardResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->expiryYear())))))) {
        aActor->FatalError("Error deserializing 'expiryYear' (nsString) member of 'IPCBasicCardResponse'");
        return false;
    }
    // Sentinel = 'expiryYear'
    if ((!((aMsg)->ReadSentinel(aIter, 392365107)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'expiryYear' (nsString) member of 'IPCBasicCardResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cardSecurityCode())))))) {
        aActor->FatalError("Error deserializing 'cardSecurityCode' (nsString) member of 'IPCBasicCardResponse'");
        return false;
    }
    // Sentinel = 'cardSecurityCode'
    if ((!((aMsg)->ReadSentinel(aIter, 914294382)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cardSecurityCode' (nsString) member of 'IPCBasicCardResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->billingAddress())))))) {
        aActor->FatalError("Error deserializing 'billingAddress' (IPCPaymentAddress) member of 'IPCBasicCardResponse'");
        return false;
    }
    // Sentinel = 'billingAddress'
    if ((!((aMsg)->ReadSentinel(aIter, 705037736)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'billingAddress' (IPCPaymentAddress) member of 'IPCBasicCardResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union IPCPaymentResponseData|
//
namespace mozilla {
namespace dom {
auto IPCPaymentResponseData::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TIPCGeneralResponse:
        {
            (ptr_IPCGeneralResponse())->~IPCGeneralResponse__tdef();
            break;
        }
    case TIPCBasicCardResponse:
        {
            (ptr_IPCBasicCardResponse())->~IPCBasicCardResponse__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT IPCPaymentResponseData::IPCPaymentResponseData(const IPCGeneralResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCGeneralResponse()) IPCGeneralResponse(aOther);
    mType = TIPCGeneralResponse;
}

MOZ_IMPLICIT IPCPaymentResponseData::IPCPaymentResponseData(IPCGeneralResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCGeneralResponse()) IPCGeneralResponse(std::move(aOther));
    mType = TIPCGeneralResponse;
}

MOZ_IMPLICIT IPCPaymentResponseData::IPCPaymentResponseData(const IPCBasicCardResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCBasicCardResponse()) IPCBasicCardResponse(aOther);
    mType = TIPCBasicCardResponse;
}

MOZ_IMPLICIT IPCPaymentResponseData::IPCPaymentResponseData(IPCBasicCardResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCBasicCardResponse()) IPCBasicCardResponse(std::move(aOther));
    mType = TIPCBasicCardResponse;
}

MOZ_IMPLICIT IPCPaymentResponseData::IPCPaymentResponseData(const IPCPaymentResponseData& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TIPCGeneralResponse:
        {
            new (mozilla::KnownNotNull, ptr_IPCGeneralResponse()) IPCGeneralResponse((aOther).get_IPCGeneralResponse());
            break;
        }
    case TIPCBasicCardResponse:
        {
            new (mozilla::KnownNotNull, ptr_IPCBasicCardResponse()) IPCBasicCardResponse((aOther).get_IPCBasicCardResponse());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT IPCPaymentResponseData::IPCPaymentResponseData(IPCPaymentResponseData&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TIPCGeneralResponse:
        {
            new (mozilla::KnownNotNull, ptr_IPCGeneralResponse()) IPCGeneralResponse(std::move((aOther).get_IPCGeneralResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCBasicCardResponse:
        {
            new (mozilla::KnownNotNull, ptr_IPCBasicCardResponse()) IPCBasicCardResponse(std::move((aOther).get_IPCBasicCardResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

IPCPaymentResponseData::~IPCPaymentResponseData()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto IPCPaymentResponseData::operator=(const IPCGeneralResponse& aRhs) -> IPCPaymentResponseData&
{
    if (MaybeDestroy(TIPCGeneralResponse)) {
        new (mozilla::KnownNotNull, ptr_IPCGeneralResponse()) IPCGeneralResponse;
    }
    (*(ptr_IPCGeneralResponse())) = aRhs;
    mType = TIPCGeneralResponse;
    return (*(this));
}

auto IPCPaymentResponseData::operator=(IPCGeneralResponse&& aRhs) -> IPCPaymentResponseData&
{
    if (MaybeDestroy(TIPCGeneralResponse)) {
        new (mozilla::KnownNotNull, ptr_IPCGeneralResponse()) IPCGeneralResponse;
    }
    (*(ptr_IPCGeneralResponse())) = std::move(aRhs);
    mType = TIPCGeneralResponse;
    return (*(this));
}

auto IPCPaymentResponseData::operator=(const IPCBasicCardResponse& aRhs) -> IPCPaymentResponseData&
{
    if (MaybeDestroy(TIPCBasicCardResponse)) {
        new (mozilla::KnownNotNull, ptr_IPCBasicCardResponse()) IPCBasicCardResponse;
    }
    (*(ptr_IPCBasicCardResponse())) = aRhs;
    mType = TIPCBasicCardResponse;
    return (*(this));
}

auto IPCPaymentResponseData::operator=(IPCBasicCardResponse&& aRhs) -> IPCPaymentResponseData&
{
    if (MaybeDestroy(TIPCBasicCardResponse)) {
        new (mozilla::KnownNotNull, ptr_IPCBasicCardResponse()) IPCBasicCardResponse;
    }
    (*(ptr_IPCBasicCardResponse())) = std::move(aRhs);
    mType = TIPCBasicCardResponse;
    return (*(this));
}

auto IPCPaymentResponseData::operator=(const IPCPaymentResponseData& aRhs) -> IPCPaymentResponseData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TIPCGeneralResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCGeneralResponse()) IPCGeneralResponse;
            }
            (*(ptr_IPCGeneralResponse())) = (aRhs).get_IPCGeneralResponse();
            break;
        }
    case TIPCBasicCardResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCBasicCardResponse()) IPCBasicCardResponse;
            }
            (*(ptr_IPCBasicCardResponse())) = (aRhs).get_IPCBasicCardResponse();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto IPCPaymentResponseData::operator=(IPCPaymentResponseData&& aRhs) -> IPCPaymentResponseData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TIPCGeneralResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCGeneralResponse()) IPCGeneralResponse;
            }
            (*(ptr_IPCGeneralResponse())) = std::move((aRhs).get_IPCGeneralResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCBasicCardResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCBasicCardResponse()) IPCBasicCardResponse;
            }
            (*(ptr_IPCBasicCardResponse())) = std::move((aRhs).get_IPCBasicCardResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentResponseData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::IPCPaymentResponseData union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'IPCPaymentResponseData'
    (aMsg)->WriteSentinel(1590954116);

    switch (type) {
    case union__::TIPCGeneralResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCGeneralResponse());
            // Sentinel = 'TIPCGeneralResponse'
            (aMsg)->WriteSentinel(1140066110);
            return;
        }
    case union__::TIPCBasicCardResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCBasicCardResponse());
            // Sentinel = 'TIPCBasicCardResponse'
            (aMsg)->WriteSentinel(1360267228);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentResponseData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::IPCPaymentResponseData union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union IPCPaymentResponseData");
        return false;
    }
    // Sentinel = 'IPCPaymentResponseData'
    if ((!((aMsg)->ReadSentinel(aIter, 1590954116)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union IPCPaymentResponseData");
        return false;
    }

    switch (type) {
    case union__::TIPCGeneralResponse:
        {
            mozilla::dom::IPCGeneralResponse tmp = mozilla::dom::IPCGeneralResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCGeneralResponse())))))) {
                aActor->FatalError("Error deserializing variant TIPCGeneralResponse of union IPCPaymentResponseData");
                return false;
            }
            // Sentinel = 'TIPCGeneralResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1140066110)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCGeneralResponse of union IPCPaymentResponseData");
                return false;
            }
            return true;
        }
    case union__::TIPCBasicCardResponse:
        {
            mozilla::dom::IPCBasicCardResponse tmp = mozilla::dom::IPCBasicCardResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCBasicCardResponse())))))) {
                aActor->FatalError("Error deserializing variant TIPCBasicCardResponse of union IPCPaymentResponseData");
                return false;
            }
            // Sentinel = 'TIPCBasicCardResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1360267228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCBasicCardResponse of union IPCPaymentResponseData");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentShowActionResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentShowActionResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestId());
    // Sentinel = 'requestId'
    (aMsg)->WriteSentinel(320799671);
    WriteIPDLParam(aMsg, aActor, (aVar).methodName());
    // Sentinel = 'methodName'
    (aMsg)->WriteSentinel(377029635);
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
    WriteIPDLParam(aMsg, aActor, (aVar).payerName());
    // Sentinel = 'payerName'
    (aMsg)->WriteSentinel(310510499);
    WriteIPDLParam(aMsg, aActor, (aVar).payerEmail());
    // Sentinel = 'payerEmail'
    (aMsg)->WriteSentinel(376964106);
    WriteIPDLParam(aMsg, aActor, (aVar).payerPhone());
    // Sentinel = 'payerPhone'
    (aMsg)->WriteSentinel(382207004);
    (aMsg)->WriteBytes((&((aVar).status())), 4);
    // Sentinel = 'status'
    (aMsg)->WriteSentinel(154731173);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentShowActionResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestId())))))) {
        aActor->FatalError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentShowActionResponse'");
        return false;
    }
    // Sentinel = 'requestId'
    if ((!((aMsg)->ReadSentinel(aIter, 320799671)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentShowActionResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->methodName())))))) {
        aActor->FatalError("Error deserializing 'methodName' (nsString) member of 'IPCPaymentShowActionResponse'");
        return false;
    }
    // Sentinel = 'methodName'
    if ((!((aMsg)->ReadSentinel(aIter, 377029635)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'methodName' (nsString) member of 'IPCPaymentShowActionResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (IPCPaymentResponseData) member of 'IPCPaymentShowActionResponse'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (IPCPaymentResponseData) member of 'IPCPaymentShowActionResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->payerName())))))) {
        aActor->FatalError("Error deserializing 'payerName' (nsString) member of 'IPCPaymentShowActionResponse'");
        return false;
    }
    // Sentinel = 'payerName'
    if ((!((aMsg)->ReadSentinel(aIter, 310510499)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'payerName' (nsString) member of 'IPCPaymentShowActionResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->payerEmail())))))) {
        aActor->FatalError("Error deserializing 'payerEmail' (nsString) member of 'IPCPaymentShowActionResponse'");
        return false;
    }
    // Sentinel = 'payerEmail'
    if ((!((aMsg)->ReadSentinel(aIter, 376964106)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'payerEmail' (nsString) member of 'IPCPaymentShowActionResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->payerPhone())))))) {
        aActor->FatalError("Error deserializing 'payerPhone' (nsString) member of 'IPCPaymentShowActionResponse'");
        return false;
    }
    // Sentinel = 'payerPhone'
    if ((!((aMsg)->ReadSentinel(aIter, 382207004)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'payerPhone' (nsString) member of 'IPCPaymentShowActionResponse'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->status())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'status'
    if ((!((aMsg)->ReadSentinel(aIter, 154731173)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentAbortActionResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentAbortActionResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestId());
    // Sentinel = 'requestId'
    (aMsg)->WriteSentinel(320799671);
    WriteIPDLParam(aMsg, aActor, (aVar).isSucceeded());
    // Sentinel = 'isSucceeded'
    (aMsg)->WriteSentinel(445449314);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentAbortActionResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestId())))))) {
        aActor->FatalError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentAbortActionResponse'");
        return false;
    }
    // Sentinel = 'requestId'
    if ((!((aMsg)->ReadSentinel(aIter, 320799671)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentAbortActionResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isSucceeded())))))) {
        aActor->FatalError("Error deserializing 'isSucceeded' (bool) member of 'IPCPaymentAbortActionResponse'");
        return false;
    }
    // Sentinel = 'isSucceeded'
    if ((!((aMsg)->ReadSentinel(aIter, 445449314)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isSucceeded' (bool) member of 'IPCPaymentAbortActionResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCPaymentCompleteActionResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentCompleteActionResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestId());
    // Sentinel = 'requestId'
    (aMsg)->WriteSentinel(320799671);
    WriteIPDLParam(aMsg, aActor, (aVar).isCompleted());
    // Sentinel = 'isCompleted'
    (aMsg)->WriteSentinel(448005242);
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentCompleteActionResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestId())))))) {
        aActor->FatalError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentCompleteActionResponse'");
        return false;
    }
    // Sentinel = 'requestId'
    if ((!((aMsg)->ReadSentinel(aIter, 320799671)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestId' (nsString) member of 'IPCPaymentCompleteActionResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isCompleted())))))) {
        aActor->FatalError("Error deserializing 'isCompleted' (bool) member of 'IPCPaymentCompleteActionResponse'");
        return false;
    }
    // Sentinel = 'isCompleted'
    if ((!((aMsg)->ReadSentinel(aIter, 448005242)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isCompleted' (bool) member of 'IPCPaymentCompleteActionResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union IPCPaymentActionResponse|
//
namespace mozilla {
namespace dom {
auto IPCPaymentActionResponse::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TIPCPaymentCanMakeActionResponse:
        {
            (ptr_IPCPaymentCanMakeActionResponse())->~IPCPaymentCanMakeActionResponse__tdef();
            break;
        }
    case TIPCPaymentShowActionResponse:
        {
            (ptr_IPCPaymentShowActionResponse())->~IPCPaymentShowActionResponse__tdef();
            break;
        }
    case TIPCPaymentAbortActionResponse:
        {
            (ptr_IPCPaymentAbortActionResponse())->~IPCPaymentAbortActionResponse__tdef();
            break;
        }
    case TIPCPaymentCompleteActionResponse:
        {
            (ptr_IPCPaymentCompleteActionResponse())->~IPCPaymentCompleteActionResponse__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT IPCPaymentActionResponse::IPCPaymentActionResponse(const IPCPaymentCanMakeActionResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentCanMakeActionResponse()) IPCPaymentCanMakeActionResponse(aOther);
    mType = TIPCPaymentCanMakeActionResponse;
}

MOZ_IMPLICIT IPCPaymentActionResponse::IPCPaymentActionResponse(IPCPaymentCanMakeActionResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentCanMakeActionResponse()) IPCPaymentCanMakeActionResponse(std::move(aOther));
    mType = TIPCPaymentCanMakeActionResponse;
}

MOZ_IMPLICIT IPCPaymentActionResponse::IPCPaymentActionResponse(const IPCPaymentShowActionResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentShowActionResponse()) IPCPaymentShowActionResponse(aOther);
    mType = TIPCPaymentShowActionResponse;
}

MOZ_IMPLICIT IPCPaymentActionResponse::IPCPaymentActionResponse(IPCPaymentShowActionResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentShowActionResponse()) IPCPaymentShowActionResponse(std::move(aOther));
    mType = TIPCPaymentShowActionResponse;
}

MOZ_IMPLICIT IPCPaymentActionResponse::IPCPaymentActionResponse(const IPCPaymentAbortActionResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentAbortActionResponse()) IPCPaymentAbortActionResponse(aOther);
    mType = TIPCPaymentAbortActionResponse;
}

MOZ_IMPLICIT IPCPaymentActionResponse::IPCPaymentActionResponse(IPCPaymentAbortActionResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentAbortActionResponse()) IPCPaymentAbortActionResponse(std::move(aOther));
    mType = TIPCPaymentAbortActionResponse;
}

MOZ_IMPLICIT IPCPaymentActionResponse::IPCPaymentActionResponse(const IPCPaymentCompleteActionResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentCompleteActionResponse()) IPCPaymentCompleteActionResponse(aOther);
    mType = TIPCPaymentCompleteActionResponse;
}

MOZ_IMPLICIT IPCPaymentActionResponse::IPCPaymentActionResponse(IPCPaymentCompleteActionResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCPaymentCompleteActionResponse()) IPCPaymentCompleteActionResponse(std::move(aOther));
    mType = TIPCPaymentCompleteActionResponse;
}

MOZ_IMPLICIT IPCPaymentActionResponse::IPCPaymentActionResponse(const IPCPaymentActionResponse& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TIPCPaymentCanMakeActionResponse:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentCanMakeActionResponse()) IPCPaymentCanMakeActionResponse((aOther).get_IPCPaymentCanMakeActionResponse());
            break;
        }
    case TIPCPaymentShowActionResponse:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentShowActionResponse()) IPCPaymentShowActionResponse((aOther).get_IPCPaymentShowActionResponse());
            break;
        }
    case TIPCPaymentAbortActionResponse:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentAbortActionResponse()) IPCPaymentAbortActionResponse((aOther).get_IPCPaymentAbortActionResponse());
            break;
        }
    case TIPCPaymentCompleteActionResponse:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentCompleteActionResponse()) IPCPaymentCompleteActionResponse((aOther).get_IPCPaymentCompleteActionResponse());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT IPCPaymentActionResponse::IPCPaymentActionResponse(IPCPaymentActionResponse&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TIPCPaymentCanMakeActionResponse:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentCanMakeActionResponse()) IPCPaymentCanMakeActionResponse(std::move((aOther).get_IPCPaymentCanMakeActionResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentShowActionResponse:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentShowActionResponse()) IPCPaymentShowActionResponse(std::move((aOther).get_IPCPaymentShowActionResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentAbortActionResponse:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentAbortActionResponse()) IPCPaymentAbortActionResponse(std::move((aOther).get_IPCPaymentAbortActionResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentCompleteActionResponse:
        {
            new (mozilla::KnownNotNull, ptr_IPCPaymentCompleteActionResponse()) IPCPaymentCompleteActionResponse(std::move((aOther).get_IPCPaymentCompleteActionResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

IPCPaymentActionResponse::~IPCPaymentActionResponse()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto IPCPaymentActionResponse::operator=(const IPCPaymentCanMakeActionResponse& aRhs) -> IPCPaymentActionResponse&
{
    if (MaybeDestroy(TIPCPaymentCanMakeActionResponse)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentCanMakeActionResponse()) IPCPaymentCanMakeActionResponse;
    }
    (*(ptr_IPCPaymentCanMakeActionResponse())) = aRhs;
    mType = TIPCPaymentCanMakeActionResponse;
    return (*(this));
}

auto IPCPaymentActionResponse::operator=(IPCPaymentCanMakeActionResponse&& aRhs) -> IPCPaymentActionResponse&
{
    if (MaybeDestroy(TIPCPaymentCanMakeActionResponse)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentCanMakeActionResponse()) IPCPaymentCanMakeActionResponse;
    }
    (*(ptr_IPCPaymentCanMakeActionResponse())) = std::move(aRhs);
    mType = TIPCPaymentCanMakeActionResponse;
    return (*(this));
}

auto IPCPaymentActionResponse::operator=(const IPCPaymentShowActionResponse& aRhs) -> IPCPaymentActionResponse&
{
    if (MaybeDestroy(TIPCPaymentShowActionResponse)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentShowActionResponse()) IPCPaymentShowActionResponse;
    }
    (*(ptr_IPCPaymentShowActionResponse())) = aRhs;
    mType = TIPCPaymentShowActionResponse;
    return (*(this));
}

auto IPCPaymentActionResponse::operator=(IPCPaymentShowActionResponse&& aRhs) -> IPCPaymentActionResponse&
{
    if (MaybeDestroy(TIPCPaymentShowActionResponse)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentShowActionResponse()) IPCPaymentShowActionResponse;
    }
    (*(ptr_IPCPaymentShowActionResponse())) = std::move(aRhs);
    mType = TIPCPaymentShowActionResponse;
    return (*(this));
}

auto IPCPaymentActionResponse::operator=(const IPCPaymentAbortActionResponse& aRhs) -> IPCPaymentActionResponse&
{
    if (MaybeDestroy(TIPCPaymentAbortActionResponse)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentAbortActionResponse()) IPCPaymentAbortActionResponse;
    }
    (*(ptr_IPCPaymentAbortActionResponse())) = aRhs;
    mType = TIPCPaymentAbortActionResponse;
    return (*(this));
}

auto IPCPaymentActionResponse::operator=(IPCPaymentAbortActionResponse&& aRhs) -> IPCPaymentActionResponse&
{
    if (MaybeDestroy(TIPCPaymentAbortActionResponse)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentAbortActionResponse()) IPCPaymentAbortActionResponse;
    }
    (*(ptr_IPCPaymentAbortActionResponse())) = std::move(aRhs);
    mType = TIPCPaymentAbortActionResponse;
    return (*(this));
}

auto IPCPaymentActionResponse::operator=(const IPCPaymentCompleteActionResponse& aRhs) -> IPCPaymentActionResponse&
{
    if (MaybeDestroy(TIPCPaymentCompleteActionResponse)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentCompleteActionResponse()) IPCPaymentCompleteActionResponse;
    }
    (*(ptr_IPCPaymentCompleteActionResponse())) = aRhs;
    mType = TIPCPaymentCompleteActionResponse;
    return (*(this));
}

auto IPCPaymentActionResponse::operator=(IPCPaymentCompleteActionResponse&& aRhs) -> IPCPaymentActionResponse&
{
    if (MaybeDestroy(TIPCPaymentCompleteActionResponse)) {
        new (mozilla::KnownNotNull, ptr_IPCPaymentCompleteActionResponse()) IPCPaymentCompleteActionResponse;
    }
    (*(ptr_IPCPaymentCompleteActionResponse())) = std::move(aRhs);
    mType = TIPCPaymentCompleteActionResponse;
    return (*(this));
}

auto IPCPaymentActionResponse::operator=(const IPCPaymentActionResponse& aRhs) -> IPCPaymentActionResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TIPCPaymentCanMakeActionResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentCanMakeActionResponse()) IPCPaymentCanMakeActionResponse;
            }
            (*(ptr_IPCPaymentCanMakeActionResponse())) = (aRhs).get_IPCPaymentCanMakeActionResponse();
            break;
        }
    case TIPCPaymentShowActionResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentShowActionResponse()) IPCPaymentShowActionResponse;
            }
            (*(ptr_IPCPaymentShowActionResponse())) = (aRhs).get_IPCPaymentShowActionResponse();
            break;
        }
    case TIPCPaymentAbortActionResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentAbortActionResponse()) IPCPaymentAbortActionResponse;
            }
            (*(ptr_IPCPaymentAbortActionResponse())) = (aRhs).get_IPCPaymentAbortActionResponse();
            break;
        }
    case TIPCPaymentCompleteActionResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentCompleteActionResponse()) IPCPaymentCompleteActionResponse;
            }
            (*(ptr_IPCPaymentCompleteActionResponse())) = (aRhs).get_IPCPaymentCompleteActionResponse();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto IPCPaymentActionResponse::operator=(IPCPaymentActionResponse&& aRhs) -> IPCPaymentActionResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TIPCPaymentCanMakeActionResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentCanMakeActionResponse()) IPCPaymentCanMakeActionResponse;
            }
            (*(ptr_IPCPaymentCanMakeActionResponse())) = std::move((aRhs).get_IPCPaymentCanMakeActionResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentShowActionResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentShowActionResponse()) IPCPaymentShowActionResponse;
            }
            (*(ptr_IPCPaymentShowActionResponse())) = std::move((aRhs).get_IPCPaymentShowActionResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentAbortActionResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentAbortActionResponse()) IPCPaymentAbortActionResponse;
            }
            (*(ptr_IPCPaymentAbortActionResponse())) = std::move((aRhs).get_IPCPaymentAbortActionResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCPaymentCompleteActionResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCPaymentCompleteActionResponse()) IPCPaymentCompleteActionResponse;
            }
            (*(ptr_IPCPaymentCompleteActionResponse())) = std::move((aRhs).get_IPCPaymentCompleteActionResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCPaymentActionResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::IPCPaymentActionResponse union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'IPCPaymentActionResponse'
    (aMsg)->WriteSentinel(1884162408);

    switch (type) {
    case union__::TIPCPaymentCanMakeActionResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCPaymentCanMakeActionResponse());
            // Sentinel = 'TIPCPaymentCanMakeActionResponse'
            (aMsg)->WriteSentinel(3265203276);
            return;
        }
    case union__::TIPCPaymentShowActionResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCPaymentShowActionResponse());
            // Sentinel = 'TIPCPaymentShowActionResponse'
            (aMsg)->WriteSentinel(2741373789);
            return;
        }
    case union__::TIPCPaymentAbortActionResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCPaymentAbortActionResponse());
            // Sentinel = 'TIPCPaymentAbortActionResponse'
            (aMsg)->WriteSentinel(2916092852);
            return;
        }
    case union__::TIPCPaymentCompleteActionResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCPaymentCompleteActionResponse());
            // Sentinel = 'TIPCPaymentCompleteActionResponse'
            (aMsg)->WriteSentinel(3559132405);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::IPCPaymentActionResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::IPCPaymentActionResponse union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union IPCPaymentActionResponse");
        return false;
    }
    // Sentinel = 'IPCPaymentActionResponse'
    if ((!((aMsg)->ReadSentinel(aIter, 1884162408)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union IPCPaymentActionResponse");
        return false;
    }

    switch (type) {
    case union__::TIPCPaymentCanMakeActionResponse:
        {
            mozilla::dom::IPCPaymentCanMakeActionResponse tmp = mozilla::dom::IPCPaymentCanMakeActionResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCPaymentCanMakeActionResponse())))))) {
                aActor->FatalError("Error deserializing variant TIPCPaymentCanMakeActionResponse of union IPCPaymentActionResponse");
                return false;
            }
            // Sentinel = 'TIPCPaymentCanMakeActionResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 3265203276)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCPaymentCanMakeActionResponse of union IPCPaymentActionResponse");
                return false;
            }
            return true;
        }
    case union__::TIPCPaymentShowActionResponse:
        {
            mozilla::dom::IPCPaymentShowActionResponse tmp = mozilla::dom::IPCPaymentShowActionResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCPaymentShowActionResponse())))))) {
                aActor->FatalError("Error deserializing variant TIPCPaymentShowActionResponse of union IPCPaymentActionResponse");
                return false;
            }
            // Sentinel = 'TIPCPaymentShowActionResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 2741373789)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCPaymentShowActionResponse of union IPCPaymentActionResponse");
                return false;
            }
            return true;
        }
    case union__::TIPCPaymentAbortActionResponse:
        {
            mozilla::dom::IPCPaymentAbortActionResponse tmp = mozilla::dom::IPCPaymentAbortActionResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCPaymentAbortActionResponse())))))) {
                aActor->FatalError("Error deserializing variant TIPCPaymentAbortActionResponse of union IPCPaymentActionResponse");
                return false;
            }
            // Sentinel = 'TIPCPaymentAbortActionResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 2916092852)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCPaymentAbortActionResponse of union IPCPaymentActionResponse");
                return false;
            }
            return true;
        }
    case union__::TIPCPaymentCompleteActionResponse:
        {
            mozilla::dom::IPCPaymentCompleteActionResponse tmp = mozilla::dom::IPCPaymentCompleteActionResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCPaymentCompleteActionResponse())))))) {
                aActor->FatalError("Error deserializing variant TIPCPaymentCompleteActionResponse of union IPCPaymentActionResponse");
                return false;
            }
            // Sentinel = 'TIPCPaymentCompleteActionResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 3559132405)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCPaymentCompleteActionResponse of union IPCPaymentActionResponse");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCGeneralChangeDetails|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCGeneralChangeDetails>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).details());
    // Sentinel = 'details'
    (aMsg)->WriteSentinel(191824615);
}

auto IPDLParamTraits<mozilla::dom::IPCGeneralChangeDetails>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->details())))))) {
        aActor->FatalError("Error deserializing 'details' (nsString) member of 'IPCGeneralChangeDetails'");
        return false;
    }
    // Sentinel = 'details'
    if ((!((aMsg)->ReadSentinel(aIter, 191824615)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'details' (nsString) member of 'IPCGeneralChangeDetails'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCBasicCardChangeDetails|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCBasicCardChangeDetails>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).billingAddress());
    // Sentinel = 'billingAddress'
    (aMsg)->WriteSentinel(705037736);
}

auto IPDLParamTraits<mozilla::dom::IPCBasicCardChangeDetails>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->billingAddress())))))) {
        aActor->FatalError("Error deserializing 'billingAddress' (IPCPaymentAddress) member of 'IPCBasicCardChangeDetails'");
        return false;
    }
    // Sentinel = 'billingAddress'
    if ((!((aMsg)->ReadSentinel(aIter, 705037736)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'billingAddress' (IPCPaymentAddress) member of 'IPCBasicCardChangeDetails'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union IPCMethodChangeDetails|
//
namespace mozilla {
namespace dom {
auto IPCMethodChangeDetails::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TIPCGeneralChangeDetails:
        {
            (ptr_IPCGeneralChangeDetails())->~IPCGeneralChangeDetails__tdef();
            break;
        }
    case TIPCBasicCardChangeDetails:
        {
            (ptr_IPCBasicCardChangeDetails())->~IPCBasicCardChangeDetails__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT IPCMethodChangeDetails::IPCMethodChangeDetails(const IPCGeneralChangeDetails& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCGeneralChangeDetails()) IPCGeneralChangeDetails(aOther);
    mType = TIPCGeneralChangeDetails;
}

MOZ_IMPLICIT IPCMethodChangeDetails::IPCMethodChangeDetails(IPCGeneralChangeDetails&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCGeneralChangeDetails()) IPCGeneralChangeDetails(std::move(aOther));
    mType = TIPCGeneralChangeDetails;
}

MOZ_IMPLICIT IPCMethodChangeDetails::IPCMethodChangeDetails(const IPCBasicCardChangeDetails& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCBasicCardChangeDetails()) IPCBasicCardChangeDetails(aOther);
    mType = TIPCBasicCardChangeDetails;
}

MOZ_IMPLICIT IPCMethodChangeDetails::IPCMethodChangeDetails(IPCBasicCardChangeDetails&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCBasicCardChangeDetails()) IPCBasicCardChangeDetails(std::move(aOther));
    mType = TIPCBasicCardChangeDetails;
}

MOZ_IMPLICIT IPCMethodChangeDetails::IPCMethodChangeDetails(const IPCMethodChangeDetails& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TIPCGeneralChangeDetails:
        {
            new (mozilla::KnownNotNull, ptr_IPCGeneralChangeDetails()) IPCGeneralChangeDetails((aOther).get_IPCGeneralChangeDetails());
            break;
        }
    case TIPCBasicCardChangeDetails:
        {
            new (mozilla::KnownNotNull, ptr_IPCBasicCardChangeDetails()) IPCBasicCardChangeDetails((aOther).get_IPCBasicCardChangeDetails());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT IPCMethodChangeDetails::IPCMethodChangeDetails(IPCMethodChangeDetails&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TIPCGeneralChangeDetails:
        {
            new (mozilla::KnownNotNull, ptr_IPCGeneralChangeDetails()) IPCGeneralChangeDetails(std::move((aOther).get_IPCGeneralChangeDetails()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCBasicCardChangeDetails:
        {
            new (mozilla::KnownNotNull, ptr_IPCBasicCardChangeDetails()) IPCBasicCardChangeDetails(std::move((aOther).get_IPCBasicCardChangeDetails()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

IPCMethodChangeDetails::~IPCMethodChangeDetails()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto IPCMethodChangeDetails::operator=(const IPCGeneralChangeDetails& aRhs) -> IPCMethodChangeDetails&
{
    if (MaybeDestroy(TIPCGeneralChangeDetails)) {
        new (mozilla::KnownNotNull, ptr_IPCGeneralChangeDetails()) IPCGeneralChangeDetails;
    }
    (*(ptr_IPCGeneralChangeDetails())) = aRhs;
    mType = TIPCGeneralChangeDetails;
    return (*(this));
}

auto IPCMethodChangeDetails::operator=(IPCGeneralChangeDetails&& aRhs) -> IPCMethodChangeDetails&
{
    if (MaybeDestroy(TIPCGeneralChangeDetails)) {
        new (mozilla::KnownNotNull, ptr_IPCGeneralChangeDetails()) IPCGeneralChangeDetails;
    }
    (*(ptr_IPCGeneralChangeDetails())) = std::move(aRhs);
    mType = TIPCGeneralChangeDetails;
    return (*(this));
}

auto IPCMethodChangeDetails::operator=(const IPCBasicCardChangeDetails& aRhs) -> IPCMethodChangeDetails&
{
    if (MaybeDestroy(TIPCBasicCardChangeDetails)) {
        new (mozilla::KnownNotNull, ptr_IPCBasicCardChangeDetails()) IPCBasicCardChangeDetails;
    }
    (*(ptr_IPCBasicCardChangeDetails())) = aRhs;
    mType = TIPCBasicCardChangeDetails;
    return (*(this));
}

auto IPCMethodChangeDetails::operator=(IPCBasicCardChangeDetails&& aRhs) -> IPCMethodChangeDetails&
{
    if (MaybeDestroy(TIPCBasicCardChangeDetails)) {
        new (mozilla::KnownNotNull, ptr_IPCBasicCardChangeDetails()) IPCBasicCardChangeDetails;
    }
    (*(ptr_IPCBasicCardChangeDetails())) = std::move(aRhs);
    mType = TIPCBasicCardChangeDetails;
    return (*(this));
}

auto IPCMethodChangeDetails::operator=(const IPCMethodChangeDetails& aRhs) -> IPCMethodChangeDetails&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TIPCGeneralChangeDetails:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCGeneralChangeDetails()) IPCGeneralChangeDetails;
            }
            (*(ptr_IPCGeneralChangeDetails())) = (aRhs).get_IPCGeneralChangeDetails();
            break;
        }
    case TIPCBasicCardChangeDetails:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCBasicCardChangeDetails()) IPCBasicCardChangeDetails;
            }
            (*(ptr_IPCBasicCardChangeDetails())) = (aRhs).get_IPCBasicCardChangeDetails();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto IPCMethodChangeDetails::operator=(IPCMethodChangeDetails&& aRhs) -> IPCMethodChangeDetails&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TIPCGeneralChangeDetails:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCGeneralChangeDetails()) IPCGeneralChangeDetails;
            }
            (*(ptr_IPCGeneralChangeDetails())) = std::move((aRhs).get_IPCGeneralChangeDetails());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCBasicCardChangeDetails:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCBasicCardChangeDetails()) IPCBasicCardChangeDetails;
            }
            (*(ptr_IPCBasicCardChangeDetails())) = std::move((aRhs).get_IPCBasicCardChangeDetails());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCMethodChangeDetails>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::IPCMethodChangeDetails union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'IPCMethodChangeDetails'
    (aMsg)->WriteSentinel(1530071114);

    switch (type) {
    case union__::TIPCGeneralChangeDetails:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCGeneralChangeDetails());
            // Sentinel = 'TIPCGeneralChangeDetails'
            (aMsg)->WriteSentinel(1797654779);
            return;
        }
    case union__::TIPCBasicCardChangeDetails:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCBasicCardChangeDetails());
            // Sentinel = 'TIPCBasicCardChangeDetails'
            (aMsg)->WriteSentinel(2069629337);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::IPCMethodChangeDetails>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::IPCMethodChangeDetails union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union IPCMethodChangeDetails");
        return false;
    }
    // Sentinel = 'IPCMethodChangeDetails'
    if ((!((aMsg)->ReadSentinel(aIter, 1530071114)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union IPCMethodChangeDetails");
        return false;
    }

    switch (type) {
    case union__::TIPCGeneralChangeDetails:
        {
            mozilla::dom::IPCGeneralChangeDetails tmp = mozilla::dom::IPCGeneralChangeDetails();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCGeneralChangeDetails())))))) {
                aActor->FatalError("Error deserializing variant TIPCGeneralChangeDetails of union IPCMethodChangeDetails");
                return false;
            }
            // Sentinel = 'TIPCGeneralChangeDetails'
            if ((!((aMsg)->ReadSentinel(aIter, 1797654779)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCGeneralChangeDetails of union IPCMethodChangeDetails");
                return false;
            }
            return true;
        }
    case union__::TIPCBasicCardChangeDetails:
        {
            mozilla::dom::IPCBasicCardChangeDetails tmp = mozilla::dom::IPCBasicCardChangeDetails();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCBasicCardChangeDetails())))))) {
                aActor->FatalError("Error deserializing variant TIPCBasicCardChangeDetails of union IPCMethodChangeDetails");
                return false;
            }
            // Sentinel = 'TIPCBasicCardChangeDetails'
            if ((!((aMsg)->ReadSentinel(aIter, 2069629337)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCBasicCardChangeDetails of union IPCMethodChangeDetails");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
