//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "ipc/DataStorageIPCUtils.h"
#include "mozilla/psm/PSMIPCTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ByteArray|
//
namespace mozilla {
namespace psm {
} // namespace psm
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::psm::ByteArray>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
}

auto IPDLParamTraits<mozilla::psm::ByteArray>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (uint8_t[]) member of 'ByteArray'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (uint8_t[]) member of 'ByteArray'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DelegatedCredentialInfoArg|
//
namespace mozilla {
namespace psm {
auto DelegatedCredentialInfoArg::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(DelegatedCredentialInfoArg, authKeyBits_) - offsetof(DelegatedCredentialInfoArg, scheme_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace psm
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::psm::DelegatedCredentialInfoArg>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).scheme())), 8);
    // Sentinel = 'scheme | authKeyBits'
    (aMsg)->WriteSentinel(1328285599);
}

auto IPDLParamTraits<mozilla::psm::DelegatedCredentialInfoArg>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->scheme())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'scheme | authKeyBits'
    if ((!((aMsg)->ReadSentinel(aIter, 1328285599)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DataStorageItem|
//
namespace mozilla {
namespace psm {
} // namespace psm
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::psm::DataStorageItem>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
    WriteIPDLParam(aMsg, aActor, (aVar).value());
    // Sentinel = 'value'
    (aMsg)->WriteSentinel(107610654);
    WriteIPDLParam(aMsg, aActor, (aVar).type());
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
}

auto IPDLParamTraits<mozilla::psm::DataStorageItem>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (nsCString) member of 'DataStorageItem'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (nsCString) member of 'DataStorageItem'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->value())))))) {
        aActor->FatalError("Error deserializing 'value' (nsCString) member of 'DataStorageItem'");
        return false;
    }
    // Sentinel = 'value'
    if ((!((aMsg)->ReadSentinel(aIter, 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'value' (nsCString) member of 'DataStorageItem'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->type())))))) {
        aActor->FatalError("Error deserializing 'type' (DataStorageType) member of 'DataStorageItem'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'type' (DataStorageType) member of 'DataStorageItem'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DataStorageEntry|
//
namespace mozilla {
namespace psm {
} // namespace psm
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::psm::DataStorageEntry>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).items());
    // Sentinel = 'items'
    (aMsg)->WriteSentinel(106824227);
    WriteIPDLParam(aMsg, aActor, (aVar).filename());
    // Sentinel = 'filename'
    (aMsg)->WriteSentinel(246547266);
}

auto IPDLParamTraits<mozilla::psm::DataStorageEntry>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->items())))))) {
        aActor->FatalError("Error deserializing 'items' (DataStorageItem[]) member of 'DataStorageEntry'");
        return false;
    }
    // Sentinel = 'items'
    if ((!((aMsg)->ReadSentinel(aIter, 106824227)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'items' (DataStorageItem[]) member of 'DataStorageEntry'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->filename())))))) {
        aActor->FatalError("Error deserializing 'filename' (nsString) member of 'DataStorageEntry'");
        return false;
    }
    // Sentinel = 'filename'
    if ((!((aMsg)->ReadSentinel(aIter, 246547266)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'filename' (nsString) member of 'DataStorageEntry'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
