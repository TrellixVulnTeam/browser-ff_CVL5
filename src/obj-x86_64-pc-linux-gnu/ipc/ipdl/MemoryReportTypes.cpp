//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/MemoryReportTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct MemoryReport|
//
namespace mozilla {
namespace dom {
auto MemoryReport::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(MemoryReport, generation_) - offsetof(MemoryReport, kind_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::MemoryReport>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).process());
    // Sentinel = 'process'
    (aMsg)->WriteSentinel(201458432);
    WriteIPDLParam(aMsg, aActor, (aVar).path());
    // Sentinel = 'path'
    (aMsg)->WriteSentinel(70713774);
    WriteIPDLParam(aMsg, aActor, (aVar).desc());
    // Sentinel = 'desc'
    (aMsg)->WriteSentinel(67895712);
    (aMsg)->WriteBytes((&((aVar).amount())), 8);
    // Sentinel = 'amount'
    (aMsg)->WriteSentinel(148374165);
    (aMsg)->WriteBytes((&((aVar).kind())), 12);
    // Sentinel = 'kind | units | generation'
    (aMsg)->WriteSentinel(2017069438);
}

auto IPDLParamTraits<mozilla::dom::MemoryReport>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->process())))))) {
        aActor->FatalError("Error deserializing 'process' (nsCString) member of 'MemoryReport'");
        return false;
    }
    // Sentinel = 'process'
    if ((!((aMsg)->ReadSentinel(aIter, 201458432)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'process' (nsCString) member of 'MemoryReport'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->path())))))) {
        aActor->FatalError("Error deserializing 'path' (nsCString) member of 'MemoryReport'");
        return false;
    }
    // Sentinel = 'path'
    if ((!((aMsg)->ReadSentinel(aIter, 70713774)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'path' (nsCString) member of 'MemoryReport'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->desc())))))) {
        aActor->FatalError("Error deserializing 'desc' (nsCString) member of 'MemoryReport'");
        return false;
    }
    // Sentinel = 'desc'
    if ((!((aMsg)->ReadSentinel(aIter, 67895712)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'desc' (nsCString) member of 'MemoryReport'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->amount())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'amount'
    if ((!((aMsg)->ReadSentinel(aIter, 148374165)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->kind())), 12)))) {
        aActor->FatalError("Error bulk reading fields from int32_t");
        return false;
    }
    // Sentinel = 'kind | units | generation'
    if ((!((aMsg)->ReadSentinel(aIter, 2017069438)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
