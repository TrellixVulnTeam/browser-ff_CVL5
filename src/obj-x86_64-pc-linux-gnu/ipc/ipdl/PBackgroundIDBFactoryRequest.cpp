//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/PBackgroundIDBFactoryParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBFactoryChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBFactoryRequest.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBFactoryRequestParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBFactoryRequestChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace PBackgroundIDBFactoryRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBFactoryRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBFactoryRequestChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PermissionChallenge(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PermissionChallenge__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Blocked(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Blocked__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PermissionRetry(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PermissionRetry__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}

} // namespace PBackgroundIDBFactoryRequest
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpenDatabaseRequestResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::OpenDatabaseRequestResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).databaseParent(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).databaseParent());
        // Sentinel = 'database'
        (aMsg)->WriteSentinel(241304374);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).databaseChild(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).databaseChild());
        // Sentinel = 'database'
        (aMsg)->WriteSentinel(241304374);
    }
}

auto IPDLParamTraits<mozilla::dom::indexedDB::OpenDatabaseRequestResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->databaseParent())))))) {
            aActor->FatalError("Error deserializing 'databaseParent' (PBackgroundIDBDatabase) member of 'OpenDatabaseRequestResponse'");
            return false;
        }
        if ((!((*((&((aVar)->databaseParent()))))))) {
            aActor->FatalError("Error deserializing 'databaseParent' (PBackgroundIDBDatabase) member of 'OpenDatabaseRequestResponse'");
            return false;
        }
        // Sentinel = 'database'
        if ((!((aMsg)->ReadSentinel(aIter, 241304374)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'databaseParent' (PBackgroundIDBDatabase) member of 'OpenDatabaseRequestResponse'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->databaseChild())))))) {
            aActor->FatalError("Error deserializing 'databaseChild' (PBackgroundIDBDatabase) member of 'OpenDatabaseRequestResponse'");
            return false;
        }
        if ((!((*((&((aVar)->databaseChild()))))))) {
            aActor->FatalError("Error deserializing 'databaseChild' (PBackgroundIDBDatabase) member of 'OpenDatabaseRequestResponse'");
            return false;
        }
        // Sentinel = 'database'
        if ((!((aMsg)->ReadSentinel(aIter, 241304374)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'databaseChild' (PBackgroundIDBDatabase) member of 'OpenDatabaseRequestResponse'");
            return false;
        }
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DeleteDatabaseRequestResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::DeleteDatabaseRequestResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).previousVersion())), 8);
    // Sentinel = 'previousVersion'
    (aMsg)->WriteSentinel(861341284);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::DeleteDatabaseRequestResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->previousVersion())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'previousVersion'
    if ((!((aMsg)->ReadSentinel(aIter, 861341284)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union FactoryRequestResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
auto FactoryRequestResponse::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tnsresult:
        {
            (ptr_nsresult())->~nsresult__tdef();
            break;
        }
    case TOpenDatabaseRequestResponse:
        {
            (ptr_OpenDatabaseRequestResponse())->~OpenDatabaseRequestResponse__tdef();
            break;
        }
    case TDeleteDatabaseRequestResponse:
        {
            (ptr_DeleteDatabaseRequestResponse())->~DeleteDatabaseRequestResponse__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT FactoryRequestResponse::FactoryRequestResponse(const nsresult& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(aOther);
    mType = Tnsresult;
}

MOZ_IMPLICIT FactoryRequestResponse::FactoryRequestResponse(nsresult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move(aOther));
    mType = Tnsresult;
}

MOZ_IMPLICIT FactoryRequestResponse::FactoryRequestResponse(const OpenDatabaseRequestResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpenDatabaseRequestResponse()) OpenDatabaseRequestResponse(aOther);
    mType = TOpenDatabaseRequestResponse;
}

MOZ_IMPLICIT FactoryRequestResponse::FactoryRequestResponse(OpenDatabaseRequestResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpenDatabaseRequestResponse()) OpenDatabaseRequestResponse(std::move(aOther));
    mType = TOpenDatabaseRequestResponse;
}

MOZ_IMPLICIT FactoryRequestResponse::FactoryRequestResponse(const DeleteDatabaseRequestResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_DeleteDatabaseRequestResponse()) DeleteDatabaseRequestResponse(aOther);
    mType = TDeleteDatabaseRequestResponse;
}

MOZ_IMPLICIT FactoryRequestResponse::FactoryRequestResponse(DeleteDatabaseRequestResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_DeleteDatabaseRequestResponse()) DeleteDatabaseRequestResponse(std::move(aOther));
    mType = TDeleteDatabaseRequestResponse;
}

MOZ_IMPLICIT FactoryRequestResponse::FactoryRequestResponse(const FactoryRequestResponse& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult((aOther).get_nsresult());
            break;
        }
    case TOpenDatabaseRequestResponse:
        {
            new (mozilla::KnownNotNull, ptr_OpenDatabaseRequestResponse()) OpenDatabaseRequestResponse((aOther).get_OpenDatabaseRequestResponse());
            break;
        }
    case TDeleteDatabaseRequestResponse:
        {
            new (mozilla::KnownNotNull, ptr_DeleteDatabaseRequestResponse()) DeleteDatabaseRequestResponse((aOther).get_DeleteDatabaseRequestResponse());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT FactoryRequestResponse::FactoryRequestResponse(FactoryRequestResponse&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move((aOther).get_nsresult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpenDatabaseRequestResponse:
        {
            new (mozilla::KnownNotNull, ptr_OpenDatabaseRequestResponse()) OpenDatabaseRequestResponse(std::move((aOther).get_OpenDatabaseRequestResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TDeleteDatabaseRequestResponse:
        {
            new (mozilla::KnownNotNull, ptr_DeleteDatabaseRequestResponse()) DeleteDatabaseRequestResponse(std::move((aOther).get_DeleteDatabaseRequestResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

FactoryRequestResponse::~FactoryRequestResponse()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto FactoryRequestResponse::operator=(const nsresult& aRhs) -> FactoryRequestResponse&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = aRhs;
    mType = Tnsresult;
    return (*(this));
}

auto FactoryRequestResponse::operator=(nsresult&& aRhs) -> FactoryRequestResponse&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = std::move(aRhs);
    mType = Tnsresult;
    return (*(this));
}

auto FactoryRequestResponse::operator=(const OpenDatabaseRequestResponse& aRhs) -> FactoryRequestResponse&
{
    if (MaybeDestroy(TOpenDatabaseRequestResponse)) {
        new (mozilla::KnownNotNull, ptr_OpenDatabaseRequestResponse()) OpenDatabaseRequestResponse;
    }
    (*(ptr_OpenDatabaseRequestResponse())) = aRhs;
    mType = TOpenDatabaseRequestResponse;
    return (*(this));
}

auto FactoryRequestResponse::operator=(OpenDatabaseRequestResponse&& aRhs) -> FactoryRequestResponse&
{
    if (MaybeDestroy(TOpenDatabaseRequestResponse)) {
        new (mozilla::KnownNotNull, ptr_OpenDatabaseRequestResponse()) OpenDatabaseRequestResponse;
    }
    (*(ptr_OpenDatabaseRequestResponse())) = std::move(aRhs);
    mType = TOpenDatabaseRequestResponse;
    return (*(this));
}

auto FactoryRequestResponse::operator=(const DeleteDatabaseRequestResponse& aRhs) -> FactoryRequestResponse&
{
    if (MaybeDestroy(TDeleteDatabaseRequestResponse)) {
        new (mozilla::KnownNotNull, ptr_DeleteDatabaseRequestResponse()) DeleteDatabaseRequestResponse;
    }
    (*(ptr_DeleteDatabaseRequestResponse())) = aRhs;
    mType = TDeleteDatabaseRequestResponse;
    return (*(this));
}

auto FactoryRequestResponse::operator=(DeleteDatabaseRequestResponse&& aRhs) -> FactoryRequestResponse&
{
    if (MaybeDestroy(TDeleteDatabaseRequestResponse)) {
        new (mozilla::KnownNotNull, ptr_DeleteDatabaseRequestResponse()) DeleteDatabaseRequestResponse;
    }
    (*(ptr_DeleteDatabaseRequestResponse())) = std::move(aRhs);
    mType = TDeleteDatabaseRequestResponse;
    return (*(this));
}

auto FactoryRequestResponse::operator=(const FactoryRequestResponse& aRhs) -> FactoryRequestResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = (aRhs).get_nsresult();
            break;
        }
    case TOpenDatabaseRequestResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpenDatabaseRequestResponse()) OpenDatabaseRequestResponse;
            }
            (*(ptr_OpenDatabaseRequestResponse())) = (aRhs).get_OpenDatabaseRequestResponse();
            break;
        }
    case TDeleteDatabaseRequestResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_DeleteDatabaseRequestResponse()) DeleteDatabaseRequestResponse;
            }
            (*(ptr_DeleteDatabaseRequestResponse())) = (aRhs).get_DeleteDatabaseRequestResponse();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto FactoryRequestResponse::operator=(FactoryRequestResponse&& aRhs) -> FactoryRequestResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = std::move((aRhs).get_nsresult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpenDatabaseRequestResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpenDatabaseRequestResponse()) OpenDatabaseRequestResponse;
            }
            (*(ptr_OpenDatabaseRequestResponse())) = std::move((aRhs).get_OpenDatabaseRequestResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TDeleteDatabaseRequestResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_DeleteDatabaseRequestResponse()) DeleteDatabaseRequestResponse;
            }
            (*(ptr_DeleteDatabaseRequestResponse())) = std::move((aRhs).get_DeleteDatabaseRequestResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::FactoryRequestResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::indexedDB::FactoryRequestResponse union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'FactoryRequestResponse'
    (aMsg)->WriteSentinel(1716717841);

    switch (type) {
    case union__::Tnsresult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsresult());
            // Sentinel = 'Tnsresult'
            (aMsg)->WriteSentinel(313394133);
            return;
        }
    case union__::TOpenDatabaseRequestResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpenDatabaseRequestResponse());
            // Sentinel = 'TOpenDatabaseRequestResponse'
            (aMsg)->WriteSentinel(2646543156);
            return;
        }
    case union__::TDeleteDatabaseRequestResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_DeleteDatabaseRequestResponse());
            // Sentinel = 'TDeleteDatabaseRequestResponse'
            (aMsg)->WriteSentinel(3015248885);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::indexedDB::FactoryRequestResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::indexedDB::FactoryRequestResponse union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union FactoryRequestResponse");
        return false;
    }
    // Sentinel = 'FactoryRequestResponse'
    if ((!((aMsg)->ReadSentinel(aIter, 1716717841)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union FactoryRequestResponse");
        return false;
    }

    switch (type) {
    case union__::Tnsresult:
        {
            nsresult tmp = nsresult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsresult())))))) {
                aActor->FatalError("Error deserializing variant Tnsresult of union FactoryRequestResponse");
                return false;
            }
            // Sentinel = 'Tnsresult'
            if ((!((aMsg)->ReadSentinel(aIter, 313394133)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnsresult of union FactoryRequestResponse");
                return false;
            }
            return true;
        }
    case union__::TOpenDatabaseRequestResponse:
        {
            mozilla::dom::indexedDB::OpenDatabaseRequestResponse tmp = mozilla::dom::indexedDB::OpenDatabaseRequestResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpenDatabaseRequestResponse())))))) {
                aActor->FatalError("Error deserializing variant TOpenDatabaseRequestResponse of union FactoryRequestResponse");
                return false;
            }
            // Sentinel = 'TOpenDatabaseRequestResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 2646543156)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpenDatabaseRequestResponse of union FactoryRequestResponse");
                return false;
            }
            return true;
        }
    case union__::TDeleteDatabaseRequestResponse:
        {
            mozilla::dom::indexedDB::DeleteDatabaseRequestResponse tmp = mozilla::dom::indexedDB::DeleteDatabaseRequestResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_DeleteDatabaseRequestResponse())))))) {
                aActor->FatalError("Error deserializing variant TDeleteDatabaseRequestResponse of union FactoryRequestResponse");
                return false;
            }
            // Sentinel = 'TDeleteDatabaseRequestResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 3015248885)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TDeleteDatabaseRequestResponse of union FactoryRequestResponse");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
