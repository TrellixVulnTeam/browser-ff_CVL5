//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/embedding/PPrintingChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"

#include "mozilla/dom/PContentChild.h"
#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/embedding/PPrintProgressDialogChild.h"
#include "mozilla/embedding/PPrintSettingsDialogChild.h"
#include "mozilla/layout/PRemotePrintJobChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace embedding {


auto PPrintingChild::RecvPRemotePrintJobConstructor(PRemotePrintJobChild* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PPrintingChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PPrintingChild::PPrintingChild() :
    mozilla::ipc::IProtocol(PPrintingMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PPrintingChild);
}

PPrintingChild::~PPrintingChild()
{
    MOZ_COUNT_DTOR(PPrintingChild);
}

auto PPrintingChild::Manager() const -> PContentChild*
{
    return static_cast<PContentChild*>(IProtocol::Manager());
}

auto PPrintingChild::ManagedPPrintProgressDialogChild(nsTArray<PPrintProgressDialogChild*>& aArr) const -> void
{
    mManagedPPrintProgressDialogChild.ToArray(aArr);
}

auto PPrintingChild::ManagedPPrintProgressDialogChild() const -> const ManagedContainer<PPrintProgressDialogChild>&
{
    return mManagedPPrintProgressDialogChild;
}

auto PPrintingChild::ManagedPPrintSettingsDialogChild(nsTArray<PPrintSettingsDialogChild*>& aArr) const -> void
{
    mManagedPPrintSettingsDialogChild.ToArray(aArr);
}

auto PPrintingChild::ManagedPPrintSettingsDialogChild() const -> const ManagedContainer<PPrintSettingsDialogChild>&
{
    return mManagedPPrintSettingsDialogChild;
}

auto PPrintingChild::ManagedPRemotePrintJobChild(nsTArray<PRemotePrintJobChild*>& aArr) const -> void
{
    mManagedPRemotePrintJobChild.ToArray(aArr);
}

auto PPrintingChild::ManagedPRemotePrintJobChild() const -> const ManagedContainer<PRemotePrintJobChild>&
{
    return mManagedPRemotePrintJobChild;
}

auto PPrintingChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPPrintProgressDialogChild.Count();
    total += mManagedPPrintSettingsDialogChild.Count();
    total += mManagedPRemotePrintJobChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPPrintProgressDialogChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPPrintSettingsDialogChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPRemotePrintJobChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PPrintingChild::OpenPPrintProgressDialogEndpoint(PPrintProgressDialogChild* aActor) -> ManagedEndpoint<PPrintProgressDialogParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPrintProgressDialogChild actor");
        return ManagedEndpoint<PPrintProgressDialogParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPrintProgressDialogChild.PutEntry(aActor);

    return ManagedEndpoint<PPrintProgressDialogParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPrintingChild::BindPPrintProgressDialogEndpoint(
        ManagedEndpoint<PPrintProgressDialogChild> aEndpoint,
        PPrintProgressDialogChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPrintProgressDialogChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPrintProgressDialogChild.PutEntry(aActor);

    return true;
}

auto PPrintingChild::OpenPPrintSettingsDialogEndpoint(PPrintSettingsDialogChild* aActor) -> ManagedEndpoint<PPrintSettingsDialogParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPrintSettingsDialogChild actor");
        return ManagedEndpoint<PPrintSettingsDialogParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPrintSettingsDialogChild.PutEntry(aActor);

    return ManagedEndpoint<PPrintSettingsDialogParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPrintingChild::BindPPrintSettingsDialogEndpoint(
        ManagedEndpoint<PPrintSettingsDialogChild> aEndpoint,
        PPrintSettingsDialogChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPrintSettingsDialogChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPrintSettingsDialogChild.PutEntry(aActor);

    return true;
}

auto PPrintingChild::OpenPRemotePrintJobEndpoint(PRemotePrintJobChild* aActor) -> ManagedEndpoint<PRemotePrintJobParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PRemotePrintJobChild actor");
        return ManagedEndpoint<PRemotePrintJobParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPRemotePrintJobChild.PutEntry(aActor);

    return ManagedEndpoint<PRemotePrintJobParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPrintingChild::BindPRemotePrintJobEndpoint(
        ManagedEndpoint<PRemotePrintJobChild> aEndpoint,
        PRemotePrintJobChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PRemotePrintJobChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPRemotePrintJobChild.PutEntry(aActor);

    return true;
}

auto PPrintingChild::SendShowProgress(
        PBrowserChild* browser,
        PPrintProgressDialogChild* printProgressDialog,
        PRemotePrintJobChild* remotePrintJob,
        const bool& isForPrinting) -> bool
{
    IPC::Message* msg__ = PPrinting::Msg_ShowProgress(Id());

    MOZ_RELEASE_ASSERT(browser, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, browser);
    // Sentinel = 'browser'
    (msg__)->WriteSentinel(201130757);
    MOZ_RELEASE_ASSERT(printProgressDialog, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, printProgressDialog);
    // Sentinel = 'printProgressDialog'
    (msg__)->WriteSentinel(1330055123);
    WriteIPDLParam(msg__, this, remotePrintJob);
    // Sentinel = 'remotePrintJob'
    (msg__)->WriteSentinel(730400181);
    WriteIPDLParam(msg__, this, isForPrinting);
    // Sentinel = 'isForPrinting'
    (msg__)->WriteSentinel(614991183);




    if (mozilla::ipc::LoggingEnabledFor("PPrintingChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPrintingChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPrinting::Msg_ShowProgress", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPrintingChild::SendShowPrintDialog(
        PPrintSettingsDialogChild* dialog,
        PBrowserChild* browser,
        const PrintData& settings) -> bool
{
    IPC::Message* msg__ = PPrinting::Msg_ShowPrintDialog(Id());

    MOZ_RELEASE_ASSERT(dialog, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, dialog);
    // Sentinel = 'dialog'
    (msg__)->WriteSentinel(142082673);
    WriteIPDLParam(msg__, this, browser);
    // Sentinel = 'browser'
    (msg__)->WriteSentinel(201130757);
    WriteIPDLParam(msg__, this, settings);
    // Sentinel = 'settings'
    (msg__)->WriteSentinel(260965234);




    if (mozilla::ipc::LoggingEnabledFor("PPrintingChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPrintingChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPrinting::Msg_ShowPrintDialog", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPrintingChild::SendPPrintProgressDialogConstructor() -> PPrintProgressDialogChild*
{
    PPrintProgressDialogChild* actor = (this)->AllocPPrintProgressDialogChild();
    return SendPPrintProgressDialogConstructor(actor);
}

auto PPrintingChild::SendPPrintProgressDialogConstructor(PPrintProgressDialogChild* actor) -> PPrintProgressDialogChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PPrintProgressDialogChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPPrintProgressDialogChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PPrinting::Msg_PPrintProgressDialogConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PPrintingChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPrintingChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPrinting::Msg_PPrintProgressDialogConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PPrintProgressDialogChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PPrintProgressDialogMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PPrintingChild::SendPPrintSettingsDialogConstructor() -> PPrintSettingsDialogChild*
{
    PPrintSettingsDialogChild* actor = (this)->AllocPPrintSettingsDialogChild();
    return SendPPrintSettingsDialogConstructor(actor);
}

auto PPrintingChild::SendPPrintSettingsDialogConstructor(PPrintSettingsDialogChild* actor) -> PPrintSettingsDialogChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PPrintSettingsDialogChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPPrintSettingsDialogChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PPrinting::Msg_PPrintSettingsDialogConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PPrintingChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPrintingChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPrinting::Msg_PPrintSettingsDialogConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PPrintSettingsDialogChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PPrintSettingsDialogMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PPrintingChild::SendSavePrintSettings(
        const PrintData& settings,
        const bool& usePrinterNamePrefix,
        const uint32_t& flags,
        nsresult* rv) -> bool
{
    IPC::Message* msg__ = PPrinting::Msg_SavePrintSettings(Id());

    WriteIPDLParam(msg__, this, settings);
    // Sentinel = 'settings'
    (msg__)->WriteSentinel(260965234);
    WriteIPDLParam(msg__, this, usePrinterNamePrefix);
    // Sentinel = 'usePrinterNamePrefix'
    (msg__)->WriteSentinel(1439041569);
    WriteIPDLParam(msg__, this, flags);
    // Sentinel = 'flags'
    (msg__)->WriteSentinel(102171150);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPrintingChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPrintingChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPrinting::Msg_SavePrintSettings", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPrinting::Msg_SavePrintSettings", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPrintingChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPrintingChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, rv)))) {
        FatalError("Error deserializing 'nsresult'");
        return false;
    }
    // Sentinel = 'rv'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 22806761)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPrintingChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PPrintProgressDialogMsgStart:
{
            PPrintProgressDialogChild* actor = static_cast<PPrintProgressDialogChild*>(aListener);
            auto& container = mManagedPPrintProgressDialogChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PPrintSettingsDialogMsgStart:
{
            PPrintSettingsDialogChild* actor = static_cast<PPrintSettingsDialogChild*>(aListener);
            auto& container = mManagedPPrintSettingsDialogChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PRemotePrintJobMsgStart:
{
            PRemotePrintJobChild* actor = static_cast<PRemotePrintJobChild*>(aListener);
            auto& container = mManagedPRemotePrintJobChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PPrintingChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PPrintProgressDialogMsgStart:
        this->DeallocPPrintProgressDialogChild(static_cast<PPrintProgressDialogChild*>(aListener));
        return;
    case PPrintSettingsDialogMsgStart:
        this->DeallocPPrintSettingsDialogChild(static_cast<PPrintSettingsDialogChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PPrintingChild::OnMessageReceived(const Message& msg__) -> PPrintingChild::Result
{
    switch (msg__.type()) {
    case PPrinting::Reply_PPrintProgressDialogConstructor__ID:
        {
            return MsgProcessed;
        }
    case PPrinting::Reply_PPrintSettingsDialogConstructor__ID:
        {
            return MsgProcessed;
        }
    case PPrinting::Msg_PRemotePrintJobConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPrintingChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPrintingChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPrinting::Msg_PRemotePrintJobConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            RefPtr<PRemotePrintJobChild> actor = (this)->AllocPRemotePrintJobChild();
            if (!actor) {
                NS_WARNING("Cannot bind null PRemotePrintJobChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPRemotePrintJobChild.PutEntry(actor);

            if ((!((this)->RecvPRemotePrintJobConstructor(actor)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPrinting::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPrintingChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPrintingChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPrinting::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PPrintingChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PPrinting'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PPrinting'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PPrinting'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PPrintingMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPrintingChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PPrintingChild::Result
{
    return MsgNotKnown;
}

auto PPrintingChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PPrintingChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PPrintingChild::ClearSubtree() -> void
{
    for (auto it = mManagedPPrintProgressDialogChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPrintProgressDialogChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPrintProgressDialogChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPrintProgressDialogChild.Clear();

    for (auto it = mManagedPPrintSettingsDialogChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPrintSettingsDialogChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPrintSettingsDialogChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPrintSettingsDialogChild.Clear();

    for (auto it = mManagedPRemotePrintJobChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPRemotePrintJobChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPRemotePrintJobChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPRemotePrintJobChild.Clear();

}



} // namespace embedding
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::embedding::PPrintingChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::embedding::PPrintingChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PPrinting", PPrintingMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::embedding::PPrintingChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
