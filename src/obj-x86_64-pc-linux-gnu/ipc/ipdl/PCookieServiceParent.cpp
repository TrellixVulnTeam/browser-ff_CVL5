//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PCookieServiceParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ipc/URIUtils.h"
#include "mozilla/net/CookieServiceParent.h"

#include "mozilla/net/PNeckoParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


auto PCookieServiceParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PCookieServiceParent::PCookieServiceParent() :
    mozilla::ipc::IProtocol(PCookieServiceMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PCookieServiceParent);
}

PCookieServiceParent::~PCookieServiceParent()
{
    MOZ_COUNT_DTOR(PCookieServiceParent);
}

auto PCookieServiceParent::Manager() const -> PNeckoParent*
{
    return static_cast<PNeckoParent*>(IProtocol::Manager());
}

auto PCookieServiceParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PCookieServiceParent::SendTrackCookiesLoad(
        const nsTArray<CookieStruct>& cookiesList,
        const OriginAttributes& attrs) -> bool
{
    IPC::Message* msg__ = PCookieService::Msg_TrackCookiesLoad(Id());

    WriteIPDLParam(msg__, this, cookiesList);
    // Sentinel = 'cookiesList'
    (msg__)->WriteSentinel(455214218);
    WriteIPDLParam(msg__, this, attrs);
    // Sentinel = 'attrs'
    (msg__)->WriteSentinel(107807279);




    if (mozilla::ipc::LoggingEnabledFor("PCookieServiceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCookieServiceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCookieService::Msg_TrackCookiesLoad", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCookieServiceParent::SendRemoveCookie(
        const CookieStruct& cookie,
        const OriginAttributes& attrs) -> bool
{
    IPC::Message* msg__ = PCookieService::Msg_RemoveCookie(Id());

    WriteIPDLParam(msg__, this, cookie);
    // Sentinel = 'cookie'
    (msg__)->WriteSentinel(146211451);
    WriteIPDLParam(msg__, this, attrs);
    // Sentinel = 'attrs'
    (msg__)->WriteSentinel(107807279);




    if (mozilla::ipc::LoggingEnabledFor("PCookieServiceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCookieServiceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCookieService::Msg_RemoveCookie", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCookieServiceParent::SendRemoveBatchDeletedCookies(
        const nsTArray<CookieStruct>& cookiesList,
        const nsTArray<OriginAttributes>& attrsList) -> bool
{
    IPC::Message* msg__ = PCookieService::Msg_RemoveBatchDeletedCookies(Id());

    WriteIPDLParam(msg__, this, cookiesList);
    // Sentinel = 'cookiesList'
    (msg__)->WriteSentinel(455214218);
    WriteIPDLParam(msg__, this, attrsList);
    // Sentinel = 'attrsList'
    (msg__)->WriteSentinel(317588427);




    if (mozilla::ipc::LoggingEnabledFor("PCookieServiceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCookieServiceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCookieService::Msg_RemoveBatchDeletedCookies", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCookieServiceParent::SendRemoveAll() -> bool
{
    IPC::Message* msg__ = PCookieService::Msg_RemoveAll(Id());





    if (mozilla::ipc::LoggingEnabledFor("PCookieServiceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCookieServiceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCookieService::Msg_RemoveAll", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCookieServiceParent::SendAddCookie(
        const CookieStruct& cookie,
        const OriginAttributes& attrs) -> bool
{
    IPC::Message* msg__ = PCookieService::Msg_AddCookie(Id());

    WriteIPDLParam(msg__, this, cookie);
    // Sentinel = 'cookie'
    (msg__)->WriteSentinel(146211451);
    WriteIPDLParam(msg__, this, attrs);
    // Sentinel = 'attrs'
    (msg__)->WriteSentinel(107807279);




    if (mozilla::ipc::LoggingEnabledFor("PCookieServiceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCookieServiceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCookieService::Msg_AddCookie", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCookieServiceParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PCookieServiceParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PCookieServiceParent::OnMessageReceived(const Message& msg__) -> PCookieServiceParent::Result
{
    switch (msg__.type()) {
    case PCookieService::Msg_SetCookies__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCookieServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCookieServiceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCookieService::Msg_SetCookies", OTHER);

            PickleIterator iter__{msg__};
            nsCString baseDomain{};
            OriginAttributes attrs{};
            RefPtr<nsIURI> host{};
            bool fromHttp{};
            nsTArray<CookieStruct> cookies{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(baseDomain)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'baseDomain'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 360449012)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(attrs)))))) {
                FatalError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            // Sentinel = 'attrs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107807279)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(host)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'host'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 72024511)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(fromHttp)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'fromHttp'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 249889621)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(cookies)))))) {
                FatalError("Error deserializing 'CookieStruct[]'");
                return MsgValueError;
            }
            // Sentinel = 'cookies'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 195363566)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CookieStruct[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<CookieServiceParent*>(this))->RecvSetCookies(std::move(baseDomain), std::move(attrs), host, std::move(fromHttp), std::move(cookies))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCookieService::Msg_PrepareCookieList__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCookieServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCookieServiceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCookieService::Msg_PrepareCookieList", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsIURI> host{};
            bool isForeign{};
            bool isThirdPartyTrackingResource{};
            bool isThirdPartySocialTrackingResource{};
            bool firstPartyStorageAccessPermissionGranted{};
            uint32_t rejectedReason{};
            bool isSafeTopLevelNav{};
            bool isSameSiteForeign{};
            OriginAttributes attrs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(host)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'host'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 72024511)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isForeign)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'isForeign'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 303760295)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isThirdPartyTrackingResource)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'isThirdPartyTrackingResource'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2753301347)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isThirdPartySocialTrackingResource)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'isThirdPartySocialTrackingResource'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 4014869950)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(firstPartyStorageAccessPermissionGranted)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'firstPartyStorageAccessPermissionGranted'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1328746574)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(rejectedReason)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'rejectedReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 714999215)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isSafeTopLevelNav)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'isSafeTopLevelNav'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1004734124)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isSameSiteForeign)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'isSameSiteForeign'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1012532930)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(attrs)))))) {
                FatalError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            // Sentinel = 'attrs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107807279)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<CookieServiceParent*>(this))->RecvPrepareCookieList(host, std::move(isForeign), std::move(isThirdPartyTrackingResource), std::move(isThirdPartySocialTrackingResource), std::move(firstPartyStorageAccessPermissionGranted), std::move(rejectedReason), std::move(isSafeTopLevelNav), std::move(isSameSiteForeign), std::move(attrs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCookieService::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCookieServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCookieServiceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCookieService::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PCookieServiceParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PCookieService'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PCookieService'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PCookieService'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<CookieServiceParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PCookieServiceMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PCookieServiceParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PCookieServiceParent::Result
{
    return MsgNotKnown;
}

auto PCookieServiceParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PCookieServiceParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PCookieServiceParent::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PCookieServiceParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PCookieServiceParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PCookieService", PCookieServiceMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PCookieServiceParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
