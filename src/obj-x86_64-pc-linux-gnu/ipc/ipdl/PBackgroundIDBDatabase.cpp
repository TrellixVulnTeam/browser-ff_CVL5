//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/SerializationHelpers.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseFileParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseFileChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseRequestParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseRequestChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBFactoryParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBFactoryChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBTransactionParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBTransactionChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBVersionChangeTransactionParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBVersionChangeTransactionChild.h"
#include "mozilla/dom/PBackgroundMutableFileParent.h"
#include "mozilla/dom/PBackgroundMutableFileChild.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabase.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace PBackgroundIDBDatabase {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBDatabaseParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBDatabaseChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_DeleteMe(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DeleteMe__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Blocked(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Blocked__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Close(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Close__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PBackgroundIDBDatabaseFileConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PBackgroundIDBDatabaseFileConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PBackgroundIDBDatabaseFileConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PBackgroundIDBDatabaseFileConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PBackgroundIDBDatabaseRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PBackgroundIDBDatabaseRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PBackgroundIDBDatabaseRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PBackgroundIDBDatabaseRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PBackgroundIDBTransactionConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PBackgroundIDBTransactionConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PBackgroundIDBTransactionConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PBackgroundIDBTransactionConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_VersionChange(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_VersionChange__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Invalidate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Invalidate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CloseAfterInvalidationComplete(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CloseAfterInvalidationComplete__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PBackgroundIDBVersionChangeTransactionConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PBackgroundIDBVersionChangeTransactionConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PBackgroundIDBVersionChangeTransactionConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PBackgroundIDBVersionChangeTransactionConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PBackgroundMutableFileConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PBackgroundMutableFileConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PBackgroundMutableFileConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PBackgroundMutableFileConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}

} // namespace PBackgroundIDBDatabase
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CreateFileParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::CreateFileParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).type());
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::CreateFileParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsString) member of 'CreateFileParams'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsString) member of 'CreateFileParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->type())))))) {
        aActor->FatalError("Error deserializing 'type' (nsString) member of 'CreateFileParams'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'type' (nsString) member of 'CreateFileParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union DatabaseRequestParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
auto DatabaseRequestParams::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TCreateFileParams:
        {
            (ptr_CreateFileParams())->~CreateFileParams__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT DatabaseRequestParams::DatabaseRequestParams(const CreateFileParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_CreateFileParams()) CreateFileParams(aOther);
    mType = TCreateFileParams;
}

MOZ_IMPLICIT DatabaseRequestParams::DatabaseRequestParams(CreateFileParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CreateFileParams()) CreateFileParams(std::move(aOther));
    mType = TCreateFileParams;
}

MOZ_IMPLICIT DatabaseRequestParams::DatabaseRequestParams(const DatabaseRequestParams& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TCreateFileParams:
        {
            new (mozilla::KnownNotNull, ptr_CreateFileParams()) CreateFileParams((aOther).get_CreateFileParams());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT DatabaseRequestParams::DatabaseRequestParams(DatabaseRequestParams&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TCreateFileParams:
        {
            new (mozilla::KnownNotNull, ptr_CreateFileParams()) CreateFileParams(std::move((aOther).get_CreateFileParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

DatabaseRequestParams::~DatabaseRequestParams()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto DatabaseRequestParams::operator=(const CreateFileParams& aRhs) -> DatabaseRequestParams&
{
    if (MaybeDestroy(TCreateFileParams)) {
        new (mozilla::KnownNotNull, ptr_CreateFileParams()) CreateFileParams;
    }
    (*(ptr_CreateFileParams())) = aRhs;
    mType = TCreateFileParams;
    return (*(this));
}

auto DatabaseRequestParams::operator=(CreateFileParams&& aRhs) -> DatabaseRequestParams&
{
    if (MaybeDestroy(TCreateFileParams)) {
        new (mozilla::KnownNotNull, ptr_CreateFileParams()) CreateFileParams;
    }
    (*(ptr_CreateFileParams())) = std::move(aRhs);
    mType = TCreateFileParams;
    return (*(this));
}

auto DatabaseRequestParams::operator=(const DatabaseRequestParams& aRhs) -> DatabaseRequestParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TCreateFileParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CreateFileParams()) CreateFileParams;
            }
            (*(ptr_CreateFileParams())) = (aRhs).get_CreateFileParams();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto DatabaseRequestParams::operator=(DatabaseRequestParams&& aRhs) -> DatabaseRequestParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TCreateFileParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CreateFileParams()) CreateFileParams;
            }
            (*(ptr_CreateFileParams())) = std::move((aRhs).get_CreateFileParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::DatabaseRequestParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::indexedDB::DatabaseRequestParams union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'DatabaseRequestParams'
    (aMsg)->WriteSentinel(1512114275);

    switch (type) {
    case union__::TCreateFileParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CreateFileParams());
            // Sentinel = 'TCreateFileParams'
            (aMsg)->WriteSentinel(961152653);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::indexedDB::DatabaseRequestParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::indexedDB::DatabaseRequestParams union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union DatabaseRequestParams");
        return false;
    }
    // Sentinel = 'DatabaseRequestParams'
    if ((!((aMsg)->ReadSentinel(aIter, 1512114275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union DatabaseRequestParams");
        return false;
    }

    switch (type) {
    case union__::TCreateFileParams:
        {
            mozilla::dom::indexedDB::CreateFileParams tmp = mozilla::dom::indexedDB::CreateFileParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CreateFileParams())))))) {
                aActor->FatalError("Error deserializing variant TCreateFileParams of union DatabaseRequestParams");
                return false;
            }
            // Sentinel = 'TCreateFileParams'
            if ((!((aMsg)->ReadSentinel(aIter, 961152653)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCreateFileParams of union DatabaseRequestParams");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
