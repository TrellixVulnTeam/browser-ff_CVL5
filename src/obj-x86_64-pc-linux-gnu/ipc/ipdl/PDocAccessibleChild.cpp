//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/a11y/PDocAccessibleChild.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/a11y/PDocAccessiblePlatformExtChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace a11y {


auto PDocAccessibleChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PDocAccessibleChild::PDocAccessibleChild() :
    mozilla::ipc::IProtocol(PDocAccessibleMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PDocAccessibleChild);
}

PDocAccessibleChild::~PDocAccessibleChild()
{
    MOZ_COUNT_DTOR(PDocAccessibleChild);
}

auto PDocAccessibleChild::Manager() const -> PBrowserChild*
{
    return static_cast<PBrowserChild*>(IProtocol::Manager());
}

auto PDocAccessibleChild::ManagedPDocAccessiblePlatformExtChild(nsTArray<PDocAccessiblePlatformExtChild*>& aArr) const -> void
{
    mManagedPDocAccessiblePlatformExtChild.ToArray(aArr);
}

auto PDocAccessibleChild::ManagedPDocAccessiblePlatformExtChild() const -> const ManagedContainer<PDocAccessiblePlatformExtChild>&
{
    return mManagedPDocAccessiblePlatformExtChild;
}

auto PDocAccessibleChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPDocAccessiblePlatformExtChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPDocAccessiblePlatformExtChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PDocAccessibleChild::OpenPDocAccessiblePlatformExtEndpoint(PDocAccessiblePlatformExtChild* aActor) -> ManagedEndpoint<PDocAccessiblePlatformExtParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PDocAccessiblePlatformExtChild actor");
        return ManagedEndpoint<PDocAccessiblePlatformExtParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPDocAccessiblePlatformExtChild.PutEntry(aActor);

    return ManagedEndpoint<PDocAccessiblePlatformExtParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PDocAccessibleChild::BindPDocAccessiblePlatformExtEndpoint(
        ManagedEndpoint<PDocAccessiblePlatformExtChild> aEndpoint,
        PDocAccessiblePlatformExtChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PDocAccessiblePlatformExtChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPDocAccessiblePlatformExtChild.PutEntry(aActor);

    return true;
}

auto PDocAccessibleChild::SendPDocAccessiblePlatformExtConstructor() -> PDocAccessiblePlatformExtChild*
{
    PDocAccessiblePlatformExtChild* actor = (this)->AllocPDocAccessiblePlatformExtChild();
    return SendPDocAccessiblePlatformExtConstructor(actor);
}

auto PDocAccessibleChild::SendPDocAccessiblePlatformExtConstructor(PDocAccessiblePlatformExtChild* actor) -> PDocAccessiblePlatformExtChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PDocAccessiblePlatformExtChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPDocAccessiblePlatformExtChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PDocAccessible::Msg_PDocAccessiblePlatformExtConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_PDocAccessiblePlatformExtConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PDocAccessiblePlatformExtChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PDocAccessiblePlatformExtMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PDocAccessibleChild::SendShutdown() -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_Shutdown(Id());





    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_Shutdown", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleChild::SendEvent(
        const uint64_t& aID,
        const uint32_t& type) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_Event(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, type);
    // Sentinel = 'type'
    (msg__)->WriteSentinel(75760067);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_Event", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleChild::SendShowEvent(
        const ShowEventData& data,
        const bool& aFromuser) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ShowEvent(Id());

    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);
    WriteIPDLParam(msg__, this, aFromuser);
    // Sentinel = 'aFromuser'
    (msg__)->WriteSentinel(300155829);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ShowEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleChild::SendHideEvent(
        const uint64_t& aRootID,
        const bool& aFromUser) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_HideEvent(Id());

    WriteIPDLParam(msg__, this, aRootID);
    // Sentinel = 'aRootID'
    (msg__)->WriteSentinel(179503763);
    WriteIPDLParam(msg__, this, aFromUser);
    // Sentinel = 'aFromUser'
    (msg__)->WriteSentinel(291767189);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_HideEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleChild::SendStateChangeEvent(
        const uint64_t& aID,
        const uint64_t& aState,
        const bool& aEnabled) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_StateChangeEvent(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aState);
    // Sentinel = 'aState'
    (msg__)->WriteSentinel(137036387);
    WriteIPDLParam(msg__, this, aEnabled);
    // Sentinel = 'aEnabled'
    (msg__)->WriteSentinel(224789261);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_StateChangeEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleChild::SendCaretMoveEvent(
        const uint64_t& aID,
        const int32_t& aOffset,
        const bool& aIsSelectionCollapsed) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_CaretMoveEvent(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aOffset);
    // Sentinel = 'aOffset'
    (msg__)->WriteSentinel(179634889);
    WriteIPDLParam(msg__, this, aIsSelectionCollapsed);
    // Sentinel = 'aIsSelectionCollapsed'
    (msg__)->WriteSentinel(1514342491);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_CaretMoveEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleChild::SendTextChangeEvent(
        const uint64_t& aID,
        const nsString& aStr,
        const int32_t& aStart,
        const uint32_t& aLen,
        const bool& aIsInsert,
        const bool& aFromUser) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TextChangeEvent(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aStr);
    // Sentinel = 'aStr'
    (msg__)->WriteSentinel(64684443);
    WriteIPDLParam(msg__, this, aStart);
    // Sentinel = 'aStart'
    (msg__)->WriteSentinel(137757296);
    WriteIPDLParam(msg__, this, aLen);
    // Sentinel = 'aLen'
    (msg__)->WriteSentinel(61079937);
    WriteIPDLParam(msg__, this, aIsInsert);
    // Sentinel = 'aIsInsert'
    (msg__)->WriteSentinel(286131091);
    WriteIPDLParam(msg__, this, aFromUser);
    // Sentinel = 'aFromUser'
    (msg__)->WriteSentinel(291767189);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TextChangeEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleChild::SendSelectionEvent(
        const uint64_t& aID,
        const uint64_t& aWidgetID,
        const uint32_t& aType) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_SelectionEvent(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aWidgetID);
    // Sentinel = 'aWidgetID'
    (msg__)->WriteSentinel(287966035);
    WriteIPDLParam(msg__, this, aType);
    // Sentinel = 'aType'
    (msg__)->WriteSentinel(99222020);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_SelectionEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleChild::SendRoleChangedEvent(const role& aRole) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_RoleChangedEvent(Id());

    WriteIPDLParam(msg__, this, aRole);
    // Sentinel = 'aRole'
    (msg__)->WriteSentinel(96207348);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_RoleChangedEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleChild::SendVirtualCursorChangeEvent(
        const uint64_t& aID,
        const uint64_t& aOldPosition,
        const int32_t& aOldStartOffset,
        const int32_t& aOldEndOffset,
        const uint64_t& aPosition,
        const int32_t& aStartOffset,
        const int32_t& aEndOffset,
        const int16_t& aReason,
        const int16_t& aBoundaryType,
        const bool& aFromUservcEvent) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_VirtualCursorChangeEvent(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aOldPosition);
    // Sentinel = 'aOldPosition'
    (msg__)->WriteSentinel(509084886);
    WriteIPDLParam(msg__, this, aOldStartOffset);
    // Sentinel = 'aOldStartOffset'
    (msg__)->WriteSentinel(780207606);
    WriteIPDLParam(msg__, this, aOldEndOffset);
    // Sentinel = 'aOldEndOffset'
    (msg__)->WriteSentinel(567936255);
    WriteIPDLParam(msg__, this, aPosition);
    // Sentinel = 'aPosition'
    (msg__)->WriteSentinel(303104951);
    WriteIPDLParam(msg__, this, aStartOffset);
    // Sentinel = 'aStartOffset'
    (msg__)->WriteSentinel(517801175);
    WriteIPDLParam(msg__, this, aEndOffset);
    // Sentinel = 'aEndOffset'
    (msg__)->WriteSentinel(343147488);
    WriteIPDLParam(msg__, this, aReason);
    // Sentinel = 'aReason'
    (msg__)->WriteSentinel(180093642);
    WriteIPDLParam(msg__, this, aBoundaryType);
    // Sentinel = 'aBoundaryType'
    (msg__)->WriteSentinel(605488456);
    WriteIPDLParam(msg__, this, aFromUservcEvent);
    // Sentinel = 'aFromUservcEvent'
    (msg__)->WriteSentinel(900925040);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_VirtualCursorChangeEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleChild::SendScrollingEvent(
        const uint64_t& aID,
        const uint64_t& aType,
        const uint32_t& aScrollX,
        const uint32_t& aScrollY,
        const uint32_t& aMaxScrollX,
        const uint32_t& aMaxScrollY) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ScrollingEvent(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aType);
    // Sentinel = 'aType'
    (msg__)->WriteSentinel(99222020);
    WriteIPDLParam(msg__, this, aScrollX);
    // Sentinel = 'aScrollX'
    (msg__)->WriteSentinel(235995945);
    WriteIPDLParam(msg__, this, aScrollY);
    // Sentinel = 'aScrollY'
    (msg__)->WriteSentinel(236061482);
    WriteIPDLParam(msg__, this, aMaxScrollX);
    // Sentinel = 'aMaxScrollX'
    (msg__)->WriteSentinel(425854031);
    WriteIPDLParam(msg__, this, aMaxScrollY);
    // Sentinel = 'aMaxScrollY'
    (msg__)->WriteSentinel(425919568);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ScrollingEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleChild::SendAnnouncementEvent(
        const uint64_t& aID,
        const nsString& aAnnouncement,
        const uint16_t& aPriority) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_AnnouncementEvent(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aAnnouncement);
    // Sentinel = 'aAnnouncement'
    (msg__)->WriteSentinel(605750605);
    WriteIPDLParam(msg__, this, aPriority);
    // Sentinel = 'aPriority'
    (msg__)->WriteSentinel(303367108);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_AnnouncementEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleChild::SendTextSelectionChangeEvent(
        const uint64_t& aID,
        const nsTArray<TextRangeData>& aSelection) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TextSelectionChangeEvent(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aSelection);
    // Sentinel = 'aSelection'
    (msg__)->WriteSentinel(360645640);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TextSelectionChangeEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleChild::SendBindChildDoc(
        PDocAccessibleChild* aChildDoc,
        const uint64_t& aID) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_BindChildDoc(Id());

    MOZ_RELEASE_ASSERT(aChildDoc, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, aChildDoc);
    // Sentinel = 'aChildDoc'
    (msg__)->WriteSentinel(277939036);
    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_BindChildDoc", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleChild::SendBatch(
        const uint64_t& aBatchType,
        const nsTArray<BatchData>& aData) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_Batch(Id());

    WriteIPDLParam(msg__, this, aBatchType);
    // Sentinel = 'aBatchType'
    (msg__)->WriteSentinel(347341798);
    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_Batch", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PDocAccessiblePlatformExtMsgStart:
{
            PDocAccessiblePlatformExtChild* actor = static_cast<PDocAccessiblePlatformExtChild*>(aListener);
            auto& container = mManagedPDocAccessiblePlatformExtChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PDocAccessibleChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PDocAccessiblePlatformExtMsgStart:
        this->DeallocPDocAccessiblePlatformExtChild(static_cast<PDocAccessiblePlatformExtChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PDocAccessibleChild::OnMessageReceived(const Message& msg__) -> PDocAccessibleChild::Result
{
    switch (msg__.type()) {
    case PDocAccessible::Reply_PDocAccessiblePlatformExtConstructor__ID:
        {
            return MsgProcessed;
        }
    case PDocAccessible::Msg_ConstructedInParentProcess__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ConstructedInParentProcess", OTHER);

            if ((!((this)->RecvConstructedInParentProcess()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PDocAccessibleChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PDocAccessible'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PDocAccessible'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PDocAccessible'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PDocAccessibleMsgStart, actor);

            return MsgProcessed;
        }
    case PDocAccessible::Msg_RestoreFocus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_RestoreFocus", OTHER);

            if ((!((this)->RecvRestoreFocus()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_ScrollTo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ScrollTo", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aScrollType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScrollType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aScrollType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 439092339)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvScrollTo(std::move(aID), std::move(aScrollType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_ScrollToPoint__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ScrollToPoint", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aScrollType{};
            int32_t aX{};
            int32_t aY{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScrollType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aScrollType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 439092339)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aX)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aX'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18612410)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aY)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aY'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18677947)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvScrollToPoint(std::move(aID), std::move(aScrollType), std::move(aX), std::move(aY))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_Announce__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_Announce", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            nsString aAnnouncement{};
            uint16_t aPriority{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAnnouncement)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aAnnouncement'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 605750605)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPriority)))))) {
                FatalError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPriority'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 303367108)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvAnnounce(std::move(aID), std::move(aAnnouncement), std::move(aPriority))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_SetCaretOffset__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_SetCaretOffset", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aOffset{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179634889)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvSetCaretOffset(std::move(aID), std::move(aOffset))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_ScrollSubstringTo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ScrollSubstringTo", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aStartOffset{};
            int32_t aEndOffset{};
            uint32_t aScrollType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStartOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStartOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 517801175)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEndOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 343147488)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScrollType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aScrollType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 439092339)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvScrollSubstringTo(std::move(aID), std::move(aStartOffset), std::move(aEndOffset), std::move(aScrollType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_ScrollSubstringToPoint__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ScrollSubstringToPoint", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aStartOffset{};
            int32_t aEndOffset{};
            uint32_t aCoordinateType{};
            int32_t aX{};
            int32_t aY{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStartOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStartOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 517801175)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEndOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 343147488)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCoordinateType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCoordinateType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 797312524)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aX)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aX'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18612410)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aY)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aY'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18677947)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvScrollSubstringToPoint(std::move(aID), std::move(aStartOffset), std::move(aEndOffset), std::move(aCoordinateType), std::move(aX), std::move(aY))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_TakeSelection__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TakeSelection", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvTakeSelection(std::move(aID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_SetSelected__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_SetSelected", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            bool aSelected{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSelected)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aSelected'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 291767179)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvSetSelected(std::move(aID), std::move(aSelected))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_TakeFocus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TakeFocus", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvTakeFocus(std::move(aID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PDocAccessibleChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PDocAccessibleChild::Result
{
    switch (msg__.type()) {
    case PDocAccessible::Msg_State__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_State", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint64_t states{};
            if ((!((this)->RecvState(std::move(aID), (&(states)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_State(id__);

            WriteIPDLParam(reply__, this, states);
            // Sentinel = 'states'
            (reply__)->WriteSentinel(152634005);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_NativeState__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_NativeState", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint64_t states{};
            if ((!((this)->RecvNativeState(std::move(aID), (&(states)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_NativeState(id__);

            WriteIPDLParam(reply__, this, states);
            // Sentinel = 'states'
            (reply__)->WriteSentinel(152634005);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_Name__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_Name", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString name{};
            uint32_t flag{};
            if ((!((this)->RecvName(std::move(aID), (&(name)), (&(flag)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_Name(id__);

            WriteIPDLParam(reply__, this, name);
            // Sentinel = 'name'
            (reply__)->WriteSentinel(69075362);
            WriteIPDLParam(reply__, this, flag);
            // Sentinel = 'flag'
            (reply__)->WriteSentinel(67699099);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_Value__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_Value", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString value{};
            if ((!((this)->RecvValue(std::move(aID), (&(value)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_Value(id__);

            WriteIPDLParam(reply__, this, value);
            // Sentinel = 'value'
            (reply__)->WriteSentinel(107610654);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_Help__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_Help", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString help{};
            if ((!((this)->RecvHelp(std::move(aID), (&(help)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_Help(id__);

            WriteIPDLParam(reply__, this, help);
            // Sentinel = 'help'
            (reply__)->WriteSentinel(68878762);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_Description__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_Description", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString desc{};
            if ((!((this)->RecvDescription(std::move(aID), (&(desc)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_Description(id__);

            WriteIPDLParam(reply__, this, desc);
            // Sentinel = 'desc'
            (reply__)->WriteSentinel(67895712);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_Attributes__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_Attributes", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsTArray<Attribute> attributes{};
            if ((!((this)->RecvAttributes(std::move(aID), (&(attributes)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_Attributes(id__);

            WriteIPDLParam(reply__, this, attributes);
            // Sentinel = 'attributes'
            (reply__)->WriteSentinel(393413704);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_RelationByType__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_RelationByType", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aRelationType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRelationType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRelationType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 604570946)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsTArray<uint64_t> targets{};
            if ((!((this)->RecvRelationByType(std::move(aID), std::move(aRelationType), (&(targets)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_RelationByType(id__);

            WriteIPDLParam(reply__, this, targets);
            // Sentinel = 'targets'
            (reply__)->WriteSentinel(198771451);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_Relations__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_Relations", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsTArray<RelationTargets> relations{};
            if ((!((this)->RecvRelations(std::move(aID), (&(relations)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_Relations(id__);

            WriteIPDLParam(reply__, this, relations);
            // Sentinel = 'relations'
            (reply__)->WriteSentinel(317785042);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_IsSearchbox__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_IsSearchbox", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool retval{};
            if ((!((this)->RecvIsSearchbox(std::move(aID), (&(retval)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_IsSearchbox(id__);

            WriteIPDLParam(reply__, this, retval);
            // Sentinel = 'retval'
            (reply__)->WriteSentinel(151716495);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_LandmarkRole__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_LandmarkRole", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString landmark{};
            if ((!((this)->RecvLandmarkRole(std::move(aID), (&(landmark)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_LandmarkRole(id__);

            WriteIPDLParam(reply__, this, landmark);
            // Sentinel = 'landmark'
            (reply__)->WriteSentinel(247268171);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_ARIARoleAtom__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ARIARoleAtom", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString ariaRole{};
            if ((!((this)->RecvARIARoleAtom(std::move(aID), (&(ariaRole)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_ARIARoleAtom(id__);

            WriteIPDLParam(reply__, this, ariaRole);
            // Sentinel = 'ariaRole'
            (reply__)->WriteSentinel(240845616);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_GroupPosition__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_GroupPosition", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t groupLevel{};
            int32_t similarItemsInGroup{};
            int32_t positionInGroup{};
            if ((!((this)->RecvGroupPosition(std::move(aID), (&(groupLevel)), (&(similarItemsInGroup)), (&(positionInGroup)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_GroupPosition(id__);

            WriteIPDLParam(reply__, this, groupLevel);
            // Sentinel = 'groupLevel'
            (reply__)->WriteSentinel(386204710);
            WriteIPDLParam(reply__, this, similarItemsInGroup);
            // Sentinel = 'similarItemsInGroup'
            (reply__)->WriteSentinel(1298335672);
            WriteIPDLParam(reply__, this, positionInGroup);
            // Sentinel = 'positionInGroup'
            (reply__)->WriteSentinel(843449914);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_CaretLineNumber__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_CaretLineNumber", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t aLineNumber{};
            if ((!((this)->RecvCaretLineNumber(std::move(aID), (&(aLineNumber)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_CaretLineNumber(id__);

            WriteIPDLParam(reply__, this, aLineNumber);
            // Sentinel = 'aLineNumber'
            (reply__)->WriteSentinel(423953491);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_CaretOffset__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_CaretOffset", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t aOffset{};
            if ((!((this)->RecvCaretOffset(std::move(aID), (&(aOffset)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_CaretOffset(id__);

            WriteIPDLParam(reply__, this, aOffset);
            // Sentinel = 'aOffset'
            (reply__)->WriteSentinel(179634889);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_CharacterCount__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_CharacterCount", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t aCount{};
            if ((!((this)->RecvCharacterCount(std::move(aID), (&(aCount)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_CharacterCount(id__);

            WriteIPDLParam(reply__, this, aCount);
            // Sentinel = 'aCount'
            (reply__)->WriteSentinel(134611563);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_SelectionCount__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_SelectionCount", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t aCount{};
            if ((!((this)->RecvSelectionCount(std::move(aID), (&(aCount)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_SelectionCount(id__);

            WriteIPDLParam(reply__, this, aCount);
            // Sentinel = 'aCount'
            (reply__)->WriteSentinel(134611563);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TextSubstring__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TextSubstring", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aStartOffset{};
            int32_t aEndOffset{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStartOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStartOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 517801175)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEndOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 343147488)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aText{};
            bool aValid{};
            if ((!((this)->RecvTextSubstring(std::move(aID), std::move(aStartOffset), std::move(aEndOffset), (&(aText)), (&(aValid)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TextSubstring(id__);

            WriteIPDLParam(reply__, this, aText);
            // Sentinel = 'aText'
            (reply__)->WriteSentinel(97321479);
            WriteIPDLParam(reply__, this, aValid);
            // Sentinel = 'aValid'
            (reply__)->WriteSentinel(133694034);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_GetTextAfterOffset__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_GetTextAfterOffset", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aOffset{};
            int32_t aBoundaryType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179634889)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBoundaryType)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aBoundaryType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 605488456)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aText{};
            int32_t aStartOffset{};
            int32_t aEndOffset{};
            if ((!((this)->RecvGetTextAfterOffset(std::move(aID), std::move(aOffset), std::move(aBoundaryType), (&(aText)), (&(aStartOffset)), (&(aEndOffset)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_GetTextAfterOffset(id__);

            WriteIPDLParam(reply__, this, aText);
            // Sentinel = 'aText'
            (reply__)->WriteSentinel(97321479);
            WriteIPDLParam(reply__, this, aStartOffset);
            // Sentinel = 'aStartOffset'
            (reply__)->WriteSentinel(517801175);
            WriteIPDLParam(reply__, this, aEndOffset);
            // Sentinel = 'aEndOffset'
            (reply__)->WriteSentinel(343147488);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_GetTextAtOffset__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_GetTextAtOffset", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aOffset{};
            int32_t aBoundaryType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179634889)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBoundaryType)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aBoundaryType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 605488456)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aText{};
            int32_t aStartOffset{};
            int32_t aEndOffset{};
            if ((!((this)->RecvGetTextAtOffset(std::move(aID), std::move(aOffset), std::move(aBoundaryType), (&(aText)), (&(aStartOffset)), (&(aEndOffset)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_GetTextAtOffset(id__);

            WriteIPDLParam(reply__, this, aText);
            // Sentinel = 'aText'
            (reply__)->WriteSentinel(97321479);
            WriteIPDLParam(reply__, this, aStartOffset);
            // Sentinel = 'aStartOffset'
            (reply__)->WriteSentinel(517801175);
            WriteIPDLParam(reply__, this, aEndOffset);
            // Sentinel = 'aEndOffset'
            (reply__)->WriteSentinel(343147488);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_GetTextBeforeOffset__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_GetTextBeforeOffset", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aOffset{};
            int32_t aBoundaryType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179634889)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBoundaryType)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aBoundaryType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 605488456)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aText{};
            int32_t aStartOffset{};
            int32_t aEndOffset{};
            if ((!((this)->RecvGetTextBeforeOffset(std::move(aID), std::move(aOffset), std::move(aBoundaryType), (&(aText)), (&(aStartOffset)), (&(aEndOffset)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_GetTextBeforeOffset(id__);

            WriteIPDLParam(reply__, this, aText);
            // Sentinel = 'aText'
            (reply__)->WriteSentinel(97321479);
            WriteIPDLParam(reply__, this, aStartOffset);
            // Sentinel = 'aStartOffset'
            (reply__)->WriteSentinel(517801175);
            WriteIPDLParam(reply__, this, aEndOffset);
            // Sentinel = 'aEndOffset'
            (reply__)->WriteSentinel(343147488);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_CharAt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_CharAt", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aOffset{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179634889)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint16_t aChar{};
            if ((!((this)->RecvCharAt(std::move(aID), std::move(aOffset), (&(aChar)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_CharAt(id__);

            WriteIPDLParam(reply__, this, aChar);
            // Sentinel = 'aChar'
            (reply__)->WriteSentinel(90309088);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TextAttributes__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TextAttributes", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            bool aIncludeDefAttrs{};
            int32_t aOffset{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIncludeDefAttrs)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIncludeDefAttrs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 873268803)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179634889)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsTArray<Attribute> aAttributes{};
            int32_t aStartOffset{};
            int32_t aEndOffset{};
            if ((!((this)->RecvTextAttributes(std::move(aID), std::move(aIncludeDefAttrs), std::move(aOffset), (&(aAttributes)), (&(aStartOffset)), (&(aEndOffset)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TextAttributes(id__);

            WriteIPDLParam(reply__, this, aAttributes);
            // Sentinel = 'aAttributes'
            (reply__)->WriteSentinel(442434697);
            WriteIPDLParam(reply__, this, aStartOffset);
            // Sentinel = 'aStartOffset'
            (reply__)->WriteSentinel(517801175);
            WriteIPDLParam(reply__, this, aEndOffset);
            // Sentinel = 'aEndOffset'
            (reply__)->WriteSentinel(343147488);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_DefaultTextAttributes__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_DefaultTextAttributes", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsTArray<Attribute> aAttributes{};
            if ((!((this)->RecvDefaultTextAttributes(std::move(aID), (&(aAttributes)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_DefaultTextAttributes(id__);

            WriteIPDLParam(reply__, this, aAttributes);
            // Sentinel = 'aAttributes'
            (reply__)->WriteSentinel(442434697);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TextBounds__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TextBounds", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aStartOffset{};
            int32_t aEndOffset{};
            uint32_t aCoordType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStartOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStartOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 517801175)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEndOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 343147488)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCoordType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCoordType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 357565435)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsIntRect aRetVal{};
            if ((!((this)->RecvTextBounds(std::move(aID), std::move(aStartOffset), std::move(aEndOffset), std::move(aCoordType), (&(aRetVal)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TextBounds(id__);

            WriteIPDLParam(reply__, this, aRetVal);
            // Sentinel = 'aRetVal'
            (reply__)->WriteSentinel(177406640);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_CharBounds__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_CharBounds", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aOffset{};
            uint32_t aCoordType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179634889)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCoordType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCoordType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 357565435)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsIntRect aRetVal{};
            if ((!((this)->RecvCharBounds(std::move(aID), std::move(aOffset), std::move(aCoordType), (&(aRetVal)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_CharBounds(id__);

            WriteIPDLParam(reply__, this, aRetVal);
            // Sentinel = 'aRetVal'
            (reply__)->WriteSentinel(177406640);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_OffsetAtPoint__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_OffsetAtPoint", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aX{};
            int32_t aY{};
            uint32_t aCoordType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aX)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aX'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18612410)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aY)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aY'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18677947)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCoordType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCoordType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 357565435)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t aRetVal{};
            if ((!((this)->RecvOffsetAtPoint(std::move(aID), std::move(aX), std::move(aY), std::move(aCoordType), (&(aRetVal)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_OffsetAtPoint(id__);

            WriteIPDLParam(reply__, this, aRetVal);
            // Sentinel = 'aRetVal'
            (reply__)->WriteSentinel(177406640);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_SelectionBoundsAt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_SelectionBoundsAt", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aSelectionNum{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSelectionNum)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aSelectionNum'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 601359672)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aSucceeded{};
            nsString aData{};
            int32_t aStartOffset{};
            int32_t aEndOffset{};
            if ((!((this)->RecvSelectionBoundsAt(std::move(aID), std::move(aSelectionNum), (&(aSucceeded)), (&(aData)), (&(aStartOffset)), (&(aEndOffset)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_SelectionBoundsAt(id__);

            WriteIPDLParam(reply__, this, aSucceeded);
            // Sentinel = 'aSucceeded'
            (reply__)->WriteSentinel(357893095);
            WriteIPDLParam(reply__, this, aData);
            // Sentinel = 'aData'
            (reply__)->WriteSentinel(90571228);
            WriteIPDLParam(reply__, this, aStartOffset);
            // Sentinel = 'aStartOffset'
            (reply__)->WriteSentinel(517801175);
            WriteIPDLParam(reply__, this, aEndOffset);
            // Sentinel = 'aEndOffset'
            (reply__)->WriteSentinel(343147488);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_SetSelectionBoundsAt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_SetSelectionBoundsAt", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aSelectionNum{};
            int32_t aStartOffset{};
            int32_t aEndOffset{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSelectionNum)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aSelectionNum'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 601359672)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStartOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStartOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 517801175)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEndOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 343147488)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aSucceeded{};
            if ((!((this)->RecvSetSelectionBoundsAt(std::move(aID), std::move(aSelectionNum), std::move(aStartOffset), std::move(aEndOffset), (&(aSucceeded)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_SetSelectionBoundsAt(id__);

            WriteIPDLParam(reply__, this, aSucceeded);
            // Sentinel = 'aSucceeded'
            (reply__)->WriteSentinel(357893095);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_AddToSelection__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_AddToSelection", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aStartOffset{};
            int32_t aEndOffset{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStartOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStartOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 517801175)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEndOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 343147488)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aSucceeded{};
            if ((!((this)->RecvAddToSelection(std::move(aID), std::move(aStartOffset), std::move(aEndOffset), (&(aSucceeded)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_AddToSelection(id__);

            WriteIPDLParam(reply__, this, aSucceeded);
            // Sentinel = 'aSucceeded'
            (reply__)->WriteSentinel(357893095);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_RemoveFromSelection__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_RemoveFromSelection", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aSelectionNum{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSelectionNum)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aSelectionNum'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 601359672)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aSucceeded{};
            if ((!((this)->RecvRemoveFromSelection(std::move(aID), std::move(aSelectionNum), (&(aSucceeded)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_RemoveFromSelection(id__);

            WriteIPDLParam(reply__, this, aSucceeded);
            // Sentinel = 'aSucceeded'
            (reply__)->WriteSentinel(357893095);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_Text__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_Text", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aText{};
            if ((!((this)->RecvText(std::move(aID), (&(aText)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_Text(id__);

            WriteIPDLParam(reply__, this, aText);
            // Sentinel = 'aText'
            (reply__)->WriteSentinel(97321479);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_ReplaceText__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ReplaceText", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            nsString aText{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aText)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aText'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 97321479)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((this)->RecvReplaceText(std::move(aID), std::move(aText))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_ReplaceText(id__);


            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_InsertText__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_InsertText", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            nsString aText{};
            int32_t aPosition{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aText)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aText'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 97321479)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPosition)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPosition'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 303104951)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aValid{};
            if ((!((this)->RecvInsertText(std::move(aID), std::move(aText), std::move(aPosition), (&(aValid)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_InsertText(id__);

            WriteIPDLParam(reply__, this, aValid);
            // Sentinel = 'aValid'
            (reply__)->WriteSentinel(133694034);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_CopyText__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_CopyText", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aStartPos{};
            int32_t aEndPos{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStartPos)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStartPos'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 298255266)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndPos)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEndPos'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 172163755)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aValid{};
            if ((!((this)->RecvCopyText(std::move(aID), std::move(aStartPos), std::move(aEndPos), (&(aValid)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_CopyText(id__);

            WriteIPDLParam(reply__, this, aValid);
            // Sentinel = 'aValid'
            (reply__)->WriteSentinel(133694034);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_CutText__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_CutText", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aStartPos{};
            int32_t aEndPos{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStartPos)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStartPos'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 298255266)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndPos)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEndPos'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 172163755)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aValid{};
            if ((!((this)->RecvCutText(std::move(aID), std::move(aStartPos), std::move(aEndPos), (&(aValid)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_CutText(id__);

            WriteIPDLParam(reply__, this, aValid);
            // Sentinel = 'aValid'
            (reply__)->WriteSentinel(133694034);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_DeleteText__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_DeleteText", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aStartPos{};
            int32_t aEndPos{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStartPos)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStartPos'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 298255266)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndPos)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEndPos'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 172163755)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aValid{};
            if ((!((this)->RecvDeleteText(std::move(aID), std::move(aStartPos), std::move(aEndPos), (&(aValid)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_DeleteText(id__);

            WriteIPDLParam(reply__, this, aValid);
            // Sentinel = 'aValid'
            (reply__)->WriteSentinel(133694034);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_PasteText__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_PasteText", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aPosition{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPosition)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPosition'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 303104951)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aValid{};
            if ((!((this)->RecvPasteText(std::move(aID), std::move(aPosition), (&(aValid)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_PasteText(id__);

            WriteIPDLParam(reply__, this, aValid);
            // Sentinel = 'aValid'
            (reply__)->WriteSentinel(133694034);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_ImagePosition__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ImagePosition", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aCoordType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCoordType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCoordType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 357565435)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            IntPoint aRetVal{};
            if ((!((this)->RecvImagePosition(std::move(aID), std::move(aCoordType), (&(aRetVal)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_ImagePosition(id__);

            WriteIPDLParam(reply__, this, aRetVal);
            // Sentinel = 'aRetVal'
            (reply__)->WriteSentinel(177406640);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_ImageSize__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ImageSize", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            IntSize aRetVal{};
            if ((!((this)->RecvImageSize(std::move(aID), (&(aRetVal)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_ImageSize(id__);

            WriteIPDLParam(reply__, this, aRetVal);
            // Sentinel = 'aRetVal'
            (reply__)->WriteSentinel(177406640);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_StartOffset__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_StartOffset", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aRetVal{};
            bool aOk{};
            if ((!((this)->RecvStartOffset(std::move(aID), (&(aRetVal)), (&(aOk)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_StartOffset(id__);

            WriteIPDLParam(reply__, this, aRetVal);
            // Sentinel = 'aRetVal'
            (reply__)->WriteSentinel(177406640);
            WriteIPDLParam(reply__, this, aOk);
            // Sentinel = 'aOk'
            (reply__)->WriteSentinel(36634908);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_EndOffset__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_EndOffset", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aRetVal{};
            bool aOk{};
            if ((!((this)->RecvEndOffset(std::move(aID), (&(aRetVal)), (&(aOk)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_EndOffset(id__);

            WriteIPDLParam(reply__, this, aRetVal);
            // Sentinel = 'aRetVal'
            (reply__)->WriteSentinel(177406640);
            WriteIPDLParam(reply__, this, aOk);
            // Sentinel = 'aOk'
            (reply__)->WriteSentinel(36634908);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_IsLinkValid__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_IsLinkValid", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aRetVal{};
            if ((!((this)->RecvIsLinkValid(std::move(aID), (&(aRetVal)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_IsLinkValid(id__);

            WriteIPDLParam(reply__, this, aRetVal);
            // Sentinel = 'aRetVal'
            (reply__)->WriteSentinel(177406640);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_AnchorCount__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_AnchorCount", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aRetVal{};
            bool aOk{};
            if ((!((this)->RecvAnchorCount(std::move(aID), (&(aRetVal)), (&(aOk)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_AnchorCount(id__);

            WriteIPDLParam(reply__, this, aRetVal);
            // Sentinel = 'aRetVal'
            (reply__)->WriteSentinel(177406640);
            WriteIPDLParam(reply__, this, aOk);
            // Sentinel = 'aOk'
            (reply__)->WriteSentinel(36634908);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_AnchorURIAt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_AnchorURIAt", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132055642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsCString aURI{};
            bool aOk{};
            if ((!((this)->RecvAnchorURIAt(std::move(aID), std::move(aIndex), (&(aURI)), (&(aOk)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_AnchorURIAt(id__);

            WriteIPDLParam(reply__, this, aURI);
            // Sentinel = 'aURI'
            (reply__)->WriteSentinel(57934162);
            WriteIPDLParam(reply__, this, aOk);
            // Sentinel = 'aOk'
            (reply__)->WriteSentinel(36634908);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_AnchorAt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_AnchorAt", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132055642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint64_t aIDOfAnchor{};
            bool aOk{};
            if ((!((this)->RecvAnchorAt(std::move(aID), std::move(aIndex), (&(aIDOfAnchor)), (&(aOk)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_AnchorAt(id__);

            WriteIPDLParam(reply__, this, aIDOfAnchor);
            // Sentinel = 'aIDOfAnchor'
            (reply__)->WriteSentinel(376833023);
            WriteIPDLParam(reply__, this, aOk);
            // Sentinel = 'aOk'
            (reply__)->WriteSentinel(36634908);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_LinkCount__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_LinkCount", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aCount{};
            if ((!((this)->RecvLinkCount(std::move(aID), (&(aCount)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_LinkCount(id__);

            WriteIPDLParam(reply__, this, aCount);
            // Sentinel = 'aCount'
            (reply__)->WriteSentinel(134611563);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_LinkAt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_LinkAt", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132055642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint64_t aIDOfLink{};
            bool aOk{};
            if ((!((this)->RecvLinkAt(std::move(aID), std::move(aIndex), (&(aIDOfLink)), (&(aOk)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_LinkAt(id__);

            WriteIPDLParam(reply__, this, aIDOfLink);
            // Sentinel = 'aIDOfLink'
            (reply__)->WriteSentinel(253756210);
            WriteIPDLParam(reply__, this, aOk);
            // Sentinel = 'aOk'
            (reply__)->WriteSentinel(36634908);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_LinkIndexOf__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_LinkIndexOf", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint64_t aLinkID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLinkID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aLinkID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 173146749)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t aIndex{};
            if ((!((this)->RecvLinkIndexOf(std::move(aID), std::move(aLinkID), (&(aIndex)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_LinkIndexOf(id__);

            WriteIPDLParam(reply__, this, aIndex);
            // Sentinel = 'aIndex'
            (reply__)->WriteSentinel(132055642);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_LinkIndexAtOffset__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_LinkIndexAtOffset", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aOffset{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOffset)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179634889)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t aIndex{};
            if ((!((this)->RecvLinkIndexAtOffset(std::move(aID), std::move(aOffset), (&(aIndex)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_LinkIndexAtOffset(id__);

            WriteIPDLParam(reply__, this, aIndex);
            // Sentinel = 'aIndex'
            (reply__)->WriteSentinel(132055642);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableOfACell__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableOfACell", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint64_t aTableID{};
            bool aOk{};
            if ((!((this)->RecvTableOfACell(std::move(aID), (&(aTableID)), (&(aOk)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableOfACell(id__);

            WriteIPDLParam(reply__, this, aTableID);
            // Sentinel = 'aTableID'
            (reply__)->WriteSentinel(222364375);
            WriteIPDLParam(reply__, this, aOk);
            // Sentinel = 'aOk'
            (reply__)->WriteSentinel(36634908);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_ColIdx__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ColIdx", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aIndex{};
            if ((!((this)->RecvColIdx(std::move(aID), (&(aIndex)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_ColIdx(id__);

            WriteIPDLParam(reply__, this, aIndex);
            // Sentinel = 'aIndex'
            (reply__)->WriteSentinel(132055642);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_RowIdx__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_RowIdx", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aIndex{};
            if ((!((this)->RecvRowIdx(std::move(aID), (&(aIndex)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_RowIdx(id__);

            WriteIPDLParam(reply__, this, aIndex);
            // Sentinel = 'aIndex'
            (reply__)->WriteSentinel(132055642);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_GetPosition__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_GetPosition", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aRow{};
            uint32_t aCol{};
            if ((!((this)->RecvGetPosition(std::move(aID), (&(aRow)), (&(aCol)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_GetPosition(id__);

            WriteIPDLParam(reply__, this, aRow);
            // Sentinel = 'aRow'
            (reply__)->WriteSentinel(64160154);
            WriteIPDLParam(reply__, this, aCol);
            // Sentinel = 'aCol'
            (reply__)->WriteSentinel(60490112);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_ColExtent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ColExtent", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aExtent{};
            if ((!((this)->RecvColExtent(std::move(aID), (&(aExtent)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_ColExtent(id__);

            WriteIPDLParam(reply__, this, aExtent);
            // Sentinel = 'aExtent'
            (reply__)->WriteSentinel(183698138);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_RowExtent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_RowExtent", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aExtent{};
            if ((!((this)->RecvRowExtent(std::move(aID), (&(aExtent)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_RowExtent(id__);

            WriteIPDLParam(reply__, this, aExtent);
            // Sentinel = 'aExtent'
            (reply__)->WriteSentinel(183698138);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_GetColRowExtents__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_GetColRowExtents", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aCol{};
            uint32_t aRow{};
            uint32_t aColExtent{};
            uint32_t aRowExtent{};
            if ((!((this)->RecvGetColRowExtents(std::move(aID), (&(aCol)), (&(aRow)), (&(aColExtent)), (&(aRowExtent)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_GetColRowExtents(id__);

            WriteIPDLParam(reply__, this, aCol);
            // Sentinel = 'aCol'
            (reply__)->WriteSentinel(60490112);
            WriteIPDLParam(reply__, this, aRow);
            // Sentinel = 'aRow'
            (reply__)->WriteSentinel(64160154);
            WriteIPDLParam(reply__, this, aColExtent);
            // Sentinel = 'aColExtent'
            (reply__)->WriteSentinel(350225400);
            WriteIPDLParam(reply__, this, aRowExtent);
            // Sentinel = 'aRowExtent'
            (reply__)->WriteSentinel(364119058);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_ColHeaderCells__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ColHeaderCells", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsTArray<uint64_t> aCells{};
            if ((!((this)->RecvColHeaderCells(std::move(aID), (&(aCells)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_ColHeaderCells(id__);

            WriteIPDLParam(reply__, this, aCells);
            // Sentinel = 'aCells'
            (reply__)->WriteSentinel(129892949);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_RowHeaderCells__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_RowHeaderCells", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsTArray<uint64_t> aCells{};
            if ((!((this)->RecvRowHeaderCells(std::move(aID), (&(aCells)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_RowHeaderCells(id__);

            WriteIPDLParam(reply__, this, aCells);
            // Sentinel = 'aCells'
            (reply__)->WriteSentinel(129892949);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_IsCellSelected__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_IsCellSelected", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aSelected{};
            if ((!((this)->RecvIsCellSelected(std::move(aID), (&(aSelected)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_IsCellSelected(id__);

            WriteIPDLParam(reply__, this, aSelected);
            // Sentinel = 'aSelected'
            (reply__)->WriteSentinel(291767179);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableCaption__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableCaption", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint64_t aCaptionID{};
            bool aOk{};
            if ((!((this)->RecvTableCaption(std::move(aID), (&(aCaptionID)), (&(aOk)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableCaption(id__);

            WriteIPDLParam(reply__, this, aCaptionID);
            // Sentinel = 'aCaptionID'
            (reply__)->WriteSentinel(350749629);
            WriteIPDLParam(reply__, this, aOk);
            // Sentinel = 'aOk'
            (reply__)->WriteSentinel(36634908);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableSummary__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSummary", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aSummary{};
            if ((!((this)->RecvTableSummary(std::move(aID), (&(aSummary)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableSummary(id__);

            WriteIPDLParam(reply__, this, aSummary);
            // Sentinel = 'aSummary'
            (reply__)->WriteSentinel(241697616);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableColumnCount__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableColumnCount", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aColCount{};
            if ((!((this)->RecvTableColumnCount(std::move(aID), (&(aColCount)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableColumnCount(id__);

            WriteIPDLParam(reply__, this, aColCount);
            // Sentinel = 'aColCount'
            (reply__)->WriteSentinel(282395529);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableRowCount__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableRowCount", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aRowCount{};
            if ((!((this)->RecvTableRowCount(std::move(aID), (&(aRowCount)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableRowCount(id__);

            WriteIPDLParam(reply__, this, aRowCount);
            // Sentinel = 'aRowCount'
            (reply__)->WriteSentinel(294585251);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableCellAt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableCellAt", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aRow{};
            uint32_t aCol{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRow)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64160154)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCol)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCol'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 60490112)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint64_t aCellID{};
            bool aOk{};
            if ((!((this)->RecvTableCellAt(std::move(aID), std::move(aRow), std::move(aCol), (&(aCellID)), (&(aOk)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableCellAt(id__);

            WriteIPDLParam(reply__, this, aCellID);
            // Sentinel = 'aCellID'
            (reply__)->WriteSentinel(167969391);
            WriteIPDLParam(reply__, this, aOk);
            // Sentinel = 'aOk'
            (reply__)->WriteSentinel(36634908);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableCellIndexAt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableCellIndexAt", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aRow{};
            uint32_t aCol{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRow)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64160154)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCol)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCol'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 60490112)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t aIndex{};
            if ((!((this)->RecvTableCellIndexAt(std::move(aID), std::move(aRow), std::move(aCol), (&(aIndex)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableCellIndexAt(id__);

            WriteIPDLParam(reply__, this, aIndex);
            // Sentinel = 'aIndex'
            (reply__)->WriteSentinel(132055642);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableColumnIndexAt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableColumnIndexAt", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aCellIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCellIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCellIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 342229978)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t aCol{};
            if ((!((this)->RecvTableColumnIndexAt(std::move(aID), std::move(aCellIndex), (&(aCol)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableColumnIndexAt(id__);

            WriteIPDLParam(reply__, this, aCol);
            // Sentinel = 'aCol'
            (reply__)->WriteSentinel(60490112);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableRowIndexAt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableRowIndexAt", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aCellIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCellIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCellIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 342229978)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t aRow{};
            if ((!((this)->RecvTableRowIndexAt(std::move(aID), std::move(aCellIndex), (&(aRow)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableRowIndexAt(id__);

            WriteIPDLParam(reply__, this, aRow);
            // Sentinel = 'aRow'
            (reply__)->WriteSentinel(64160154);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableRowAndColumnIndicesAt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableRowAndColumnIndicesAt", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aCellIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCellIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCellIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 342229978)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t aRow{};
            int32_t aCol{};
            if ((!((this)->RecvTableRowAndColumnIndicesAt(std::move(aID), std::move(aCellIndex), (&(aRow)), (&(aCol)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableRowAndColumnIndicesAt(id__);

            WriteIPDLParam(reply__, this, aRow);
            // Sentinel = 'aRow'
            (reply__)->WriteSentinel(64160154);
            WriteIPDLParam(reply__, this, aCol);
            // Sentinel = 'aCol'
            (reply__)->WriteSentinel(60490112);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableColumnExtentAt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableColumnExtentAt", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aRow{};
            uint32_t aCol{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRow)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64160154)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCol)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCol'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 60490112)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aExtent{};
            if ((!((this)->RecvTableColumnExtentAt(std::move(aID), std::move(aRow), std::move(aCol), (&(aExtent)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableColumnExtentAt(id__);

            WriteIPDLParam(reply__, this, aExtent);
            // Sentinel = 'aExtent'
            (reply__)->WriteSentinel(183698138);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableRowExtentAt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableRowExtentAt", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aRow{};
            uint32_t aCol{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRow)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64160154)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCol)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCol'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 60490112)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aExtent{};
            if ((!((this)->RecvTableRowExtentAt(std::move(aID), std::move(aRow), std::move(aCol), (&(aExtent)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableRowExtentAt(id__);

            WriteIPDLParam(reply__, this, aExtent);
            // Sentinel = 'aExtent'
            (reply__)->WriteSentinel(183698138);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableColumnDescription__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableColumnDescription", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aCol{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCol)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCol'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 60490112)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aDescription{};
            if ((!((this)->RecvTableColumnDescription(std::move(aID), std::move(aCol), (&(aDescription)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableColumnDescription(id__);

            WriteIPDLParam(reply__, this, aDescription);
            // Sentinel = 'aDescription'
            (reply__)->WriteSentinel(515114214);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableRowDescription__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableRowDescription", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aRow{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRow)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64160154)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aDescription{};
            if ((!((this)->RecvTableRowDescription(std::move(aID), std::move(aRow), (&(aDescription)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableRowDescription(id__);

            WriteIPDLParam(reply__, this, aDescription);
            // Sentinel = 'aDescription'
            (reply__)->WriteSentinel(515114214);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableColumnSelected__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableColumnSelected", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aCol{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCol)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCol'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 60490112)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aSelected{};
            if ((!((this)->RecvTableColumnSelected(std::move(aID), std::move(aCol), (&(aSelected)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableColumnSelected(id__);

            WriteIPDLParam(reply__, this, aSelected);
            // Sentinel = 'aSelected'
            (reply__)->WriteSentinel(291767179);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableRowSelected__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableRowSelected", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aRow{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRow)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64160154)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aSelected{};
            if ((!((this)->RecvTableRowSelected(std::move(aID), std::move(aRow), (&(aSelected)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableRowSelected(id__);

            WriteIPDLParam(reply__, this, aSelected);
            // Sentinel = 'aSelected'
            (reply__)->WriteSentinel(291767179);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableCellSelected__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableCellSelected", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aRow{};
            uint32_t aCol{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRow)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64160154)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCol)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCol'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 60490112)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aSelected{};
            if ((!((this)->RecvTableCellSelected(std::move(aID), std::move(aRow), std::move(aCol), (&(aSelected)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableCellSelected(id__);

            WriteIPDLParam(reply__, this, aSelected);
            // Sentinel = 'aSelected'
            (reply__)->WriteSentinel(291767179);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableSelectedCellCount__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectedCellCount", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aSelectedCells{};
            if ((!((this)->RecvTableSelectedCellCount(std::move(aID), (&(aSelectedCells)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableSelectedCellCount(id__);

            WriteIPDLParam(reply__, this, aSelectedCells);
            // Sentinel = 'aSelectedCells'
            (reply__)->WriteSentinel(680330622);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableSelectedColumnCount__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectedColumnCount", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aSelectedColumns{};
            if ((!((this)->RecvTableSelectedColumnCount(std::move(aID), (&(aSelectedColumns)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableSelectedColumnCount(id__);

            WriteIPDLParam(reply__, this, aSelectedColumns);
            // Sentinel = 'aSelectedColumns'
            (reply__)->WriteSentinel(891684460);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableSelectedRowCount__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectedRowCount", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aSelectedRows{};
            if ((!((this)->RecvTableSelectedRowCount(std::move(aID), (&(aSelectedRows)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableSelectedRowCount(id__);

            WriteIPDLParam(reply__, this, aSelectedRows);
            // Sentinel = 'aSelectedRows'
            (reply__)->WriteSentinel(595985718);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableSelectedCells__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectedCells", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsTArray<uint64_t> aCellIDs{};
            if ((!((this)->RecvTableSelectedCells(std::move(aID), (&(aCellIDs)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableSelectedCells(id__);

            WriteIPDLParam(reply__, this, aCellIDs);
            // Sentinel = 'aCellIDs'
            (reply__)->WriteSentinel(216335074);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableSelectedCellIndices__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectedCellIndices", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsTArray<uint32_t> aCellIndeces{};
            if ((!((this)->RecvTableSelectedCellIndices(std::move(aID), (&(aCellIndeces)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableSelectedCellIndices(id__);

            WriteIPDLParam(reply__, this, aCellIndeces);
            // Sentinel = 'aCellIndeces'
            (reply__)->WriteSentinel(488113309);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableSelectedColumnIndices__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectedColumnIndices", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsTArray<uint32_t> aColumnIndeces{};
            if ((!((this)->RecvTableSelectedColumnIndices(std::move(aID), (&(aColumnIndeces)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableSelectedColumnIndices(id__);

            WriteIPDLParam(reply__, this, aColumnIndeces);
            // Sentinel = 'aColumnIndeces'
            (reply__)->WriteSentinel(687015307);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableSelectedRowIndices__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectedRowIndices", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsTArray<uint32_t> aRowIndeces{};
            if ((!((this)->RecvTableSelectedRowIndices(std::move(aID), (&(aRowIndeces)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableSelectedRowIndices(id__);

            WriteIPDLParam(reply__, this, aRowIndeces);
            // Sentinel = 'aRowIndeces'
            (reply__)->WriteSentinel(428475477);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableSelectColumn__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectColumn", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aCol{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCol)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCol'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 60490112)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((this)->RecvTableSelectColumn(std::move(aID), std::move(aCol))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableSelectColumn(id__);


            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableSelectRow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectRow", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aRow{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRow)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64160154)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((this)->RecvTableSelectRow(std::move(aID), std::move(aRow))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableSelectRow(id__);


            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableUnselectColumn__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableUnselectColumn", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aCol{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCol)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCol'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 60490112)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((this)->RecvTableUnselectColumn(std::move(aID), std::move(aCol))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableUnselectColumn(id__);


            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableUnselectRow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableUnselectRow", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aRow{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRow)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64160154)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((this)->RecvTableUnselectRow(std::move(aID), std::move(aRow))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableUnselectRow(id__);


            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_TableIsProbablyForLayout__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableIsProbablyForLayout", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aForLayout{};
            if ((!((this)->RecvTableIsProbablyForLayout(std::move(aID), (&(aForLayout)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_TableIsProbablyForLayout(id__);

            WriteIPDLParam(reply__, this, aForLayout);
            // Sentinel = 'aForLayout'
            (reply__)->WriteSentinel(354157575);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_AtkTableColumnHeader__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_AtkTableColumnHeader", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aCol{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCol)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCol'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 60490112)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint64_t aHeaderID{};
            bool aOk{};
            if ((!((this)->RecvAtkTableColumnHeader(std::move(aID), std::move(aCol), (&(aHeaderID)), (&(aOk)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_AtkTableColumnHeader(id__);

            WriteIPDLParam(reply__, this, aHeaderID);
            // Sentinel = 'aHeaderID'
            (reply__)->WriteSentinel(275710776);
            WriteIPDLParam(reply__, this, aOk);
            // Sentinel = 'aOk'
            (reply__)->WriteSentinel(36634908);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_AtkTableRowHeader__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_AtkTableRowHeader", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aRow{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRow)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64160154)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint64_t aHeaderID{};
            bool aOk{};
            if ((!((this)->RecvAtkTableRowHeader(std::move(aID), std::move(aRow), (&(aHeaderID)), (&(aOk)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_AtkTableRowHeader(id__);

            WriteIPDLParam(reply__, this, aHeaderID);
            // Sentinel = 'aHeaderID'
            (reply__)->WriteSentinel(275710776);
            WriteIPDLParam(reply__, this, aOk);
            // Sentinel = 'aOk'
            (reply__)->WriteSentinel(36634908);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_SelectedItems__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_SelectedItems", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsTArray<uint64_t> aSelectedItemIDs{};
            if ((!((this)->RecvSelectedItems(std::move(aID), (&(aSelectedItemIDs)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_SelectedItems(id__);

            WriteIPDLParam(reply__, this, aSelectedItemIDs);
            // Sentinel = 'aSelectedItemIDs'
            (reply__)->WriteSentinel(879429146);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_SelectedItemCount__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_SelectedItemCount", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aCount{};
            if ((!((this)->RecvSelectedItemCount(std::move(aID), (&(aCount)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_SelectedItemCount(id__);

            WriteIPDLParam(reply__, this, aCount);
            // Sentinel = 'aCount'
            (reply__)->WriteSentinel(134611563);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_GetSelectedItem__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_GetSelectedItem", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132055642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint64_t aSelected{};
            bool aOk{};
            if ((!((this)->RecvGetSelectedItem(std::move(aID), std::move(aIndex), (&(aSelected)), (&(aOk)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_GetSelectedItem(id__);

            WriteIPDLParam(reply__, this, aSelected);
            // Sentinel = 'aSelected'
            (reply__)->WriteSentinel(291767179);
            WriteIPDLParam(reply__, this, aOk);
            // Sentinel = 'aOk'
            (reply__)->WriteSentinel(36634908);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_IsItemSelected__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_IsItemSelected", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132055642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aSelected{};
            if ((!((this)->RecvIsItemSelected(std::move(aID), std::move(aIndex), (&(aSelected)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_IsItemSelected(id__);

            WriteIPDLParam(reply__, this, aSelected);
            // Sentinel = 'aSelected'
            (reply__)->WriteSentinel(291767179);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_AddItemToSelection__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_AddItemToSelection", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132055642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aSuccess{};
            if ((!((this)->RecvAddItemToSelection(std::move(aID), std::move(aIndex), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_AddItemToSelection(id__);

            WriteIPDLParam(reply__, this, aSuccess);
            // Sentinel = 'aSuccess'
            (reply__)->WriteSentinel(236323643);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_RemoveItemFromSelection__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_RemoveItemFromSelection", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t aIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132055642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aSuccess{};
            if ((!((this)->RecvRemoveItemFromSelection(std::move(aID), std::move(aIndex), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_RemoveItemFromSelection(id__);

            WriteIPDLParam(reply__, this, aSuccess);
            // Sentinel = 'aSuccess'
            (reply__)->WriteSentinel(236323643);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_SelectAll__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_SelectAll", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aSuccess{};
            if ((!((this)->RecvSelectAll(std::move(aID), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_SelectAll(id__);

            WriteIPDLParam(reply__, this, aSuccess);
            // Sentinel = 'aSuccess'
            (reply__)->WriteSentinel(236323643);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_UnselectAll__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_UnselectAll", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aSuccess{};
            if ((!((this)->RecvUnselectAll(std::move(aID), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_UnselectAll(id__);

            WriteIPDLParam(reply__, this, aSuccess);
            // Sentinel = 'aSuccess'
            (reply__)->WriteSentinel(236323643);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_DoAction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_DoAction", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint8_t aIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIndex)))))) {
                FatalError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            // Sentinel = 'aIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132055642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aSuccess{};
            if ((!((this)->RecvDoAction(std::move(aID), std::move(aIndex), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_DoAction(id__);

            WriteIPDLParam(reply__, this, aSuccess);
            // Sentinel = 'aSuccess'
            (reply__)->WriteSentinel(236323643);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_ActionCount__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ActionCount", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint8_t aCount{};
            if ((!((this)->RecvActionCount(std::move(aID), (&(aCount)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_ActionCount(id__);

            WriteIPDLParam(reply__, this, aCount);
            // Sentinel = 'aCount'
            (reply__)->WriteSentinel(134611563);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_ActionDescriptionAt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ActionDescriptionAt", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint8_t aIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIndex)))))) {
                FatalError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            // Sentinel = 'aIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132055642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aDescription{};
            if ((!((this)->RecvActionDescriptionAt(std::move(aID), std::move(aIndex), (&(aDescription)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_ActionDescriptionAt(id__);

            WriteIPDLParam(reply__, this, aDescription);
            // Sentinel = 'aDescription'
            (reply__)->WriteSentinel(515114214);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_ActionNameAt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ActionNameAt", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint8_t aIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIndex)))))) {
                FatalError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            // Sentinel = 'aIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132055642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aName{};
            if ((!((this)->RecvActionNameAt(std::move(aID), std::move(aIndex), (&(aName)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_ActionNameAt(id__);

            WriteIPDLParam(reply__, this, aName);
            // Sentinel = 'aName'
            (reply__)->WriteSentinel(92537315);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_AccessKey__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_AccessKey", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aKey{};
            uint32_t aModifierMask{};
            if ((!((this)->RecvAccessKey(std::move(aID), (&(aKey)), (&(aModifierMask)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_AccessKey(id__);

            WriteIPDLParam(reply__, this, aKey);
            // Sentinel = 'aKey'
            (reply__)->WriteSentinel(61604235);
            WriteIPDLParam(reply__, this, aModifierMask);
            // Sentinel = 'aModifierMask'
            (reply__)->WriteSentinel(591594781);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_KeyboardShortcut__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_KeyboardShortcut", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t aKey{};
            uint32_t aModifierMask{};
            if ((!((this)->RecvKeyboardShortcut(std::move(aID), (&(aKey)), (&(aModifierMask)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_KeyboardShortcut(id__);

            WriteIPDLParam(reply__, this, aKey);
            // Sentinel = 'aKey'
            (reply__)->WriteSentinel(61604235);
            WriteIPDLParam(reply__, this, aModifierMask);
            // Sentinel = 'aModifierMask'
            (reply__)->WriteSentinel(591594781);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_AtkKeyBinding__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_AtkKeyBinding", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aResult{};
            if ((!((this)->RecvAtkKeyBinding(std::move(aID), (&(aResult)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_AtkKeyBinding(id__);

            WriteIPDLParam(reply__, this, aResult);
            // Sentinel = 'aResult'
            (reply__)->WriteSentinel(185205473);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_CurValue__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_CurValue", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            double aValue{};
            if ((!((this)->RecvCurValue(std::move(aID), (&(aValue)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_CurValue(id__);

            WriteIPDLParam(reply__, this, aValue);
            // Sentinel = 'aValue'
            (reply__)->WriteSentinel(135332447);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_SetCurValue__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_SetCurValue", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            double aValue{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aValue)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'aValue'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 135332447)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aRetVal{};
            if ((!((this)->RecvSetCurValue(std::move(aID), std::move(aValue), (&(aRetVal)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_SetCurValue(id__);

            WriteIPDLParam(reply__, this, aRetVal);
            // Sentinel = 'aRetVal'
            (reply__)->WriteSentinel(177406640);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_MinValue__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_MinValue", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            double aValue{};
            if ((!((this)->RecvMinValue(std::move(aID), (&(aValue)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_MinValue(id__);

            WriteIPDLParam(reply__, this, aValue);
            // Sentinel = 'aValue'
            (reply__)->WriteSentinel(135332447);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_MaxValue__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_MaxValue", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            double aValue{};
            if ((!((this)->RecvMaxValue(std::move(aID), (&(aValue)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_MaxValue(id__);

            WriteIPDLParam(reply__, this, aValue);
            // Sentinel = 'aValue'
            (reply__)->WriteSentinel(135332447);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_Step__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_Step", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            double aStep{};
            if ((!((this)->RecvStep(std::move(aID), (&(aStep)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_Step(id__);

            WriteIPDLParam(reply__, this, aStep);
            // Sentinel = 'aStep'
            (reply__)->WriteSentinel(97255934);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_FocusedChild__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_FocusedChild", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            PDocAccessibleChild* aResultDoc{};
            uint64_t aResultID{};
            if ((!((this)->RecvFocusedChild(std::move(aID), (&(aResultDoc)), (&(aResultID)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_FocusedChild(id__);

            WriteIPDLParam(reply__, this, aResultDoc);
            // Sentinel = 'aResultDoc'
            (reply__)->WriteSentinel(364512247);
            WriteIPDLParam(reply__, this, aResultID);
            // Sentinel = 'aResultID'
            (reply__)->WriteSentinel(295830382);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_Language__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_Language", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aLocale{};
            if ((!((this)->RecvLanguage(std::move(aID), (&(aLocale)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_Language(id__);

            WriteIPDLParam(reply__, this, aLocale);
            // Sentinel = 'aLocale'
            (reply__)->WriteSentinel(177013426);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_DocType__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_DocType", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aType{};
            if ((!((this)->RecvDocType(std::move(aID), (&(aType)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_DocType(id__);

            WriteIPDLParam(reply__, this, aType);
            // Sentinel = 'aType'
            (reply__)->WriteSentinel(99222020);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_Title__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_Title", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aTitle{};
            if ((!((this)->RecvTitle(std::move(aID), (&(aTitle)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_Title(id__);

            WriteIPDLParam(reply__, this, aTitle);
            // Sentinel = 'aTitle'
            (reply__)->WriteSentinel(137167460);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_URL__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_URL", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aURL{};
            if ((!((this)->RecvURL(std::move(aID), (&(aURL)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_URL(id__);

            WriteIPDLParam(reply__, this, aURL);
            // Sentinel = 'aURL'
            (reply__)->WriteSentinel(58130773);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_MimeType__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_MimeType", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aMime{};
            if ((!((this)->RecvMimeType(std::move(aID), (&(aMime)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_MimeType(id__);

            WriteIPDLParam(reply__, this, aMime);
            // Sentinel = 'aMime'
            (reply__)->WriteSentinel(93848042);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_URLDocTypeMimeType__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_URLDocTypeMimeType", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aURL{};
            nsString aDocType{};
            nsString aMimeType{};
            if ((!((this)->RecvURLDocTypeMimeType(std::move(aID), (&(aURL)), (&(aDocType)), (&(aMimeType)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_URLDocTypeMimeType(id__);

            WriteIPDLParam(reply__, this, aURL);
            // Sentinel = 'aURL'
            (reply__)->WriteSentinel(58130773);
            WriteIPDLParam(reply__, this, aDocType);
            // Sentinel = 'aDocType'
            (reply__)->WriteSentinel(225772314);
            WriteIPDLParam(reply__, this, aMimeType);
            // Sentinel = 'aMimeType'
            (reply__)->WriteSentinel(289407884);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_ChildAtPoint__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ChildAtPoint", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aX{};
            int32_t aY{};
            uint32_t aWhich{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aX)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aX'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18612410)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aY)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aY'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18677947)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWhich)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWhich'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 134742613)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            PDocAccessibleChild* aResultDoc{};
            uint64_t aResultID{};
            if ((!((this)->RecvChildAtPoint(std::move(aID), std::move(aX), std::move(aY), std::move(aWhich), (&(aResultDoc)), (&(aResultID)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_ChildAtPoint(id__);

            WriteIPDLParam(reply__, this, aResultDoc);
            // Sentinel = 'aResultDoc'
            (reply__)->WriteSentinel(364512247);
            WriteIPDLParam(reply__, this, aResultID);
            // Sentinel = 'aResultID'
            (reply__)->WriteSentinel(295830382);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_Extents__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_Extents", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            bool aNeedsScreenCoords{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNeedsScreenCoords)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aNeedsScreenCoords'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1106642715)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t aX{};
            int32_t aY{};
            int32_t aWidth{};
            int32_t aHeight{};
            if ((!((this)->RecvExtents(std::move(aID), std::move(aNeedsScreenCoords), (&(aX)), (&(aY)), (&(aWidth)), (&(aHeight)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_Extents(id__);

            WriteIPDLParam(reply__, this, aX);
            // Sentinel = 'aX'
            (reply__)->WriteSentinel(18612410);
            WriteIPDLParam(reply__, this, aY);
            // Sentinel = 'aY'
            (reply__)->WriteSentinel(18677947);
            WriteIPDLParam(reply__, this, aWidth);
            // Sentinel = 'aWidth'
            (reply__)->WriteSentinel(136249954);
            WriteIPDLParam(reply__, this, aHeight);
            // Sentinel = 'aHeight'
            (reply__)->WriteSentinel(175375035);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_ExtentsInCSSPixels__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ExtentsInCSSPixels", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t aX{};
            int32_t aY{};
            int32_t aWidth{};
            int32_t aHeight{};
            if ((!((this)->RecvExtentsInCSSPixels(std::move(aID), (&(aX)), (&(aY)), (&(aWidth)), (&(aHeight)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_ExtentsInCSSPixels(id__);

            WriteIPDLParam(reply__, this, aX);
            // Sentinel = 'aX'
            (reply__)->WriteSentinel(18612410);
            WriteIPDLParam(reply__, this, aY);
            // Sentinel = 'aY'
            (reply__)->WriteSentinel(18677947);
            WriteIPDLParam(reply__, this, aWidth);
            // Sentinel = 'aWidth'
            (reply__)->WriteSentinel(136249954);
            WriteIPDLParam(reply__, this, aHeight);
            // Sentinel = 'aHeight'
            (reply__)->WriteSentinel(175375035);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PDocAccessible::Msg_DOMNodeID__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_DOMNodeID", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsString aDOMNodeID{};
            if ((!((this)->RecvDOMNodeID(std::move(aID), (&(aDOMNodeID)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PDocAccessible::Reply_DOMNodeID(id__);

            WriteIPDLParam(reply__, this, aDOMNodeID);
            // Sentinel = 'aDOMNodeID'
            (reply__)->WriteSentinel(308216661);

            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PDocAccessibleChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PDocAccessibleChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PDocAccessibleChild::ClearSubtree() -> void
{
    for (auto it = mManagedPDocAccessiblePlatformExtChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPDocAccessiblePlatformExtChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPDocAccessiblePlatformExtChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPDocAccessiblePlatformExtChild.Clear();

}



} // namespace a11y
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::a11y::PDocAccessibleChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::a11y::PDocAccessibleChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PDocAccessible", PDocAccessibleMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::a11y::PDocAccessibleChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
