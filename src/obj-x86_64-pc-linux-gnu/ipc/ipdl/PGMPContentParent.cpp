//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gmp/PGMPContentParent.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/gmp/PGMPVideoDecoderParent.h"
#include "mozilla/gmp/PGMPVideoEncoderParent.h"
#include "mozilla/gmp/PChromiumCDMParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gmp {


auto PGMPContentParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PGMPContentParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PGMPContentParent::EnteredCxxStack() -> void
{
}

auto PGMPContentParent::ExitedCxxStack() -> void
{
}

auto PGMPContentParent::EnteredCall() -> void
{
}

auto PGMPContentParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PGMPContentParent::PGMPContentParent() :
    mozilla::ipc::IToplevelProtocol("PGMPContentParent", PGMPContentMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PGMPContentParent);
}

PGMPContentParent::~PGMPContentParent()
{
    MOZ_COUNT_DTOR(PGMPContentParent);
}

auto PGMPContentParent::ManagedPGMPVideoDecoderParent(nsTArray<PGMPVideoDecoderParent*>& aArr) const -> void
{
    mManagedPGMPVideoDecoderParent.ToArray(aArr);
}

auto PGMPContentParent::ManagedPGMPVideoDecoderParent() const -> const ManagedContainer<PGMPVideoDecoderParent>&
{
    return mManagedPGMPVideoDecoderParent;
}

auto PGMPContentParent::ManagedPGMPVideoEncoderParent(nsTArray<PGMPVideoEncoderParent*>& aArr) const -> void
{
    mManagedPGMPVideoEncoderParent.ToArray(aArr);
}

auto PGMPContentParent::ManagedPGMPVideoEncoderParent() const -> const ManagedContainer<PGMPVideoEncoderParent>&
{
    return mManagedPGMPVideoEncoderParent;
}

auto PGMPContentParent::ManagedPChromiumCDMParent(nsTArray<PChromiumCDMParent*>& aArr) const -> void
{
    mManagedPChromiumCDMParent.ToArray(aArr);
}

auto PGMPContentParent::ManagedPChromiumCDMParent() const -> const ManagedContainer<PChromiumCDMParent>&
{
    return mManagedPChromiumCDMParent;
}

auto PGMPContentParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPGMPVideoDecoderParent.Count();
    total += mManagedPGMPVideoEncoderParent.Count();
    total += mManagedPChromiumCDMParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPGMPVideoDecoderParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPGMPVideoEncoderParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPChromiumCDMParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PGMPContentParent::OpenPGMPVideoDecoderEndpoint(PGMPVideoDecoderParent* aActor) -> ManagedEndpoint<PGMPVideoDecoderChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PGMPVideoDecoderParent actor");
        return ManagedEndpoint<PGMPVideoDecoderChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPGMPVideoDecoderParent.PutEntry(aActor);

    return ManagedEndpoint<PGMPVideoDecoderChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PGMPContentParent::BindPGMPVideoDecoderEndpoint(
        ManagedEndpoint<PGMPVideoDecoderParent> aEndpoint,
        PGMPVideoDecoderParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PGMPVideoDecoderParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPGMPVideoDecoderParent.PutEntry(aActor);

    return true;
}

auto PGMPContentParent::OpenPGMPVideoEncoderEndpoint(PGMPVideoEncoderParent* aActor) -> ManagedEndpoint<PGMPVideoEncoderChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PGMPVideoEncoderParent actor");
        return ManagedEndpoint<PGMPVideoEncoderChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPGMPVideoEncoderParent.PutEntry(aActor);

    return ManagedEndpoint<PGMPVideoEncoderChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PGMPContentParent::BindPGMPVideoEncoderEndpoint(
        ManagedEndpoint<PGMPVideoEncoderParent> aEndpoint,
        PGMPVideoEncoderParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PGMPVideoEncoderParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPGMPVideoEncoderParent.PutEntry(aActor);

    return true;
}

auto PGMPContentParent::OpenPChromiumCDMEndpoint(PChromiumCDMParent* aActor) -> ManagedEndpoint<PChromiumCDMChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PChromiumCDMParent actor");
        return ManagedEndpoint<PChromiumCDMChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPChromiumCDMParent.PutEntry(aActor);

    return ManagedEndpoint<PChromiumCDMChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PGMPContentParent::BindPChromiumCDMEndpoint(
        ManagedEndpoint<PChromiumCDMParent> aEndpoint,
        PChromiumCDMParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PChromiumCDMParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPChromiumCDMParent.PutEntry(aActor);

    return true;
}

auto PGMPContentParent::SendPGMPVideoDecoderConstructor(
        PGMPVideoDecoderParent* actor,
        const uint32_t& aDecryptorId) -> PGMPVideoDecoderParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PGMPVideoDecoderParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPGMPVideoDecoderParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PGMPContent::Msg_PGMPVideoDecoderConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aDecryptorId);
    // Sentinel = 'aDecryptorId'
    (msg__)->WriteSentinel(515638475);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PGMPContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPContent::Msg_PGMPVideoDecoderConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PGMPVideoDecoderParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PGMPVideoDecoderMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PGMPContentParent::SendPGMPVideoEncoderConstructor(PGMPVideoEncoderParent* actor) -> PGMPVideoEncoderParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PGMPVideoEncoderParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPGMPVideoEncoderParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PGMPContent::Msg_PGMPVideoEncoderConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PGMPContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPContent::Msg_PGMPVideoEncoderConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PGMPVideoEncoderParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PGMPVideoEncoderMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PGMPContentParent::SendPChromiumCDMConstructor(PChromiumCDMParent* actor) -> PChromiumCDMParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PChromiumCDMParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPChromiumCDMParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PGMPContent::Msg_PChromiumCDMConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PGMPContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPContent::Msg_PChromiumCDMConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PChromiumCDMParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PChromiumCDMMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PGMPContentParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PGMPVideoDecoderMsgStart:
{
            PGMPVideoDecoderParent* actor = static_cast<PGMPVideoDecoderParent*>(aListener);
            auto& container = mManagedPGMPVideoDecoderParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PGMPVideoEncoderMsgStart:
{
            PGMPVideoEncoderParent* actor = static_cast<PGMPVideoEncoderParent*>(aListener);
            auto& container = mManagedPGMPVideoEncoderParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PChromiumCDMMsgStart:
{
            PChromiumCDMParent* actor = static_cast<PChromiumCDMParent*>(aListener);
            auto& container = mManagedPChromiumCDMParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PGMPContentParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    default:
        FatalError("unreached");
        return;
    }
}

auto PGMPContentParent::OnMessageReceived(const Message& msg__) -> PGMPContentParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PGMPContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPContentParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PGMPContent::Reply_PGMPVideoDecoderConstructor__ID:
        {
            return MsgProcessed;
        }
    case PGMPContent::Reply_PGMPVideoEncoderConstructor__ID:
        {
            return MsgProcessed;
        }
    case PGMPContent::Reply_PChromiumCDMConstructor__ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PGMPContentParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPContentParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PGMPContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPContentParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    return MsgNotKnown;
}

auto PGMPContentParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPContentParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PGMPContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPContentParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnCallReceived(msg__, reply__);
    }

    return MsgNotKnown;
}

auto PGMPContentParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PGMPContentParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PGMPContentParent::ProcessNativeEventsInInterruptCall() -> void
{
#ifdef OS_WIN
    GetIPCChannel()->ProcessNativeEventsInInterruptCall();
#else
    FatalError("This method is Windows-only");
#endif
}

auto PGMPContentParent::ClearSubtree() -> void
{
    for (auto it = mManagedPGMPVideoDecoderParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPGMPVideoDecoderParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPGMPVideoDecoderParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPGMPVideoDecoderParent.Clear();

    for (auto it = mManagedPGMPVideoEncoderParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPGMPVideoEncoderParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPGMPVideoEncoderParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPGMPVideoEncoderParent.Clear();

    for (auto it = mManagedPChromiumCDMParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPChromiumCDMParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPChromiumCDMParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPChromiumCDMParent.Clear();

}



} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gmp::PGMPContentParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gmp::PGMPContentParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PGMPContent", PGMPContentMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gmp::PGMPContentParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
