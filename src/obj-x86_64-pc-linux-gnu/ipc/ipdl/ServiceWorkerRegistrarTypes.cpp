//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/ServiceWorkerRegistrarTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ServiceWorkerRegistrationData|
//
namespace mozilla {
namespace dom {
auto ServiceWorkerRegistrationData::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(ServiceWorkerRegistrationData, lastUpdateTime_) - offsetof(ServiceWorkerRegistrationData, currentWorkerInstalledTime_)) == 16,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ServiceWorkerRegistrationData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).scope());
    // Sentinel = 'scope'
    (aMsg)->WriteSentinel(107086363);
    WriteIPDLParam(aMsg, aActor, (aVar).currentWorkerURL());
    // Sentinel = 'currentWorkerURL'
    (aMsg)->WriteSentinel(955647601);
    WriteIPDLParam(aMsg, aActor, (aVar).currentWorkerHandlesFetch());
    // Sentinel = 'currentWorkerHandlesFetch'
    (aMsg)->WriteSentinel(2250312231);
    WriteIPDLParam(aMsg, aActor, (aVar).cacheName());
    // Sentinel = 'cacheName'
    (aMsg)->WriteSentinel(289670006);
    WriteIPDLParam(aMsg, aActor, (aVar).principal());
    // Sentinel = 'principal'
    (aMsg)->WriteSentinel(319620035);
    (aMsg)->WriteBytes((&((aVar).currentWorkerInstalledTime())), 24);
    // Sentinel = 'currentWorkerInstalledTime | currentWorkerActivatedTime | lastUpdateTime'
    (aMsg)->WriteSentinel(452992108);
    (aMsg)->WriteBytes((&((aVar).updateViaCache())), 2);
    // Sentinel = 'updateViaCache'
    (aMsg)->WriteSentinel(706348408);
}

auto IPDLParamTraits<mozilla::dom::ServiceWorkerRegistrationData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->scope())))))) {
        aActor->FatalError("Error deserializing 'scope' (nsCString) member of 'ServiceWorkerRegistrationData'");
        return false;
    }
    // Sentinel = 'scope'
    if ((!((aMsg)->ReadSentinel(aIter, 107086363)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'scope' (nsCString) member of 'ServiceWorkerRegistrationData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->currentWorkerURL())))))) {
        aActor->FatalError("Error deserializing 'currentWorkerURL' (nsCString) member of 'ServiceWorkerRegistrationData'");
        return false;
    }
    // Sentinel = 'currentWorkerURL'
    if ((!((aMsg)->ReadSentinel(aIter, 955647601)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'currentWorkerURL' (nsCString) member of 'ServiceWorkerRegistrationData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->currentWorkerHandlesFetch())))))) {
        aActor->FatalError("Error deserializing 'currentWorkerHandlesFetch' (bool) member of 'ServiceWorkerRegistrationData'");
        return false;
    }
    // Sentinel = 'currentWorkerHandlesFetch'
    if ((!((aMsg)->ReadSentinel(aIter, 2250312231)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'currentWorkerHandlesFetch' (bool) member of 'ServiceWorkerRegistrationData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cacheName())))))) {
        aActor->FatalError("Error deserializing 'cacheName' (nsString) member of 'ServiceWorkerRegistrationData'");
        return false;
    }
    // Sentinel = 'cacheName'
    if ((!((aMsg)->ReadSentinel(aIter, 289670006)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cacheName' (nsString) member of 'ServiceWorkerRegistrationData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principal())))))) {
        aActor->FatalError("Error deserializing 'principal' (PrincipalInfo) member of 'ServiceWorkerRegistrationData'");
        return false;
    }
    // Sentinel = 'principal'
    if ((!((aMsg)->ReadSentinel(aIter, 319620035)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principal' (PrincipalInfo) member of 'ServiceWorkerRegistrationData'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->currentWorkerInstalledTime())), 24)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'currentWorkerInstalledTime | currentWorkerActivatedTime | lastUpdateTime'
    if ((!((aMsg)->ReadSentinel(aIter, 452992108)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->updateViaCache())), 2)))) {
        aActor->FatalError("Error bulk reading fields from uint16_t");
        return false;
    }
    // Sentinel = 'updateViaCache'
    if ((!((aMsg)->ReadSentinel(aIter, 706348408)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint16_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
