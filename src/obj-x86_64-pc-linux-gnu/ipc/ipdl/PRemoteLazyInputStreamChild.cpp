//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PRemoteLazyInputStreamChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/RemoteLazyInputStreamChild.h"

#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/dom/PContentChild.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/net/PSocketProcessChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


auto PRemoteLazyInputStreamChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PRemoteLazyInputStreamChild::PRemoteLazyInputStreamChild() :
    mozilla::ipc::IProtocol(PRemoteLazyInputStreamMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PRemoteLazyInputStreamChild);
}

PRemoteLazyInputStreamChild::~PRemoteLazyInputStreamChild()
{
    MOZ_COUNT_DTOR(PRemoteLazyInputStreamChild);
}

auto PRemoteLazyInputStreamChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PRemoteLazyInputStreamChild::SendStreamNeeded() -> bool
{
    IPC::Message* msg__ = PRemoteLazyInputStream::Msg_StreamNeeded(Id());





    if (mozilla::ipc::LoggingEnabledFor("PRemoteLazyInputStreamChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteLazyInputStreamChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteLazyInputStream::Msg_StreamNeeded", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRemoteLazyInputStreamChild::SendLengthNeeded() -> bool
{
    IPC::Message* msg__ = PRemoteLazyInputStream::Msg_LengthNeeded(Id());





    if (mozilla::ipc::LoggingEnabledFor("PRemoteLazyInputStreamChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteLazyInputStreamChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteLazyInputStream::Msg_LengthNeeded", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRemoteLazyInputStreamChild::SendClose() -> bool
{
    IPC::Message* msg__ = PRemoteLazyInputStream::Msg_Close(Id());





    if (mozilla::ipc::LoggingEnabledFor("PRemoteLazyInputStreamChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteLazyInputStreamChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteLazyInputStream::Msg_Close", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRemoteLazyInputStreamChild::Send__delete__(PRemoteLazyInputStreamChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PRemoteLazyInputStream::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PRemoteLazyInputStreamChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteLazyInputStreamChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteLazyInputStream::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PRemoteLazyInputStreamMsgStart, actor);
    return sendok__;
}

auto PRemoteLazyInputStreamChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PRemoteLazyInputStreamChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PRemoteLazyInputStreamChild::OnMessageReceived(const Message& msg__) -> PRemoteLazyInputStreamChild::Result
{
    switch (msg__.type()) {
    case PRemoteLazyInputStream::Msg_StreamReady__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteLazyInputStreamChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteLazyInputStreamChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteLazyInputStream::Msg_StreamReady", OTHER);

            PickleIterator iter__{msg__};
            mozilla::Maybe<IPCStream> aStream{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStream)))))) {
                FatalError("Error deserializing 'IPCStream?'");
                return MsgValueError;
            }
            // Sentinel = 'aStream'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 185205454)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCStream?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<RemoteLazyInputStreamChild*>(this))->RecvStreamReady(std::move(aStream))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemoteLazyInputStream::Msg_LengthReady__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteLazyInputStreamChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteLazyInputStreamChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteLazyInputStream::Msg_LengthReady", OTHER);

            PickleIterator iter__{msg__};
            int64_t aLength{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLength)))))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aLength'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179045060)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<RemoteLazyInputStreamChild*>(this))->RecvLengthReady(std::move(aLength))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemoteLazyInputStream::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PRemoteLazyInputStream::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteLazyInputStreamChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteLazyInputStreamChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteLazyInputStream::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PRemoteLazyInputStreamChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PRemoteLazyInputStream'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PRemoteLazyInputStream'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PRemoteLazyInputStream'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<RemoteLazyInputStreamChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PRemoteLazyInputStreamMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PRemoteLazyInputStreamChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PRemoteLazyInputStreamChild::Result
{
    return MsgNotKnown;
}

auto PRemoteLazyInputStreamChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PRemoteLazyInputStreamChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PRemoteLazyInputStreamChild::ClearSubtree() -> void
{
}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PRemoteLazyInputStreamChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PRemoteLazyInputStreamChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PRemoteLazyInputStream", PRemoteLazyInputStreamMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PRemoteLazyInputStreamChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
