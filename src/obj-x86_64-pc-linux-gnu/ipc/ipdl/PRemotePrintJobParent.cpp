//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layout/PRemotePrintJobParent.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/embedding/PPrintingParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layout {


MOZ_IMPLICIT PRemotePrintJobParent::PRemotePrintJobParent() :
    mozilla::ipc::IProtocol(PRemotePrintJobMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PRemotePrintJobParent);
}

PRemotePrintJobParent::~PRemotePrintJobParent()
{
    MOZ_COUNT_DTOR(PRemotePrintJobParent);
}

auto PRemotePrintJobParent::Manager() const -> PPrintingParent*
{
    return static_cast<PPrintingParent*>(IProtocol::Manager());
}

auto PRemotePrintJobParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PRemotePrintJobParent::SendAbortPrint(const nsresult& aRv) -> bool
{
    IPC::Message* msg__ = PRemotePrintJob::Msg_AbortPrint(Id());

    WriteIPDLParam(msg__, this, aRv);
    // Sentinel = 'aRv'
    (msg__)->WriteSentinel(37749034);




    if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemotePrintJobParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_AbortPrint", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRemotePrintJobParent::SendPrintInitializationResult(
        const nsresult& aRv,
        const FileDescriptor& aFd) -> bool
{
    IPC::Message* msg__ = PRemotePrintJob::Msg_PrintInitializationResult(Id());

    WriteIPDLParam(msg__, this, aRv);
    // Sentinel = 'aRv'
    (msg__)->WriteSentinel(37749034);
    WriteIPDLParam(msg__, this, aFd);
    // Sentinel = 'aFd'
    (msg__)->WriteSentinel(34996492);




    if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemotePrintJobParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_PrintInitializationResult", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRemotePrintJobParent::SendPageProcessed(const FileDescriptor& aFd) -> bool
{
    IPC::Message* msg__ = PRemotePrintJob::Msg_PageProcessed(Id());

    WriteIPDLParam(msg__, this, aFd);
    // Sentinel = 'aFd'
    (msg__)->WriteSentinel(34996492);




    if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemotePrintJobParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_PageProcessed", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRemotePrintJobParent::Send__delete__(PRemotePrintJobParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PRemotePrintJob::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemotePrintJobParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemotePrintJob::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PRemotePrintJobMsgStart, actor);
    return sendok__;
}

auto PRemotePrintJobParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PRemotePrintJobParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PRemotePrintJobParent::OnMessageReceived(const Message& msg__) -> PRemotePrintJobParent::Result
{
    switch (msg__.type()) {
    case PRemotePrintJob::Msg_AbortPrint__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemotePrintJobParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_AbortPrint", OTHER);

            PickleIterator iter__{msg__};
            nsresult aRv{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRv)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aRv'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 37749034)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvAbortPrint(std::move(aRv))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemotePrintJob::Msg_InitializePrint__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemotePrintJobParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_InitializePrint", OTHER);

            PickleIterator iter__{msg__};
            nsString aDocumentTitle{};
            nsString aPrintToFile{};
            int32_t aStartPage{};
            int32_t aEndPage{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDocumentTitle)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aDocumentTitle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 695141795)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPrintToFile)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aPrintToFile'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 511444146)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStartPage)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStartPage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 361497581)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndPage)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEndPage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 219218678)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvInitializePrint(std::move(aDocumentTitle), std::move(aPrintToFile), std::move(aStartPage), std::move(aEndPage))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemotePrintJob::Msg_ProcessPage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemotePrintJobParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_ProcessPage", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<uint64_t> deps{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(deps)))))) {
                FatalError("Error deserializing 'uint64_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'deps'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 68551085)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvProcessPage(std::move(deps))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemotePrintJob::Msg_FinalizePrint__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemotePrintJobParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_FinalizePrint", OTHER);

            if ((!((this)->RecvFinalizePrint()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemotePrintJob::Msg_StateChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemotePrintJobParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_StateChange", OTHER);

            PickleIterator iter__{msg__};
            long aStateFlags{};
            nsresult aStatus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStateFlags)))))) {
                FatalError("Error deserializing 'long'");
                return MsgValueError;
            }
            // Sentinel = 'aStateFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 428606544)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'long'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatus)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186712806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvStateChange(std::move(aStateFlags), std::move(aStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemotePrintJob::Msg_ProgressChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemotePrintJobParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_ProgressChange", OTHER);

            PickleIterator iter__{msg__};
            long aCurSelfProgress{};
            long aMaxSelfProgress{};
            long aCurTotalProgress{};
            long aMaxTotalProgress{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCurSelfProgress)))))) {
                FatalError("Error deserializing 'long'");
                return MsgValueError;
            }
            // Sentinel = 'aCurSelfProgress'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 886113899)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'long'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMaxSelfProgress)))))) {
                FatalError("Error deserializing 'long'");
                return MsgValueError;
            }
            // Sentinel = 'aMaxSelfProgress'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 882706023)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'long'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCurTotalProgress)))))) {
                FatalError("Error deserializing 'long'");
                return MsgValueError;
            }
            // Sentinel = 'aCurTotalProgress'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1012795109)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'long'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMaxTotalProgress)))))) {
                FatalError("Error deserializing 'long'");
                return MsgValueError;
            }
            // Sentinel = 'aMaxTotalProgress'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1009125089)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'long'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvProgressChange(std::move(aCurSelfProgress), std::move(aMaxSelfProgress), std::move(aCurTotalProgress), std::move(aMaxTotalProgress))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemotePrintJob::Msg_StatusChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemotePrintJobParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_StatusChange", OTHER);

            PickleIterator iter__{msg__};
            nsresult aStatus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatus)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186712806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvStatusChange(std::move(aStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemotePrintJob::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PRemotePrintJobParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PRemotePrintJobParent::Result
{
    return MsgNotKnown;
}

auto PRemotePrintJobParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PRemotePrintJobParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PRemotePrintJobParent::ClearSubtree() -> void
{
}



} // namespace layout
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layout::PRemotePrintJobParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layout::PRemotePrintJobParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PRemotePrintJob", PRemotePrintJobMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layout::PRemotePrintJobParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
