//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PAPZInputBridgeChild.h"
#include "InputData.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/layers/APZInputBridge.h"
#include "mozilla/layers/APZInputBridgeChild.h"
#include "mozilla/layers/ScrollableLayerGuid.h"

#include "mozilla/gfx/PGPUChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {


MOZ_IMPLICIT PAPZInputBridgeChild::PAPZInputBridgeChild() :
    mozilla::ipc::IProtocol(PAPZInputBridgeMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PAPZInputBridgeChild);
}

PAPZInputBridgeChild::~PAPZInputBridgeChild()
{
    MOZ_COUNT_DTOR(PAPZInputBridgeChild);
}

auto PAPZInputBridgeChild::Manager() const -> PGPUChild*
{
    return static_cast<PGPUChild*>(IProtocol::Manager());
}

auto PAPZInputBridgeChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PAPZInputBridgeChild::SendReceiveMultiTouchInputEvent(
        const MultiTouchInput& aEvent,
        APZEventResult* aOutResult,
        MultiTouchInput* aOutEvent) -> bool
{
    IPC::Message* msg__ = PAPZInputBridge::Msg_ReceiveMultiTouchInputEvent(Id());

    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_ReceiveMultiTouchInputEvent", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PAPZInputBridge::Msg_ReceiveMultiTouchInputEvent", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutResult)))) {
        FatalError("Error deserializing 'APZEventResult'");
        return false;
    }
    // Sentinel = 'aOutResult'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 365626393)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'APZEventResult'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutEvent)))) {
        FatalError("Error deserializing 'MultiTouchInput'");
        return false;
    }
    // Sentinel = 'aOutEvent'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 293929884)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'MultiTouchInput'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PAPZInputBridgeChild::SendReceiveMouseInputEvent(
        const MouseInput& aEvent,
        APZEventResult* aOutResult,
        MouseInput* aOutEvent) -> bool
{
    IPC::Message* msg__ = PAPZInputBridge::Msg_ReceiveMouseInputEvent(Id());

    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_ReceiveMouseInputEvent", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PAPZInputBridge::Msg_ReceiveMouseInputEvent", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutResult)))) {
        FatalError("Error deserializing 'APZEventResult'");
        return false;
    }
    // Sentinel = 'aOutResult'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 365626393)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'APZEventResult'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutEvent)))) {
        FatalError("Error deserializing 'MouseInput'");
        return false;
    }
    // Sentinel = 'aOutEvent'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 293929884)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'MouseInput'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PAPZInputBridgeChild::SendReceivePanGestureInputEvent(
        const PanGestureInput& aEvent,
        APZEventResult* aOutResult,
        PanGestureInput* aOutEvent) -> bool
{
    IPC::Message* msg__ = PAPZInputBridge::Msg_ReceivePanGestureInputEvent(Id());

    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_ReceivePanGestureInputEvent", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PAPZInputBridge::Msg_ReceivePanGestureInputEvent", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutResult)))) {
        FatalError("Error deserializing 'APZEventResult'");
        return false;
    }
    // Sentinel = 'aOutResult'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 365626393)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'APZEventResult'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutEvent)))) {
        FatalError("Error deserializing 'PanGestureInput'");
        return false;
    }
    // Sentinel = 'aOutEvent'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 293929884)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'PanGestureInput'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PAPZInputBridgeChild::SendReceivePinchGestureInputEvent(
        const PinchGestureInput& aEvent,
        APZEventResult* aOutResult,
        PinchGestureInput* aOutEvent) -> bool
{
    IPC::Message* msg__ = PAPZInputBridge::Msg_ReceivePinchGestureInputEvent(Id());

    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_ReceivePinchGestureInputEvent", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PAPZInputBridge::Msg_ReceivePinchGestureInputEvent", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutResult)))) {
        FatalError("Error deserializing 'APZEventResult'");
        return false;
    }
    // Sentinel = 'aOutResult'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 365626393)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'APZEventResult'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutEvent)))) {
        FatalError("Error deserializing 'PinchGestureInput'");
        return false;
    }
    // Sentinel = 'aOutEvent'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 293929884)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'PinchGestureInput'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PAPZInputBridgeChild::SendReceiveTapGestureInputEvent(
        const TapGestureInput& aEvent,
        APZEventResult* aOutResult,
        TapGestureInput* aOutEvent) -> bool
{
    IPC::Message* msg__ = PAPZInputBridge::Msg_ReceiveTapGestureInputEvent(Id());

    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_ReceiveTapGestureInputEvent", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PAPZInputBridge::Msg_ReceiveTapGestureInputEvent", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutResult)))) {
        FatalError("Error deserializing 'APZEventResult'");
        return false;
    }
    // Sentinel = 'aOutResult'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 365626393)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'APZEventResult'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutEvent)))) {
        FatalError("Error deserializing 'TapGestureInput'");
        return false;
    }
    // Sentinel = 'aOutEvent'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 293929884)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'TapGestureInput'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PAPZInputBridgeChild::SendReceiveScrollWheelInputEvent(
        const ScrollWheelInput& aEvent,
        APZEventResult* aOutResult,
        ScrollWheelInput* aOutEvent) -> bool
{
    IPC::Message* msg__ = PAPZInputBridge::Msg_ReceiveScrollWheelInputEvent(Id());

    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_ReceiveScrollWheelInputEvent", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PAPZInputBridge::Msg_ReceiveScrollWheelInputEvent", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutResult)))) {
        FatalError("Error deserializing 'APZEventResult'");
        return false;
    }
    // Sentinel = 'aOutResult'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 365626393)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'APZEventResult'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutEvent)))) {
        FatalError("Error deserializing 'ScrollWheelInput'");
        return false;
    }
    // Sentinel = 'aOutEvent'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 293929884)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ScrollWheelInput'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PAPZInputBridgeChild::SendReceiveKeyboardInputEvent(
        const KeyboardInput& aEvent,
        APZEventResult* aOutResult,
        KeyboardInput* aOutEvent) -> bool
{
    IPC::Message* msg__ = PAPZInputBridge::Msg_ReceiveKeyboardInputEvent(Id());

    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_ReceiveKeyboardInputEvent", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PAPZInputBridge::Msg_ReceiveKeyboardInputEvent", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutResult)))) {
        FatalError("Error deserializing 'APZEventResult'");
        return false;
    }
    // Sentinel = 'aOutResult'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 365626393)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'APZEventResult'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutEvent)))) {
        FatalError("Error deserializing 'KeyboardInput'");
        return false;
    }
    // Sentinel = 'aOutEvent'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 293929884)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'KeyboardInput'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PAPZInputBridgeChild::SendUpdateWheelTransaction(
        const LayoutDeviceIntPoint& aRefPoint,
        const EventMessage& aEventMessage) -> bool
{
    IPC::Message* msg__ = PAPZInputBridge::Msg_UpdateWheelTransaction(Id());

    WriteIPDLParam(msg__, this, aRefPoint);
    // Sentinel = 'aRefPoint'
    (msg__)->WriteSentinel(285213577);
    WriteIPDLParam(msg__, this, aEventMessage);
    // Sentinel = 'aEventMessage'
    (msg__)->WriteSentinel(596772137);




    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_UpdateWheelTransaction", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZInputBridgeChild::SendProcessUnhandledEvent(
        const LayoutDeviceIntPoint& aRefPoint,
        LayoutDeviceIntPoint* aOutRefPoint,
        ScrollableLayerGuid* aOutTargetGuid,
        uint64_t* aOutFocusSequenceNumber,
        LayersId* aOutLayersId) -> bool
{
    IPC::Message* msg__ = PAPZInputBridge::Msg_ProcessUnhandledEvent(Id());

    WriteIPDLParam(msg__, this, aRefPoint);
    // Sentinel = 'aRefPoint'
    (msg__)->WriteSentinel(285213577);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_ProcessUnhandledEvent", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PAPZInputBridge::Msg_ProcessUnhandledEvent", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutRefPoint)))) {
        FatalError("Error deserializing 'LayoutDeviceIntPoint'");
        return false;
    }
    // Sentinel = 'aOutRefPoint'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 506528961)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDeviceIntPoint'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutTargetGuid)))) {
        FatalError("Error deserializing 'ScrollableLayerGuid'");
        return false;
    }
    // Sentinel = 'aOutTargetGuid'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 691799434)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutFocusSequenceNumber)))) {
        FatalError("Error deserializing 'uint64_t'");
        return false;
    }
    // Sentinel = 'aOutFocusSequenceNumber'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 1841105212)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutLayersId)))) {
        FatalError("Error deserializing 'LayersId'");
        return false;
    }
    // Sentinel = 'aOutLayersId'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 512754871)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'LayersId'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PAPZInputBridgeChild::Send__delete__(PAPZInputBridgeChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PAPZInputBridge::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZInputBridgeChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZInputBridge::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PAPZInputBridgeMsgStart, actor);
    return sendok__;
}

auto PAPZInputBridgeChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAPZInputBridgeChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAPZInputBridgeChild::OnMessageReceived(const Message& msg__) -> PAPZInputBridgeChild::Result
{
    switch (msg__.type()) {
    case PAPZInputBridge::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PAPZInputBridgeChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PAPZInputBridgeChild::Result
{
    return MsgNotKnown;
}

auto PAPZInputBridgeChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PAPZInputBridgeChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PAPZInputBridgeChild::ClearSubtree() -> void
{
}



} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PAPZInputBridgeChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layers::PAPZInputBridgeChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PAPZInputBridge", PAPZInputBridgeMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layers::PAPZInputBridgeChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
