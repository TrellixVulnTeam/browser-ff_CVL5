//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PAPZParent.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/layers/LayersMessageUtils.h"
#include "mozilla/layers/RemoteContentController.h"
#include "mozilla/layers/RepaintRequest.h"
#include "mozilla/layers/ScrollableLayerGuid.h"
#include "nsRegion.h"

#include "mozilla/layers/PCompositorBridgeParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {


auto PAPZParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PAPZParent::PAPZParent() :
    mozilla::ipc::IProtocol(PAPZMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PAPZParent);
}

PAPZParent::~PAPZParent()
{
    MOZ_COUNT_DTOR(PAPZParent);
}

auto PAPZParent::Manager() const -> PCompositorBridgeParent*
{
    return static_cast<PCompositorBridgeParent*>(IProtocol::Manager());
}

auto PAPZParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PAPZParent::SendLayerTransforms(const nsTArray<MatrixMessage>& aTransforms) -> bool
{
    IPC::Message* msg__ = PAPZ::Msg_LayerTransforms(Id());

    WriteIPDLParam(msg__, this, aTransforms);
    // Sentinel = 'aTransforms'
    (msg__)->WriteSentinel(446235793);




    if (mozilla::ipc::LoggingEnabledFor("PAPZParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZ::Msg_LayerTransforms", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZParent::SendRequestContentRepaint(const RepaintRequest& request) -> bool
{
    IPC::Message* msg__ = PAPZ::Msg_RequestContentRepaint(Id());

    WriteIPDLParam(msg__, this, request);
    // Sentinel = 'request'
    (msg__)->WriteSentinel(202703626);




    if (mozilla::ipc::LoggingEnabledFor("PAPZParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZ::Msg_RequestContentRepaint", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZParent::SendUpdateOverscrollVelocity(
        const ScrollableLayerGuid& aGuid,
        const float& aX,
        const float& aY,
        const bool& aIsRootContent) -> bool
{
    IPC::Message* msg__ = PAPZ::Msg_UpdateOverscrollVelocity(Id());

    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aX);
    // Sentinel = 'aX'
    (msg__)->WriteSentinel(18612410);
    WriteIPDLParam(msg__, this, aY);
    // Sentinel = 'aY'
    (msg__)->WriteSentinel(18677947);
    WriteIPDLParam(msg__, this, aIsRootContent);
    // Sentinel = 'aIsRootContent'
    (msg__)->WriteSentinel(683410845);




    if (mozilla::ipc::LoggingEnabledFor("PAPZParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZ::Msg_UpdateOverscrollVelocity", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZParent::SendUpdateOverscrollOffset(
        const ScrollableLayerGuid& aGuid,
        const float& aX,
        const float& aY,
        const bool& aIsRootContent) -> bool
{
    IPC::Message* msg__ = PAPZ::Msg_UpdateOverscrollOffset(Id());

    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aX);
    // Sentinel = 'aX'
    (msg__)->WriteSentinel(18612410);
    WriteIPDLParam(msg__, this, aY);
    // Sentinel = 'aY'
    (msg__)->WriteSentinel(18677947);
    WriteIPDLParam(msg__, this, aIsRootContent);
    // Sentinel = 'aIsRootContent'
    (msg__)->WriteSentinel(683410845);




    if (mozilla::ipc::LoggingEnabledFor("PAPZParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZ::Msg_UpdateOverscrollOffset", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZParent::SendNotifyMozMouseScrollEvent(
        const ViewID& aScrollId,
        const nsString& aEvent) -> bool
{
    IPC::Message* msg__ = PAPZ::Msg_NotifyMozMouseScrollEvent(Id());

    WriteIPDLParam(msg__, this, aScrollId);
    // Sentinel = 'aScrollId'
    (msg__)->WriteSentinel(293602174);
    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);




    if (mozilla::ipc::LoggingEnabledFor("PAPZParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZ::Msg_NotifyMozMouseScrollEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZParent::SendNotifyAPZStateChange(
        const ScrollableLayerGuid& aGuid,
        const GeckoContentController_APZStateChange& aChange,
        const int& aArg) -> bool
{
    IPC::Message* msg__ = PAPZ::Msg_NotifyAPZStateChange(Id());

    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aChange);
    // Sentinel = 'aChange'
    (msg__)->WriteSentinel(172556968);
    WriteIPDLParam(msg__, this, aArg);
    // Sentinel = 'aArg'
    (msg__)->WriteSentinel(60162428);




    if (mozilla::ipc::LoggingEnabledFor("PAPZParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZ::Msg_NotifyAPZStateChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZParent::SendNotifyFlushComplete() -> bool
{
    IPC::Message* msg__ = PAPZ::Msg_NotifyFlushComplete(Id());





    if (mozilla::ipc::LoggingEnabledFor("PAPZParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZ::Msg_NotifyFlushComplete", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZParent::SendNotifyAsyncScrollbarDragInitiated(
        const uint64_t& aDragBlockId,
        const ViewID& aScrollId,
        const ScrollDirection& aDirection) -> bool
{
    IPC::Message* msg__ = PAPZ::Msg_NotifyAsyncScrollbarDragInitiated(Id());

    WriteIPDLParam(msg__, this, aDragBlockId);
    // Sentinel = 'aDragBlockId'
    (msg__)->WriteSentinel(484246648);
    WriteIPDLParam(msg__, this, aScrollId);
    // Sentinel = 'aScrollId'
    (msg__)->WriteSentinel(293602174);
    WriteIPDLParam(msg__, this, aDirection);
    // Sentinel = 'aDirection'
    (msg__)->WriteSentinel(356647939);




    if (mozilla::ipc::LoggingEnabledFor("PAPZParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZ::Msg_NotifyAsyncScrollbarDragInitiated", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZParent::SendNotifyAsyncScrollbarDragRejected(const ViewID& aScrollId) -> bool
{
    IPC::Message* msg__ = PAPZ::Msg_NotifyAsyncScrollbarDragRejected(Id());

    WriteIPDLParam(msg__, this, aScrollId);
    // Sentinel = 'aScrollId'
    (msg__)->WriteSentinel(293602174);




    if (mozilla::ipc::LoggingEnabledFor("PAPZParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZ::Msg_NotifyAsyncScrollbarDragRejected", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZParent::SendNotifyAsyncAutoscrollRejected(const ViewID& aScrollId) -> bool
{
    IPC::Message* msg__ = PAPZ::Msg_NotifyAsyncAutoscrollRejected(Id());

    WriteIPDLParam(msg__, this, aScrollId);
    // Sentinel = 'aScrollId'
    (msg__)->WriteSentinel(293602174);




    if (mozilla::ipc::LoggingEnabledFor("PAPZParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZ::Msg_NotifyAsyncAutoscrollRejected", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZParent::SendDestroy() -> bool
{
    IPC::Message* msg__ = PAPZ::Msg_Destroy(Id());





    if (mozilla::ipc::LoggingEnabledFor("PAPZParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZ::Msg_Destroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAPZParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAPZParent::OnMessageReceived(const Message& msg__) -> PAPZParent::Result
{
    switch (msg__.type()) {
    case PAPZ::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZ::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PAPZParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PAPZ'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PAPZ'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PAPZ'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<RemoteContentController*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PAPZMsgStart, actor);

            return MsgProcessed;
        }
    case PAPZ::Msg_Destroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZ::Msg_Destroy", OTHER);

            if ((!((static_cast<RemoteContentController*>(this))->RecvDestroy()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PAPZParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PAPZParent::Result
{
    return MsgNotKnown;
}

auto PAPZParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PAPZParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PAPZParent::ClearSubtree() -> void
{
}



} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PAPZParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layers::PAPZParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PAPZ", PAPZMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layers::PAPZParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
