//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "ipc/DataStorageIPCUtils.h"
#include "ipc/MediaControlIPC.h"
#include "mozilla/AntiTrackingIPCUtils.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/dom/BindingIPCUtils.h"
#include "mozilla/dom/CSPMessageUtils.h"
#include "mozilla/dom/DocShellMessageUtils.h"
#include "mozilla/dom/FeaturePolicyUtils.h"
#include "mozilla/dom/MediaSessionIPCUtils.h"
#include "mozilla/dom/ReferrerInfoUtils.h"
#include "mozilla/ipc/ByteBufUtils.h"
#include "mozilla/ipc/URIUtils.h"
#include "mozilla/PermissionDelegateIPCUtils.h"
#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/dom/PBrowserParent.h"
#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/layers/PCompositorManagerParent.h"
#include "mozilla/layers/PCompositorManagerChild.h"
#include "mozilla/dom/PContentPermissionRequestParent.h"
#include "mozilla/dom/PContentPermissionRequestChild.h"
#include "mozilla/dom/PCycleCollectWithLogsParent.h"
#include "mozilla/dom/PCycleCollectWithLogsChild.h"
#include "mozilla/dom/PExternalHelperAppParent.h"
#include "mozilla/dom/PExternalHelperAppChild.h"
#include "mozilla/dom/PHandlerServiceParent.h"
#include "mozilla/dom/PHandlerServiceChild.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/hal_sandbox/PHalParent.h"
#include "mozilla/hal_sandbox/PHalChild.h"
#include "mozilla/devtools/PHeapSnapshotTempFileHelperParent.h"
#include "mozilla/devtools/PHeapSnapshotTempFileHelperChild.h"
#include "mozilla/PProcessHangMonitorParent.h"
#include "mozilla/PProcessHangMonitorChild.h"
#include "mozilla/layers/PImageBridgeParent.h"
#include "mozilla/layers/PImageBridgeChild.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"
#include "mozilla/dom/PLoginReputationParent.h"
#include "mozilla/dom/PLoginReputationChild.h"
#include "mozilla/media/PMediaParent.h"
#include "mozilla/media/PMediaChild.h"
#include "mozilla/net/PNeckoParent.h"
#include "mozilla/net/PNeckoChild.h"
#include "mozilla/extensions/PStreamFilterParent.h"
#include "mozilla/extensions/PStreamFilterChild.h"
#include "mozilla/gmp/PGMPContentParent.h"
#include "mozilla/gmp/PGMPContentChild.h"
#include "mozilla/gmp/PGMPServiceParent.h"
#include "mozilla/gmp/PGMPServiceChild.h"
#include "mozilla/plugins/PPluginModuleParent.h"
#include "mozilla/plugins/PPluginModuleChild.h"
#include "mozilla/gmp/PGMPParent.h"
#include "mozilla/gmp/PGMPChild.h"
#include "mozilla/embedding/PPrintingParent.h"
#include "mozilla/embedding/PPrintingChild.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/docshell/POfflineCacheUpdateParent.h"
#include "mozilla/docshell/POfflineCacheUpdateChild.h"
#include "mozilla/dom/PSpeechSynthesisParent.h"
#include "mozilla/dom/PSpeechSynthesisChild.h"
#include "mozilla/ipc/PTestShellParent.h"
#include "mozilla/ipc/PTestShellChild.h"
#include "mozilla/PRemoteSpellcheckEngineParent.h"
#include "mozilla/PRemoteSpellcheckEngineChild.h"
#include "mozilla/PWebBrowserPersistDocumentParent.h"
#include "mozilla/PWebBrowserPersistDocumentChild.h"
#include "mozilla/dom/PWebrtcGlobalParent.h"
#include "mozilla/dom/PWebrtcGlobalChild.h"
#include "mozilla/dom/PWindowGlobalParent.h"
#include "mozilla/dom/PWindowGlobalChild.h"
#include "mozilla/dom/PPresentationParent.h"
#include "mozilla/dom/PPresentationChild.h"
#include "mozilla/dom/PURLClassifierParent.h"
#include "mozilla/dom/PURLClassifierChild.h"
#include "mozilla/dom/PURLClassifierLocalParent.h"
#include "mozilla/dom/PURLClassifierLocalChild.h"
#include "mozilla/gfx/PVRManagerParent.h"
#include "mozilla/gfx/PVRManagerChild.h"
#include "mozilla/PRemoteDecoderManagerParent.h"
#include "mozilla/PRemoteDecoderManagerChild.h"
#include "mozilla/PProfilerParent.h"
#include "mozilla/PProfilerChild.h"
#include "mozilla/loader/PScriptCacheParent.h"
#include "mozilla/loader/PScriptCacheChild.h"
#include "mozilla/dom/PSessionStorageObserverParent.h"
#include "mozilla/dom/PSessionStorageObserverChild.h"
#include "mozilla/PBenchmarkStorageParent.h"
#include "mozilla/PBenchmarkStorageChild.h"
#include "mozilla/dom/PContent.h"
#include "mozilla/dom/PContentParent.h"
#include "mozilla/dom/PContentChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace PContent {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PContentParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PContentChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_ConstructPopupBrowser(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ConstructPopupBrowser__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CloneDocumentTreeInto(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CloneDocumentTreeInto__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ConstructBrowser(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ConstructBrowser__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PFileDescriptorSetConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PFileDescriptorSetConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PFileDescriptorSetConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PFileDescriptorSetConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PWebBrowserPersistDocumentConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PWebBrowserPersistDocumentConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PWebBrowserPersistDocumentConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PWebBrowserPersistDocumentConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RawMessage(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RawMessage__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitGMPService(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitGMPService__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitProcessHangMonitor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitProcessHangMonitor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitProfiler(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitProfiler__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitRendering(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitRendering__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReinitRendering(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReinitRendering__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NetworkLinkTypeChange(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NetworkLinkTypeChange__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReinitRenderingForDeviceReset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReinitRenderingForDeviceReset__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetProcessSandbox(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetProcessSandbox__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RequestMemoryReport(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestMemoryReport__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_RequestMemoryReport(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_RequestMemoryReport__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RequestPerformanceMetrics(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestPerformanceMetrics__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetUntrustedModulesData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetUntrustedModulesData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetUntrustedModulesData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetUntrustedModulesData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_BidiKeyboardNotify(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_BidiKeyboardNotify__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PCycleCollectWithLogsConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PCycleCollectWithLogsConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PCycleCollectWithLogsConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PCycleCollectWithLogsConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PTestShellConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PTestShellConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PTestShellConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PTestShellConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PScriptCacheConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PScriptCacheConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PScriptCacheConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PScriptCacheConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RegisterChrome(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RegisterChrome__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RegisterChromeItem(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RegisterChromeItem__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ClearImageCache(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ClearImageCache__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ClearStyleSheetCache(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ClearStyleSheetCache__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetOffline(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetOffline__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetConnectivity(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetConnectivity__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetCaptivePortalState(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetCaptivePortalState__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyVisited(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyVisited__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ThemeChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ThemeChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateSystemParameters(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateSystemParameters__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PreferenceUpdate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PreferenceUpdate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_VarUpdate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_VarUpdate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdatePerfStatsCollectionMask(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdatePerfStatsCollectionMask__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CollectPerfStatsJSON(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CollectPerfStatsJSON__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CollectPerfStatsJSON(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CollectPerfStatsJSON__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_DataStoragePut(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DataStoragePut__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DataStorageRemove(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DataStorageRemove__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DataStorageClear(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DataStorageClear__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyAlertsObserver(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyAlertsObserver__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GeolocationUpdate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GeolocationUpdate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GeolocationError(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GeolocationError__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateDictionaryList(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateDictionaryList__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateFontList(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateFontList__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RebuildFontList(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RebuildFontList__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_FontListChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_FontListChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateAppLocales(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateAppLocales__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateRequestedLocales(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateRequestedLocales__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RegisterStringBundles(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RegisterStringBundles__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateSharedData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateSharedData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AddPermission(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AddPermission__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RemoveAllPermissions(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RemoveAllPermissions__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_FlushMemory(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_FlushMemory__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ApplicationBackground(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ApplicationBackground__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ApplicationForeground(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ApplicationForeground__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GarbageCollect(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GarbageCollect__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CycleCollect(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CycleCollect__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UnlinkGhosts(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UnlinkGhosts__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ActivateA11y(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ActivateA11y__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ShutdownA11y(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ShutdownA11y__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AppInfo(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AppInfo__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RemoteType(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RemoteType__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitServiceWorkers(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitServiceWorkers__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitBlobURLs(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitBlobURLs__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitJSActorInfos(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitJSActorInfos__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UnregisterJSWindowActor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UnregisterJSWindowActor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UnregisterJSProcessActor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UnregisterJSProcessActor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetXPCOMProcessAttributes(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetXPCOMProcessAttributes__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_LastPrivateDocShellDestroyed(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_LastPrivateDocShellDestroyed__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyProcessPriorityChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyProcessPriorityChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_MinimizeMemoryUsage(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_MinimizeMemoryUsage__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_LoadAndRegisterSheet(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_LoadAndRegisterSheet__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UnregisterSheet(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UnregisterSheet__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyIdleObserver(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyIdleObserver__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InvokeDragSession(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InvokeDragSession__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_EndDragSession(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_EndDragSession__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DomainSetChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DomainSetChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Shutdown(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Shutdown__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_LoadProcessScript(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_LoadProcessScript__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyPresentationReceiverLaunched(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyPresentationReceiverLaunched__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyPresentationReceiverCleanUp(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyPresentationReceiverCleanUp__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyEmptyHTTPCache(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyEmptyHTTPCache__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Push(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Push__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PushWithData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PushWithData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PushSubscriptionChange(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PushSubscriptionChange__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetFilesResponse(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetFilesResponse__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_BlobURLRegistration(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_BlobURLRegistration__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_BlobURLUnregistration(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_BlobURLUnregistration__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GMPsChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GMPsChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PParentToChildStreamConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PParentToChildStreamConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PParentToChildStreamConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PParentToChildStreamConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ProvideAnonymousTemporaryFile(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ProvideAnonymousTemporaryFile__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetPermissionsWithKey(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetPermissionsWithKey__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RefreshScreens(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RefreshScreens__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PRemoteLazyInputStreamConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PRemoteLazyInputStreamConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PRemoteLazyInputStreamConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PRemoteLazyInputStreamConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SetPluginList(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetPluginList__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ShareCodeCoverageMutex(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ShareCodeCoverageMutex__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_FlushCodeCoverageCounters(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_FlushCodeCoverageCounters__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_FlushCodeCoverageCounters(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_FlushCodeCoverageCounters__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SetInputEventQueueEnabled(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetInputEventQueueEnabled__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_FlushInputEventQueue(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_FlushInputEventQueue__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ResumeInputEventQueue(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ResumeInputEventQueue__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SuspendInputEventQueue(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SuspendInputEventQueue__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::INPUT_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AddDynamicScalars(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AddDynamicScalars__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CrossProcessRedirect(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CrossProcessRedirect__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CrossProcessRedirect(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CrossProcessRedirect__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_StartDelayedAutoplayMediaComponents(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_StartDelayedAutoplayMediaComponents__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateMediaControlAction(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateMediaControlAction__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RegisterBrowsingContextGroup(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RegisterBrowsingContextGroup__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_LoadURI(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_LoadURI__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_LoadURI(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_LoadURI__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_InternalLoad(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InternalLoad__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DisplayLoadError(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DisplayLoadError__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GoBack(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GoBack__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GoForward(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GoForward__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GoToIndex(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GoToIndex__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Reload(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Reload__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_StopLoad(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_StopLoad__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_OnAllowAccessFor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OnAllowAccessFor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_OnContentBlockingDecision(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OnContentBlockingDecision__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AbortOrientationPendingPromises(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AbortOrientationPendingPromises__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_HistoryCommitIndexAndLength(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_HistoryCommitIndexAndLength__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DispatchLocationChangeEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DispatchLocationChangeEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DispatchBeforeUnloadToSubtree(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DispatchBeforeUnloadToSubtree__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_DispatchBeforeUnloadToSubtree(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_DispatchBeforeUnloadToSubtree__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_UpdateMediaCodecsSupported(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateMediaCodecsSupported__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SessionHistoryUpdate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SessionHistoryUpdate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SynchronizeLayoutHistoryState(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SynchronizeLayoutHistoryState__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SessionHistoryEntryTitle(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SessionHistoryEntryTitle__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SessionHistoryEntryScrollRestorationIsManual(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SessionHistoryEntryScrollRestorationIsManual__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SessionHistoryEntryCacheKey(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SessionHistoryEntryCacheKey__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SessionHistoryEntryStoreWindowNameInContiguousEntries(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SessionHistoryEntryStoreWindowNameInContiguousEntries__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetLoadingSessionHistoryInfoFromParent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetLoadingSessionHistoryInfoFromParent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetLoadingSessionHistoryInfoFromParent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetLoadingSessionHistoryInfoFromParent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_InitBackground(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitBackground__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CreateGMPService(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CreateGMPService__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitStreamFilter(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitStreamFilter__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_InitStreamFilter(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_InitStreamFilter__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_LoadPlugin(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_LoadPlugin__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_LoadPlugin(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_LoadPlugin__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ConnectPluginBridge(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ConnectPluginBridge__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ConnectPluginBridge(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ConnectPluginBridge__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PRemoteSpellcheckEngineConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PRemoteSpellcheckEngineConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PRemoteSpellcheckEngineConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PRemoteSpellcheckEngineConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_InitCrashReporter(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitCrashReporter__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_IsSecureURI(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_IsSecureURI__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_IsSecureURI(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_IsSecureURI__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_AccumulateMixedContentHSTS(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AccumulateMixedContentHSTS__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PHalConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PHalConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PHalConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PHalConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PHeapSnapshotTempFileHelperConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PHeapSnapshotTempFileHelperConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PHeapSnapshotTempFileHelperConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PHeapSnapshotTempFileHelperConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PNeckoConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PNeckoConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PNeckoConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PNeckoConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PPrintingConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PPrintingConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PPrintingConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PPrintingConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PChildToParentStreamConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PChildToParentStreamConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PChildToParentStreamConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PChildToParentStreamConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PSpeechSynthesisConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PSpeechSynthesisConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PSpeechSynthesisConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PSpeechSynthesisConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PMediaConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PMediaConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PMediaConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PMediaConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PWebrtcGlobalConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PWebrtcGlobalConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PWebrtcGlobalConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PWebrtcGlobalConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PPresentationConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PPresentationConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PPresentationConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PPresentationConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_CreateAudioIPCConnection(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CreateAudioIPCConnection__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CreateAudioIPCConnection(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CreateAudioIPCConnection__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PURLClassifierConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PURLClassifierConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PURLClassifierConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PURLClassifierConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PURLClassifierLocalConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PURLClassifierLocalConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PURLClassifierLocalConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PURLClassifierLocalConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PLoginReputationConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PLoginReputationConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PLoginReputationConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PLoginReputationConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PSessionStorageObserverConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PSessionStorageObserverConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PSessionStorageObserverConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PSessionStorageObserverConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PBenchmarkStorageConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PBenchmarkStorageConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PBenchmarkStorageConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PBenchmarkStorageConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_StartVisitedQueries(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_StartVisitedQueries__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetURITitle(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetURITitle__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_LoadURIExternal(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_LoadURIExternal__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ExtProtocolChannelConnectParent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ExtProtocolChannelConnectParent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetGfxVars(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetGfxVars__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetGfxVars(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetGfxVars__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SyncMessage(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SyncMessage__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SyncMessage(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SyncMessage__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ShowAlert(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ShowAlert__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CloseAlert(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CloseAlert__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DisableNotifications(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DisableNotifications__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_OpenNotificationSettings(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OpenNotificationSettings__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AddSecurityState(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AddSecurityState__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotificationEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotificationEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PExternalHelperAppConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PExternalHelperAppConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PExternalHelperAppConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PExternalHelperAppConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PHandlerServiceConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PHandlerServiceConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PHandlerServiceConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PHandlerServiceConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_AddGeolocationListener(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AddGeolocationListener__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RemoveGeolocationListener(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RemoveGeolocationListener__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetGeolocationHigherAccuracy(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetGeolocationHigherAccuracy__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ConsoleMessage(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ConsoleMessage__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ScriptErrorWithStack(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ScriptErrorWithStack__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetClipboard(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetClipboard__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetClipboard(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetClipboard__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetClipboard(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetClipboard__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetExternalClipboardFormats(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetExternalClipboardFormats__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetExternalClipboardFormats(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetExternalClipboardFormats__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_EmptyClipboard(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_EmptyClipboard__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ClipboardHasType(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ClipboardHasType__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ClipboardHasType(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ClipboardHasType__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PlaySound(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PlaySound__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_ENABLED, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Beep(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Beep__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_ENABLED, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PlayEventSound(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PlayEventSound__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_ENABLED, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetIconForExtension(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetIconForExtension__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetIconForExtension(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetIconForExtension__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PrivateDocShellsExist(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PrivateDocShellsExist__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_FirstIdle(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_FirstIdle__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DeviceReset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DeviceReset__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CopyFavicon(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CopyFavicon__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RecordingDeviceEvents(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RecordingDeviceEvents__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GraphicsError(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GraphicsError__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_BeginDriverCrashGuard(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_BeginDriverCrashGuard__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_BeginDriverCrashGuard(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_BeginDriverCrashGuard__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_EndDriverCrashGuard(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_EndDriverCrashGuard__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_EndDriverCrashGuard(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_EndDriverCrashGuard__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_AddIdleObserver(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AddIdleObserver__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RemoveIdleObserver(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RemoveIdleObserver__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_BackUpXResources(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_BackUpXResources__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RequestAnonymousTemporaryFile(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestAnonymousTemporaryFile__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_POfflineCacheUpdateConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_POfflineCacheUpdateConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_POfflineCacheUpdateConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_POfflineCacheUpdateConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SetOfflinePermission(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetOfflinePermission__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_FinishShutdown(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_FinishShutdown__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateDropEffect(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateDropEffect__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PContentPermissionRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PContentPermissionRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PContentPermissionRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PContentPermissionRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ShutdownProfile(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ShutdownProfile__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetGraphicsDeviceInitData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetGraphicsDeviceInitData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetGraphicsDeviceInitData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetGraphicsDeviceInitData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetOutputColorProfileData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetOutputColorProfileData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetOutputColorProfileData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetOutputColorProfileData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetFontListShmBlock(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetFontListShmBlock__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetFontListShmBlock(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetFontListShmBlock__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_InitializeFamily(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitializeFamily__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_InitializeFamily(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_InitializeFamily__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SetCharacterMap(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetCharacterMap__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetupFamilyCharMap(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetupFamilyCharMap__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitOtherFamilyNames(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitOtherFamilyNames__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_InitOtherFamilyNames(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_InitOtherFamilyNames__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_StartCmapLoading(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_StartCmapLoading__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetHyphDict(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetHyphDict__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetHyphDict(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetHyphDict__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_CreateWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CreateWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CreateWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CreateWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_CreateWindowInDifferentProcess(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CreateWindowInDifferentProcess__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UngrabPointer(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UngrabPointer__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_UngrabPointer(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_UngrabPointer__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RemovePermission(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RemovePermission__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_RemovePermission(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_RemovePermission__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NotifyBenchmarkResult(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyBenchmarkResult__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyPushObservers(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyPushObservers__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyPushObserversWithData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyPushObserversWithData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyPushSubscriptionChangeObservers(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyPushSubscriptionChangeObservers__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetFilesRequest(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetFilesRequest__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DeleteGetFilesRequest(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DeleteGetFilesRequest__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_StoreAndBroadcastBlobURLRegistration(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_StoreAndBroadcastBlobURLRegistration__ID, 8192, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY), true);
}
IPC::Message*
Msg_UnstoreAndBroadcastBlobURLUnregistration(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UnstoreAndBroadcastBlobURLUnregistration__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AccumulateChildHistograms(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_AccumulateChildHistograms__ID, 16384, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY), true);
}
IPC::Message*
Msg_AccumulateChildKeyedHistograms(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_AccumulateChildKeyedHistograms__ID, 16384, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY), true);
}
IPC::Message*
Msg_UpdateChildScalars(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateChildScalars__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateChildKeyedScalars(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateChildKeyedScalars__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RecordChildEvents(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RecordChildEvents__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RecordDiscardedData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RecordDiscardedData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetA11yContentId(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetA11yContentId__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetA11yContentId(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetA11yContentId__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_A11yHandlerControl(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_A11yHandlerControl__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AddMemoryReport(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AddMemoryReport__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_MaybeReloadPlugins(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_MaybeReloadPlugins__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_BHRThreadHang(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_BHRThreadHang__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AddPerformanceMetrics(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AddPerformanceMetrics__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AddCertException(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AddCertException__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_AddCertException(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_AddCertException__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_AutomaticStorageAccessPermissionCanBeGranted(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AutomaticStorageAccessPermissionCanBeGranted__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_AutomaticStorageAccessPermissionCanBeGranted(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_AutomaticStorageAccessPermissionCanBeGranted__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_StorageAccessPermissionGrantedForOrigin(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_StorageAccessPermissionGrantedForOrigin__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_StorageAccessPermissionGrantedForOrigin(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_StorageAccessPermissionGrantedForOrigin__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_CompleteAllowAccessFor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CompleteAllowAccessFor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CompleteAllowAccessFor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CompleteAllowAccessFor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_StoreUserInteractionAsPermission(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_StoreUserInteractionAsPermission__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyMediaPlaybackChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyMediaPlaybackChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyMediaAudibleChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyMediaAudibleChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyPictureInPictureModeChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyPictureInPictureModeChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyMediaSessionUpdated(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyMediaSessionUpdated__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyUpdateMediaMetadata(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyUpdateMediaMetadata__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyMediaSessionPlaybackStateChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyMediaSessionPlaybackStateChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyMediaSessionSupportedActionChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyMediaSessionSupportedActionChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyMediaFullScreenState(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyMediaFullScreenState__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyPositionStateChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyPositionStateChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetModulesTrust(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetModulesTrust__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetModulesTrust(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetModulesTrust__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ReportServiceWorkerShutdownProgress(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReportServiceWorkerShutdownProgress__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AbortOtherOrientationPendingPromises(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AbortOtherOrientationPendingPromises__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_HistoryReload(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_HistoryReload__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyOnHistoryReload(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyOnHistoryReload__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NotifyOnHistoryReload(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NotifyOnHistoryReload__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_HistoryCommit(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_HistoryCommit__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_HistoryGo(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_HistoryGo__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_HistoryGo(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_HistoryGo__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_BlobURLDataRequest(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_BlobURLDataRequest__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_BlobURLDataRequest(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_BlobURLDataRequest__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SetActiveSessionHistoryEntry(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetActiveSessionHistoryEntry__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReplaceActiveSessionHistoryEntry(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReplaceActiveSessionHistoryEntry__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RemoveDynEntriesFromActiveSessionHistoryEntry(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RemoveDynEntriesFromActiveSessionHistoryEntry__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RemoveFromSessionHistory(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RemoveFromSessionHistory__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ScriptError(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ScriptError__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReportFrameTimingData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReportFrameTimingData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CommitBrowsingContextTransaction(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CommitBrowsingContextTransaction__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AsyncMessage(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AsyncMessage__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyPushSubscriptionModifiedObservers(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyPushSubscriptionModifiedObservers__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PushError(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PushError__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CreateBrowsingContext(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CreateBrowsingContext__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DiscardBrowsingContext(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DiscardBrowsingContext__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_DiscardBrowsingContext(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_DiscardBrowsingContext__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_AdjustWindowFocus(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AdjustWindowFocus__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_WindowClose(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_WindowClose__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_WindowFocus(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_WindowFocus__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_WindowBlur(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_WindowBlur__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RaiseWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RaiseWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ClearFocus(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ClearFocus__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetFocusedBrowsingContext(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetFocusedBrowsingContext__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetActiveBrowsingContext(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetActiveBrowsingContext__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UnsetActiveBrowsingContext(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UnsetActiveBrowsingContext__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetFocusedElement(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetFocusedElement__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_FinalizeFocusOuter(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_FinalizeFocusOuter__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InsertNewFocusActionId(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InsertNewFocusActionId__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_BlurToParent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_BlurToParent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_BlurToChild(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_BlurToChild__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetupFocusedAndActive(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetupFocusedAndActive__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReviseActiveBrowsingContext(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReviseActiveBrowsingContext__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_MaybeExitFullscreen(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_MaybeExitFullscreen__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_WindowPostMessage(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_WindowPostMessage__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CommitWindowContextTransaction(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CommitWindowContextTransaction__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CreateWindowContext(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CreateWindowContext__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DiscardWindowContext(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DiscardWindowContext__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_DiscardWindowContext(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_DiscardWindowContext__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_FOGData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_FOGData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_FlushFOGData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_FlushFOGData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_FlushFOGData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_FlushFOGData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SetContainerFeaturePolicy(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetContainerFeaturePolicy__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}

} // namespace PContent
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union ChromeRegistryItem|
//
auto ChromeRegistryItem::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TChromePackage:
        {
            (ptr_ChromePackage())->~ChromePackage__tdef();
            break;
        }
    case TOverrideMapping:
        {
            (ptr_OverrideMapping())->~OverrideMapping__tdef();
            break;
        }
    case TSubstitutionMapping:
        {
            (ptr_SubstitutionMapping())->~SubstitutionMapping__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT ChromeRegistryItem::ChromeRegistryItem(const ChromePackage& aOther)
{
    new (mozilla::KnownNotNull, ptr_ChromePackage()) ChromePackage(aOther);
    mType = TChromePackage;
}

MOZ_IMPLICIT ChromeRegistryItem::ChromeRegistryItem(ChromePackage&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ChromePackage()) ChromePackage(std::move(aOther));
    mType = TChromePackage;
}

MOZ_IMPLICIT ChromeRegistryItem::ChromeRegistryItem(const OverrideMapping& aOther)
{
    new (mozilla::KnownNotNull, ptr_OverrideMapping()) OverrideMapping(aOther);
    mType = TOverrideMapping;
}

MOZ_IMPLICIT ChromeRegistryItem::ChromeRegistryItem(OverrideMapping&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OverrideMapping()) OverrideMapping(std::move(aOther));
    mType = TOverrideMapping;
}

MOZ_IMPLICIT ChromeRegistryItem::ChromeRegistryItem(const SubstitutionMapping& aOther)
{
    new (mozilla::KnownNotNull, ptr_SubstitutionMapping()) SubstitutionMapping(aOther);
    mType = TSubstitutionMapping;
}

MOZ_IMPLICIT ChromeRegistryItem::ChromeRegistryItem(SubstitutionMapping&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SubstitutionMapping()) SubstitutionMapping(std::move(aOther));
    mType = TSubstitutionMapping;
}

MOZ_IMPLICIT ChromeRegistryItem::ChromeRegistryItem(const ChromeRegistryItem& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TChromePackage:
        {
            new (mozilla::KnownNotNull, ptr_ChromePackage()) ChromePackage((aOther).get_ChromePackage());
            break;
        }
    case TOverrideMapping:
        {
            new (mozilla::KnownNotNull, ptr_OverrideMapping()) OverrideMapping((aOther).get_OverrideMapping());
            break;
        }
    case TSubstitutionMapping:
        {
            new (mozilla::KnownNotNull, ptr_SubstitutionMapping()) SubstitutionMapping((aOther).get_SubstitutionMapping());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT ChromeRegistryItem::ChromeRegistryItem(ChromeRegistryItem&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TChromePackage:
        {
            new (mozilla::KnownNotNull, ptr_ChromePackage()) ChromePackage(std::move((aOther).get_ChromePackage()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOverrideMapping:
        {
            new (mozilla::KnownNotNull, ptr_OverrideMapping()) OverrideMapping(std::move((aOther).get_OverrideMapping()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSubstitutionMapping:
        {
            new (mozilla::KnownNotNull, ptr_SubstitutionMapping()) SubstitutionMapping(std::move((aOther).get_SubstitutionMapping()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

ChromeRegistryItem::~ChromeRegistryItem()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto ChromeRegistryItem::operator=(const ChromePackage& aRhs) -> ChromeRegistryItem&
{
    if (MaybeDestroy(TChromePackage)) {
        new (mozilla::KnownNotNull, ptr_ChromePackage()) ChromePackage;
    }
    (*(ptr_ChromePackage())) = aRhs;
    mType = TChromePackage;
    return (*(this));
}

auto ChromeRegistryItem::operator=(ChromePackage&& aRhs) -> ChromeRegistryItem&
{
    if (MaybeDestroy(TChromePackage)) {
        new (mozilla::KnownNotNull, ptr_ChromePackage()) ChromePackage;
    }
    (*(ptr_ChromePackage())) = std::move(aRhs);
    mType = TChromePackage;
    return (*(this));
}

auto ChromeRegistryItem::operator=(const OverrideMapping& aRhs) -> ChromeRegistryItem&
{
    if (MaybeDestroy(TOverrideMapping)) {
        new (mozilla::KnownNotNull, ptr_OverrideMapping()) OverrideMapping;
    }
    (*(ptr_OverrideMapping())) = aRhs;
    mType = TOverrideMapping;
    return (*(this));
}

auto ChromeRegistryItem::operator=(OverrideMapping&& aRhs) -> ChromeRegistryItem&
{
    if (MaybeDestroy(TOverrideMapping)) {
        new (mozilla::KnownNotNull, ptr_OverrideMapping()) OverrideMapping;
    }
    (*(ptr_OverrideMapping())) = std::move(aRhs);
    mType = TOverrideMapping;
    return (*(this));
}

auto ChromeRegistryItem::operator=(const SubstitutionMapping& aRhs) -> ChromeRegistryItem&
{
    if (MaybeDestroy(TSubstitutionMapping)) {
        new (mozilla::KnownNotNull, ptr_SubstitutionMapping()) SubstitutionMapping;
    }
    (*(ptr_SubstitutionMapping())) = aRhs;
    mType = TSubstitutionMapping;
    return (*(this));
}

auto ChromeRegistryItem::operator=(SubstitutionMapping&& aRhs) -> ChromeRegistryItem&
{
    if (MaybeDestroy(TSubstitutionMapping)) {
        new (mozilla::KnownNotNull, ptr_SubstitutionMapping()) SubstitutionMapping;
    }
    (*(ptr_SubstitutionMapping())) = std::move(aRhs);
    mType = TSubstitutionMapping;
    return (*(this));
}

auto ChromeRegistryItem::operator=(const ChromeRegistryItem& aRhs) -> ChromeRegistryItem&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TChromePackage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ChromePackage()) ChromePackage;
            }
            (*(ptr_ChromePackage())) = (aRhs).get_ChromePackage();
            break;
        }
    case TOverrideMapping:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OverrideMapping()) OverrideMapping;
            }
            (*(ptr_OverrideMapping())) = (aRhs).get_OverrideMapping();
            break;
        }
    case TSubstitutionMapping:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SubstitutionMapping()) SubstitutionMapping;
            }
            (*(ptr_SubstitutionMapping())) = (aRhs).get_SubstitutionMapping();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto ChromeRegistryItem::operator=(ChromeRegistryItem&& aRhs) -> ChromeRegistryItem&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TChromePackage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ChromePackage()) ChromePackage;
            }
            (*(ptr_ChromePackage())) = std::move((aRhs).get_ChromePackage());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOverrideMapping:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OverrideMapping()) OverrideMapping;
            }
            (*(ptr_OverrideMapping())) = std::move((aRhs).get_OverrideMapping());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSubstitutionMapping:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SubstitutionMapping()) SubstitutionMapping;
            }
            (*(ptr_SubstitutionMapping())) = std::move((aRhs).get_SubstitutionMapping());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}


namespace mozilla {
namespace ipc {
auto IPDLParamTraits<ChromeRegistryItem>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef ChromeRegistryItem union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'ChromeRegistryItem'
    (aMsg)->WriteSentinel(1137837895);

    switch (type) {
    case union__::TChromePackage:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ChromePackage());
            // Sentinel = 'TChromePackage'
            (aMsg)->WriteSentinel(663553375);
            return;
        }
    case union__::TOverrideMapping:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OverrideMapping());
            // Sentinel = 'TOverrideMapping'
            (aMsg)->WriteSentinel(895026785);
            return;
        }
    case union__::TSubstitutionMapping:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SubstitutionMapping());
            // Sentinel = 'TSubstitutionMapping'
            (aMsg)->WriteSentinel(1440679998);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<ChromeRegistryItem>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef ChromeRegistryItem union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union ChromeRegistryItem");
        return false;
    }
    // Sentinel = 'ChromeRegistryItem'
    if ((!((aMsg)->ReadSentinel(aIter, 1137837895)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union ChromeRegistryItem");
        return false;
    }

    switch (type) {
    case union__::TChromePackage:
        {
            ChromePackage tmp = ChromePackage();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ChromePackage())))))) {
                aActor->FatalError("Error deserializing variant TChromePackage of union ChromeRegistryItem");
                return false;
            }
            // Sentinel = 'TChromePackage'
            if ((!((aMsg)->ReadSentinel(aIter, 663553375)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TChromePackage of union ChromeRegistryItem");
                return false;
            }
            return true;
        }
    case union__::TOverrideMapping:
        {
            OverrideMapping tmp = OverrideMapping();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OverrideMapping())))))) {
                aActor->FatalError("Error deserializing variant TOverrideMapping of union ChromeRegistryItem");
                return false;
            }
            // Sentinel = 'TOverrideMapping'
            if ((!((aMsg)->ReadSentinel(aIter, 895026785)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOverrideMapping of union ChromeRegistryItem");
                return false;
            }
            return true;
        }
    case union__::TSubstitutionMapping:
        {
            SubstitutionMapping tmp = SubstitutionMapping();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SubstitutionMapping())))))) {
                aActor->FatalError("Error deserializing variant TSubstitutionMapping of union ChromeRegistryItem");
                return false;
            }
            // Sentinel = 'TSubstitutionMapping'
            if ((!((aMsg)->ReadSentinel(aIter, 1440679998)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSubstitutionMapping of union ChromeRegistryItem");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SystemFontListEntry|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SystemFontListEntry>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).pattern());
    // Sentinel = 'pattern'
    (aMsg)->WriteSentinel(200409855);
    WriteIPDLParam(aMsg, aActor, (aVar).appFontFamily());
    // Sentinel = 'appFontFamily'
    (aMsg)->WriteSentinel(605160763);
}

auto IPDLParamTraits<mozilla::dom::SystemFontListEntry>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->pattern())))))) {
        aActor->FatalError("Error deserializing 'pattern' (nsCString) member of 'SystemFontListEntry'");
        return false;
    }
    // Sentinel = 'pattern'
    if ((!((aMsg)->ReadSentinel(aIter, 200409855)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'pattern' (nsCString) member of 'SystemFontListEntry'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->appFontFamily())))))) {
        aActor->FatalError("Error deserializing 'appFontFamily' (bool) member of 'SystemFontListEntry'");
        return false;
    }
    // Sentinel = 'appFontFamily'
    if ((!((aMsg)->ReadSentinel(aIter, 605160763)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'appFontFamily' (bool) member of 'SystemFontListEntry'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union SystemParameterValue|
//
namespace mozilla {
namespace dom {
auto SystemParameterValue::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tbool:
        {
            (ptr_bool())->~bool__tdef();
            break;
        }
    case Tfloat:
        {
            (ptr_float())->~float__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT SystemParameterValue::SystemParameterValue(const bool& aOther)
{
    new (mozilla::KnownNotNull, ptr_bool()) bool(aOther);
    mType = Tbool;
}

MOZ_IMPLICIT SystemParameterValue::SystemParameterValue(bool&& aOther)
{
    new (mozilla::KnownNotNull, ptr_bool()) bool(std::move(aOther));
    mType = Tbool;
}

MOZ_IMPLICIT SystemParameterValue::SystemParameterValue(const float& aOther)
{
    new (mozilla::KnownNotNull, ptr_float()) float(aOther);
    mType = Tfloat;
}

MOZ_IMPLICIT SystemParameterValue::SystemParameterValue(float&& aOther)
{
    new (mozilla::KnownNotNull, ptr_float()) float(std::move(aOther));
    mType = Tfloat;
}

MOZ_IMPLICIT SystemParameterValue::SystemParameterValue(const SystemParameterValue& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tbool:
        {
            new (mozilla::KnownNotNull, ptr_bool()) bool((aOther).get_bool());
            break;
        }
    case Tfloat:
        {
            new (mozilla::KnownNotNull, ptr_float()) float((aOther).get_float());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT SystemParameterValue::SystemParameterValue(SystemParameterValue&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tbool:
        {
            new (mozilla::KnownNotNull, ptr_bool()) bool(std::move((aOther).get_bool()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tfloat:
        {
            new (mozilla::KnownNotNull, ptr_float()) float(std::move((aOther).get_float()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

SystemParameterValue::~SystemParameterValue()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto SystemParameterValue::operator=(const bool& aRhs) -> SystemParameterValue&
{
    if (MaybeDestroy(Tbool)) {
        new (mozilla::KnownNotNull, ptr_bool()) bool;
    }
    (*(ptr_bool())) = aRhs;
    mType = Tbool;
    return (*(this));
}

auto SystemParameterValue::operator=(bool&& aRhs) -> SystemParameterValue&
{
    if (MaybeDestroy(Tbool)) {
        new (mozilla::KnownNotNull, ptr_bool()) bool;
    }
    (*(ptr_bool())) = std::move(aRhs);
    mType = Tbool;
    return (*(this));
}

auto SystemParameterValue::operator=(const float& aRhs) -> SystemParameterValue&
{
    if (MaybeDestroy(Tfloat)) {
        new (mozilla::KnownNotNull, ptr_float()) float;
    }
    (*(ptr_float())) = aRhs;
    mType = Tfloat;
    return (*(this));
}

auto SystemParameterValue::operator=(float&& aRhs) -> SystemParameterValue&
{
    if (MaybeDestroy(Tfloat)) {
        new (mozilla::KnownNotNull, ptr_float()) float;
    }
    (*(ptr_float())) = std::move(aRhs);
    mType = Tfloat;
    return (*(this));
}

auto SystemParameterValue::operator=(const SystemParameterValue& aRhs) -> SystemParameterValue&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tbool:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_bool()) bool;
            }
            (*(ptr_bool())) = (aRhs).get_bool();
            break;
        }
    case Tfloat:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_float()) float;
            }
            (*(ptr_float())) = (aRhs).get_float();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto SystemParameterValue::operator=(SystemParameterValue&& aRhs) -> SystemParameterValue&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tbool:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_bool()) bool;
            }
            (*(ptr_bool())) = std::move((aRhs).get_bool());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tfloat:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_float()) float;
            }
            (*(ptr_float())) = std::move((aRhs).get_float());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SystemParameterValue>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::SystemParameterValue union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'SystemParameterValue'
    (aMsg)->WriteSentinel(1434126372);

    switch (type) {
    case union__::Tbool:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_bool());
            // Sentinel = 'Tbool'
            (aMsg)->WriteSentinel(96993793);
            return;
        }
    case union__::Tfloat:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_float());
            // Sentinel = 'Tfloat'
            (aMsg)->WriteSentinel(137298539);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::SystemParameterValue>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::SystemParameterValue union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union SystemParameterValue");
        return false;
    }
    // Sentinel = 'SystemParameterValue'
    if ((!((aMsg)->ReadSentinel(aIter, 1434126372)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union SystemParameterValue");
        return false;
    }

    switch (type) {
    case union__::Tbool:
        {
            bool tmp = bool();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_bool())))))) {
                aActor->FatalError("Error deserializing variant Tbool of union SystemParameterValue");
                return false;
            }
            // Sentinel = 'Tbool'
            if ((!((aMsg)->ReadSentinel(aIter, 96993793)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tbool of union SystemParameterValue");
                return false;
            }
            return true;
        }
    case union__::Tfloat:
        {
            float tmp = float();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_float())))))) {
                aActor->FatalError("Error deserializing variant Tfloat of union SystemParameterValue");
                return false;
            }
            // Sentinel = 'Tfloat'
            if ((!((aMsg)->ReadSentinel(aIter, 137298539)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tfloat of union SystemParameterValue");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SystemParameterKVPair|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SystemParameterKVPair>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).value());
    // Sentinel = 'value'
    (aMsg)->WriteSentinel(107610654);
    (aMsg)->WriteBytes((&((aVar).id())), 1);
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
}

auto IPDLParamTraits<mozilla::dom::SystemParameterKVPair>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->value())))))) {
        aActor->FatalError("Error deserializing 'value' (SystemParameterValue) member of 'SystemParameterKVPair'");
        return false;
    }
    // Sentinel = 'value'
    if ((!((aMsg)->ReadSentinel(aIter, 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'value' (SystemParameterValue) member of 'SystemParameterKVPair'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->id())), 1)))) {
        aActor->FatalError("Error bulk reading fields from uint8_t");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint8_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClipboardCapabilities|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClipboardCapabilities>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).supportsSelectionClipboard());
    // Sentinel = 'supportsSelectionClipboard'
    (aMsg)->WriteSentinel(2483948231);
    WriteIPDLParam(aMsg, aActor, (aVar).supportsFindClipboard());
    // Sentinel = 'supportsFindClipboard'
    (aMsg)->WriteSentinel(1624508578);
}

auto IPDLParamTraits<mozilla::dom::ClipboardCapabilities>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->supportsSelectionClipboard())))))) {
        aActor->FatalError("Error deserializing 'supportsSelectionClipboard' (bool) member of 'ClipboardCapabilities'");
        return false;
    }
    // Sentinel = 'supportsSelectionClipboard'
    if ((!((aMsg)->ReadSentinel(aIter, 2483948231)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'supportsSelectionClipboard' (bool) member of 'ClipboardCapabilities'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->supportsFindClipboard())))))) {
        aActor->FatalError("Error deserializing 'supportsFindClipboard' (bool) member of 'ClipboardCapabilities'");
        return false;
    }
    // Sentinel = 'supportsFindClipboard'
    if ((!((aMsg)->ReadSentinel(aIter, 1624508578)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'supportsFindClipboard' (bool) member of 'ClipboardCapabilities'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union FileDescOrError|
//
namespace mozilla {
namespace dom {
auto FileDescOrError::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TFileDescriptor:
        {
            (ptr_FileDescriptor())->~FileDescriptor__tdef();
            break;
        }
    case Tnsresult:
        {
            (ptr_nsresult())->~nsresult__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT FileDescOrError::FileDescOrError(const FileDescriptor& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileDescriptor()) FileDescriptor(aOther);
    mType = TFileDescriptor;
}

MOZ_IMPLICIT FileDescOrError::FileDescOrError(FileDescriptor&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileDescriptor()) FileDescriptor(std::move(aOther));
    mType = TFileDescriptor;
}

MOZ_IMPLICIT FileDescOrError::FileDescOrError(const nsresult& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(aOther);
    mType = Tnsresult;
}

MOZ_IMPLICIT FileDescOrError::FileDescOrError(nsresult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move(aOther));
    mType = Tnsresult;
}

MOZ_IMPLICIT FileDescOrError::FileDescOrError(const FileDescOrError& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TFileDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_FileDescriptor()) FileDescriptor((aOther).get_FileDescriptor());
            break;
        }
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult((aOther).get_nsresult());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT FileDescOrError::FileDescOrError(FileDescOrError&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TFileDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_FileDescriptor()) FileDescriptor(std::move((aOther).get_FileDescriptor()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move((aOther).get_nsresult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

FileDescOrError::~FileDescOrError()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto FileDescOrError::operator=(const FileDescriptor& aRhs) -> FileDescOrError&
{
    if (MaybeDestroy(TFileDescriptor)) {
        new (mozilla::KnownNotNull, ptr_FileDescriptor()) FileDescriptor;
    }
    (*(ptr_FileDescriptor())) = aRhs;
    mType = TFileDescriptor;
    return (*(this));
}

auto FileDescOrError::operator=(FileDescriptor&& aRhs) -> FileDescOrError&
{
    if (MaybeDestroy(TFileDescriptor)) {
        new (mozilla::KnownNotNull, ptr_FileDescriptor()) FileDescriptor;
    }
    (*(ptr_FileDescriptor())) = std::move(aRhs);
    mType = TFileDescriptor;
    return (*(this));
}

auto FileDescOrError::operator=(const nsresult& aRhs) -> FileDescOrError&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = aRhs;
    mType = Tnsresult;
    return (*(this));
}

auto FileDescOrError::operator=(nsresult&& aRhs) -> FileDescOrError&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = std::move(aRhs);
    mType = Tnsresult;
    return (*(this));
}

auto FileDescOrError::operator=(const FileDescOrError& aRhs) -> FileDescOrError&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TFileDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileDescriptor()) FileDescriptor;
            }
            (*(ptr_FileDescriptor())) = (aRhs).get_FileDescriptor();
            break;
        }
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = (aRhs).get_nsresult();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto FileDescOrError::operator=(FileDescOrError&& aRhs) -> FileDescOrError&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TFileDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileDescriptor()) FileDescriptor;
            }
            (*(ptr_FileDescriptor())) = std::move((aRhs).get_FileDescriptor());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = std::move((aRhs).get_nsresult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileDescOrError>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::FileDescOrError union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'FileDescOrError'
    (aMsg)->WriteSentinel(750519755);

    switch (type) {
    case union__::TFileDescriptor:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileDescriptor());
            // Sentinel = 'TFileDescriptor'
            (aMsg)->WriteSentinel(758253044);
            return;
        }
    case union__::Tnsresult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsresult());
            // Sentinel = 'Tnsresult'
            (aMsg)->WriteSentinel(313394133);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::FileDescOrError>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::FileDescOrError union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union FileDescOrError");
        return false;
    }
    // Sentinel = 'FileDescOrError'
    if ((!((aMsg)->ReadSentinel(aIter, 750519755)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union FileDescOrError");
        return false;
    }

    switch (type) {
    case union__::TFileDescriptor:
        {
            mozilla::ipc::FileDescriptor tmp = mozilla::ipc::FileDescriptor();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileDescriptor())))))) {
                aActor->FatalError("Error deserializing variant TFileDescriptor of union FileDescOrError");
                return false;
            }
            // Sentinel = 'TFileDescriptor'
            if ((!((aMsg)->ReadSentinel(aIter, 758253044)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileDescriptor of union FileDescOrError");
                return false;
            }
            return true;
        }
    case union__::Tnsresult:
        {
            nsresult tmp = nsresult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsresult())))))) {
                aActor->FatalError("Error deserializing variant Tnsresult of union FileDescOrError");
                return false;
            }
            // Sentinel = 'Tnsresult'
            if ((!((aMsg)->ReadSentinel(aIter, 313394133)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnsresult of union FileDescOrError");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DomainPolicyClone|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::DomainPolicyClone>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).active());
    // Sentinel = 'active'
    (aMsg)->WriteSentinel(144114301);
    WriteIPDLParam(aMsg, aActor, (aVar).blocklist());
    // Sentinel = 'blocklist'
    (aMsg)->WriteSentinel(311559112);
    WriteIPDLParam(aMsg, aActor, (aVar).allowlist());
    // Sentinel = 'allowlist'
    (aMsg)->WriteSentinel(318243804);
    WriteIPDLParam(aMsg, aActor, (aVar).superBlocklist());
    // Sentinel = 'superBlocklist'
    (aMsg)->WriteSentinel(733808087);
    WriteIPDLParam(aMsg, aActor, (aVar).superAllowlist());
    // Sentinel = 'superAllowlist'
    (aMsg)->WriteSentinel(740492779);
}

auto IPDLParamTraits<mozilla::dom::DomainPolicyClone>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->active())))))) {
        aActor->FatalError("Error deserializing 'active' (bool) member of 'DomainPolicyClone'");
        return false;
    }
    // Sentinel = 'active'
    if ((!((aMsg)->ReadSentinel(aIter, 144114301)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'active' (bool) member of 'DomainPolicyClone'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->blocklist())))))) {
        aActor->FatalError("Error deserializing 'blocklist' (nsIURI[]) member of 'DomainPolicyClone'");
        return false;
    }
    // Sentinel = 'blocklist'
    if ((!((aMsg)->ReadSentinel(aIter, 311559112)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'blocklist' (nsIURI[]) member of 'DomainPolicyClone'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allowlist())))))) {
        aActor->FatalError("Error deserializing 'allowlist' (nsIURI[]) member of 'DomainPolicyClone'");
        return false;
    }
    // Sentinel = 'allowlist'
    if ((!((aMsg)->ReadSentinel(aIter, 318243804)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allowlist' (nsIURI[]) member of 'DomainPolicyClone'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->superBlocklist())))))) {
        aActor->FatalError("Error deserializing 'superBlocklist' (nsIURI[]) member of 'DomainPolicyClone'");
        return false;
    }
    // Sentinel = 'superBlocklist'
    if ((!((aMsg)->ReadSentinel(aIter, 733808087)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'superBlocklist' (nsIURI[]) member of 'DomainPolicyClone'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->superAllowlist())))))) {
        aActor->FatalError("Error deserializing 'superAllowlist' (nsIURI[]) member of 'DomainPolicyClone'");
        return false;
    }
    // Sentinel = 'superAllowlist'
    if ((!((aMsg)->ReadSentinel(aIter, 740492779)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'superAllowlist' (nsIURI[]) member of 'DomainPolicyClone'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct AndroidSystemInfo|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::AndroidSystemInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).device());
    // Sentinel = 'device'
    (aMsg)->WriteSentinel(143983217);
    WriteIPDLParam(aMsg, aActor, (aVar).manufacturer());
    // Sentinel = 'manufacturer'
    (aMsg)->WriteSentinel(546243854);
    WriteIPDLParam(aMsg, aActor, (aVar).release_version());
    // Sentinel = 'release_version'
    (aMsg)->WriteSentinel(835585607);
    WriteIPDLParam(aMsg, aActor, (aVar).hardware());
    // Sentinel = 'hardware'
    (aMsg)->WriteSentinel(248972111);
    WriteIPDLParam(aMsg, aActor, (aVar).isTablet());
    // Sentinel = 'isTablet'
    (aMsg)->WriteSentinel(240911161);
    (aMsg)->WriteBytes((&((aVar).sdk_version())), 4);
    // Sentinel = 'sdk_version'
    (aMsg)->WriteSentinel(465831080);
}

auto IPDLParamTraits<mozilla::dom::AndroidSystemInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->device())))))) {
        aActor->FatalError("Error deserializing 'device' (nsString) member of 'AndroidSystemInfo'");
        return false;
    }
    // Sentinel = 'device'
    if ((!((aMsg)->ReadSentinel(aIter, 143983217)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'device' (nsString) member of 'AndroidSystemInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->manufacturer())))))) {
        aActor->FatalError("Error deserializing 'manufacturer' (nsString) member of 'AndroidSystemInfo'");
        return false;
    }
    // Sentinel = 'manufacturer'
    if ((!((aMsg)->ReadSentinel(aIter, 546243854)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'manufacturer' (nsString) member of 'AndroidSystemInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->release_version())))))) {
        aActor->FatalError("Error deserializing 'release_version' (nsString) member of 'AndroidSystemInfo'");
        return false;
    }
    // Sentinel = 'release_version'
    if ((!((aMsg)->ReadSentinel(aIter, 835585607)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'release_version' (nsString) member of 'AndroidSystemInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hardware())))))) {
        aActor->FatalError("Error deserializing 'hardware' (nsString) member of 'AndroidSystemInfo'");
        return false;
    }
    // Sentinel = 'hardware'
    if ((!((aMsg)->ReadSentinel(aIter, 248972111)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hardware' (nsString) member of 'AndroidSystemInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isTablet())))))) {
        aActor->FatalError("Error deserializing 'isTablet' (bool) member of 'AndroidSystemInfo'");
        return false;
    }
    // Sentinel = 'isTablet'
    if ((!((aMsg)->ReadSentinel(aIter, 240911161)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isTablet' (bool) member of 'AndroidSystemInfo'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->sdk_version())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'sdk_version'
    if ((!((aMsg)->ReadSentinel(aIter, 465831080)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct GetFilesResponseSuccess|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::GetFilesResponseSuccess>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).blobs());
    // Sentinel = 'blobs'
    (aMsg)->WriteSentinel(102957587);
}

auto IPDLParamTraits<mozilla::dom::GetFilesResponseSuccess>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->blobs())))))) {
        aActor->FatalError("Error deserializing 'blobs' (IPCBlob[]) member of 'GetFilesResponseSuccess'");
        return false;
    }
    // Sentinel = 'blobs'
    if ((!((aMsg)->ReadSentinel(aIter, 102957587)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'blobs' (IPCBlob[]) member of 'GetFilesResponseSuccess'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct GetFilesResponseFailure|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::GetFilesResponseFailure>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).errorCode());
    // Sentinel = 'errorCode'
    (aMsg)->WriteSentinel(312345510);
}

auto IPDLParamTraits<mozilla::dom::GetFilesResponseFailure>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->errorCode())))))) {
        aActor->FatalError("Error deserializing 'errorCode' (nsresult) member of 'GetFilesResponseFailure'");
        return false;
    }
    // Sentinel = 'errorCode'
    if ((!((aMsg)->ReadSentinel(aIter, 312345510)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'errorCode' (nsresult) member of 'GetFilesResponseFailure'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union GetFilesResponseResult|
//
namespace mozilla {
namespace dom {
auto GetFilesResponseResult::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TGetFilesResponseSuccess:
        {
            (ptr_GetFilesResponseSuccess())->~GetFilesResponseSuccess__tdef();
            break;
        }
    case TGetFilesResponseFailure:
        {
            (ptr_GetFilesResponseFailure())->~GetFilesResponseFailure__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT GetFilesResponseResult::GetFilesResponseResult(const GetFilesResponseSuccess& aOther)
{
    new (mozilla::KnownNotNull, ptr_GetFilesResponseSuccess()) GetFilesResponseSuccess(aOther);
    mType = TGetFilesResponseSuccess;
}

MOZ_IMPLICIT GetFilesResponseResult::GetFilesResponseResult(GetFilesResponseSuccess&& aOther)
{
    new (mozilla::KnownNotNull, ptr_GetFilesResponseSuccess()) GetFilesResponseSuccess(std::move(aOther));
    mType = TGetFilesResponseSuccess;
}

MOZ_IMPLICIT GetFilesResponseResult::GetFilesResponseResult(const GetFilesResponseFailure& aOther)
{
    new (mozilla::KnownNotNull, ptr_GetFilesResponseFailure()) GetFilesResponseFailure(aOther);
    mType = TGetFilesResponseFailure;
}

MOZ_IMPLICIT GetFilesResponseResult::GetFilesResponseResult(GetFilesResponseFailure&& aOther)
{
    new (mozilla::KnownNotNull, ptr_GetFilesResponseFailure()) GetFilesResponseFailure(std::move(aOther));
    mType = TGetFilesResponseFailure;
}

MOZ_IMPLICIT GetFilesResponseResult::GetFilesResponseResult(const GetFilesResponseResult& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TGetFilesResponseSuccess:
        {
            new (mozilla::KnownNotNull, ptr_GetFilesResponseSuccess()) GetFilesResponseSuccess((aOther).get_GetFilesResponseSuccess());
            break;
        }
    case TGetFilesResponseFailure:
        {
            new (mozilla::KnownNotNull, ptr_GetFilesResponseFailure()) GetFilesResponseFailure((aOther).get_GetFilesResponseFailure());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT GetFilesResponseResult::GetFilesResponseResult(GetFilesResponseResult&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TGetFilesResponseSuccess:
        {
            new (mozilla::KnownNotNull, ptr_GetFilesResponseSuccess()) GetFilesResponseSuccess(std::move((aOther).get_GetFilesResponseSuccess()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TGetFilesResponseFailure:
        {
            new (mozilla::KnownNotNull, ptr_GetFilesResponseFailure()) GetFilesResponseFailure(std::move((aOther).get_GetFilesResponseFailure()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

GetFilesResponseResult::~GetFilesResponseResult()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto GetFilesResponseResult::operator=(const GetFilesResponseSuccess& aRhs) -> GetFilesResponseResult&
{
    if (MaybeDestroy(TGetFilesResponseSuccess)) {
        new (mozilla::KnownNotNull, ptr_GetFilesResponseSuccess()) GetFilesResponseSuccess;
    }
    (*(ptr_GetFilesResponseSuccess())) = aRhs;
    mType = TGetFilesResponseSuccess;
    return (*(this));
}

auto GetFilesResponseResult::operator=(GetFilesResponseSuccess&& aRhs) -> GetFilesResponseResult&
{
    if (MaybeDestroy(TGetFilesResponseSuccess)) {
        new (mozilla::KnownNotNull, ptr_GetFilesResponseSuccess()) GetFilesResponseSuccess;
    }
    (*(ptr_GetFilesResponseSuccess())) = std::move(aRhs);
    mType = TGetFilesResponseSuccess;
    return (*(this));
}

auto GetFilesResponseResult::operator=(const GetFilesResponseFailure& aRhs) -> GetFilesResponseResult&
{
    if (MaybeDestroy(TGetFilesResponseFailure)) {
        new (mozilla::KnownNotNull, ptr_GetFilesResponseFailure()) GetFilesResponseFailure;
    }
    (*(ptr_GetFilesResponseFailure())) = aRhs;
    mType = TGetFilesResponseFailure;
    return (*(this));
}

auto GetFilesResponseResult::operator=(GetFilesResponseFailure&& aRhs) -> GetFilesResponseResult&
{
    if (MaybeDestroy(TGetFilesResponseFailure)) {
        new (mozilla::KnownNotNull, ptr_GetFilesResponseFailure()) GetFilesResponseFailure;
    }
    (*(ptr_GetFilesResponseFailure())) = std::move(aRhs);
    mType = TGetFilesResponseFailure;
    return (*(this));
}

auto GetFilesResponseResult::operator=(const GetFilesResponseResult& aRhs) -> GetFilesResponseResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TGetFilesResponseSuccess:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_GetFilesResponseSuccess()) GetFilesResponseSuccess;
            }
            (*(ptr_GetFilesResponseSuccess())) = (aRhs).get_GetFilesResponseSuccess();
            break;
        }
    case TGetFilesResponseFailure:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_GetFilesResponseFailure()) GetFilesResponseFailure;
            }
            (*(ptr_GetFilesResponseFailure())) = (aRhs).get_GetFilesResponseFailure();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto GetFilesResponseResult::operator=(GetFilesResponseResult&& aRhs) -> GetFilesResponseResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TGetFilesResponseSuccess:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_GetFilesResponseSuccess()) GetFilesResponseSuccess;
            }
            (*(ptr_GetFilesResponseSuccess())) = std::move((aRhs).get_GetFilesResponseSuccess());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TGetFilesResponseFailure:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_GetFilesResponseFailure()) GetFilesResponseFailure;
            }
            (*(ptr_GetFilesResponseFailure())) = std::move((aRhs).get_GetFilesResponseFailure());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::GetFilesResponseResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::GetFilesResponseResult union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'GetFilesResponseResult'
    (aMsg)->WriteSentinel(1662126306);

    switch (type) {
    case union__::TGetFilesResponseSuccess:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_GetFilesResponseSuccess());
            // Sentinel = 'TGetFilesResponseSuccess'
            (aMsg)->WriteSentinel(1946159504);
            return;
        }
    case union__::TGetFilesResponseFailure:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_GetFilesResponseFailure());
            // Sentinel = 'TGetFilesResponseFailure'
            (aMsg)->WriteSentinel(1938753919);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::GetFilesResponseResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::GetFilesResponseResult union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union GetFilesResponseResult");
        return false;
    }
    // Sentinel = 'GetFilesResponseResult'
    if ((!((aMsg)->ReadSentinel(aIter, 1662126306)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union GetFilesResponseResult");
        return false;
    }

    switch (type) {
    case union__::TGetFilesResponseSuccess:
        {
            mozilla::dom::GetFilesResponseSuccess tmp = mozilla::dom::GetFilesResponseSuccess();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_GetFilesResponseSuccess())))))) {
                aActor->FatalError("Error deserializing variant TGetFilesResponseSuccess of union GetFilesResponseResult");
                return false;
            }
            // Sentinel = 'TGetFilesResponseSuccess'
            if ((!((aMsg)->ReadSentinel(aIter, 1946159504)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TGetFilesResponseSuccess of union GetFilesResponseResult");
                return false;
            }
            return true;
        }
    case union__::TGetFilesResponseFailure:
        {
            mozilla::dom::GetFilesResponseFailure tmp = mozilla::dom::GetFilesResponseFailure();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_GetFilesResponseFailure())))))) {
                aActor->FatalError("Error deserializing variant TGetFilesResponseFailure of union GetFilesResponseResult");
                return false;
            }
            // Sentinel = 'TGetFilesResponseFailure'
            if ((!((aMsg)->ReadSentinel(aIter, 1938753919)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TGetFilesResponseFailure of union GetFilesResponseResult");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct BlobURLRegistrationData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::BlobURLRegistrationData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).url());
    // Sentinel = 'url'
    (aMsg)->WriteSentinel(45220180);
    WriteIPDLParam(aMsg, aActor, (aVar).blob());
    // Sentinel = 'blob'
    (aMsg)->WriteSentinel(68157856);
    WriteIPDLParam(aMsg, aActor, (aVar).principal());
    // Sentinel = 'principal'
    (aMsg)->WriteSentinel(319620035);
    WriteIPDLParam(aMsg, aActor, (aVar).agentClusterId());
    // Sentinel = 'agentClusterId'
    (aMsg)->WriteSentinel(710477215);
    WriteIPDLParam(aMsg, aActor, (aVar).revoked());
    // Sentinel = 'revoked'
    (aMsg)->WriteSentinel(201065201);
}

auto IPDLParamTraits<mozilla::dom::BlobURLRegistrationData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->url())))))) {
        aActor->FatalError("Error deserializing 'url' (nsCString) member of 'BlobURLRegistrationData'");
        return false;
    }
    // Sentinel = 'url'
    if ((!((aMsg)->ReadSentinel(aIter, 45220180)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'url' (nsCString) member of 'BlobURLRegistrationData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->blob())))))) {
        aActor->FatalError("Error deserializing 'blob' (IPCBlob) member of 'BlobURLRegistrationData'");
        return false;
    }
    // Sentinel = 'blob'
    if ((!((aMsg)->ReadSentinel(aIter, 68157856)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'blob' (IPCBlob) member of 'BlobURLRegistrationData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principal())))))) {
        aActor->FatalError("Error deserializing 'principal' (nsIPrincipal) member of 'BlobURLRegistrationData'");
        return false;
    }
    // Sentinel = 'principal'
    if ((!((aMsg)->ReadSentinel(aIter, 319620035)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principal' (nsIPrincipal) member of 'BlobURLRegistrationData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->agentClusterId())))))) {
        aActor->FatalError("Error deserializing 'agentClusterId' (nsID?) member of 'BlobURLRegistrationData'");
        return false;
    }
    // Sentinel = 'agentClusterId'
    if ((!((aMsg)->ReadSentinel(aIter, 710477215)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'agentClusterId' (nsID?) member of 'BlobURLRegistrationData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->revoked())))))) {
        aActor->FatalError("Error deserializing 'revoked' (bool) member of 'BlobURLRegistrationData'");
        return false;
    }
    // Sentinel = 'revoked'
    if ((!((aMsg)->ReadSentinel(aIter, 201065201)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'revoked' (bool) member of 'BlobURLRegistrationData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct JSWindowActorEventDecl|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::JSWindowActorEventDecl>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).capture());
    // Sentinel = 'capture'
    (aMsg)->WriteSentinel(195691253);
    WriteIPDLParam(aMsg, aActor, (aVar).systemGroup());
    // Sentinel = 'systemGroup'
    (aMsg)->WriteSentinel(478414003);
    WriteIPDLParam(aMsg, aActor, (aVar).allowUntrusted());
    // Sentinel = 'allowUntrusted'
    (aMsg)->WriteSentinel(741803502);
    WriteIPDLParam(aMsg, aActor, (aVar).passive());
    // Sentinel = 'passive'
    (aMsg)->WriteSentinel(200540924);
}

auto IPDLParamTraits<mozilla::dom::JSWindowActorEventDecl>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsString) member of 'JSWindowActorEventDecl'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsString) member of 'JSWindowActorEventDecl'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->capture())))))) {
        aActor->FatalError("Error deserializing 'capture' (bool) member of 'JSWindowActorEventDecl'");
        return false;
    }
    // Sentinel = 'capture'
    if ((!((aMsg)->ReadSentinel(aIter, 195691253)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'capture' (bool) member of 'JSWindowActorEventDecl'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->systemGroup())))))) {
        aActor->FatalError("Error deserializing 'systemGroup' (bool) member of 'JSWindowActorEventDecl'");
        return false;
    }
    // Sentinel = 'systemGroup'
    if ((!((aMsg)->ReadSentinel(aIter, 478414003)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'systemGroup' (bool) member of 'JSWindowActorEventDecl'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allowUntrusted())))))) {
        aActor->FatalError("Error deserializing 'allowUntrusted' (bool) member of 'JSWindowActorEventDecl'");
        return false;
    }
    // Sentinel = 'allowUntrusted'
    if ((!((aMsg)->ReadSentinel(aIter, 741803502)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allowUntrusted' (bool) member of 'JSWindowActorEventDecl'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->passive())))))) {
        aActor->FatalError("Error deserializing 'passive' (bool?) member of 'JSWindowActorEventDecl'");
        return false;
    }
    // Sentinel = 'passive'
    if ((!((aMsg)->ReadSentinel(aIter, 200540924)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'passive' (bool?) member of 'JSWindowActorEventDecl'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct JSWindowActorInfo|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::JSWindowActorInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).allFrames());
    // Sentinel = 'allFrames'
    (aMsg)->WriteSentinel(296485784);
    WriteIPDLParam(aMsg, aActor, (aVar).url());
    // Sentinel = 'url'
    (aMsg)->WriteSentinel(45220180);
    WriteIPDLParam(aMsg, aActor, (aVar).events());
    // Sentinel = 'events'
    (aMsg)->WriteSentinel(149619350);
    WriteIPDLParam(aMsg, aActor, (aVar).observers());
    // Sentinel = 'observers'
    (aMsg)->WriteSentinel(320537564);
    WriteIPDLParam(aMsg, aActor, (aVar).matches());
    // Sentinel = 'matches'
    (aMsg)->WriteSentinel(193790694);
    WriteIPDLParam(aMsg, aActor, (aVar).remoteTypes());
    // Sentinel = 'remoteTypes'
    (aMsg)->WriteSentinel(466551970);
    WriteIPDLParam(aMsg, aActor, (aVar).messageManagerGroups());
    // Sentinel = 'messageManagerGroups'
    (aMsg)->WriteSentinel(1419708449);
}

auto IPDLParamTraits<mozilla::dom::JSWindowActorInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsCString) member of 'JSWindowActorInfo'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsCString) member of 'JSWindowActorInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allFrames())))))) {
        aActor->FatalError("Error deserializing 'allFrames' (bool) member of 'JSWindowActorInfo'");
        return false;
    }
    // Sentinel = 'allFrames'
    if ((!((aMsg)->ReadSentinel(aIter, 296485784)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allFrames' (bool) member of 'JSWindowActorInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->url())))))) {
        aActor->FatalError("Error deserializing 'url' (nsCString?) member of 'JSWindowActorInfo'");
        return false;
    }
    // Sentinel = 'url'
    if ((!((aMsg)->ReadSentinel(aIter, 45220180)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'url' (nsCString?) member of 'JSWindowActorInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->events())))))) {
        aActor->FatalError("Error deserializing 'events' (JSWindowActorEventDecl[]) member of 'JSWindowActorInfo'");
        return false;
    }
    // Sentinel = 'events'
    if ((!((aMsg)->ReadSentinel(aIter, 149619350)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'events' (JSWindowActorEventDecl[]) member of 'JSWindowActorInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->observers())))))) {
        aActor->FatalError("Error deserializing 'observers' (nsCString[]) member of 'JSWindowActorInfo'");
        return false;
    }
    // Sentinel = 'observers'
    if ((!((aMsg)->ReadSentinel(aIter, 320537564)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'observers' (nsCString[]) member of 'JSWindowActorInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->matches())))))) {
        aActor->FatalError("Error deserializing 'matches' (nsString[]) member of 'JSWindowActorInfo'");
        return false;
    }
    // Sentinel = 'matches'
    if ((!((aMsg)->ReadSentinel(aIter, 193790694)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'matches' (nsString[]) member of 'JSWindowActorInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->remoteTypes())))))) {
        aActor->FatalError("Error deserializing 'remoteTypes' (nsCString[]) member of 'JSWindowActorInfo'");
        return false;
    }
    // Sentinel = 'remoteTypes'
    if ((!((aMsg)->ReadSentinel(aIter, 466551970)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'remoteTypes' (nsCString[]) member of 'JSWindowActorInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->messageManagerGroups())))))) {
        aActor->FatalError("Error deserializing 'messageManagerGroups' (nsString[]) member of 'JSWindowActorInfo'");
        return false;
    }
    // Sentinel = 'messageManagerGroups'
    if ((!((aMsg)->ReadSentinel(aIter, 1419708449)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'messageManagerGroups' (nsString[]) member of 'JSWindowActorInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct JSProcessActorInfo|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::JSProcessActorInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).url());
    // Sentinel = 'url'
    (aMsg)->WriteSentinel(45220180);
    WriteIPDLParam(aMsg, aActor, (aVar).observers());
    // Sentinel = 'observers'
    (aMsg)->WriteSentinel(320537564);
    WriteIPDLParam(aMsg, aActor, (aVar).remoteTypes());
    // Sentinel = 'remoteTypes'
    (aMsg)->WriteSentinel(466551970);
}

auto IPDLParamTraits<mozilla::dom::JSProcessActorInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsCString) member of 'JSProcessActorInfo'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsCString) member of 'JSProcessActorInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->url())))))) {
        aActor->FatalError("Error deserializing 'url' (nsCString?) member of 'JSProcessActorInfo'");
        return false;
    }
    // Sentinel = 'url'
    if ((!((aMsg)->ReadSentinel(aIter, 45220180)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'url' (nsCString?) member of 'JSProcessActorInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->observers())))))) {
        aActor->FatalError("Error deserializing 'observers' (nsCString[]) member of 'JSProcessActorInfo'");
        return false;
    }
    // Sentinel = 'observers'
    if ((!((aMsg)->ReadSentinel(aIter, 320537564)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'observers' (nsCString[]) member of 'JSProcessActorInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->remoteTypes())))))) {
        aActor->FatalError("Error deserializing 'remoteTypes' (nsCString[]) member of 'JSProcessActorInfo'");
        return false;
    }
    // Sentinel = 'remoteTypes'
    if ((!((aMsg)->ReadSentinel(aIter, 466551970)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'remoteTypes' (nsCString[]) member of 'JSProcessActorInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct GMPAPITags|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::GMPAPITags>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).api());
    // Sentinel = 'api'
    (aMsg)->WriteSentinel(40829243);
    WriteIPDLParam(aMsg, aActor, (aVar).tags());
    // Sentinel = 'tags'
    (aMsg)->WriteSentinel(70779312);
}

auto IPDLParamTraits<mozilla::dom::GMPAPITags>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->api())))))) {
        aActor->FatalError("Error deserializing 'api' (nsCString) member of 'GMPAPITags'");
        return false;
    }
    // Sentinel = 'api'
    if ((!((aMsg)->ReadSentinel(aIter, 40829243)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'api' (nsCString) member of 'GMPAPITags'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->tags())))))) {
        aActor->FatalError("Error deserializing 'tags' (nsCString[]) member of 'GMPAPITags'");
        return false;
    }
    // Sentinel = 'tags'
    if ((!((aMsg)->ReadSentinel(aIter, 70779312)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'tags' (nsCString[]) member of 'GMPAPITags'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct GMPCapabilityData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::GMPCapabilityData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).version());
    // Sentinel = 'version'
    (aMsg)->WriteSentinel(204210951);
    WriteIPDLParam(aMsg, aActor, (aVar).capabilities());
    // Sentinel = 'capabilities'
    (aMsg)->WriteSentinel(527434987);
}

auto IPDLParamTraits<mozilla::dom::GMPCapabilityData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsCString) member of 'GMPCapabilityData'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsCString) member of 'GMPCapabilityData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->version())))))) {
        aActor->FatalError("Error deserializing 'version' (nsCString) member of 'GMPCapabilityData'");
        return false;
    }
    // Sentinel = 'version'
    if ((!((aMsg)->ReadSentinel(aIter, 204210951)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'version' (nsCString) member of 'GMPCapabilityData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->capabilities())))))) {
        aActor->FatalError("Error deserializing 'capabilities' (GMPAPITags[]) member of 'GMPCapabilityData'");
        return false;
    }
    // Sentinel = 'capabilities'
    if ((!((aMsg)->ReadSentinel(aIter, 527434987)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'capabilities' (GMPAPITags[]) member of 'GMPCapabilityData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct XPCOMInitData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::XPCOMInitData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).isOffline());
    // Sentinel = 'isOffline'
    (aMsg)->WriteSentinel(302580640);
    WriteIPDLParam(aMsg, aActor, (aVar).isConnected());
    // Sentinel = 'isConnected'
    (aMsg)->WriteSentinel(444859504);
    WriteIPDLParam(aMsg, aActor, (aVar).isLangRTL());
    // Sentinel = 'isLangRTL'
    (aMsg)->WriteSentinel(290980689);
    WriteIPDLParam(aMsg, aActor, (aVar).haveBidiKeyboards());
    // Sentinel = 'haveBidiKeyboards'
    (aMsg)->WriteSentinel(1003161281);
    WriteIPDLParam(aMsg, aActor, (aVar).dictionaries());
    // Sentinel = 'dictionaries'
    (aMsg)->WriteSentinel(540738815);
    WriteIPDLParam(aMsg, aActor, (aVar).clipboardCaps());
    // Sentinel = 'clipboardCaps'
    (aMsg)->WriteSentinel(616170808);
    WriteIPDLParam(aMsg, aActor, (aVar).domainPolicy());
    // Sentinel = 'domainPolicy'
    (aMsg)->WriteSentinel(531301609);
    WriteIPDLParam(aMsg, aActor, (aVar).userContentSheetURL());
    // Sentinel = 'userContentSheetURL'
    (aMsg)->WriteSentinel(1307510663);
    WriteIPDLParam(aMsg, aActor, (aVar).gfxNonDefaultVarUpdates());
    // Sentinel = 'gfxNonDefaultVarUpdates'
    (aMsg)->WriteSentinel(1836517685);
    WriteIPDLParam(aMsg, aActor, (aVar).contentDeviceData());
    // Sentinel = 'contentDeviceData'
    (aMsg)->WriteSentinel(1043203782);
    WriteIPDLParam(aMsg, aActor, (aVar).gfxFeatureStatus());
    // Sentinel = 'gfxFeatureStatus'
    (aMsg)->WriteSentinel(921306774);
    WriteIPDLParam(aMsg, aActor, (aVar).dataStorage());
    // Sentinel = 'dataStorage'
    (aMsg)->WriteSentinel(444793968);
    WriteIPDLParam(aMsg, aActor, (aVar).appLocales());
    // Sentinel = 'appLocales'
    (aMsg)->WriteSentinel(367395845);
    WriteIPDLParam(aMsg, aActor, (aVar).requestedLocales());
    // Sentinel = 'requestedLocales'
    (aMsg)->WriteSentinel(951977622);
    WriteIPDLParam(aMsg, aActor, (aVar).dynamicScalarDefs());
    // Sentinel = 'dynamicScalarDefs'
    (aMsg)->WriteSentinel(1030620862);
    WriteIPDLParam(aMsg, aActor, (aVar).systemParameters());
    // Sentinel = 'systemParameters'
    (aMsg)->WriteSentinel(965543610);
    (aMsg)->WriteBytes((&((aVar).captivePortalState())), 4);
    // Sentinel = 'captivePortalState'
    (aMsg)->WriteSentinel(1177749344);
}

auto IPDLParamTraits<mozilla::dom::XPCOMInitData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isOffline())))))) {
        aActor->FatalError("Error deserializing 'isOffline' (bool) member of 'XPCOMInitData'");
        return false;
    }
    // Sentinel = 'isOffline'
    if ((!((aMsg)->ReadSentinel(aIter, 302580640)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isOffline' (bool) member of 'XPCOMInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isConnected())))))) {
        aActor->FatalError("Error deserializing 'isConnected' (bool) member of 'XPCOMInitData'");
        return false;
    }
    // Sentinel = 'isConnected'
    if ((!((aMsg)->ReadSentinel(aIter, 444859504)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isConnected' (bool) member of 'XPCOMInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isLangRTL())))))) {
        aActor->FatalError("Error deserializing 'isLangRTL' (bool) member of 'XPCOMInitData'");
        return false;
    }
    // Sentinel = 'isLangRTL'
    if ((!((aMsg)->ReadSentinel(aIter, 290980689)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isLangRTL' (bool) member of 'XPCOMInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->haveBidiKeyboards())))))) {
        aActor->FatalError("Error deserializing 'haveBidiKeyboards' (bool) member of 'XPCOMInitData'");
        return false;
    }
    // Sentinel = 'haveBidiKeyboards'
    if ((!((aMsg)->ReadSentinel(aIter, 1003161281)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'haveBidiKeyboards' (bool) member of 'XPCOMInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->dictionaries())))))) {
        aActor->FatalError("Error deserializing 'dictionaries' (nsCString[]) member of 'XPCOMInitData'");
        return false;
    }
    // Sentinel = 'dictionaries'
    if ((!((aMsg)->ReadSentinel(aIter, 540738815)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'dictionaries' (nsCString[]) member of 'XPCOMInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->clipboardCaps())))))) {
        aActor->FatalError("Error deserializing 'clipboardCaps' (ClipboardCapabilities) member of 'XPCOMInitData'");
        return false;
    }
    // Sentinel = 'clipboardCaps'
    if ((!((aMsg)->ReadSentinel(aIter, 616170808)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'clipboardCaps' (ClipboardCapabilities) member of 'XPCOMInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->domainPolicy())))))) {
        aActor->FatalError("Error deserializing 'domainPolicy' (DomainPolicyClone) member of 'XPCOMInitData'");
        return false;
    }
    // Sentinel = 'domainPolicy'
    if ((!((aMsg)->ReadSentinel(aIter, 531301609)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'domainPolicy' (DomainPolicyClone) member of 'XPCOMInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->userContentSheetURL())))))) {
        aActor->FatalError("Error deserializing 'userContentSheetURL' (nsIURI) member of 'XPCOMInitData'");
        return false;
    }
    // Sentinel = 'userContentSheetURL'
    if ((!((aMsg)->ReadSentinel(aIter, 1307510663)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'userContentSheetURL' (nsIURI) member of 'XPCOMInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->gfxNonDefaultVarUpdates())))))) {
        aActor->FatalError("Error deserializing 'gfxNonDefaultVarUpdates' (GfxVarUpdate[]) member of 'XPCOMInitData'");
        return false;
    }
    // Sentinel = 'gfxNonDefaultVarUpdates'
    if ((!((aMsg)->ReadSentinel(aIter, 1836517685)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'gfxNonDefaultVarUpdates' (GfxVarUpdate[]) member of 'XPCOMInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentDeviceData())))))) {
        aActor->FatalError("Error deserializing 'contentDeviceData' (ContentDeviceData) member of 'XPCOMInitData'");
        return false;
    }
    // Sentinel = 'contentDeviceData'
    if ((!((aMsg)->ReadSentinel(aIter, 1043203782)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentDeviceData' (ContentDeviceData) member of 'XPCOMInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->gfxFeatureStatus())))))) {
        aActor->FatalError("Error deserializing 'gfxFeatureStatus' (GfxInfoFeatureStatus[]) member of 'XPCOMInitData'");
        return false;
    }
    // Sentinel = 'gfxFeatureStatus'
    if ((!((aMsg)->ReadSentinel(aIter, 921306774)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'gfxFeatureStatus' (GfxInfoFeatureStatus[]) member of 'XPCOMInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->dataStorage())))))) {
        aActor->FatalError("Error deserializing 'dataStorage' (DataStorageEntry[]) member of 'XPCOMInitData'");
        return false;
    }
    // Sentinel = 'dataStorage'
    if ((!((aMsg)->ReadSentinel(aIter, 444793968)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'dataStorage' (DataStorageEntry[]) member of 'XPCOMInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->appLocales())))))) {
        aActor->FatalError("Error deserializing 'appLocales' (nsCString[]) member of 'XPCOMInitData'");
        return false;
    }
    // Sentinel = 'appLocales'
    if ((!((aMsg)->ReadSentinel(aIter, 367395845)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'appLocales' (nsCString[]) member of 'XPCOMInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestedLocales())))))) {
        aActor->FatalError("Error deserializing 'requestedLocales' (nsCString[]) member of 'XPCOMInitData'");
        return false;
    }
    // Sentinel = 'requestedLocales'
    if ((!((aMsg)->ReadSentinel(aIter, 951977622)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestedLocales' (nsCString[]) member of 'XPCOMInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->dynamicScalarDefs())))))) {
        aActor->FatalError("Error deserializing 'dynamicScalarDefs' (DynamicScalarDefinition[]) member of 'XPCOMInitData'");
        return false;
    }
    // Sentinel = 'dynamicScalarDefs'
    if ((!((aMsg)->ReadSentinel(aIter, 1030620862)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'dynamicScalarDefs' (DynamicScalarDefinition[]) member of 'XPCOMInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->systemParameters())))))) {
        aActor->FatalError("Error deserializing 'systemParameters' (SystemParameterKVPair[]) member of 'XPCOMInitData'");
        return false;
    }
    // Sentinel = 'systemParameters'
    if ((!((aMsg)->ReadSentinel(aIter, 965543610)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'systemParameters' (SystemParameterKVPair[]) member of 'XPCOMInitData'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->captivePortalState())), 4)))) {
        aActor->FatalError("Error bulk reading fields from int32_t");
        return false;
    }
    // Sentinel = 'captivePortalState'
    if ((!((aMsg)->ReadSentinel(aIter, 1177749344)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct VisitedQueryResult|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::VisitedQueryResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).uri());
    // Sentinel = 'uri'
    (aMsg)->WriteSentinel(45023569);
    WriteIPDLParam(aMsg, aActor, (aVar).visited());
    // Sentinel = 'visited'
    (aMsg)->WriteSentinel(203686649);
}

auto IPDLParamTraits<mozilla::dom::VisitedQueryResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uri())))))) {
        aActor->FatalError("Error deserializing 'uri' (nsIURI) member of 'VisitedQueryResult'");
        return false;
    }
    // Sentinel = 'uri'
    if ((!((aMsg)->ReadSentinel(aIter, 45023569)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uri' (nsIURI) member of 'VisitedQueryResult'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->visited())))))) {
        aActor->FatalError("Error deserializing 'visited' (bool) member of 'VisitedQueryResult'");
        return false;
    }
    // Sentinel = 'visited'
    if ((!((aMsg)->ReadSentinel(aIter, 203686649)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'visited' (bool) member of 'VisitedQueryResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StringBundleDescriptor|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::StringBundleDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).bundleURL());
    // Sentinel = 'bundleURL'
    (aMsg)->WriteSentinel(303825774);
    WriteIPDLParam(aMsg, aActor, (aVar).mapFile());
    // Sentinel = 'mapFile'
    (aMsg)->WriteSentinel(185074367);
    (aMsg)->WriteBytes((&((aVar).mapSize())), 4);
    // Sentinel = 'mapSize'
    (aMsg)->WriteSentinel(190317274);
}

auto IPDLParamTraits<mozilla::dom::StringBundleDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->bundleURL())))))) {
        aActor->FatalError("Error deserializing 'bundleURL' (nsCString) member of 'StringBundleDescriptor'");
        return false;
    }
    // Sentinel = 'bundleURL'
    if ((!((aMsg)->ReadSentinel(aIter, 303825774)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bundleURL' (nsCString) member of 'StringBundleDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mapFile())))))) {
        aActor->FatalError("Error deserializing 'mapFile' (FileDescriptor) member of 'StringBundleDescriptor'");
        return false;
    }
    // Sentinel = 'mapFile'
    if ((!((aMsg)->ReadSentinel(aIter, 185074367)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mapFile' (FileDescriptor) member of 'StringBundleDescriptor'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->mapSize())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'mapSize'
    if ((!((aMsg)->ReadSentinel(aIter, 190317274)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCURLClassifierFeature|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCURLClassifierFeature>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).featureName());
    // Sentinel = 'featureName'
    (aMsg)->WriteSentinel(450495598);
    WriteIPDLParam(aMsg, aActor, (aVar).tables());
    // Sentinel = 'tables'
    (aMsg)->WriteSentinel(145490556);
    WriteIPDLParam(aMsg, aActor, (aVar).exceptionHostList());
    // Sentinel = 'exceptionHostList'
    (aMsg)->WriteSentinel(1064568586);
}

auto IPDLParamTraits<mozilla::dom::IPCURLClassifierFeature>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->featureName())))))) {
        aActor->FatalError("Error deserializing 'featureName' (nsCString) member of 'IPCURLClassifierFeature'");
        return false;
    }
    // Sentinel = 'featureName'
    if ((!((aMsg)->ReadSentinel(aIter, 450495598)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'featureName' (nsCString) member of 'IPCURLClassifierFeature'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->tables())))))) {
        aActor->FatalError("Error deserializing 'tables' (nsCString[]) member of 'IPCURLClassifierFeature'");
        return false;
    }
    // Sentinel = 'tables'
    if ((!((aMsg)->ReadSentinel(aIter, 145490556)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'tables' (nsCString[]) member of 'IPCURLClassifierFeature'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->exceptionHostList())))))) {
        aActor->FatalError("Error deserializing 'exceptionHostList' (nsCString) member of 'IPCURLClassifierFeature'");
        return false;
    }
    // Sentinel = 'exceptionHostList'
    if ((!((aMsg)->ReadSentinel(aIter, 1064568586)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'exceptionHostList' (nsCString) member of 'IPCURLClassifierFeature'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct NotificationEventData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::NotificationEventData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).originSuffix());
    // Sentinel = 'originSuffix'
    (aMsg)->WriteSentinel(544736510);
    WriteIPDLParam(aMsg, aActor, (aVar).scope());
    // Sentinel = 'scope'
    (aMsg)->WriteSentinel(107086363);
    WriteIPDLParam(aMsg, aActor, (aVar).ID());
    // Sentinel = 'ID'
    (aMsg)->WriteSentinel(14155918);
    WriteIPDLParam(aMsg, aActor, (aVar).title());
    // Sentinel = 'title'
    (aMsg)->WriteSentinel(109445667);
    WriteIPDLParam(aMsg, aActor, (aVar).dir());
    // Sentinel = 'dir'
    (aMsg)->WriteSentinel(41091392);
    WriteIPDLParam(aMsg, aActor, (aVar).lang());
    // Sentinel = 'lang'
    (aMsg)->WriteSentinel(68813219);
    WriteIPDLParam(aMsg, aActor, (aVar).body());
    // Sentinel = 'body'
    (aMsg)->WriteSentinel(68813231);
    WriteIPDLParam(aMsg, aActor, (aVar).tag());
    // Sentinel = 'tag'
    (aMsg)->WriteSentinel(42467645);
    WriteIPDLParam(aMsg, aActor, (aVar).icon());
    // Sentinel = 'icon'
    (aMsg)->WriteSentinel(69009834);
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
    WriteIPDLParam(aMsg, aActor, (aVar).behavior());
    // Sentinel = 'behavior'
    (aMsg)->WriteSentinel(244515665);
}

auto IPDLParamTraits<mozilla::dom::NotificationEventData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->originSuffix())))))) {
        aActor->FatalError("Error deserializing 'originSuffix' (nsCString) member of 'NotificationEventData'");
        return false;
    }
    // Sentinel = 'originSuffix'
    if ((!((aMsg)->ReadSentinel(aIter, 544736510)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'originSuffix' (nsCString) member of 'NotificationEventData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->scope())))))) {
        aActor->FatalError("Error deserializing 'scope' (nsCString) member of 'NotificationEventData'");
        return false;
    }
    // Sentinel = 'scope'
    if ((!((aMsg)->ReadSentinel(aIter, 107086363)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'scope' (nsCString) member of 'NotificationEventData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ID())))))) {
        aActor->FatalError("Error deserializing 'ID' (nsString) member of 'NotificationEventData'");
        return false;
    }
    // Sentinel = 'ID'
    if ((!((aMsg)->ReadSentinel(aIter, 14155918)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ID' (nsString) member of 'NotificationEventData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->title())))))) {
        aActor->FatalError("Error deserializing 'title' (nsString) member of 'NotificationEventData'");
        return false;
    }
    // Sentinel = 'title'
    if ((!((aMsg)->ReadSentinel(aIter, 109445667)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'title' (nsString) member of 'NotificationEventData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->dir())))))) {
        aActor->FatalError("Error deserializing 'dir' (nsString) member of 'NotificationEventData'");
        return false;
    }
    // Sentinel = 'dir'
    if ((!((aMsg)->ReadSentinel(aIter, 41091392)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'dir' (nsString) member of 'NotificationEventData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->lang())))))) {
        aActor->FatalError("Error deserializing 'lang' (nsString) member of 'NotificationEventData'");
        return false;
    }
    // Sentinel = 'lang'
    if ((!((aMsg)->ReadSentinel(aIter, 68813219)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'lang' (nsString) member of 'NotificationEventData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->body())))))) {
        aActor->FatalError("Error deserializing 'body' (nsString) member of 'NotificationEventData'");
        return false;
    }
    // Sentinel = 'body'
    if ((!((aMsg)->ReadSentinel(aIter, 68813231)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'body' (nsString) member of 'NotificationEventData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->tag())))))) {
        aActor->FatalError("Error deserializing 'tag' (nsString) member of 'NotificationEventData'");
        return false;
    }
    // Sentinel = 'tag'
    if ((!((aMsg)->ReadSentinel(aIter, 42467645)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'tag' (nsString) member of 'NotificationEventData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->icon())))))) {
        aActor->FatalError("Error deserializing 'icon' (nsString) member of 'NotificationEventData'");
        return false;
    }
    // Sentinel = 'icon'
    if ((!((aMsg)->ReadSentinel(aIter, 69009834)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'icon' (nsString) member of 'NotificationEventData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (nsString) member of 'NotificationEventData'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (nsString) member of 'NotificationEventData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->behavior())))))) {
        aActor->FatalError("Error deserializing 'behavior' (nsString) member of 'NotificationEventData'");
        return false;
    }
    // Sentinel = 'behavior'
    if ((!((aMsg)->ReadSentinel(aIter, 244515665)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'behavior' (nsString) member of 'NotificationEventData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PostMessageData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PostMessageData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).source());
    // Sentinel = 'source'
    (aMsg)->WriteSentinel(154665618);
    WriteIPDLParam(aMsg, aActor, (aVar).origin());
    // Sentinel = 'origin'
    (aMsg)->WriteSentinel(150143625);
    WriteIPDLParam(aMsg, aActor, (aVar).targetOrigin());
    // Sentinel = 'targetOrigin'
    (aMsg)->WriteSentinel(540738800);
    WriteIPDLParam(aMsg, aActor, (aVar).targetOriginURI());
    // Sentinel = 'targetOriginURI'
    (aMsg)->WriteSentinel(821495264);
    WriteIPDLParam(aMsg, aActor, (aVar).callerPrincipal());
    // Sentinel = 'callerPrincipal'
    (aMsg)->WriteSentinel(811927062);
    WriteIPDLParam(aMsg, aActor, (aVar).subjectPrincipal());
    // Sentinel = 'subjectPrincipal'
    (aMsg)->WriteSentinel(943851155);
    WriteIPDLParam(aMsg, aActor, (aVar).callerURI());
    // Sentinel = 'callerURI'
    (aMsg)->WriteSentinel(297075556);
    WriteIPDLParam(aMsg, aActor, (aVar).isFromPrivateWindow());
    // Sentinel = 'isFromPrivateWindow'
    (aMsg)->WriteSentinel(1288964036);
    WriteIPDLParam(aMsg, aActor, (aVar).scriptLocation());
    // Sentinel = 'scriptLocation'
    (aMsg)->WriteSentinel(732235215);
    (aMsg)->WriteBytes((&((aVar).innerWindowId())), 8);
    // Sentinel = 'innerWindowId'
    (aMsg)->WriteSentinel(627967298);
}

auto IPDLParamTraits<mozilla::dom::PostMessageData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->source())))))) {
        aActor->FatalError("Error deserializing 'source' (MaybeDiscardedBrowsingContext) member of 'PostMessageData'");
        return false;
    }
    // Sentinel = 'source'
    if ((!((aMsg)->ReadSentinel(aIter, 154665618)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'source' (MaybeDiscardedBrowsingContext) member of 'PostMessageData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->origin())))))) {
        aActor->FatalError("Error deserializing 'origin' (nsString) member of 'PostMessageData'");
        return false;
    }
    // Sentinel = 'origin'
    if ((!((aMsg)->ReadSentinel(aIter, 150143625)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'origin' (nsString) member of 'PostMessageData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->targetOrigin())))))) {
        aActor->FatalError("Error deserializing 'targetOrigin' (nsString) member of 'PostMessageData'");
        return false;
    }
    // Sentinel = 'targetOrigin'
    if ((!((aMsg)->ReadSentinel(aIter, 540738800)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'targetOrigin' (nsString) member of 'PostMessageData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->targetOriginURI())))))) {
        aActor->FatalError("Error deserializing 'targetOriginURI' (nsIURI) member of 'PostMessageData'");
        return false;
    }
    // Sentinel = 'targetOriginURI'
    if ((!((aMsg)->ReadSentinel(aIter, 821495264)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'targetOriginURI' (nsIURI) member of 'PostMessageData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->callerPrincipal())))))) {
        aActor->FatalError("Error deserializing 'callerPrincipal' (nsIPrincipal) member of 'PostMessageData'");
        return false;
    }
    // Sentinel = 'callerPrincipal'
    if ((!((aMsg)->ReadSentinel(aIter, 811927062)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'callerPrincipal' (nsIPrincipal) member of 'PostMessageData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->subjectPrincipal())))))) {
        aActor->FatalError("Error deserializing 'subjectPrincipal' (nsIPrincipal) member of 'PostMessageData'");
        return false;
    }
    // Sentinel = 'subjectPrincipal'
    if ((!((aMsg)->ReadSentinel(aIter, 943851155)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'subjectPrincipal' (nsIPrincipal) member of 'PostMessageData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->callerURI())))))) {
        aActor->FatalError("Error deserializing 'callerURI' (nsIURI) member of 'PostMessageData'");
        return false;
    }
    // Sentinel = 'callerURI'
    if ((!((aMsg)->ReadSentinel(aIter, 297075556)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'callerURI' (nsIURI) member of 'PostMessageData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isFromPrivateWindow())))))) {
        aActor->FatalError("Error deserializing 'isFromPrivateWindow' (bool) member of 'PostMessageData'");
        return false;
    }
    // Sentinel = 'isFromPrivateWindow'
    if ((!((aMsg)->ReadSentinel(aIter, 1288964036)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isFromPrivateWindow' (bool) member of 'PostMessageData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->scriptLocation())))))) {
        aActor->FatalError("Error deserializing 'scriptLocation' (nsCString) member of 'PostMessageData'");
        return false;
    }
    // Sentinel = 'scriptLocation'
    if ((!((aMsg)->ReadSentinel(aIter, 732235215)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'scriptLocation' (nsCString) member of 'PostMessageData'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->innerWindowId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'innerWindowId'
    if ((!((aMsg)->ReadSentinel(aIter, 627967298)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union SyncedContextInitializer|
//
namespace mozilla {
namespace dom {
auto SyncedContextInitializer::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TBrowsingContextInitializer:
        {
            (ptr_BrowsingContextInitializer())->~BrowsingContextInitializer__tdef();
            break;
        }
    case TWindowContextInitializer:
        {
            (ptr_WindowContextInitializer())->~WindowContextInitializer__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT SyncedContextInitializer::SyncedContextInitializer(const BrowsingContextInitializer& aOther)
{
    new (mozilla::KnownNotNull, ptr_BrowsingContextInitializer()) BrowsingContextInitializer(aOther);
    mType = TBrowsingContextInitializer;
}

MOZ_IMPLICIT SyncedContextInitializer::SyncedContextInitializer(BrowsingContextInitializer&& aOther)
{
    new (mozilla::KnownNotNull, ptr_BrowsingContextInitializer()) BrowsingContextInitializer(std::move(aOther));
    mType = TBrowsingContextInitializer;
}

MOZ_IMPLICIT SyncedContextInitializer::SyncedContextInitializer(const WindowContextInitializer& aOther)
{
    new (mozilla::KnownNotNull, ptr_WindowContextInitializer()) WindowContextInitializer(aOther);
    mType = TWindowContextInitializer;
}

MOZ_IMPLICIT SyncedContextInitializer::SyncedContextInitializer(WindowContextInitializer&& aOther)
{
    new (mozilla::KnownNotNull, ptr_WindowContextInitializer()) WindowContextInitializer(std::move(aOther));
    mType = TWindowContextInitializer;
}

MOZ_IMPLICIT SyncedContextInitializer::SyncedContextInitializer(const SyncedContextInitializer& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TBrowsingContextInitializer:
        {
            new (mozilla::KnownNotNull, ptr_BrowsingContextInitializer()) BrowsingContextInitializer((aOther).get_BrowsingContextInitializer());
            break;
        }
    case TWindowContextInitializer:
        {
            new (mozilla::KnownNotNull, ptr_WindowContextInitializer()) WindowContextInitializer((aOther).get_WindowContextInitializer());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT SyncedContextInitializer::SyncedContextInitializer(SyncedContextInitializer&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TBrowsingContextInitializer:
        {
            new (mozilla::KnownNotNull, ptr_BrowsingContextInitializer()) BrowsingContextInitializer(std::move((aOther).get_BrowsingContextInitializer()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TWindowContextInitializer:
        {
            new (mozilla::KnownNotNull, ptr_WindowContextInitializer()) WindowContextInitializer(std::move((aOther).get_WindowContextInitializer()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

SyncedContextInitializer::~SyncedContextInitializer()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto SyncedContextInitializer::operator=(const BrowsingContextInitializer& aRhs) -> SyncedContextInitializer&
{
    if (MaybeDestroy(TBrowsingContextInitializer)) {
        new (mozilla::KnownNotNull, ptr_BrowsingContextInitializer()) BrowsingContextInitializer;
    }
    (*(ptr_BrowsingContextInitializer())) = aRhs;
    mType = TBrowsingContextInitializer;
    return (*(this));
}

auto SyncedContextInitializer::operator=(BrowsingContextInitializer&& aRhs) -> SyncedContextInitializer&
{
    if (MaybeDestroy(TBrowsingContextInitializer)) {
        new (mozilla::KnownNotNull, ptr_BrowsingContextInitializer()) BrowsingContextInitializer;
    }
    (*(ptr_BrowsingContextInitializer())) = std::move(aRhs);
    mType = TBrowsingContextInitializer;
    return (*(this));
}

auto SyncedContextInitializer::operator=(const WindowContextInitializer& aRhs) -> SyncedContextInitializer&
{
    if (MaybeDestroy(TWindowContextInitializer)) {
        new (mozilla::KnownNotNull, ptr_WindowContextInitializer()) WindowContextInitializer;
    }
    (*(ptr_WindowContextInitializer())) = aRhs;
    mType = TWindowContextInitializer;
    return (*(this));
}

auto SyncedContextInitializer::operator=(WindowContextInitializer&& aRhs) -> SyncedContextInitializer&
{
    if (MaybeDestroy(TWindowContextInitializer)) {
        new (mozilla::KnownNotNull, ptr_WindowContextInitializer()) WindowContextInitializer;
    }
    (*(ptr_WindowContextInitializer())) = std::move(aRhs);
    mType = TWindowContextInitializer;
    return (*(this));
}

auto SyncedContextInitializer::operator=(const SyncedContextInitializer& aRhs) -> SyncedContextInitializer&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TBrowsingContextInitializer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_BrowsingContextInitializer()) BrowsingContextInitializer;
            }
            (*(ptr_BrowsingContextInitializer())) = (aRhs).get_BrowsingContextInitializer();
            break;
        }
    case TWindowContextInitializer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_WindowContextInitializer()) WindowContextInitializer;
            }
            (*(ptr_WindowContextInitializer())) = (aRhs).get_WindowContextInitializer();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto SyncedContextInitializer::operator=(SyncedContextInitializer&& aRhs) -> SyncedContextInitializer&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TBrowsingContextInitializer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_BrowsingContextInitializer()) BrowsingContextInitializer;
            }
            (*(ptr_BrowsingContextInitializer())) = std::move((aRhs).get_BrowsingContextInitializer());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TWindowContextInitializer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_WindowContextInitializer()) WindowContextInitializer;
            }
            (*(ptr_WindowContextInitializer())) = std::move((aRhs).get_WindowContextInitializer());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SyncedContextInitializer>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::SyncedContextInitializer union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'SyncedContextInitializer'
    (aMsg)->WriteSentinel(2025851344);

    switch (type) {
    case union__::TBrowsingContextInitializer:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_BrowsingContextInitializer());
            // Sentinel = 'TBrowsingContextInitializer'
            (aMsg)->WriteSentinel(2545945353);
            return;
        }
    case union__::TWindowContextInitializer:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_WindowContextInitializer());
            // Sentinel = 'TWindowContextInitializer'
            (aMsg)->WriteSentinel(2183858742);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::SyncedContextInitializer>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::SyncedContextInitializer union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union SyncedContextInitializer");
        return false;
    }
    // Sentinel = 'SyncedContextInitializer'
    if ((!((aMsg)->ReadSentinel(aIter, 2025851344)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union SyncedContextInitializer");
        return false;
    }

    switch (type) {
    case union__::TBrowsingContextInitializer:
        {
            mozilla::dom::BrowsingContextInitializer tmp = mozilla::dom::BrowsingContextInitializer();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_BrowsingContextInitializer())))))) {
                aActor->FatalError("Error deserializing variant TBrowsingContextInitializer of union SyncedContextInitializer");
                return false;
            }
            // Sentinel = 'TBrowsingContextInitializer'
            if ((!((aMsg)->ReadSentinel(aIter, 2545945353)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TBrowsingContextInitializer of union SyncedContextInitializer");
                return false;
            }
            return true;
        }
    case union__::TWindowContextInitializer:
        {
            mozilla::dom::WindowContextInitializer tmp = mozilla::dom::WindowContextInitializer();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_WindowContextInitializer())))))) {
                aActor->FatalError("Error deserializing variant TWindowContextInitializer of union SyncedContextInitializer");
                return false;
            }
            // Sentinel = 'TWindowContextInitializer'
            if ((!((aMsg)->ReadSentinel(aIter, 2183858742)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TWindowContextInitializer of union SyncedContextInitializer");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union BlobURLDataRequestResult|
//
namespace mozilla {
namespace dom {
auto BlobURLDataRequestResult::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TIPCBlob:
        {
            (ptr_IPCBlob())->~IPCBlob__tdef();
            break;
        }
    case Tnsresult:
        {
            (ptr_nsresult())->~nsresult__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT BlobURLDataRequestResult::BlobURLDataRequestResult(const IPCBlob& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob(aOther);
    mType = TIPCBlob;
}

MOZ_IMPLICIT BlobURLDataRequestResult::BlobURLDataRequestResult(IPCBlob&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob(std::move(aOther));
    mType = TIPCBlob;
}

MOZ_IMPLICIT BlobURLDataRequestResult::BlobURLDataRequestResult(const nsresult& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(aOther);
    mType = Tnsresult;
}

MOZ_IMPLICIT BlobURLDataRequestResult::BlobURLDataRequestResult(nsresult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move(aOther));
    mType = Tnsresult;
}

MOZ_IMPLICIT BlobURLDataRequestResult::BlobURLDataRequestResult(const BlobURLDataRequestResult& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TIPCBlob:
        {
            new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob((aOther).get_IPCBlob());
            break;
        }
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult((aOther).get_nsresult());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT BlobURLDataRequestResult::BlobURLDataRequestResult(BlobURLDataRequestResult&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TIPCBlob:
        {
            new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob(std::move((aOther).get_IPCBlob()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move((aOther).get_nsresult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

BlobURLDataRequestResult::~BlobURLDataRequestResult()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto BlobURLDataRequestResult::operator=(const IPCBlob& aRhs) -> BlobURLDataRequestResult&
{
    if (MaybeDestroy(TIPCBlob)) {
        new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob;
    }
    (*(ptr_IPCBlob())) = aRhs;
    mType = TIPCBlob;
    return (*(this));
}

auto BlobURLDataRequestResult::operator=(IPCBlob&& aRhs) -> BlobURLDataRequestResult&
{
    if (MaybeDestroy(TIPCBlob)) {
        new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob;
    }
    (*(ptr_IPCBlob())) = std::move(aRhs);
    mType = TIPCBlob;
    return (*(this));
}

auto BlobURLDataRequestResult::operator=(const nsresult& aRhs) -> BlobURLDataRequestResult&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = aRhs;
    mType = Tnsresult;
    return (*(this));
}

auto BlobURLDataRequestResult::operator=(nsresult&& aRhs) -> BlobURLDataRequestResult&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = std::move(aRhs);
    mType = Tnsresult;
    return (*(this));
}

auto BlobURLDataRequestResult::operator=(const BlobURLDataRequestResult& aRhs) -> BlobURLDataRequestResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TIPCBlob:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob;
            }
            (*(ptr_IPCBlob())) = (aRhs).get_IPCBlob();
            break;
        }
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = (aRhs).get_nsresult();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto BlobURLDataRequestResult::operator=(BlobURLDataRequestResult&& aRhs) -> BlobURLDataRequestResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TIPCBlob:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob;
            }
            (*(ptr_IPCBlob())) = std::move((aRhs).get_IPCBlob());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = std::move((aRhs).get_nsresult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::BlobURLDataRequestResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::BlobURLDataRequestResult union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'BlobURLDataRequestResult'
    (aMsg)->WriteSentinel(1867516245);

    switch (type) {
    case union__::TIPCBlob:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCBlob());
            // Sentinel = 'TIPCBlob'
            (aMsg)->WriteSentinel(190972592);
            return;
        }
    case union__::Tnsresult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsresult());
            // Sentinel = 'Tnsresult'
            (aMsg)->WriteSentinel(313394133);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::BlobURLDataRequestResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::BlobURLDataRequestResult union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union BlobURLDataRequestResult");
        return false;
    }
    // Sentinel = 'BlobURLDataRequestResult'
    if ((!((aMsg)->ReadSentinel(aIter, 1867516245)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union BlobURLDataRequestResult");
        return false;
    }

    switch (type) {
    case union__::TIPCBlob:
        {
            mozilla::dom::IPCBlob tmp = mozilla::dom::IPCBlob();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCBlob())))))) {
                aActor->FatalError("Error deserializing variant TIPCBlob of union BlobURLDataRequestResult");
                return false;
            }
            // Sentinel = 'TIPCBlob'
            if ((!((aMsg)->ReadSentinel(aIter, 190972592)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCBlob of union BlobURLDataRequestResult");
                return false;
            }
            return true;
        }
    case union__::Tnsresult:
        {
            nsresult tmp = nsresult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsresult())))))) {
                aActor->FatalError("Error deserializing variant Tnsresult of union BlobURLDataRequestResult");
                return false;
            }
            // Sentinel = 'Tnsresult'
            if ((!((aMsg)->ReadSentinel(aIter, 313394133)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnsresult of union BlobURLDataRequestResult");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
