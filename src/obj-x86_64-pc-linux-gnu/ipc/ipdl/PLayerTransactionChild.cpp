//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PLayerTransactionChild.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/ipc/IPCCore.h"
#include "mozilla/layers/APZTestData.h"
#include "mozilla/layers/CompositorTypes.h"
#include "mozilla/layers/LayerTransactionChild.h"
#include "mozilla/layers/LayersMessageUtils.h"

#include "mozilla/layers/PCompositorBridgeChild.h"
#include "mozilla/layers/PTextureChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {


auto PLayerTransactionChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PLayerTransactionChild::PLayerTransactionChild() :
    mozilla::ipc::IProtocol(PLayerTransactionMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PLayerTransactionChild);
}

PLayerTransactionChild::~PLayerTransactionChild()
{
    MOZ_COUNT_DTOR(PLayerTransactionChild);
}

auto PLayerTransactionChild::Manager() const -> PCompositorBridgeChild*
{
    return static_cast<PCompositorBridgeChild*>(IProtocol::Manager());
}

auto PLayerTransactionChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PLayerTransactionChild::SendUpdate(const TransactionInfo& txn) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_Update(Id());

    WriteIPDLParam(msg__, this, txn);
    // Sentinel = 'txn'
    (msg__)->WriteSentinel(45941083);




    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_Update", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PLayerTransactionChild::SendPaintTime(
        const TransactionId& id,
        const TimeDuration& paintTime) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_PaintTime(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);
    WriteIPDLParam(msg__, this, paintTime);
    // Sentinel = 'paintTime'
    (msg__)->WriteSentinel(310510508);




    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_PaintTime", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PLayerTransactionChild::SendSetLayersObserverEpoch(const LayersObserverEpoch& aChildEpoch) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_SetLayersObserverEpoch(Id());

    WriteIPDLParam(msg__, this, aChildEpoch);
    // Sentinel = 'aChildEpoch'
    (msg__)->WriteSentinel(413402165);




    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_SetLayersObserverEpoch", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PLayerTransactionChild::SendNewCompositable(
        const CompositableHandle& handle,
        const TextureInfo& info) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_NewCompositable(Id());

    WriteIPDLParam(msg__, this, handle);
    // Sentinel = 'handle'
    (msg__)->WriteSentinel(142344813);
    WriteIPDLParam(msg__, this, info);
    // Sentinel = 'info'
    (msg__)->WriteSentinel(70058413);




    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_NewCompositable", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PLayerTransactionChild::SendReleaseLayer(const LayerHandle& layer) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_ReleaseLayer(Id());

    WriteIPDLParam(msg__, this, layer);
    // Sentinel = 'layer'
    (msg__)->WriteSentinel(105644574);




    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_ReleaseLayer", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PLayerTransactionChild::SendReleaseCompositable(const CompositableHandle& compositable) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_ReleaseCompositable(Id());

    WriteIPDLParam(msg__, this, compositable);
    // Sentinel = 'compositable'
    (msg__)->WriteSentinel(551879939);




    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_ReleaseCompositable", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PLayerTransactionChild::SendSetConfirmedTargetAPZC(
        const uint64_t& aInputBlockId,
        const nsTArray<ScrollableLayerGuid>& aTargets) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_SetConfirmedTargetAPZC(Id());

    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);
    WriteIPDLParam(msg__, this, aTargets);
    // Sentinel = 'aTargets'
    (msg__)->WriteSentinel(235012924);




    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_SetConfirmedTargetAPZC", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PLayerTransactionChild::SendSetTestSampleTime(const TimeStamp& sampleTime) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_SetTestSampleTime(Id());

    WriteIPDLParam(msg__, this, sampleTime);
    // Sentinel = 'sampleTime'
    (msg__)->WriteSentinel(380896274);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_SetTestSampleTime", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PLayerTransaction::Msg_SetTestSampleTime", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PLayerTransactionChild::SendLeaveTestMode() -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_LeaveTestMode(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_LeaveTestMode", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PLayerTransaction::Msg_LeaveTestMode", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PLayerTransactionChild::SendGetAnimationValue(
        const uint64_t& aCompositorAnimationId,
        OMTAValue* value) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_GetAnimationValue(Id());

    WriteIPDLParam(msg__, this, aCompositorAnimationId);
    // Sentinel = 'aCompositorAnimationId'
    (msg__)->WriteSentinel(1714358494);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_GetAnimationValue", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PLayerTransaction::Msg_GetAnimationValue", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'OMTAValue'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'OMTAValue'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PLayerTransactionChild::SendGetTransform(
        const LayerHandle& layer,
        mozilla::Maybe<Matrix4x4>* transform) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_GetTransform(Id());

    WriteIPDLParam(msg__, this, layer);
    // Sentinel = 'layer'
    (msg__)->WriteSentinel(105644574);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_GetTransform", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PLayerTransaction::Msg_GetTransform", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, transform)))) {
        FatalError("Error deserializing 'Matrix4x4?'");
        return false;
    }
    // Sentinel = 'transform'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 324862941)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Matrix4x4?'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PLayerTransactionChild::SendSetAsyncScrollOffset(
        const ViewID& id,
        const float& x,
        const float& y) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_SetAsyncScrollOffset(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);
    WriteIPDLParam(msg__, this, x);
    // Sentinel = 'x'
    (msg__)->WriteSentinel(7929977);
    WriteIPDLParam(msg__, this, y);
    // Sentinel = 'y'
    (msg__)->WriteSentinel(7995514);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_SetAsyncScrollOffset", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PLayerTransaction::Msg_SetAsyncScrollOffset", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PLayerTransactionChild::SendSetAsyncZoom(
        const ViewID& id,
        const float& zoom) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_SetAsyncZoom(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);
    WriteIPDLParam(msg__, this, zoom);
    // Sentinel = 'zoom'
    (msg__)->WriteSentinel(75760070);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_SetAsyncZoom", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PLayerTransaction::Msg_SetAsyncZoom", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PLayerTransactionChild::SendFlushApzRepaints() -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_FlushApzRepaints(Id());





    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_FlushApzRepaints", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PLayerTransactionChild::SendClearCachedResources() -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_ClearCachedResources(Id());





    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_ClearCachedResources", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PLayerTransactionChild::SendScheduleComposite() -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_ScheduleComposite(Id());





    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_ScheduleComposite", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PLayerTransactionChild::SendGetAPZTestData(APZTestData* data) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_GetAPZTestData(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_GetAPZTestData", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PLayerTransaction::Msg_GetAPZTestData", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, data)))) {
        FatalError("Error deserializing 'APZTestData'");
        return false;
    }
    // Sentinel = 'data'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'APZTestData'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PLayerTransactionChild::SendGetFrameUniformity(FrameUniformityData* data) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_GetFrameUniformity(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_GetFrameUniformity", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PLayerTransaction::Msg_GetFrameUniformity", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, data)))) {
        FatalError("Error deserializing 'FrameUniformityData'");
        return false;
    }
    // Sentinel = 'data'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'FrameUniformityData'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PLayerTransactionChild::SendRequestProperty(
        const nsString& property,
        float* value) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_RequestProperty(Id());

    WriteIPDLParam(msg__, this, property);
    // Sentinel = 'property'
    (msg__)->WriteSentinel(263914374);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_RequestProperty", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PLayerTransaction::Msg_RequestProperty", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'float'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'float'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PLayerTransactionChild::SendGetTextureFactoryIdentifier(TextureFactoryIdentifier* aIdentifier) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_GetTextureFactoryIdentifier(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_GetTextureFactoryIdentifier", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PLayerTransaction::Msg_GetTextureFactoryIdentifier", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aIdentifier)))) {
        FatalError("Error deserializing 'TextureFactoryIdentifier'");
        return false;
    }
    // Sentinel = 'aIdentifier'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 428999781)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'TextureFactoryIdentifier'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PLayerTransactionChild::SendRecordPaintTimes(const PaintTiming& timing) -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_RecordPaintTimes(Id());

    WriteIPDLParam(msg__, this, timing);
    // Sentinel = 'timing'
    (msg__)->WriteSentinel(150798985);




    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_RecordPaintTimes", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PLayerTransactionChild::SendShutdown() -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_Shutdown(Id());





    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_Shutdown", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PLayerTransactionChild::SendShutdownSync() -> bool
{
    IPC::Message* msg__ = PLayerTransaction::Msg_ShutdownSync(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg_ShutdownSync", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PLayerTransaction::Msg_ShutdownSync", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PLayerTransactionChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PLayerTransactionChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PLayerTransactionChild::OnMessageReceived(const Message& msg__) -> PLayerTransactionChild::Result
{
    switch (msg__.type()) {
    case PLayerTransaction::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PLayerTransactionChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PLayerTransaction'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PLayerTransaction'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PLayerTransaction'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<LayerTransactionChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PLayerTransactionMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PLayerTransactionChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PLayerTransactionChild::Result
{
    return MsgNotKnown;
}

auto PLayerTransactionChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PLayerTransactionChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PLayerTransactionChild::ClearSubtree() -> void
{
}



} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PLayerTransactionChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layers::PLayerTransactionChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PLayerTransaction", PLayerTransactionMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layers::PLayerTransactionChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
