//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBrowserBridgeChild.h"
#include "ipc/nsGUIEventIPC.h"
#include "mozilla/LayoutMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/BindingIPCUtils.h"
#include "mozilla/dom/BrowserBridgeChild.h"
#include "mozilla/dom/DocShellMessageUtils.h"
#include "mozilla/dom/TabMessageUtils.h"
#include "nsDocShellLoadState.h"
#include "nsRect.h"

#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/a11y/PDocAccessibleChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PBrowserBridgeChild::PBrowserBridgeChild() :
    mozilla::ipc::IProtocol(PBrowserBridgeMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PBrowserBridgeChild);
}

PBrowserBridgeChild::~PBrowserBridgeChild()
{
    MOZ_COUNT_DTOR(PBrowserBridgeChild);
}

auto PBrowserBridgeChild::Manager() const -> PBrowserChild*
{
    return static_cast<PBrowserChild*>(IProtocol::Manager());
}

auto PBrowserBridgeChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PBrowserBridgeChild::Send__delete__(PBrowserBridgeChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PBrowserBridge::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PBrowserBridgeMsgStart, actor);
    return sendok__;
}

auto PBrowserBridgeChild::SendLoadURL(nsDocShellLoadState* aLoadState) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_LoadURL(Id());

    WriteIPDLParam(msg__, this, aLoadState);
    // Sentinel = 'aLoadState'
    (msg__)->WriteSentinel(349570019);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_LoadURL", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeChild::SendResumeLoad(const uint64_t& aPendingSwitchID) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_ResumeLoad(Id());

    WriteIPDLParam(msg__, this, aPendingSwitchID);
    // Sentinel = 'aPendingSwitchID'
    (msg__)->WriteSentinel(892798502);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_ResumeLoad", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeChild::SendShow(const OwnerShowInfo& info) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_Show(Id());

    WriteIPDLParam(msg__, this, info);
    // Sentinel = 'info'
    (msg__)->WriteSentinel(70058413);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_Show", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeChild::SendScrollbarPreferenceChanged(const ScrollbarPreference& pref) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_ScrollbarPreferenceChanged(Id());

    WriteIPDLParam(msg__, this, pref);
    // Sentinel = 'pref'
    (msg__)->WriteSentinel(71958958);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_ScrollbarPreferenceChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeChild::SendUpdateDimensions(
        const nsIntRect& rect,
        const ScreenIntSize& size) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_UpdateDimensions(Id());

    WriteIPDLParam(msg__, this, rect);
    // Sentinel = 'rect'
    (msg__)->WriteSentinel(70582703);
    WriteIPDLParam(msg__, this, size);
    // Sentinel = 'size'
    (msg__)->WriteSentinel(73662908);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_UpdateDimensions", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeChild::SendRenderLayers(
        const bool& aEnabled,
        const LayersObserverEpoch& aEpoch) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_RenderLayers(Id());

    WriteIPDLParam(msg__, this, aEnabled);
    // Sentinel = 'aEnabled'
    (msg__)->WriteSentinel(224789261);
    WriteIPDLParam(msg__, this, aEpoch);
    // Sentinel = 'aEpoch'
    (msg__)->WriteSentinel(132121169);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_RenderLayers", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeChild::SendUpdateEffects(const EffectsInfo& aEffects) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_UpdateEffects(Id());

    WriteIPDLParam(msg__, this, aEffects);
    // Sentinel = 'aEffects'
    (msg__)->WriteSentinel(225248034);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_UpdateEffects", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeChild::SendNavigateByKey(
        const bool& aForward,
        const bool& aForDocumentNavigation) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_NavigateByKey(Id());

    WriteIPDLParam(msg__, this, aForward);
    // Sentinel = 'aForward'
    (msg__)->WriteSentinel(236258103);
    WriteIPDLParam(msg__, this, aForDocumentNavigation);
    // Sentinel = 'aForDocumentNavigation'
    (msg__)->WriteSentinel(1667434712);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_NavigateByKey", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeChild::SendDispatchSynthesizedMouseEvent(const WidgetMouseEvent& event) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_DispatchSynthesizedMouseEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_DispatchSynthesizedMouseEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeChild::SendActivate(const uint64_t& aActionId) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_Activate(Id());

    WriteIPDLParam(msg__, this, aActionId);
    // Sentinel = 'aActionId'
    (msg__)->WriteSentinel(284164973);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_Activate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeChild::SendDeactivate(
        const bool& aWindowLowering,
        const uint64_t& aActionId) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_Deactivate(Id());

    WriteIPDLParam(msg__, this, aWindowLowering);
    // Sentinel = 'aWindowLowering'
    (msg__)->WriteSentinel(809502241);
    WriteIPDLParam(msg__, this, aActionId);
    // Sentinel = 'aActionId'
    (msg__)->WriteSentinel(284164973);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_Deactivate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeChild::SendSetIsUnderHiddenEmbedderElement(const bool& aIsUnderHiddenEmbedderElement) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_SetIsUnderHiddenEmbedderElement(Id());

    WriteIPDLParam(msg__, this, aIsUnderHiddenEmbedderElement);
    // Sentinel = 'aIsUnderHiddenEmbedderElement'
    (msg__)->WriteSentinel(2795113290);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_SetIsUnderHiddenEmbedderElement", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeChild::SendWillChangeProcess() -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_WillChangeProcess(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_WillChangeProcess", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeChild::SendSetEmbedderAccessible(
        PDocAccessibleChild* aDoc,
        const uint64_t& aID) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_SetEmbedderAccessible(Id());

    MOZ_RELEASE_ASSERT(aDoc, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, aDoc);
    // Sentinel = 'aDoc'
    (msg__)->WriteSentinel(60096888);
    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_SetEmbedderAccessible", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PBrowserBridgeChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PBrowserBridgeChild::OnMessageReceived(const Message& msg__) -> PBrowserBridgeChild::Result
{
    switch (msg__.type()) {
    case PBrowserBridge::Msg_RequestFocus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_RequestFocus", OTHER);

            PickleIterator iter__{msg__};
            bool canRaise{};
            CallerType aCallerType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(canRaise)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'canRaise'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 234816295)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCallerType)))))) {
                FatalError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            // Sentinel = 'aCallerType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422118487)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeChild*>(this))->RecvRequestFocus(std::move(canRaise), std::move(aCallerType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_MoveFocus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_MoveFocus", OTHER);

            PickleIterator iter__{msg__};
            bool forward{};
            bool forDocumentNavigation{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(forward)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'forward'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 200016630)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(forDocumentNavigation)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'forDocumentNavigation'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1571555479)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeChild*>(this))->RecvMoveFocus(std::move(forward), std::move(forDocumentNavigation))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_SetEmbeddedDocAccessibleCOMProxy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_SetEmbeddedDocAccessibleCOMProxy", OTHER);

            PickleIterator iter__{msg__};
            IDispatchHolder aCOMProxy{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCOMProxy)))))) {
                FatalError("Error deserializing 'IDispatchHolder'");
                return MsgValueError;
            }
            // Sentinel = 'aCOMProxy'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 261030755)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IDispatchHolder'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeChild*>(this))->RecvSetEmbeddedDocAccessibleCOMProxy(std::move(aCOMProxy))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_MaybeFireEmbedderLoadEvents__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_MaybeFireEmbedderLoadEvents", OTHER);

            PickleIterator iter__{msg__};
            EmbedderElementEventType aFireEventAtEmbeddingElement{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFireEventAtEmbeddingElement)))))) {
                FatalError("Error deserializing 'EmbedderElementEventType'");
                return MsgValueError;
            }
            // Sentinel = 'aFireEventAtEmbeddingElement'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2607483624)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'EmbedderElementEventType'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeChild*>(this))->RecvMaybeFireEmbedderLoadEvents(std::move(aFireEventAtEmbeddingElement))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_ScrollRectIntoView__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_ScrollRectIntoView", OTHER);

            PickleIterator iter__{msg__};
            nsRect aRect{};
            ScrollAxis aVertical{};
            ScrollAxis aHorizontal{};
            ScrollFlags aScrollFlags{};
            int32_t aAppUnitsPerDevPixel{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRect)))))) {
                FatalError("Error deserializing 'nsRect'");
                return MsgValueError;
            }
            // Sentinel = 'aRect'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044656)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsRect'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aVertical)))))) {
                FatalError("Error deserializing 'ScrollAxis'");
                return MsgValueError;
            }
            // Sentinel = 'aVertical'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 298845084)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollAxis'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHorizontal)))))) {
                FatalError("Error deserializing 'ScrollAxis'");
                return MsgValueError;
            }
            // Sentinel = 'aHorizontal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 447022220)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollAxis'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScrollFlags)))))) {
                FatalError("Error deserializing 'ScrollFlags'");
                return MsgValueError;
            }
            // Sentinel = 'aScrollFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 510592190)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollFlags'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAppUnitsPerDevPixel)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aAppUnitsPerDevPixel'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1366296542)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeChild*>(this))->RecvScrollRectIntoView(std::move(aRect), std::move(aVertical), std::move(aHorizontal), std::move(aScrollFlags), std::move(aAppUnitsPerDevPixel))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_SubFrameCrashed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_SubFrameCrashed", OTHER);

            if ((!((static_cast<BrowserBridgeChild*>(this))->RecvSubFrameCrashed()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_IntrinsicSizeOrRatioChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_IntrinsicSizeOrRatioChanged", OTHER);

            PickleIterator iter__{msg__};
            mozilla::Maybe<IntrinsicSize> aIntrinsicSize{};
            mozilla::Maybe<AspectRatio> aIntrinsicRatio{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIntrinsicSize)))))) {
                FatalError("Error deserializing 'IntrinsicSize?'");
                return MsgValueError;
            }
            // Sentinel = 'aIntrinsicSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 708052400)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IntrinsicSize?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIntrinsicRatio)))))) {
                FatalError("Error deserializing 'AspectRatio?'");
                return MsgValueError;
            }
            // Sentinel = 'aIntrinsicRatio'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 807667220)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'AspectRatio?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeChild*>(this))->RecvIntrinsicSizeOrRatioChanged(std::move(aIntrinsicSize), std::move(aIntrinsicRatio))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBrowserBridgeChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBrowserBridgeChild::Result
{
    return MsgNotKnown;
}

auto PBrowserBridgeChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBrowserBridgeChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBrowserBridgeChild::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PBrowserBridgeChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PBrowserBridgeChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBrowserBridge", PBrowserBridgeMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PBrowserBridgeChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
