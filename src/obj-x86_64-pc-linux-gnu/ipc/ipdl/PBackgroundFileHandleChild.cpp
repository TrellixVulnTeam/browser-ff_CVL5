//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBackgroundFileHandleChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/indexedDB/ActorsChild.h"

#include "mozilla/dom/PBackgroundFileRequestChild.h"
#include "mozilla/dom/PBackgroundMutableFileChild.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PBackgroundFileHandleChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PBackgroundFileHandleChild::PBackgroundFileHandleChild() :
    mozilla::ipc::IProtocol(PBackgroundFileHandleMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PBackgroundFileHandleChild);
}

PBackgroundFileHandleChild::~PBackgroundFileHandleChild()
{
    MOZ_COUNT_DTOR(PBackgroundFileHandleChild);
}

auto PBackgroundFileHandleChild::Manager() const -> PBackgroundMutableFileChild*
{
    return static_cast<PBackgroundMutableFileChild*>(IProtocol::Manager());
}

auto PBackgroundFileHandleChild::ManagedPBackgroundFileRequestChild(nsTArray<PBackgroundFileRequestChild*>& aArr) const -> void
{
    mManagedPBackgroundFileRequestChild.ToArray(aArr);
}

auto PBackgroundFileHandleChild::ManagedPBackgroundFileRequestChild() const -> const ManagedContainer<PBackgroundFileRequestChild>&
{
    return mManagedPBackgroundFileRequestChild;
}

auto PBackgroundFileHandleChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPBackgroundFileRequestChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPBackgroundFileRequestChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PBackgroundFileHandleChild::OpenPBackgroundFileRequestEndpoint(PBackgroundFileRequestChild* aActor) -> ManagedEndpoint<PBackgroundFileRequestParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundFileRequestChild actor");
        return ManagedEndpoint<PBackgroundFileRequestParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundFileRequestChild.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundFileRequestParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundFileHandleChild::BindPBackgroundFileRequestEndpoint(
        ManagedEndpoint<PBackgroundFileRequestChild> aEndpoint,
        PBackgroundFileRequestChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundFileRequestChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundFileRequestChild.PutEntry(aActor);

    return true;
}

auto PBackgroundFileHandleChild::SendDeleteMe() -> bool
{
    IPC::Message* msg__ = PBackgroundFileHandle::Msg_DeleteMe(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundFileHandleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundFileHandleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundFileHandle::Msg_DeleteMe", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundFileHandleChild::SendFinish() -> bool
{
    IPC::Message* msg__ = PBackgroundFileHandle::Msg_Finish(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundFileHandleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundFileHandleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundFileHandle::Msg_Finish", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundFileHandleChild::SendAbort() -> bool
{
    IPC::Message* msg__ = PBackgroundFileHandle::Msg_Abort(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundFileHandleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundFileHandleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundFileHandle::Msg_Abort", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundFileHandleChild::SendPBackgroundFileRequestConstructor(const FileRequestParams& params) -> PBackgroundFileRequestChild*
{
    PBackgroundFileRequestChild* actor = (static_cast<indexedDB::BackgroundFileHandleChild*>(this))->AllocPBackgroundFileRequestChild(params);
    return SendPBackgroundFileRequestConstructor(actor, params);
}

auto PBackgroundFileHandleChild::SendPBackgroundFileRequestConstructor(
        PBackgroundFileRequestChild* actor,
        const FileRequestParams& params) -> PBackgroundFileRequestChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PBackgroundFileRequestChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPBackgroundFileRequestChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBackgroundFileHandle::Msg_PBackgroundFileRequestConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, params);
    // Sentinel = 'params'
    (msg__)->WriteSentinel(146997893);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundFileHandleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundFileHandleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundFileHandle::Msg_PBackgroundFileRequestConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PBackgroundFileRequestChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PBackgroundFileRequestMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PBackgroundFileHandleChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundFileRequestMsgStart:
{
            PBackgroundFileRequestChild* actor = static_cast<PBackgroundFileRequestChild*>(aListener);
            auto& container = mManagedPBackgroundFileRequestChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PBackgroundFileHandleChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundFileRequestMsgStart:
        static_cast<indexedDB::BackgroundFileHandleChild*>(this)->DeallocPBackgroundFileRequestChild(static_cast<PBackgroundFileRequestChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PBackgroundFileHandleChild::OnMessageReceived(const Message& msg__) -> PBackgroundFileHandleChild::Result
{
    switch (msg__.type()) {
    case PBackgroundFileHandle::Reply_PBackgroundFileRequestConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBackgroundFileHandle::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundFileHandleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundFileHandleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundFileHandle::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PBackgroundFileHandleChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PBackgroundFileHandle'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PBackgroundFileHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBackgroundFileHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<indexedDB::BackgroundFileHandleChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PBackgroundFileHandleMsgStart, actor);

            return MsgProcessed;
        }
    case PBackgroundFileHandle::Msg_Complete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundFileHandleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundFileHandleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundFileHandle::Msg_Complete", OTHER);

            PickleIterator iter__{msg__};
            bool aborted{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aborted)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aborted'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 192348898)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<indexedDB::BackgroundFileHandleChild*>(this))->RecvComplete(std::move(aborted))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBackgroundFileHandleChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundFileHandleChild::Result
{
    return MsgNotKnown;
}

auto PBackgroundFileHandleChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundFileHandleChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBackgroundFileHandleChild::ClearSubtree() -> void
{
    for (auto it = mManagedPBackgroundFileRequestChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundFileRequestChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundFileRequestChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundFileRequestChild.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PBackgroundFileHandleChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PBackgroundFileHandleChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBackgroundFileHandle", PBackgroundFileHandleMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PBackgroundFileHandleChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
