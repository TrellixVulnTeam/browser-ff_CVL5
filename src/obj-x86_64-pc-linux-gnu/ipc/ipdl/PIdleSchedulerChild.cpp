//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/PIdleSchedulerChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ipc/IdleSchedulerChild.h"

#include "mozilla/ipc/PBackgroundChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace ipc {


MOZ_IMPLICIT PIdleSchedulerChild::PIdleSchedulerChild() :
    mozilla::ipc::IProtocol(PIdleSchedulerMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PIdleSchedulerChild);
}

PIdleSchedulerChild::~PIdleSchedulerChild()
{
    MOZ_COUNT_DTOR(PIdleSchedulerChild);
}

auto PIdleSchedulerChild::Manager() const -> PBackgroundChild*
{
    return static_cast<PBackgroundChild*>(IProtocol::Manager());
}

auto PIdleSchedulerChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PIdleSchedulerChild::SendInitForIdleUse(
        mozilla::ipc::ResolveCallback<Tuple<mozilla::Maybe<SharedMemoryHandle>, uint32_t>>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PIdleScheduler::Msg_InitForIdleUse(Id());





    if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PIdleSchedulerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PIdleScheduler::Msg_InitForIdleUse", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PIdleSchedulerChild::SendInitForIdleUse() -> RefPtr<InitForIdleUsePromise>
{
    RefPtr<MozPromise<Tuple<mozilla::Maybe<SharedMemoryHandle>, uint32_t>, ResponseRejectReason, true>::Private> promise__ = new MozPromise<Tuple<mozilla::Maybe<SharedMemoryHandle>, uint32_t>, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendInitForIdleUse([promise__](Tuple<mozilla::Maybe<SharedMemoryHandle>, uint32_t>&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PIdleSchedulerChild::SendRequestIdleTime(
        const uint64_t& id,
        const TimeDuration& budget) -> bool
{
    IPC::Message* msg__ = PIdleScheduler::Msg_RequestIdleTime(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);
    WriteIPDLParam(msg__, this, budget);
    // Sentinel = 'budget'
    (msg__)->WriteSentinel(144573052);




    if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PIdleSchedulerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PIdleScheduler::Msg_RequestIdleTime", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PIdleSchedulerChild::SendIdleTimeUsed(const uint64_t& id) -> bool
{
    IPC::Message* msg__ = PIdleScheduler::Msg_IdleTimeUsed(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);




    if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PIdleSchedulerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PIdleScheduler::Msg_IdleTimeUsed", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PIdleSchedulerChild::SendSchedule() -> bool
{
    IPC::Message* msg__ = PIdleScheduler::Msg_Schedule(Id());





    if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PIdleSchedulerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PIdleScheduler::Msg_Schedule", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PIdleSchedulerChild::SendRunningPrioritizedOperation() -> bool
{
    IPC::Message* msg__ = PIdleScheduler::Msg_RunningPrioritizedOperation(Id());





    if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PIdleSchedulerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PIdleScheduler::Msg_RunningPrioritizedOperation", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PIdleSchedulerChild::SendPrioritizedOperationDone() -> bool
{
    IPC::Message* msg__ = PIdleScheduler::Msg_PrioritizedOperationDone(Id());





    if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PIdleSchedulerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PIdleScheduler::Msg_PrioritizedOperationDone", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PIdleSchedulerChild::Send__delete__(PIdleSchedulerChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PIdleScheduler::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PIdleSchedulerChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PIdleScheduler::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PIdleSchedulerMsgStart, actor);
    return sendok__;
}

auto PIdleSchedulerChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PIdleSchedulerChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PIdleSchedulerChild::OnMessageReceived(const Message& msg__) -> PIdleSchedulerChild::Result
{
    switch (msg__.type()) {
    case PIdleScheduler::Msg_IdleTime__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PIdleSchedulerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PIdleScheduler::Msg_IdleTime", OTHER);

            PickleIterator iter__{msg__};
            uint64_t id{};
            TimeDuration budget{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(budget)))))) {
                FatalError("Error deserializing 'TimeDuration'");
                return MsgValueError;
            }
            // Sentinel = 'budget'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144573052)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeDuration'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<IdleSchedulerChild*>(this))->RecvIdleTime(std::move(id), std::move(budget))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PIdleScheduler::Reply_InitForIdleUse__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PIdleSchedulerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PIdleScheduler::Msg_InitForIdleUse", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<Tuple<mozilla::Maybe<SharedMemoryHandle>, uint32_t>> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                mozilla::Maybe<SharedMemoryHandle> state{};
                uint32_t childId{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(state)))))) {
                    FatalError("Error deserializing 'SharedMemoryHandle?'");
                    return MsgValueError;
                }
                // Sentinel = 'state'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 109314594)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'SharedMemoryHandle?'");
                    return MsgValueError;
                }
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(childId)))))) {
                    FatalError("Error deserializing 'uint32_t'");
                    return MsgValueError;
                }
                // Sentinel = 'childId'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 185270962)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(MakeTuple(std::move(state), std::move(childId)));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PIdleScheduler::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PIdleSchedulerChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PIdleSchedulerChild::Result
{
    return MsgNotKnown;
}

auto PIdleSchedulerChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PIdleSchedulerChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PIdleSchedulerChild::ClearSubtree() -> void
{
}



} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::PIdleSchedulerChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::ipc::PIdleSchedulerChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PIdleScheduler", PIdleSchedulerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::ipc::PIdleSchedulerChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
