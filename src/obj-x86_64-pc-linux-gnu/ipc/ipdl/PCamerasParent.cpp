//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/camera/PCamerasParent.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/dom/PContentParent.h"
#include "mozilla/ipc/PBackgroundParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace camera {


MOZ_IMPLICIT PCamerasParent::PCamerasParent() :
    mozilla::ipc::IProtocol(PCamerasMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PCamerasParent);
}

PCamerasParent::~PCamerasParent()
{
    MOZ_COUNT_DTOR(PCamerasParent);
}

auto PCamerasParent::Manager() const -> PBackgroundParent*
{
    return static_cast<PBackgroundParent*>(IProtocol::Manager());
}

auto PCamerasParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PCamerasParent::SendDeliverFrame(
        const CaptureEngine& capEngine,
        const int& streamId,
        Shmem&& buffer,
        const VideoFrameProperties& props) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_DeliverFrame(Id());

    WriteIPDLParam(msg__, this, capEngine);
    // Sentinel = 'capEngine'
    (msg__)->WriteSentinel(293077899);
    WriteIPDLParam(msg__, this, streamId);
    // Sentinel = 'streamId'
    (msg__)->WriteSentinel(254935866);
    WriteIPDLParam(msg__, this, std::move(buffer));
    // Sentinel = 'buffer'
    (msg__)->WriteSentinel(144769659);
    WriteIPDLParam(msg__, this, props);
    // Sentinel = 'props'
    (msg__)->WriteSentinel(110953013);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_DeliverFrame", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasParent::SendDeviceChange() -> bool
{
    IPC::Message* msg__ = PCameras::Msg_DeviceChange(Id());





    if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_DeviceChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasParent::SendReplyNumberOfCaptureDevices(const int& numdev) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_ReplyNumberOfCaptureDevices(Id());

    WriteIPDLParam(msg__, this, numdev);
    // Sentinel = 'numdev'
    (msg__)->WriteSentinel(151192208);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_ReplyNumberOfCaptureDevices", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasParent::SendReplyNumberOfCapabilities(const int& numdev) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_ReplyNumberOfCapabilities(Id());

    WriteIPDLParam(msg__, this, numdev);
    // Sentinel = 'numdev'
    (msg__)->WriteSentinel(151192208);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_ReplyNumberOfCapabilities", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasParent::SendReplyAllocateCaptureDevice(const int& numdev) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_ReplyAllocateCaptureDevice(Id());

    WriteIPDLParam(msg__, this, numdev);
    // Sentinel = 'numdev'
    (msg__)->WriteSentinel(151192208);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_ReplyAllocateCaptureDevice", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasParent::SendReplyGetCaptureCapability(const VideoCaptureCapability& cap) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_ReplyGetCaptureCapability(Id());

    WriteIPDLParam(msg__, this, cap);
    // Sentinel = 'cap'
    (msg__)->WriteSentinel(39715125);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_ReplyGetCaptureCapability", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasParent::SendReplyGetCaptureDevice(
        const nsCString& device_name,
        const nsCString& device_id,
        const bool& scary) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_ReplyGetCaptureDevice(Id());

    WriteIPDLParam(msg__, this, device_name);
    // Sentinel = 'device_name'
    (msg__)->WriteSentinel(448726129);
    WriteIPDLParam(msg__, this, device_id);
    // Sentinel = 'device_id'
    (msg__)->WriteSentinel(305857437);
    WriteIPDLParam(msg__, this, scary);
    // Sentinel = 'scary'
    (msg__)->WriteSentinel(105906723);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_ReplyGetCaptureDevice", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasParent::SendReplyFailure() -> bool
{
    IPC::Message* msg__ = PCameras::Msg_ReplyFailure(Id());





    if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_ReplyFailure", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasParent::SendReplySuccess() -> bool
{
    IPC::Message* msg__ = PCameras::Msg_ReplySuccess(Id());





    if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_ReplySuccess", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasParent::Send__delete__(PCamerasParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PCameras::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PCamerasMsgStart, actor);
    return sendok__;
}

auto PCamerasParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PCamerasParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PCamerasParent::OnMessageReceived(const Message& msg__) -> PCamerasParent::Result
{
    switch (msg__.type()) {
    case PCameras::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PCameras::Msg_NumberOfCaptureDevices__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_NumberOfCaptureDevices", OTHER);

            PickleIterator iter__{msg__};
            CaptureEngine engine{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(engine)))))) {
                FatalError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            // Sentinel = 'engine'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144835191)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvNumberOfCaptureDevices(std::move(engine))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_NumberOfCapabilities__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_NumberOfCapabilities", OTHER);

            PickleIterator iter__{msg__};
            CaptureEngine engine{};
            nsCString deviceUniqueIdUTF8{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(engine)))))) {
                FatalError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            // Sentinel = 'engine'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144835191)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(deviceUniqueIdUTF8)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'deviceUniqueIdUTF8'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1137903292)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvNumberOfCapabilities(std::move(engine), std::move(deviceUniqueIdUTF8))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_GetCaptureCapability__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_GetCaptureCapability", OTHER);

            PickleIterator iter__{msg__};
            CaptureEngine engine{};
            nsCString unique_idUTF8{};
            int capability_number{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(engine)))))) {
                FatalError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            // Sentinel = 'engine'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144835191)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(unique_idUTF8)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'unique_idUTF8'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 628032747)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(capability_number)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'capability_number'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1050543883)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvGetCaptureCapability(std::move(engine), std::move(unique_idUTF8), std::move(capability_number))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_GetCaptureDevice__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_GetCaptureDevice", OTHER);

            PickleIterator iter__{msg__};
            CaptureEngine engine{};
            int num{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(engine)))))) {
                FatalError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            // Sentinel = 'engine'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144835191)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(num)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'num'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 44302673)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvGetCaptureDevice(std::move(engine), std::move(num))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_AllocateCaptureDevice__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_AllocateCaptureDevice", OTHER);

            PickleIterator iter__{msg__};
            CaptureEngine engine{};
            nsCString unique_idUTF8{};
            uint64_t windowID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(engine)))))) {
                FatalError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            // Sentinel = 'engine'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144835191)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(unique_idUTF8)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'unique_idUTF8'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 628032747)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(windowID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'windowID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 253625126)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvAllocateCaptureDevice(std::move(engine), std::move(unique_idUTF8), std::move(windowID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_ReleaseCaptureDevice__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_ReleaseCaptureDevice", OTHER);

            PickleIterator iter__{msg__};
            CaptureEngine engine{};
            int numdev{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(engine)))))) {
                FatalError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            // Sentinel = 'engine'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144835191)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(numdev)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'numdev'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 151192208)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvReleaseCaptureDevice(std::move(engine), std::move(numdev))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_StartCapture__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_StartCapture", OTHER);

            PickleIterator iter__{msg__};
            CaptureEngine engine{};
            int numdev{};
            VideoCaptureCapability capability{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(engine)))))) {
                FatalError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            // Sentinel = 'engine'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144835191)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(numdev)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'numdev'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 151192208)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(capability)))))) {
                FatalError("Error deserializing 'VideoCaptureCapability'");
                return MsgValueError;
            }
            // Sentinel = 'capability'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 371000355)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'VideoCaptureCapability'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvStartCapture(std::move(engine), std::move(numdev), std::move(capability))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_FocusOnSelectedSource__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_FocusOnSelectedSource", OTHER);

            PickleIterator iter__{msg__};
            CaptureEngine engine{};
            int numdev{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(engine)))))) {
                FatalError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            // Sentinel = 'engine'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144835191)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(numdev)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'numdev'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 151192208)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvFocusOnSelectedSource(std::move(engine), std::move(numdev))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_StopCapture__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_StopCapture", OTHER);

            PickleIterator iter__{msg__};
            CaptureEngine engine{};
            int numdev{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(engine)))))) {
                FatalError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            // Sentinel = 'engine'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144835191)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(numdev)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'numdev'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 151192208)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvStopCapture(std::move(engine), std::move(numdev))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_ReleaseFrame__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_ReleaseFrame", OTHER);

            PickleIterator iter__{msg__};
            Shmem s{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(s)))))) {
                FatalError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            // Sentinel = 's'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 7602292)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvReleaseFrame(std::move(s))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_AllDone__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_AllDone", OTHER);

            if ((!((this)->RecvAllDone()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_EnsureInitialized__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_EnsureInitialized", OTHER);

            PickleIterator iter__{msg__};
            CaptureEngine engine{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(engine)))))) {
                FatalError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            // Sentinel = 'engine'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144835191)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvEnsureInitialized(std::move(engine))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PCamerasParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PCamerasParent::Result
{
    return MsgNotKnown;
}

auto PCamerasParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PCamerasParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PCamerasParent::ClearSubtree() -> void
{
}



} // namespace camera
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::camera::PCamerasParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::camera::PCamerasParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PCameras", PCamerasMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::camera::PCamerasParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
