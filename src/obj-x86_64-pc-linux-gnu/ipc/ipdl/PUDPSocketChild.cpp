//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PUDPSocketChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/network/UDPSocketChild.h"
#include "mozilla/ipc/IPCCore.h"
#include "mozilla/net/DNS.h"
#include "mozilla/net/NeckoMessageUtils.h"
#include "prio.h"

#include "mozilla/net/PNeckoChild.h"
#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


auto PUDPSocketChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PUDPSocketChild::PUDPSocketChild() :
    mozilla::ipc::IProtocol(PUDPSocketMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PUDPSocketChild);
}

PUDPSocketChild::~PUDPSocketChild()
{
    MOZ_COUNT_DTOR(PUDPSocketChild);
}

auto PUDPSocketChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PUDPSocketChild::SendBind(
        const UDPAddressInfo& addressInfo,
        const bool& addressReuse,
        const bool& loopback,
        const uint32_t& recvBufferSize,
        const uint32_t& sendBufferSize) -> bool
{
    IPC::Message* msg__ = PUDPSocket::Msg_Bind(Id());

    WriteIPDLParam(msg__, this, addressInfo);
    // Sentinel = 'addressInfo'
    (msg__)->WriteSentinel(445580403);
    WriteIPDLParam(msg__, this, addressReuse);
    // Sentinel = 'addressReuse'
    (msg__)->WriteSentinel(530908395);
    WriteIPDLParam(msg__, this, loopback);
    // Sentinel = 'loopback'
    (msg__)->WriteSentinel(253166412);
    WriteIPDLParam(msg__, this, recvBufferSize);
    // Sentinel = 'recvBufferSize'
    (msg__)->WriteSentinel(709100966);
    WriteIPDLParam(msg__, this, sendBufferSize);
    // Sentinel = 'sendBufferSize'
    (msg__)->WriteSentinel(705693088);




    if (mozilla::ipc::LoggingEnabledFor("PUDPSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUDPSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUDPSocket::Msg_Bind", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUDPSocketChild::SendConnect(const UDPAddressInfo& addressInfo) -> bool
{
    IPC::Message* msg__ = PUDPSocket::Msg_Connect(Id());

    WriteIPDLParam(msg__, this, addressInfo);
    // Sentinel = 'addressInfo'
    (msg__)->WriteSentinel(445580403);




    if (mozilla::ipc::LoggingEnabledFor("PUDPSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUDPSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUDPSocket::Msg_Connect", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUDPSocketChild::SendOutgoingData(
        const UDPData& data,
        const UDPSocketAddr& addr) -> bool
{
    IPC::Message* msg__ = PUDPSocket::Msg_OutgoingData(Id());

    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);
    WriteIPDLParam(msg__, this, addr);
    // Sentinel = 'addr'
    (msg__)->WriteSentinel(65929628);




    if (mozilla::ipc::LoggingEnabledFor("PUDPSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUDPSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUDPSocket::Msg_OutgoingData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUDPSocketChild::SendJoinMulticast(
        const nsCString& multicastAddress,
        const nsCString& iface) -> bool
{
    IPC::Message* msg__ = PUDPSocket::Msg_JoinMulticast(Id());

    WriteIPDLParam(msg__, this, multicastAddress);
    // Sentinel = 'multicastAddress'
    (msg__)->WriteSentinel(948700829);
    WriteIPDLParam(msg__, this, iface);
    // Sentinel = 'iface'
    (msg__)->WriteSentinel(100139513);




    if (mozilla::ipc::LoggingEnabledFor("PUDPSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUDPSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUDPSocket::Msg_JoinMulticast", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUDPSocketChild::SendLeaveMulticast(
        const nsCString& multicastAddress,
        const nsCString& iface) -> bool
{
    IPC::Message* msg__ = PUDPSocket::Msg_LeaveMulticast(Id());

    WriteIPDLParam(msg__, this, multicastAddress);
    // Sentinel = 'multicastAddress'
    (msg__)->WriteSentinel(948700829);
    WriteIPDLParam(msg__, this, iface);
    // Sentinel = 'iface'
    (msg__)->WriteSentinel(100139513);




    if (mozilla::ipc::LoggingEnabledFor("PUDPSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUDPSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUDPSocket::Msg_LeaveMulticast", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUDPSocketChild::SendClose() -> bool
{
    IPC::Message* msg__ = PUDPSocket::Msg_Close(Id());





    if (mozilla::ipc::LoggingEnabledFor("PUDPSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUDPSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUDPSocket::Msg_Close", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUDPSocketChild::SendRequestDelete() -> bool
{
    IPC::Message* msg__ = PUDPSocket::Msg_RequestDelete(Id());





    if (mozilla::ipc::LoggingEnabledFor("PUDPSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUDPSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUDPSocket::Msg_RequestDelete", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUDPSocketChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PUDPSocketChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PUDPSocketChild::OnMessageReceived(const Message& msg__) -> PUDPSocketChild::Result
{
    switch (msg__.type()) {
    case PUDPSocket::Msg_CallbackOpened__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUDPSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUDPSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUDPSocket::Msg_CallbackOpened", OTHER);

            PickleIterator iter__{msg__};
            UDPAddressInfo addressInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(addressInfo)))))) {
                FatalError("Error deserializing 'UDPAddressInfo'");
                return MsgValueError;
            }
            // Sentinel = 'addressInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 445580403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'UDPAddressInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<mozilla::dom::UDPSocketChild*>(this))->RecvCallbackOpened(std::move(addressInfo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUDPSocket::Msg_CallbackConnected__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUDPSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUDPSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUDPSocket::Msg_CallbackConnected", OTHER);

            PickleIterator iter__{msg__};
            UDPAddressInfo addressInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(addressInfo)))))) {
                FatalError("Error deserializing 'UDPAddressInfo'");
                return MsgValueError;
            }
            // Sentinel = 'addressInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 445580403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'UDPAddressInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<mozilla::dom::UDPSocketChild*>(this))->RecvCallbackConnected(std::move(addressInfo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUDPSocket::Msg_CallbackClosed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUDPSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUDPSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUDPSocket::Msg_CallbackClosed", OTHER);

            if ((!((static_cast<mozilla::dom::UDPSocketChild*>(this))->RecvCallbackClosed()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUDPSocket::Msg_CallbackReceivedData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUDPSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUDPSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUDPSocket::Msg_CallbackReceivedData", OTHER);

            PickleIterator iter__{msg__};
            UDPAddressInfo addressInfo{};
            nsTArray<uint8_t> data{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(addressInfo)))))) {
                FatalError("Error deserializing 'UDPAddressInfo'");
                return MsgValueError;
            }
            // Sentinel = 'addressInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 445580403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'UDPAddressInfo'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<mozilla::dom::UDPSocketChild*>(this))->RecvCallbackReceivedData(std::move(addressInfo), std::move(data))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUDPSocket::Msg_CallbackError__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUDPSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUDPSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUDPSocket::Msg_CallbackError", OTHER);

            PickleIterator iter__{msg__};
            nsCString message{};
            nsCString filename{};
            uint32_t lineNumber{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(message)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'message'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 197198566)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(filename)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'filename'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 246547266)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(lineNumber)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'lineNumber'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 374932498)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<mozilla::dom::UDPSocketChild*>(this))->RecvCallbackError(std::move(message), std::move(filename), std::move(lineNumber))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUDPSocket::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUDPSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUDPSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUDPSocket::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PUDPSocketChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PUDPSocket'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PUDPSocket'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PUDPSocket'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<mozilla::dom::UDPSocketChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PUDPSocketMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PUDPSocketChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PUDPSocketChild::Result
{
    return MsgNotKnown;
}

auto PUDPSocketChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PUDPSocketChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PUDPSocketChild::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PUDPSocketChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PUDPSocketChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PUDPSocket", PUDPSocketMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PUDPSocketChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
