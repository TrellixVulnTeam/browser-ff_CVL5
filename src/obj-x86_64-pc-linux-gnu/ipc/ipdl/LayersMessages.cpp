//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "gfxipc/ShadowLayerUtils.h"
#include "mozilla/GfxMessageUtils.h"
#include "ImageLayers.h"
#include "mozilla/layers/PCompositorBridgeParent.h"
#include "mozilla/layers/PCompositorBridgeChild.h"
#include "mozilla/layers/PTextureParent.h"
#include "mozilla/layers/PTextureChild.h"
#include "mozilla/layers/LayersMessages.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct TargetConfig|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::TargetConfig>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).naturalBounds());
    // Sentinel = 'naturalBounds'
    (aMsg)->WriteSentinel(634062179);
    WriteIPDLParam(aMsg, aActor, (aVar).rotation());
    // Sentinel = 'rotation'
    (aMsg)->WriteSentinel(261423985);
    WriteIPDLParam(aMsg, aActor, (aVar).orientation());
    // Sentinel = 'orientation'
    (aMsg)->WriteSentinel(471008429);
    WriteIPDLParam(aMsg, aActor, (aVar).clearRegion());
    // Sentinel = 'clearRegion'
    (aMsg)->WriteSentinel(440337516);
}

auto IPDLParamTraits<mozilla::layers::TargetConfig>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->naturalBounds())))))) {
        aActor->FatalError("Error deserializing 'naturalBounds' (IntRect) member of 'TargetConfig'");
        return false;
    }
    // Sentinel = 'naturalBounds'
    if ((!((aMsg)->ReadSentinel(aIter, 634062179)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'naturalBounds' (IntRect) member of 'TargetConfig'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->rotation())))))) {
        aActor->FatalError("Error deserializing 'rotation' (ScreenRotation) member of 'TargetConfig'");
        return false;
    }
    // Sentinel = 'rotation'
    if ((!((aMsg)->ReadSentinel(aIter, 261423985)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'rotation' (ScreenRotation) member of 'TargetConfig'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->orientation())))))) {
        aActor->FatalError("Error deserializing 'orientation' (ScreenOrientation) member of 'TargetConfig'");
        return false;
    }
    // Sentinel = 'orientation'
    if ((!((aMsg)->ReadSentinel(aIter, 471008429)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'orientation' (ScreenOrientation) member of 'TargetConfig'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->clearRegion())))))) {
        aActor->FatalError("Error deserializing 'clearRegion' (nsIntRegion) member of 'TargetConfig'");
        return false;
    }
    // Sentinel = 'clearRegion'
    if ((!((aMsg)->ReadSentinel(aIter, 440337516)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'clearRegion' (nsIntRegion) member of 'TargetConfig'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpCreatePaintedLayer|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpCreatePaintedLayer>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).layer());
    // Sentinel = 'layer'
    (aMsg)->WriteSentinel(105644574);
}

auto IPDLParamTraits<mozilla::layers::OpCreatePaintedLayer>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->layer())))))) {
        aActor->FatalError("Error deserializing 'layer' (LayerHandle) member of 'OpCreatePaintedLayer'");
        return false;
    }
    // Sentinel = 'layer'
    if ((!((aMsg)->ReadSentinel(aIter, 105644574)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'layer' (LayerHandle) member of 'OpCreatePaintedLayer'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpCreateContainerLayer|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpCreateContainerLayer>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).layer());
    // Sentinel = 'layer'
    (aMsg)->WriteSentinel(105644574);
}

auto IPDLParamTraits<mozilla::layers::OpCreateContainerLayer>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->layer())))))) {
        aActor->FatalError("Error deserializing 'layer' (LayerHandle) member of 'OpCreateContainerLayer'");
        return false;
    }
    // Sentinel = 'layer'
    if ((!((aMsg)->ReadSentinel(aIter, 105644574)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'layer' (LayerHandle) member of 'OpCreateContainerLayer'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpCreateImageLayer|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpCreateImageLayer>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).layer());
    // Sentinel = 'layer'
    (aMsg)->WriteSentinel(105644574);
}

auto IPDLParamTraits<mozilla::layers::OpCreateImageLayer>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->layer())))))) {
        aActor->FatalError("Error deserializing 'layer' (LayerHandle) member of 'OpCreateImageLayer'");
        return false;
    }
    // Sentinel = 'layer'
    if ((!((aMsg)->ReadSentinel(aIter, 105644574)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'layer' (LayerHandle) member of 'OpCreateImageLayer'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpCreateColorLayer|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpCreateColorLayer>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).layer());
    // Sentinel = 'layer'
    (aMsg)->WriteSentinel(105644574);
}

auto IPDLParamTraits<mozilla::layers::OpCreateColorLayer>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->layer())))))) {
        aActor->FatalError("Error deserializing 'layer' (LayerHandle) member of 'OpCreateColorLayer'");
        return false;
    }
    // Sentinel = 'layer'
    if ((!((aMsg)->ReadSentinel(aIter, 105644574)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'layer' (LayerHandle) member of 'OpCreateColorLayer'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpCreateCanvasLayer|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpCreateCanvasLayer>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).layer());
    // Sentinel = 'layer'
    (aMsg)->WriteSentinel(105644574);
}

auto IPDLParamTraits<mozilla::layers::OpCreateCanvasLayer>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->layer())))))) {
        aActor->FatalError("Error deserializing 'layer' (LayerHandle) member of 'OpCreateCanvasLayer'");
        return false;
    }
    // Sentinel = 'layer'
    if ((!((aMsg)->ReadSentinel(aIter, 105644574)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'layer' (LayerHandle) member of 'OpCreateCanvasLayer'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpCreateRefLayer|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpCreateRefLayer>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).layer());
    // Sentinel = 'layer'
    (aMsg)->WriteSentinel(105644574);
}

auto IPDLParamTraits<mozilla::layers::OpCreateRefLayer>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->layer())))))) {
        aActor->FatalError("Error deserializing 'layer' (LayerHandle) member of 'OpCreateRefLayer'");
        return false;
    }
    // Sentinel = 'layer'
    if ((!((aMsg)->ReadSentinel(aIter, 105644574)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'layer' (LayerHandle) member of 'OpCreateRefLayer'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpAttachCompositable|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpAttachCompositable>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).layer());
    // Sentinel = 'layer'
    (aMsg)->WriteSentinel(105644574);
    WriteIPDLParam(aMsg, aActor, (aVar).compositable());
    // Sentinel = 'compositable'
    (aMsg)->WriteSentinel(551879939);
}

auto IPDLParamTraits<mozilla::layers::OpAttachCompositable>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->layer())))))) {
        aActor->FatalError("Error deserializing 'layer' (LayerHandle) member of 'OpAttachCompositable'");
        return false;
    }
    // Sentinel = 'layer'
    if ((!((aMsg)->ReadSentinel(aIter, 105644574)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'layer' (LayerHandle) member of 'OpAttachCompositable'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->compositable())))))) {
        aActor->FatalError("Error deserializing 'compositable' (CompositableHandle) member of 'OpAttachCompositable'");
        return false;
    }
    // Sentinel = 'compositable'
    if ((!((aMsg)->ReadSentinel(aIter, 551879939)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'compositable' (CompositableHandle) member of 'OpAttachCompositable'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpAttachAsyncCompositable|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpAttachAsyncCompositable>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).layer());
    // Sentinel = 'layer'
    (aMsg)->WriteSentinel(105644574);
    WriteIPDLParam(aMsg, aActor, (aVar).compositable());
    // Sentinel = 'compositable'
    (aMsg)->WriteSentinel(551879939);
}

auto IPDLParamTraits<mozilla::layers::OpAttachAsyncCompositable>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->layer())))))) {
        aActor->FatalError("Error deserializing 'layer' (LayerHandle) member of 'OpAttachAsyncCompositable'");
        return false;
    }
    // Sentinel = 'layer'
    if ((!((aMsg)->ReadSentinel(aIter, 105644574)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'layer' (LayerHandle) member of 'OpAttachAsyncCompositable'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->compositable())))))) {
        aActor->FatalError("Error deserializing 'compositable' (CompositableHandle) member of 'OpAttachAsyncCompositable'");
        return false;
    }
    // Sentinel = 'compositable'
    if ((!((aMsg)->ReadSentinel(aIter, 551879939)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'compositable' (CompositableHandle) member of 'OpAttachAsyncCompositable'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ThebesBufferData|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::ThebesBufferData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).rect());
    // Sentinel = 'rect'
    (aMsg)->WriteSentinel(70582703);
    WriteIPDLParam(aMsg, aActor, (aVar).rotation());
    // Sentinel = 'rotation'
    (aMsg)->WriteSentinel(261423985);
}

auto IPDLParamTraits<mozilla::layers::ThebesBufferData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->rect())))))) {
        aActor->FatalError("Error deserializing 'rect' (IntRect) member of 'ThebesBufferData'");
        return false;
    }
    // Sentinel = 'rect'
    if ((!((aMsg)->ReadSentinel(aIter, 70582703)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'rect' (IntRect) member of 'ThebesBufferData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->rotation())))))) {
        aActor->FatalError("Error deserializing 'rotation' (IntPoint) member of 'ThebesBufferData'");
        return false;
    }
    // Sentinel = 'rotation'
    if ((!((aMsg)->ReadSentinel(aIter, 261423985)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'rotation' (IntPoint) member of 'ThebesBufferData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CubicBezierFunction|
//
namespace mozilla {
namespace layers {
auto CubicBezierFunction::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(CubicBezierFunction, y2_) - offsetof(CubicBezierFunction, x1_)) == 12,
        "Bad assumptions about field layout!");
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::CubicBezierFunction>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).x1())), 16);
    // Sentinel = 'x1 | y1 | x2 | y2'
    (aMsg)->WriteSentinel(743179485);
}

auto IPDLParamTraits<mozilla::layers::CubicBezierFunction>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->x1())), 16)))) {
        aActor->FatalError("Error bulk reading fields from float");
        return false;
    }
    // Sentinel = 'x1 | y1 | x2 | y2'
    if ((!((aMsg)->ReadSentinel(aIter, 743179485)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from float");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StepFunction|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::StepFunction>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).steps());
    // Sentinel = 'steps'
    (aMsg)->WriteSentinel(110494256);
    (aMsg)->WriteBytes((&((aVar).type())), 1);
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
}

auto IPDLParamTraits<mozilla::layers::StepFunction>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->steps())))))) {
        aActor->FatalError("Error deserializing 'steps' (int) member of 'StepFunction'");
        return false;
    }
    // Sentinel = 'steps'
    if ((!((aMsg)->ReadSentinel(aIter, 110494256)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'steps' (int) member of 'StepFunction'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->type())), 1)))) {
        aActor->FatalError("Error bulk reading fields from uint8_t");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint8_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union TimingFunction|
//
namespace mozilla {
namespace layers {
auto TimingFunction::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tnull_t:
        {
            (ptr_null_t())->~null_t__tdef();
            break;
        }
    case TCubicBezierFunction:
        {
            (ptr_CubicBezierFunction())->~CubicBezierFunction__tdef();
            break;
        }
    case TStepFunction:
        {
            (ptr_StepFunction())->~StepFunction__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT TimingFunction::TimingFunction(const null_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(aOther);
    mType = Tnull_t;
}

MOZ_IMPLICIT TimingFunction::TimingFunction(null_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move(aOther));
    mType = Tnull_t;
}

MOZ_IMPLICIT TimingFunction::TimingFunction(const CubicBezierFunction& aOther)
{
    new (mozilla::KnownNotNull, ptr_CubicBezierFunction()) CubicBezierFunction(aOther);
    mType = TCubicBezierFunction;
}

MOZ_IMPLICIT TimingFunction::TimingFunction(CubicBezierFunction&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CubicBezierFunction()) CubicBezierFunction(std::move(aOther));
    mType = TCubicBezierFunction;
}

MOZ_IMPLICIT TimingFunction::TimingFunction(const StepFunction& aOther)
{
    new (mozilla::KnownNotNull, ptr_StepFunction()) StepFunction(aOther);
    mType = TStepFunction;
}

MOZ_IMPLICIT TimingFunction::TimingFunction(StepFunction&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StepFunction()) StepFunction(std::move(aOther));
    mType = TStepFunction;
}

MOZ_IMPLICIT TimingFunction::TimingFunction(const TimingFunction& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t((aOther).get_null_t());
            break;
        }
    case TCubicBezierFunction:
        {
            new (mozilla::KnownNotNull, ptr_CubicBezierFunction()) CubicBezierFunction((aOther).get_CubicBezierFunction());
            break;
        }
    case TStepFunction:
        {
            new (mozilla::KnownNotNull, ptr_StepFunction()) StepFunction((aOther).get_StepFunction());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT TimingFunction::TimingFunction(TimingFunction&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move((aOther).get_null_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCubicBezierFunction:
        {
            new (mozilla::KnownNotNull, ptr_CubicBezierFunction()) CubicBezierFunction(std::move((aOther).get_CubicBezierFunction()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStepFunction:
        {
            new (mozilla::KnownNotNull, ptr_StepFunction()) StepFunction(std::move((aOther).get_StepFunction()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

TimingFunction::~TimingFunction()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto TimingFunction::operator=(const null_t& aRhs) -> TimingFunction&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = aRhs;
    mType = Tnull_t;
    return (*(this));
}

auto TimingFunction::operator=(null_t&& aRhs) -> TimingFunction&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = std::move(aRhs);
    mType = Tnull_t;
    return (*(this));
}

auto TimingFunction::operator=(const CubicBezierFunction& aRhs) -> TimingFunction&
{
    if (MaybeDestroy(TCubicBezierFunction)) {
        new (mozilla::KnownNotNull, ptr_CubicBezierFunction()) CubicBezierFunction;
    }
    (*(ptr_CubicBezierFunction())) = aRhs;
    mType = TCubicBezierFunction;
    return (*(this));
}

auto TimingFunction::operator=(CubicBezierFunction&& aRhs) -> TimingFunction&
{
    if (MaybeDestroy(TCubicBezierFunction)) {
        new (mozilla::KnownNotNull, ptr_CubicBezierFunction()) CubicBezierFunction;
    }
    (*(ptr_CubicBezierFunction())) = std::move(aRhs);
    mType = TCubicBezierFunction;
    return (*(this));
}

auto TimingFunction::operator=(const StepFunction& aRhs) -> TimingFunction&
{
    if (MaybeDestroy(TStepFunction)) {
        new (mozilla::KnownNotNull, ptr_StepFunction()) StepFunction;
    }
    (*(ptr_StepFunction())) = aRhs;
    mType = TStepFunction;
    return (*(this));
}

auto TimingFunction::operator=(StepFunction&& aRhs) -> TimingFunction&
{
    if (MaybeDestroy(TStepFunction)) {
        new (mozilla::KnownNotNull, ptr_StepFunction()) StepFunction;
    }
    (*(ptr_StepFunction())) = std::move(aRhs);
    mType = TStepFunction;
    return (*(this));
}

auto TimingFunction::operator=(const TimingFunction& aRhs) -> TimingFunction&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = (aRhs).get_null_t();
            break;
        }
    case TCubicBezierFunction:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CubicBezierFunction()) CubicBezierFunction;
            }
            (*(ptr_CubicBezierFunction())) = (aRhs).get_CubicBezierFunction();
            break;
        }
    case TStepFunction:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StepFunction()) StepFunction;
            }
            (*(ptr_StepFunction())) = (aRhs).get_StepFunction();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto TimingFunction::operator=(TimingFunction&& aRhs) -> TimingFunction&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = std::move((aRhs).get_null_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCubicBezierFunction:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CubicBezierFunction()) CubicBezierFunction;
            }
            (*(ptr_CubicBezierFunction())) = std::move((aRhs).get_CubicBezierFunction());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStepFunction:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StepFunction()) StepFunction;
            }
            (*(ptr_StepFunction())) = std::move((aRhs).get_StepFunction());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::TimingFunction>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::TimingFunction union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'TimingFunction'
    (aMsg)->WriteSentinel(700581295);

    switch (type) {
    case union__::Tnull_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_null_t());
            // Sentinel = 'Tnull_t'
            (aMsg)->WriteSentinel(190186211);
            return;
        }
    case union__::TCubicBezierFunction:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CubicBezierFunction());
            // Sentinel = 'TCubicBezierFunction'
            (aMsg)->WriteSentinel(1340016610);
            return;
        }
    case union__::TStepFunction:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StepFunction());
            // Sentinel = 'TStepFunction'
            (aMsg)->WriteSentinel(592446775);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::TimingFunction>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::TimingFunction union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union TimingFunction");
        return false;
    }
    // Sentinel = 'TimingFunction'
    if ((!((aMsg)->ReadSentinel(aIter, 700581295)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union TimingFunction");
        return false;
    }

    switch (type) {
    case union__::Tnull_t:
        {
            mozilla::null_t tmp = mozilla::null_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_null_t())))))) {
                aActor->FatalError("Error deserializing variant Tnull_t of union TimingFunction");
                return false;
            }
            // Sentinel = 'Tnull_t'
            if ((!((aMsg)->ReadSentinel(aIter, 190186211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnull_t of union TimingFunction");
                return false;
            }
            return true;
        }
    case union__::TCubicBezierFunction:
        {
            mozilla::layers::CubicBezierFunction tmp = mozilla::layers::CubicBezierFunction();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CubicBezierFunction())))))) {
                aActor->FatalError("Error deserializing variant TCubicBezierFunction of union TimingFunction");
                return false;
            }
            // Sentinel = 'TCubicBezierFunction'
            if ((!((aMsg)->ReadSentinel(aIter, 1340016610)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCubicBezierFunction of union TimingFunction");
                return false;
            }
            return true;
        }
    case union__::TStepFunction:
        {
            mozilla::layers::StepFunction tmp = mozilla::layers::StepFunction();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StepFunction())))))) {
                aActor->FatalError("Error deserializing variant TStepFunction of union TimingFunction");
                return false;
            }
            // Sentinel = 'TStepFunction'
            if ((!((aMsg)->ReadSentinel(aIter, 592446775)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStepFunction of union TimingFunction");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LayerColor|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::LayerColor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).value());
    // Sentinel = 'value'
    (aMsg)->WriteSentinel(107610654);
}

auto IPDLParamTraits<mozilla::layers::LayerColor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->value())))))) {
        aActor->FatalError("Error deserializing 'value' (DeviceColor) member of 'LayerColor'");
        return false;
    }
    // Sentinel = 'value'
    if ((!((aMsg)->ReadSentinel(aIter, 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'value' (DeviceColor) member of 'LayerColor'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union Animatable|
//
namespace mozilla {
namespace layers {
auto Animatable::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tnull_t:
        {
            (ptr_null_t())->~null_t__tdef();
            break;
        }
    case Tfloat:
        {
            (ptr_float())->~float__tdef();
            break;
        }
    case Tnscolor:
        {
            (ptr_nscolor())->~nscolor__tdef();
            break;
        }
    case TStyleRotate:
        {
            (ptr_StyleRotate())->~StyleRotate__tdef();
            break;
        }
    case TStyleScale:
        {
            (ptr_StyleScale())->~StyleScale__tdef();
            break;
        }
    case TStyleTranslate:
        {
            (ptr_StyleTranslate())->~StyleTranslate__tdef();
            break;
        }
    case TStyleTransform:
        {
            (ptr_StyleTransform())->~StyleTransform__tdef();
            break;
        }
    case TStyleOffsetPath:
        {
            (ptr_StyleOffsetPath())->~StyleOffsetPath__tdef();
            break;
        }
    case TLengthPercentage:
        {
            (ptr_LengthPercentage())->~LengthPercentage__tdef();
            break;
        }
    case TStyleOffsetRotate:
        {
            (ptr_StyleOffsetRotate())->~StyleOffsetRotate__tdef();
            break;
        }
    case TStylePositionOrAuto:
        {
            (ptr_StylePositionOrAuto())->~StylePositionOrAuto__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT Animatable::Animatable(const null_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(aOther);
    mType = Tnull_t;
}

MOZ_IMPLICIT Animatable::Animatable(null_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move(aOther));
    mType = Tnull_t;
}

MOZ_IMPLICIT Animatable::Animatable(const float& aOther)
{
    new (mozilla::KnownNotNull, ptr_float()) float(aOther);
    mType = Tfloat;
}

MOZ_IMPLICIT Animatable::Animatable(float&& aOther)
{
    new (mozilla::KnownNotNull, ptr_float()) float(std::move(aOther));
    mType = Tfloat;
}

MOZ_IMPLICIT Animatable::Animatable(const nscolor& aOther)
{
    new (mozilla::KnownNotNull, ptr_nscolor()) nscolor(aOther);
    mType = Tnscolor;
}

MOZ_IMPLICIT Animatable::Animatable(nscolor&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nscolor()) nscolor(std::move(aOther));
    mType = Tnscolor;
}

MOZ_IMPLICIT Animatable::Animatable(const StyleRotate& aOther)
{
    new (mozilla::KnownNotNull, ptr_StyleRotate()) StyleRotate(aOther);
    mType = TStyleRotate;
}

MOZ_IMPLICIT Animatable::Animatable(StyleRotate&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StyleRotate()) StyleRotate(std::move(aOther));
    mType = TStyleRotate;
}

MOZ_IMPLICIT Animatable::Animatable(const StyleScale& aOther)
{
    new (mozilla::KnownNotNull, ptr_StyleScale()) StyleScale(aOther);
    mType = TStyleScale;
}

MOZ_IMPLICIT Animatable::Animatable(StyleScale&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StyleScale()) StyleScale(std::move(aOther));
    mType = TStyleScale;
}

MOZ_IMPLICIT Animatable::Animatable(const StyleTranslate& aOther)
{
    new (mozilla::KnownNotNull, ptr_StyleTranslate()) StyleTranslate(aOther);
    mType = TStyleTranslate;
}

MOZ_IMPLICIT Animatable::Animatable(StyleTranslate&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StyleTranslate()) StyleTranslate(std::move(aOther));
    mType = TStyleTranslate;
}

MOZ_IMPLICIT Animatable::Animatable(const StyleTransform& aOther)
{
    new (mozilla::KnownNotNull, ptr_StyleTransform()) StyleTransform(aOther);
    mType = TStyleTransform;
}

MOZ_IMPLICIT Animatable::Animatable(StyleTransform&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StyleTransform()) StyleTransform(std::move(aOther));
    mType = TStyleTransform;
}

MOZ_IMPLICIT Animatable::Animatable(const StyleOffsetPath& aOther)
{
    new (mozilla::KnownNotNull, ptr_StyleOffsetPath()) StyleOffsetPath(aOther);
    mType = TStyleOffsetPath;
}

MOZ_IMPLICIT Animatable::Animatable(StyleOffsetPath&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StyleOffsetPath()) StyleOffsetPath(std::move(aOther));
    mType = TStyleOffsetPath;
}

MOZ_IMPLICIT Animatable::Animatable(const LengthPercentage& aOther)
{
    new (mozilla::KnownNotNull, ptr_LengthPercentage()) LengthPercentage(aOther);
    mType = TLengthPercentage;
}

MOZ_IMPLICIT Animatable::Animatable(LengthPercentage&& aOther)
{
    new (mozilla::KnownNotNull, ptr_LengthPercentage()) LengthPercentage(std::move(aOther));
    mType = TLengthPercentage;
}

MOZ_IMPLICIT Animatable::Animatable(const StyleOffsetRotate& aOther)
{
    new (mozilla::KnownNotNull, ptr_StyleOffsetRotate()) StyleOffsetRotate(aOther);
    mType = TStyleOffsetRotate;
}

MOZ_IMPLICIT Animatable::Animatable(StyleOffsetRotate&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StyleOffsetRotate()) StyleOffsetRotate(std::move(aOther));
    mType = TStyleOffsetRotate;
}

MOZ_IMPLICIT Animatable::Animatable(const StylePositionOrAuto& aOther)
{
    new (mozilla::KnownNotNull, ptr_StylePositionOrAuto()) StylePositionOrAuto(aOther);
    mType = TStylePositionOrAuto;
}

MOZ_IMPLICIT Animatable::Animatable(StylePositionOrAuto&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StylePositionOrAuto()) StylePositionOrAuto(std::move(aOther));
    mType = TStylePositionOrAuto;
}

MOZ_IMPLICIT Animatable::Animatable(const Animatable& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t((aOther).get_null_t());
            break;
        }
    case Tfloat:
        {
            new (mozilla::KnownNotNull, ptr_float()) float((aOther).get_float());
            break;
        }
    case Tnscolor:
        {
            new (mozilla::KnownNotNull, ptr_nscolor()) nscolor((aOther).get_nscolor());
            break;
        }
    case TStyleRotate:
        {
            new (mozilla::KnownNotNull, ptr_StyleRotate()) StyleRotate((aOther).get_StyleRotate());
            break;
        }
    case TStyleScale:
        {
            new (mozilla::KnownNotNull, ptr_StyleScale()) StyleScale((aOther).get_StyleScale());
            break;
        }
    case TStyleTranslate:
        {
            new (mozilla::KnownNotNull, ptr_StyleTranslate()) StyleTranslate((aOther).get_StyleTranslate());
            break;
        }
    case TStyleTransform:
        {
            new (mozilla::KnownNotNull, ptr_StyleTransform()) StyleTransform((aOther).get_StyleTransform());
            break;
        }
    case TStyleOffsetPath:
        {
            new (mozilla::KnownNotNull, ptr_StyleOffsetPath()) StyleOffsetPath((aOther).get_StyleOffsetPath());
            break;
        }
    case TLengthPercentage:
        {
            new (mozilla::KnownNotNull, ptr_LengthPercentage()) LengthPercentage((aOther).get_LengthPercentage());
            break;
        }
    case TStyleOffsetRotate:
        {
            new (mozilla::KnownNotNull, ptr_StyleOffsetRotate()) StyleOffsetRotate((aOther).get_StyleOffsetRotate());
            break;
        }
    case TStylePositionOrAuto:
        {
            new (mozilla::KnownNotNull, ptr_StylePositionOrAuto()) StylePositionOrAuto((aOther).get_StylePositionOrAuto());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT Animatable::Animatable(Animatable&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move((aOther).get_null_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tfloat:
        {
            new (mozilla::KnownNotNull, ptr_float()) float(std::move((aOther).get_float()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tnscolor:
        {
            new (mozilla::KnownNotNull, ptr_nscolor()) nscolor(std::move((aOther).get_nscolor()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStyleRotate:
        {
            new (mozilla::KnownNotNull, ptr_StyleRotate()) StyleRotate(std::move((aOther).get_StyleRotate()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStyleScale:
        {
            new (mozilla::KnownNotNull, ptr_StyleScale()) StyleScale(std::move((aOther).get_StyleScale()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStyleTranslate:
        {
            new (mozilla::KnownNotNull, ptr_StyleTranslate()) StyleTranslate(std::move((aOther).get_StyleTranslate()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStyleTransform:
        {
            new (mozilla::KnownNotNull, ptr_StyleTransform()) StyleTransform(std::move((aOther).get_StyleTransform()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStyleOffsetPath:
        {
            new (mozilla::KnownNotNull, ptr_StyleOffsetPath()) StyleOffsetPath(std::move((aOther).get_StyleOffsetPath()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TLengthPercentage:
        {
            new (mozilla::KnownNotNull, ptr_LengthPercentage()) LengthPercentage(std::move((aOther).get_LengthPercentage()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStyleOffsetRotate:
        {
            new (mozilla::KnownNotNull, ptr_StyleOffsetRotate()) StyleOffsetRotate(std::move((aOther).get_StyleOffsetRotate()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStylePositionOrAuto:
        {
            new (mozilla::KnownNotNull, ptr_StylePositionOrAuto()) StylePositionOrAuto(std::move((aOther).get_StylePositionOrAuto()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

Animatable::~Animatable()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto Animatable::operator=(const null_t& aRhs) -> Animatable&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = aRhs;
    mType = Tnull_t;
    return (*(this));
}

auto Animatable::operator=(null_t&& aRhs) -> Animatable&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = std::move(aRhs);
    mType = Tnull_t;
    return (*(this));
}

auto Animatable::operator=(const float& aRhs) -> Animatable&
{
    if (MaybeDestroy(Tfloat)) {
        new (mozilla::KnownNotNull, ptr_float()) float;
    }
    (*(ptr_float())) = aRhs;
    mType = Tfloat;
    return (*(this));
}

auto Animatable::operator=(float&& aRhs) -> Animatable&
{
    if (MaybeDestroy(Tfloat)) {
        new (mozilla::KnownNotNull, ptr_float()) float;
    }
    (*(ptr_float())) = std::move(aRhs);
    mType = Tfloat;
    return (*(this));
}

auto Animatable::operator=(const nscolor& aRhs) -> Animatable&
{
    if (MaybeDestroy(Tnscolor)) {
        new (mozilla::KnownNotNull, ptr_nscolor()) nscolor;
    }
    (*(ptr_nscolor())) = aRhs;
    mType = Tnscolor;
    return (*(this));
}

auto Animatable::operator=(nscolor&& aRhs) -> Animatable&
{
    if (MaybeDestroy(Tnscolor)) {
        new (mozilla::KnownNotNull, ptr_nscolor()) nscolor;
    }
    (*(ptr_nscolor())) = std::move(aRhs);
    mType = Tnscolor;
    return (*(this));
}

auto Animatable::operator=(const StyleRotate& aRhs) -> Animatable&
{
    if (MaybeDestroy(TStyleRotate)) {
        new (mozilla::KnownNotNull, ptr_StyleRotate()) StyleRotate;
    }
    (*(ptr_StyleRotate())) = aRhs;
    mType = TStyleRotate;
    return (*(this));
}

auto Animatable::operator=(StyleRotate&& aRhs) -> Animatable&
{
    if (MaybeDestroy(TStyleRotate)) {
        new (mozilla::KnownNotNull, ptr_StyleRotate()) StyleRotate;
    }
    (*(ptr_StyleRotate())) = std::move(aRhs);
    mType = TStyleRotate;
    return (*(this));
}

auto Animatable::operator=(const StyleScale& aRhs) -> Animatable&
{
    if (MaybeDestroy(TStyleScale)) {
        new (mozilla::KnownNotNull, ptr_StyleScale()) StyleScale;
    }
    (*(ptr_StyleScale())) = aRhs;
    mType = TStyleScale;
    return (*(this));
}

auto Animatable::operator=(StyleScale&& aRhs) -> Animatable&
{
    if (MaybeDestroy(TStyleScale)) {
        new (mozilla::KnownNotNull, ptr_StyleScale()) StyleScale;
    }
    (*(ptr_StyleScale())) = std::move(aRhs);
    mType = TStyleScale;
    return (*(this));
}

auto Animatable::operator=(const StyleTranslate& aRhs) -> Animatable&
{
    if (MaybeDestroy(TStyleTranslate)) {
        new (mozilla::KnownNotNull, ptr_StyleTranslate()) StyleTranslate;
    }
    (*(ptr_StyleTranslate())) = aRhs;
    mType = TStyleTranslate;
    return (*(this));
}

auto Animatable::operator=(StyleTranslate&& aRhs) -> Animatable&
{
    if (MaybeDestroy(TStyleTranslate)) {
        new (mozilla::KnownNotNull, ptr_StyleTranslate()) StyleTranslate;
    }
    (*(ptr_StyleTranslate())) = std::move(aRhs);
    mType = TStyleTranslate;
    return (*(this));
}

auto Animatable::operator=(const StyleTransform& aRhs) -> Animatable&
{
    if (MaybeDestroy(TStyleTransform)) {
        new (mozilla::KnownNotNull, ptr_StyleTransform()) StyleTransform;
    }
    (*(ptr_StyleTransform())) = aRhs;
    mType = TStyleTransform;
    return (*(this));
}

auto Animatable::operator=(StyleTransform&& aRhs) -> Animatable&
{
    if (MaybeDestroy(TStyleTransform)) {
        new (mozilla::KnownNotNull, ptr_StyleTransform()) StyleTransform;
    }
    (*(ptr_StyleTransform())) = std::move(aRhs);
    mType = TStyleTransform;
    return (*(this));
}

auto Animatable::operator=(const StyleOffsetPath& aRhs) -> Animatable&
{
    if (MaybeDestroy(TStyleOffsetPath)) {
        new (mozilla::KnownNotNull, ptr_StyleOffsetPath()) StyleOffsetPath;
    }
    (*(ptr_StyleOffsetPath())) = aRhs;
    mType = TStyleOffsetPath;
    return (*(this));
}

auto Animatable::operator=(StyleOffsetPath&& aRhs) -> Animatable&
{
    if (MaybeDestroy(TStyleOffsetPath)) {
        new (mozilla::KnownNotNull, ptr_StyleOffsetPath()) StyleOffsetPath;
    }
    (*(ptr_StyleOffsetPath())) = std::move(aRhs);
    mType = TStyleOffsetPath;
    return (*(this));
}

auto Animatable::operator=(const LengthPercentage& aRhs) -> Animatable&
{
    if (MaybeDestroy(TLengthPercentage)) {
        new (mozilla::KnownNotNull, ptr_LengthPercentage()) LengthPercentage;
    }
    (*(ptr_LengthPercentage())) = aRhs;
    mType = TLengthPercentage;
    return (*(this));
}

auto Animatable::operator=(LengthPercentage&& aRhs) -> Animatable&
{
    if (MaybeDestroy(TLengthPercentage)) {
        new (mozilla::KnownNotNull, ptr_LengthPercentage()) LengthPercentage;
    }
    (*(ptr_LengthPercentage())) = std::move(aRhs);
    mType = TLengthPercentage;
    return (*(this));
}

auto Animatable::operator=(const StyleOffsetRotate& aRhs) -> Animatable&
{
    if (MaybeDestroy(TStyleOffsetRotate)) {
        new (mozilla::KnownNotNull, ptr_StyleOffsetRotate()) StyleOffsetRotate;
    }
    (*(ptr_StyleOffsetRotate())) = aRhs;
    mType = TStyleOffsetRotate;
    return (*(this));
}

auto Animatable::operator=(StyleOffsetRotate&& aRhs) -> Animatable&
{
    if (MaybeDestroy(TStyleOffsetRotate)) {
        new (mozilla::KnownNotNull, ptr_StyleOffsetRotate()) StyleOffsetRotate;
    }
    (*(ptr_StyleOffsetRotate())) = std::move(aRhs);
    mType = TStyleOffsetRotate;
    return (*(this));
}

auto Animatable::operator=(const StylePositionOrAuto& aRhs) -> Animatable&
{
    if (MaybeDestroy(TStylePositionOrAuto)) {
        new (mozilla::KnownNotNull, ptr_StylePositionOrAuto()) StylePositionOrAuto;
    }
    (*(ptr_StylePositionOrAuto())) = aRhs;
    mType = TStylePositionOrAuto;
    return (*(this));
}

auto Animatable::operator=(StylePositionOrAuto&& aRhs) -> Animatable&
{
    if (MaybeDestroy(TStylePositionOrAuto)) {
        new (mozilla::KnownNotNull, ptr_StylePositionOrAuto()) StylePositionOrAuto;
    }
    (*(ptr_StylePositionOrAuto())) = std::move(aRhs);
    mType = TStylePositionOrAuto;
    return (*(this));
}

auto Animatable::operator=(const Animatable& aRhs) -> Animatable&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = (aRhs).get_null_t();
            break;
        }
    case Tfloat:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_float()) float;
            }
            (*(ptr_float())) = (aRhs).get_float();
            break;
        }
    case Tnscolor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nscolor()) nscolor;
            }
            (*(ptr_nscolor())) = (aRhs).get_nscolor();
            break;
        }
    case TStyleRotate:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StyleRotate()) StyleRotate;
            }
            (*(ptr_StyleRotate())) = (aRhs).get_StyleRotate();
            break;
        }
    case TStyleScale:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StyleScale()) StyleScale;
            }
            (*(ptr_StyleScale())) = (aRhs).get_StyleScale();
            break;
        }
    case TStyleTranslate:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StyleTranslate()) StyleTranslate;
            }
            (*(ptr_StyleTranslate())) = (aRhs).get_StyleTranslate();
            break;
        }
    case TStyleTransform:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StyleTransform()) StyleTransform;
            }
            (*(ptr_StyleTransform())) = (aRhs).get_StyleTransform();
            break;
        }
    case TStyleOffsetPath:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StyleOffsetPath()) StyleOffsetPath;
            }
            (*(ptr_StyleOffsetPath())) = (aRhs).get_StyleOffsetPath();
            break;
        }
    case TLengthPercentage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_LengthPercentage()) LengthPercentage;
            }
            (*(ptr_LengthPercentage())) = (aRhs).get_LengthPercentage();
            break;
        }
    case TStyleOffsetRotate:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StyleOffsetRotate()) StyleOffsetRotate;
            }
            (*(ptr_StyleOffsetRotate())) = (aRhs).get_StyleOffsetRotate();
            break;
        }
    case TStylePositionOrAuto:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StylePositionOrAuto()) StylePositionOrAuto;
            }
            (*(ptr_StylePositionOrAuto())) = (aRhs).get_StylePositionOrAuto();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto Animatable::operator=(Animatable&& aRhs) -> Animatable&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = std::move((aRhs).get_null_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tfloat:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_float()) float;
            }
            (*(ptr_float())) = std::move((aRhs).get_float());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tnscolor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nscolor()) nscolor;
            }
            (*(ptr_nscolor())) = std::move((aRhs).get_nscolor());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStyleRotate:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StyleRotate()) StyleRotate;
            }
            (*(ptr_StyleRotate())) = std::move((aRhs).get_StyleRotate());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStyleScale:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StyleScale()) StyleScale;
            }
            (*(ptr_StyleScale())) = std::move((aRhs).get_StyleScale());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStyleTranslate:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StyleTranslate()) StyleTranslate;
            }
            (*(ptr_StyleTranslate())) = std::move((aRhs).get_StyleTranslate());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStyleTransform:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StyleTransform()) StyleTransform;
            }
            (*(ptr_StyleTransform())) = std::move((aRhs).get_StyleTransform());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStyleOffsetPath:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StyleOffsetPath()) StyleOffsetPath;
            }
            (*(ptr_StyleOffsetPath())) = std::move((aRhs).get_StyleOffsetPath());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TLengthPercentage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_LengthPercentage()) LengthPercentage;
            }
            (*(ptr_LengthPercentage())) = std::move((aRhs).get_LengthPercentage());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStyleOffsetRotate:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StyleOffsetRotate()) StyleOffsetRotate;
            }
            (*(ptr_StyleOffsetRotate())) = std::move((aRhs).get_StyleOffsetRotate());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStylePositionOrAuto:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StylePositionOrAuto()) StylePositionOrAuto;
            }
            (*(ptr_StylePositionOrAuto())) = std::move((aRhs).get_StylePositionOrAuto());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

auto Animatable::operator==(const null_t& aRhs) const -> bool
{
    return (get_null_t()) == (aRhs);
}

auto Animatable::operator==(const float& aRhs) const -> bool
{
    return (get_float()) == (aRhs);
}

auto Animatable::operator==(const nscolor& aRhs) const -> bool
{
    return (get_nscolor()) == (aRhs);
}

auto Animatable::operator==(const StyleRotate& aRhs) const -> bool
{
    return (get_StyleRotate()) == (aRhs);
}

auto Animatable::operator==(const StyleScale& aRhs) const -> bool
{
    return (get_StyleScale()) == (aRhs);
}

auto Animatable::operator==(const StyleTranslate& aRhs) const -> bool
{
    return (get_StyleTranslate()) == (aRhs);
}

auto Animatable::operator==(const StyleTransform& aRhs) const -> bool
{
    return (get_StyleTransform()) == (aRhs);
}

auto Animatable::operator==(const StyleOffsetPath& aRhs) const -> bool
{
    return (get_StyleOffsetPath()) == (aRhs);
}

auto Animatable::operator==(const LengthPercentage& aRhs) const -> bool
{
    return (get_LengthPercentage()) == (aRhs);
}

auto Animatable::operator==(const StyleOffsetRotate& aRhs) const -> bool
{
    return (get_StyleOffsetRotate()) == (aRhs);
}

auto Animatable::operator==(const StylePositionOrAuto& aRhs) const -> bool
{
    return (get_StylePositionOrAuto()) == (aRhs);
}

auto Animatable::operator==(const Animatable& aRhs) const -> bool
{
    if ((type()) != ((aRhs).type())) {
        return false;
    }

    switch (type()) {
    case Tnull_t:
        {
            return (get_null_t()) == ((aRhs).get_null_t());
        }
    case Tfloat:
        {
            return (get_float()) == ((aRhs).get_float());
        }
    case Tnscolor:
        {
            return (get_nscolor()) == ((aRhs).get_nscolor());
        }
    case TStyleRotate:
        {
            return (get_StyleRotate()) == ((aRhs).get_StyleRotate());
        }
    case TStyleScale:
        {
            return (get_StyleScale()) == ((aRhs).get_StyleScale());
        }
    case TStyleTranslate:
        {
            return (get_StyleTranslate()) == ((aRhs).get_StyleTranslate());
        }
    case TStyleTransform:
        {
            return (get_StyleTransform()) == ((aRhs).get_StyleTransform());
        }
    case TStyleOffsetPath:
        {
            return (get_StyleOffsetPath()) == ((aRhs).get_StyleOffsetPath());
        }
    case TLengthPercentage:
        {
            return (get_LengthPercentage()) == ((aRhs).get_LengthPercentage());
        }
    case TStyleOffsetRotate:
        {
            return (get_StyleOffsetRotate()) == ((aRhs).get_StyleOffsetRotate());
        }
    case TStylePositionOrAuto:
        {
            return (get_StylePositionOrAuto()) == ((aRhs).get_StylePositionOrAuto());
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return false;
        }
    }
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::Animatable>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::Animatable union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'Animatable'
    (aMsg)->WriteSentinel(354812911);

    switch (type) {
    case union__::Tnull_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_null_t());
            // Sentinel = 'Tnull_t'
            (aMsg)->WriteSentinel(190186211);
            return;
        }
    case union__::Tfloat:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_float());
            // Sentinel = 'Tfloat'
            (aMsg)->WriteSentinel(137298539);
            return;
        }
    case union__::Tnscolor:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nscolor());
            // Sentinel = 'Tnscolor'
            (aMsg)->WriteSentinel(245039957);
            return;
        }
    case union__::TStyleRotate:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StyleRotate());
            // Sentinel = 'TStyleRotate'
            (aMsg)->WriteSentinel(516949205);
            return;
        }
    case union__::TStyleScale:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StyleScale());
            // Sentinel = 'TStyleScale'
            (aMsg)->WriteSentinel(429786190);
            return;
        }
    case union__::TStyleTranslate:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StyleTranslate());
            // Sentinel = 'TStyleTranslate'
            (aMsg)->WriteSentinel(801703444);
            return;
        }
    case union__::TStyleTransform:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StyleTransform());
            // Sentinel = 'TStyleTransform'
            (aMsg)->WriteSentinel(803145250);
            return;
        }
    case union__::TStyleOffsetPath:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StyleOffsetPath());
            // Sentinel = 'TStyleOffsetPath'
            (aMsg)->WriteSentinel(895944282);
            return;
        }
    case union__::TLengthPercentage:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_LengthPercentage());
            // Sentinel = 'TLengthPercentage'
            (aMsg)->WriteSentinel(991102645);
            return;
        }
    case union__::TStyleOffsetRotate:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StyleOffsetRotate());
            // Sentinel = 'TStyleOffsetRotate'
            (aMsg)->WriteSentinel(1134888764);
            return;
        }
    case union__::TStylePositionOrAuto:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StylePositionOrAuto());
            // Sentinel = 'TStylePositionOrAuto'
            (aMsg)->WriteSentinel(1410598933);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::Animatable>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::Animatable union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union Animatable");
        return false;
    }
    // Sentinel = 'Animatable'
    if ((!((aMsg)->ReadSentinel(aIter, 354812911)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union Animatable");
        return false;
    }

    switch (type) {
    case union__::Tnull_t:
        {
            mozilla::null_t tmp = mozilla::null_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_null_t())))))) {
                aActor->FatalError("Error deserializing variant Tnull_t of union Animatable");
                return false;
            }
            // Sentinel = 'Tnull_t'
            if ((!((aMsg)->ReadSentinel(aIter, 190186211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnull_t of union Animatable");
                return false;
            }
            return true;
        }
    case union__::Tfloat:
        {
            float tmp = float();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_float())))))) {
                aActor->FatalError("Error deserializing variant Tfloat of union Animatable");
                return false;
            }
            // Sentinel = 'Tfloat'
            if ((!((aMsg)->ReadSentinel(aIter, 137298539)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tfloat of union Animatable");
                return false;
            }
            return true;
        }
    case union__::Tnscolor:
        {
            nscolor tmp = nscolor();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nscolor())))))) {
                aActor->FatalError("Error deserializing variant Tnscolor of union Animatable");
                return false;
            }
            // Sentinel = 'Tnscolor'
            if ((!((aMsg)->ReadSentinel(aIter, 245039957)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnscolor of union Animatable");
                return false;
            }
            return true;
        }
    case union__::TStyleRotate:
        {
            mozilla::StyleRotate tmp = mozilla::StyleRotate();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StyleRotate())))))) {
                aActor->FatalError("Error deserializing variant TStyleRotate of union Animatable");
                return false;
            }
            // Sentinel = 'TStyleRotate'
            if ((!((aMsg)->ReadSentinel(aIter, 516949205)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStyleRotate of union Animatable");
                return false;
            }
            return true;
        }
    case union__::TStyleScale:
        {
            mozilla::StyleScale tmp = mozilla::StyleScale();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StyleScale())))))) {
                aActor->FatalError("Error deserializing variant TStyleScale of union Animatable");
                return false;
            }
            // Sentinel = 'TStyleScale'
            if ((!((aMsg)->ReadSentinel(aIter, 429786190)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStyleScale of union Animatable");
                return false;
            }
            return true;
        }
    case union__::TStyleTranslate:
        {
            mozilla::StyleTranslate tmp = mozilla::StyleTranslate();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StyleTranslate())))))) {
                aActor->FatalError("Error deserializing variant TStyleTranslate of union Animatable");
                return false;
            }
            // Sentinel = 'TStyleTranslate'
            if ((!((aMsg)->ReadSentinel(aIter, 801703444)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStyleTranslate of union Animatable");
                return false;
            }
            return true;
        }
    case union__::TStyleTransform:
        {
            mozilla::StyleTransform tmp = mozilla::StyleTransform();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StyleTransform())))))) {
                aActor->FatalError("Error deserializing variant TStyleTransform of union Animatable");
                return false;
            }
            // Sentinel = 'TStyleTransform'
            if ((!((aMsg)->ReadSentinel(aIter, 803145250)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStyleTransform of union Animatable");
                return false;
            }
            return true;
        }
    case union__::TStyleOffsetPath:
        {
            mozilla::StyleOffsetPath tmp = mozilla::StyleOffsetPath();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StyleOffsetPath())))))) {
                aActor->FatalError("Error deserializing variant TStyleOffsetPath of union Animatable");
                return false;
            }
            // Sentinel = 'TStyleOffsetPath'
            if ((!((aMsg)->ReadSentinel(aIter, 895944282)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStyleOffsetPath of union Animatable");
                return false;
            }
            return true;
        }
    case union__::TLengthPercentage:
        {
            mozilla::LengthPercentage tmp = mozilla::LengthPercentage();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_LengthPercentage())))))) {
                aActor->FatalError("Error deserializing variant TLengthPercentage of union Animatable");
                return false;
            }
            // Sentinel = 'TLengthPercentage'
            if ((!((aMsg)->ReadSentinel(aIter, 991102645)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TLengthPercentage of union Animatable");
                return false;
            }
            return true;
        }
    case union__::TStyleOffsetRotate:
        {
            mozilla::StyleOffsetRotate tmp = mozilla::StyleOffsetRotate();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StyleOffsetRotate())))))) {
                aActor->FatalError("Error deserializing variant TStyleOffsetRotate of union Animatable");
                return false;
            }
            // Sentinel = 'TStyleOffsetRotate'
            if ((!((aMsg)->ReadSentinel(aIter, 1134888764)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStyleOffsetRotate of union Animatable");
                return false;
            }
            return true;
        }
    case union__::TStylePositionOrAuto:
        {
            mozilla::StylePositionOrAuto tmp = mozilla::StylePositionOrAuto();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StylePositionOrAuto())))))) {
                aActor->FatalError("Error deserializing variant TStylePositionOrAuto of union Animatable");
                return false;
            }
            // Sentinel = 'TStylePositionOrAuto'
            if ((!((aMsg)->ReadSentinel(aIter, 1410598933)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStylePositionOrAuto of union Animatable");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct AnimationSegment|
//
namespace mozilla {
namespace layers {
auto AnimationSegment::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(AnimationSegment, endPortion_) - offsetof(AnimationSegment, startPortion_)) == 4,
        "Bad assumptions about field layout!");
    static_assert(
        (offsetof(AnimationSegment, endComposite_) - offsetof(AnimationSegment, startComposite_)) == 1,
        "Bad assumptions about field layout!");
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::AnimationSegment>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).startState());
    // Sentinel = 'startState'
    (aMsg)->WriteSentinel(391709744);
    WriteIPDLParam(aMsg, aActor, (aVar).endState());
    // Sentinel = 'endState'
    (aMsg)->WriteSentinel(241763129);
    WriteIPDLParam(aMsg, aActor, (aVar).sampleFn());
    // Sentinel = 'sampleFn'
    (aMsg)->WriteSentinel(249430839);
    (aMsg)->WriteBytes((&((aVar).startPortion())), 8);
    // Sentinel = 'startPortion | endPortion'
    (aMsg)->WriteSentinel(2191526392);
    (aMsg)->WriteBytes((&((aVar).startComposite())), 2);
    // Sentinel = 'startComposite | endComposite'
    (aMsg)->WriteSentinel(2918452104);
}

auto IPDLParamTraits<mozilla::layers::AnimationSegment>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->startState())))))) {
        aActor->FatalError("Error deserializing 'startState' (Animatable) member of 'AnimationSegment'");
        return false;
    }
    // Sentinel = 'startState'
    if ((!((aMsg)->ReadSentinel(aIter, 391709744)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'startState' (Animatable) member of 'AnimationSegment'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->endState())))))) {
        aActor->FatalError("Error deserializing 'endState' (Animatable) member of 'AnimationSegment'");
        return false;
    }
    // Sentinel = 'endState'
    if ((!((aMsg)->ReadSentinel(aIter, 241763129)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'endState' (Animatable) member of 'AnimationSegment'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sampleFn())))))) {
        aActor->FatalError("Error deserializing 'sampleFn' (TimingFunction) member of 'AnimationSegment'");
        return false;
    }
    // Sentinel = 'sampleFn'
    if ((!((aMsg)->ReadSentinel(aIter, 249430839)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sampleFn' (TimingFunction) member of 'AnimationSegment'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->startPortion())), 8)))) {
        aActor->FatalError("Error bulk reading fields from float");
        return false;
    }
    // Sentinel = 'startPortion | endPortion'
    if ((!((aMsg)->ReadSentinel(aIter, 2191526392)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from float");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->startComposite())), 2)))) {
        aActor->FatalError("Error bulk reading fields from uint8_t");
        return false;
    }
    // Sentinel = 'startComposite | endComposite'
    if ((!((aMsg)->ReadSentinel(aIter, 2918452104)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint8_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct MotionPathData|
//
namespace mozilla {
namespace layers {
auto MotionPathData::operator==(const MotionPathData& _o) const -> bool
{
    if ((!((origin()) == ((_o).origin())))) {
        return false;
    }
    if ((!((anchorAdjustment()) == ((_o).anchorAdjustment())))) {
        return false;
    }
    if ((!((rayReferenceData()) == ((_o).rayReferenceData())))) {
        return false;
    }
    return true;
}

auto MotionPathData::operator!=(const MotionPathData& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::MotionPathData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).origin());
    // Sentinel = 'origin'
    (aMsg)->WriteSentinel(150143625);
    WriteIPDLParam(aMsg, aActor, (aVar).anchorAdjustment());
    // Sentinel = 'anchorAdjustment'
    (aMsg)->WriteSentinel(924321435);
    WriteIPDLParam(aMsg, aActor, (aVar).rayReferenceData());
    // Sentinel = 'rayReferenceData'
    (aMsg)->WriteSentinel(917112406);
}

auto IPDLParamTraits<mozilla::layers::MotionPathData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->origin())))))) {
        aActor->FatalError("Error deserializing 'origin' (CSSPoint) member of 'MotionPathData'");
        return false;
    }
    // Sentinel = 'origin'
    if ((!((aMsg)->ReadSentinel(aIter, 150143625)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'origin' (CSSPoint) member of 'MotionPathData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->anchorAdjustment())))))) {
        aActor->FatalError("Error deserializing 'anchorAdjustment' (CSSPoint) member of 'MotionPathData'");
        return false;
    }
    // Sentinel = 'anchorAdjustment'
    if ((!((aMsg)->ReadSentinel(aIter, 924321435)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'anchorAdjustment' (CSSPoint) member of 'MotionPathData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->rayReferenceData())))))) {
        aActor->FatalError("Error deserializing 'rayReferenceData' (RayReferenceData) member of 'MotionPathData'");
        return false;
    }
    // Sentinel = 'rayReferenceData'
    if ((!((aMsg)->ReadSentinel(aIter, 917112406)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'rayReferenceData' (RayReferenceData) member of 'MotionPathData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PartialPrerenderData|
//
namespace mozilla {
namespace layers {
auto PartialPrerenderData::operator==(const PartialPrerenderData& _o) const -> bool
{
    if ((!((rect()) == ((_o).rect())))) {
        return false;
    }
    if ((!((overflowedSides()) == ((_o).overflowedSides())))) {
        return false;
    }
    if ((!((scrollId()) == ((_o).scrollId())))) {
        return false;
    }
    if ((!((clipRect()) == ((_o).clipRect())))) {
        return false;
    }
    if ((!((transformInClip()) == ((_o).transformInClip())))) {
        return false;
    }
    if ((!((position()) == ((_o).position())))) {
        return false;
    }
    return true;
}

auto PartialPrerenderData::operator!=(const PartialPrerenderData& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PartialPrerenderData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).rect());
    // Sentinel = 'rect'
    (aMsg)->WriteSentinel(70582703);
    WriteIPDLParam(aMsg, aActor, (aVar).overflowedSides());
    // Sentinel = 'overflowedSides'
    (aMsg)->WriteSentinel(847054390);
    WriteIPDLParam(aMsg, aActor, (aVar).scrollId());
    // Sentinel = 'scrollId'
    (aMsg)->WriteSentinel(253100861);
    WriteIPDLParam(aMsg, aActor, (aVar).clipRect());
    // Sentinel = 'clipRect'
    (aMsg)->WriteSentinel(241894199);
    WriteIPDLParam(aMsg, aActor, (aVar).transformInClip());
    // Sentinel = 'transformInClip'
    (aMsg)->WriteSentinel(838403612);
    WriteIPDLParam(aMsg, aActor, (aVar).position());
    // Sentinel = 'position'
    (aMsg)->WriteSentinel(262603638);
}

auto IPDLParamTraits<mozilla::layers::PartialPrerenderData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->rect())))))) {
        aActor->FatalError("Error deserializing 'rect' (LayoutDeviceRect) member of 'PartialPrerenderData'");
        return false;
    }
    // Sentinel = 'rect'
    if ((!((aMsg)->ReadSentinel(aIter, 70582703)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'rect' (LayoutDeviceRect) member of 'PartialPrerenderData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->overflowedSides())))))) {
        aActor->FatalError("Error deserializing 'overflowedSides' (SideBits) member of 'PartialPrerenderData'");
        return false;
    }
    // Sentinel = 'overflowedSides'
    if ((!((aMsg)->ReadSentinel(aIter, 847054390)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'overflowedSides' (SideBits) member of 'PartialPrerenderData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->scrollId())))))) {
        aActor->FatalError("Error deserializing 'scrollId' (ViewID) member of 'PartialPrerenderData'");
        return false;
    }
    // Sentinel = 'scrollId'
    if ((!((aMsg)->ReadSentinel(aIter, 253100861)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'scrollId' (ViewID) member of 'PartialPrerenderData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->clipRect())))))) {
        aActor->FatalError("Error deserializing 'clipRect' (ParentLayerRect) member of 'PartialPrerenderData'");
        return false;
    }
    // Sentinel = 'clipRect'
    if ((!((aMsg)->ReadSentinel(aIter, 241894199)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'clipRect' (ParentLayerRect) member of 'PartialPrerenderData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->transformInClip())))))) {
        aActor->FatalError("Error deserializing 'transformInClip' (Matrix4x4) member of 'PartialPrerenderData'");
        return false;
    }
    // Sentinel = 'transformInClip'
    if ((!((aMsg)->ReadSentinel(aIter, 838403612)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'transformInClip' (Matrix4x4) member of 'PartialPrerenderData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->position())))))) {
        aActor->FatalError("Error deserializing 'position' (LayoutDevicePoint) member of 'PartialPrerenderData'");
        return false;
    }
    // Sentinel = 'position'
    if ((!((aMsg)->ReadSentinel(aIter, 262603638)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'position' (LayoutDevicePoint) member of 'PartialPrerenderData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct TransformData|
//
namespace mozilla {
namespace layers {
auto TransformData::operator==(const TransformData& _o) const -> bool
{
    if ((!((origin()) == ((_o).origin())))) {
        return false;
    }
    if ((!((transformOrigin()) == ((_o).transformOrigin())))) {
        return false;
    }
    if ((!((bounds()) == ((_o).bounds())))) {
        return false;
    }
    if ((!((appUnitsPerDevPixel()) == ((_o).appUnitsPerDevPixel())))) {
        return false;
    }
    if ((!((motionPathData()) == ((_o).motionPathData())))) {
        return false;
    }
    if ((!((partialPrerenderData()) == ((_o).partialPrerenderData())))) {
        return false;
    }
    return true;
}

auto TransformData::operator!=(const TransformData& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::TransformData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).origin());
    // Sentinel = 'origin'
    (aMsg)->WriteSentinel(150143625);
    WriteIPDLParam(aMsg, aActor, (aVar).transformOrigin());
    // Sentinel = 'transformOrigin'
    (aMsg)->WriteSentinel(850921029);
    WriteIPDLParam(aMsg, aActor, (aVar).bounds());
    // Sentinel = 'bounds'
    (aMsg)->WriteSentinel(148243084);
    WriteIPDLParam(aMsg, aActor, (aVar).motionPathData());
    // Sentinel = 'motionPathData'
    (aMsg)->WriteSentinel(724632990);
    WriteIPDLParam(aMsg, aActor, (aVar).partialPrerenderData());
    // Sentinel = 'partialPrerenderData'
    (aMsg)->WriteSentinel(1441138703);
    (aMsg)->WriteBytes((&((aVar).appUnitsPerDevPixel())), 4);
    // Sentinel = 'appUnitsPerDevPixel'
    (aMsg)->WriteSentinel(1278936989);
}

auto IPDLParamTraits<mozilla::layers::TransformData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->origin())))))) {
        aActor->FatalError("Error deserializing 'origin' (nsPoint) member of 'TransformData'");
        return false;
    }
    // Sentinel = 'origin'
    if ((!((aMsg)->ReadSentinel(aIter, 150143625)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'origin' (nsPoint) member of 'TransformData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->transformOrigin())))))) {
        aActor->FatalError("Error deserializing 'transformOrigin' (Point3D) member of 'TransformData'");
        return false;
    }
    // Sentinel = 'transformOrigin'
    if ((!((aMsg)->ReadSentinel(aIter, 850921029)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'transformOrigin' (Point3D) member of 'TransformData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->bounds())))))) {
        aActor->FatalError("Error deserializing 'bounds' (nsRect) member of 'TransformData'");
        return false;
    }
    // Sentinel = 'bounds'
    if ((!((aMsg)->ReadSentinel(aIter, 148243084)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bounds' (nsRect) member of 'TransformData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->motionPathData())))))) {
        aActor->FatalError("Error deserializing 'motionPathData' (MotionPathData?) member of 'TransformData'");
        return false;
    }
    // Sentinel = 'motionPathData'
    if ((!((aMsg)->ReadSentinel(aIter, 724632990)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'motionPathData' (MotionPathData?) member of 'TransformData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->partialPrerenderData())))))) {
        aActor->FatalError("Error deserializing 'partialPrerenderData' (PartialPrerenderData?) member of 'TransformData'");
        return false;
    }
    // Sentinel = 'partialPrerenderData'
    if ((!((aMsg)->ReadSentinel(aIter, 1441138703)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'partialPrerenderData' (PartialPrerenderData?) member of 'TransformData'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->appUnitsPerDevPixel())), 4)))) {
        aActor->FatalError("Error bulk reading fields from int32_t");
        return false;
    }
    // Sentinel = 'appUnitsPerDevPixel'
    if ((!((aMsg)->ReadSentinel(aIter, 1278936989)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct Animation|
//
namespace mozilla {
namespace layers {
auto Animation::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(Animation, previousPlaybackRate_) - offsetof(Animation, iterations_)) == 12,
        "Bad assumptions about field layout!");
    static_assert(
        (offsetof(Animation, iterationComposite_) - offsetof(Animation, direction_)) == 2,
        "Bad assumptions about field layout!");
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::Animation>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).originTime());
    // Sentinel = 'originTime'
    (aMsg)->WriteSentinel(383845400);
    WriteIPDLParam(aMsg, aActor, (aVar).startTime());
    // Sentinel = 'startTime'
    (aMsg)->WriteSentinel(320144318);
    WriteIPDLParam(aMsg, aActor, (aVar).delay());
    // Sentinel = 'delay'
    (aMsg)->WriteSentinel(101450256);
    WriteIPDLParam(aMsg, aActor, (aVar).endDelay());
    // Sentinel = 'endDelay'
    (aMsg)->WriteSentinel(233898791);
    WriteIPDLParam(aMsg, aActor, (aVar).holdTime());
    // Sentinel = 'holdTime'
    (aMsg)->WriteSentinel(244777783);
    WriteIPDLParam(aMsg, aActor, (aVar).duration());
    // Sentinel = 'duration'
    (aMsg)->WriteSentinel(256050023);
    WriteIPDLParam(aMsg, aActor, (aVar).segments());
    // Sentinel = 'segments'
    (aMsg)->WriteSentinel(254215015);
    WriteIPDLParam(aMsg, aActor, (aVar).property());
    // Sentinel = 'property'
    (aMsg)->WriteSentinel(263914374);
    WriteIPDLParam(aMsg, aActor, (aVar).easingFunction());
    // Sentinel = 'easingFunction'
    (aMsg)->WriteSentinel(714081726);
    WriteIPDLParam(aMsg, aActor, (aVar).isNotPlaying());
    // Sentinel = 'isNotPlaying'
    (aMsg)->WriteSentinel(528155874);
    WriteIPDLParam(aMsg, aActor, (aVar).isNotAnimating());
    // Sentinel = 'isNotAnimating'
    (aMsg)->WriteSentinel(703661478);
    WriteIPDLParam(aMsg, aActor, (aVar).baseStyle());
    // Sentinel = 'baseStyle'
    (aMsg)->WriteSentinel(303891373);
    WriteIPDLParam(aMsg, aActor, (aVar).transformData());
    // Sentinel = 'transformData'
    (aMsg)->WriteSentinel(642581847);
    (aMsg)->WriteBytes((&((aVar).iterations())), 16);
    // Sentinel = 'iterations | iterationStart | playbackRate | previousPlaybackRate'
    (aMsg)->WriteSentinel(1175198039);
    (aMsg)->WriteBytes((&((aVar).direction())), 3);
    // Sentinel = 'direction | fillMode | iterationComposite'
    (aMsg)->WriteSentinel(1216810984);
}

auto IPDLParamTraits<mozilla::layers::Animation>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->originTime())))))) {
        aActor->FatalError("Error deserializing 'originTime' (TimeStamp) member of 'Animation'");
        return false;
    }
    // Sentinel = 'originTime'
    if ((!((aMsg)->ReadSentinel(aIter, 383845400)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'originTime' (TimeStamp) member of 'Animation'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->startTime())))))) {
        aActor->FatalError("Error deserializing 'startTime' (TimeDuration?) member of 'Animation'");
        return false;
    }
    // Sentinel = 'startTime'
    if ((!((aMsg)->ReadSentinel(aIter, 320144318)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'startTime' (TimeDuration?) member of 'Animation'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->delay())))))) {
        aActor->FatalError("Error deserializing 'delay' (TimeDuration) member of 'Animation'");
        return false;
    }
    // Sentinel = 'delay'
    if ((!((aMsg)->ReadSentinel(aIter, 101450256)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'delay' (TimeDuration) member of 'Animation'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->endDelay())))))) {
        aActor->FatalError("Error deserializing 'endDelay' (TimeDuration) member of 'Animation'");
        return false;
    }
    // Sentinel = 'endDelay'
    if ((!((aMsg)->ReadSentinel(aIter, 233898791)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'endDelay' (TimeDuration) member of 'Animation'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->holdTime())))))) {
        aActor->FatalError("Error deserializing 'holdTime' (TimeDuration) member of 'Animation'");
        return false;
    }
    // Sentinel = 'holdTime'
    if ((!((aMsg)->ReadSentinel(aIter, 244777783)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'holdTime' (TimeDuration) member of 'Animation'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->duration())))))) {
        aActor->FatalError("Error deserializing 'duration' (TimeDuration) member of 'Animation'");
        return false;
    }
    // Sentinel = 'duration'
    if ((!((aMsg)->ReadSentinel(aIter, 256050023)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'duration' (TimeDuration) member of 'Animation'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->segments())))))) {
        aActor->FatalError("Error deserializing 'segments' (AnimationSegment[]) member of 'Animation'");
        return false;
    }
    // Sentinel = 'segments'
    if ((!((aMsg)->ReadSentinel(aIter, 254215015)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'segments' (AnimationSegment[]) member of 'Animation'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->property())))))) {
        aActor->FatalError("Error deserializing 'property' (nsCSSPropertyID) member of 'Animation'");
        return false;
    }
    // Sentinel = 'property'
    if ((!((aMsg)->ReadSentinel(aIter, 263914374)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'property' (nsCSSPropertyID) member of 'Animation'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->easingFunction())))))) {
        aActor->FatalError("Error deserializing 'easingFunction' (TimingFunction) member of 'Animation'");
        return false;
    }
    // Sentinel = 'easingFunction'
    if ((!((aMsg)->ReadSentinel(aIter, 714081726)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'easingFunction' (TimingFunction) member of 'Animation'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isNotPlaying())))))) {
        aActor->FatalError("Error deserializing 'isNotPlaying' (bool) member of 'Animation'");
        return false;
    }
    // Sentinel = 'isNotPlaying'
    if ((!((aMsg)->ReadSentinel(aIter, 528155874)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isNotPlaying' (bool) member of 'Animation'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isNotAnimating())))))) {
        aActor->FatalError("Error deserializing 'isNotAnimating' (bool) member of 'Animation'");
        return false;
    }
    // Sentinel = 'isNotAnimating'
    if ((!((aMsg)->ReadSentinel(aIter, 703661478)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isNotAnimating' (bool) member of 'Animation'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->baseStyle())))))) {
        aActor->FatalError("Error deserializing 'baseStyle' (Animatable) member of 'Animation'");
        return false;
    }
    // Sentinel = 'baseStyle'
    if ((!((aMsg)->ReadSentinel(aIter, 303891373)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'baseStyle' (Animatable) member of 'Animation'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->transformData())))))) {
        aActor->FatalError("Error deserializing 'transformData' (TransformData?) member of 'Animation'");
        return false;
    }
    // Sentinel = 'transformData'
    if ((!((aMsg)->ReadSentinel(aIter, 642581847)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'transformData' (TransformData?) member of 'Animation'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->iterations())), 16)))) {
        aActor->FatalError("Error bulk reading fields from float");
        return false;
    }
    // Sentinel = 'iterations | iterationStart | playbackRate | previousPlaybackRate'
    if ((!((aMsg)->ReadSentinel(aIter, 1175198039)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from float");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->direction())), 3)))) {
        aActor->FatalError("Error bulk reading fields from uint8_t");
        return false;
    }
    // Sentinel = 'direction | fillMode | iterationComposite'
    if ((!((aMsg)->ReadSentinel(aIter, 1216810984)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint8_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CompositorAnimations|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::CompositorAnimations>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).animations());
    // Sentinel = 'animations'
    (aMsg)->WriteSentinel(381617204);
    (aMsg)->WriteBytes((&((aVar).id())), 8);
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
}

auto IPDLParamTraits<mozilla::layers::CompositorAnimations>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->animations())))))) {
        aActor->FatalError("Error deserializing 'animations' (Animation[]) member of 'CompositorAnimations'");
        return false;
    }
    // Sentinel = 'animations'
    if ((!((aMsg)->ReadSentinel(aIter, 381617204)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'animations' (Animation[]) member of 'CompositorAnimations'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->id())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CommonLayerAttributes|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::CommonLayerAttributes>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).visibleRegion());
    // Sentinel = 'visibleRegion'
    (aMsg)->WriteSentinel(631178579);
    WriteIPDLParam(aMsg, aActor, (aVar).eventRegions());
    // Sentinel = 'eventRegions'
    (aMsg)->WriteSentinel(539559162);
    WriteIPDLParam(aMsg, aActor, (aVar).useClipRect());
    // Sentinel = 'useClipRect'
    (aMsg)->WriteSentinel(444597348);
    WriteIPDLParam(aMsg, aActor, (aVar).clipRect());
    // Sentinel = 'clipRect'
    (aMsg)->WriteSentinel(241894199);
    WriteIPDLParam(aMsg, aActor, (aVar).maskLayer());
    // Sentinel = 'maskLayer'
    (aMsg)->WriteSentinel(305398698);
    WriteIPDLParam(aMsg, aActor, (aVar).ancestorMaskLayers());
    // Sentinel = 'ancestorMaskLayers'
    (aMsg)->WriteSentinel(1167853404);
    WriteIPDLParam(aMsg, aActor, (aVar).compositorAnimations());
    // Sentinel = 'compositorAnimations'
    (aMsg)->WriteSentinel(1476724835);
    WriteIPDLParam(aMsg, aActor, (aVar).invalidRegion());
    // Sentinel = 'invalidRegion'
    (aMsg)->WriteSentinel(624821580);
    WriteIPDLParam(aMsg, aActor, (aVar).scrollMetadata());
    // Sentinel = 'scrollMetadata'
    (aMsg)->WriteSentinel(725878193);
    WriteIPDLParam(aMsg, aActor, (aVar).displayListLog());
    // Sentinel = 'displayListLog'
    (aMsg)->WriteSentinel(725222837);
}

auto IPDLParamTraits<mozilla::layers::CommonLayerAttributes>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->visibleRegion())))))) {
        aActor->FatalError("Error deserializing 'visibleRegion' (LayerIntRegion) member of 'CommonLayerAttributes'");
        return false;
    }
    // Sentinel = 'visibleRegion'
    if ((!((aMsg)->ReadSentinel(aIter, 631178579)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'visibleRegion' (LayerIntRegion) member of 'CommonLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->eventRegions())))))) {
        aActor->FatalError("Error deserializing 'eventRegions' (EventRegions) member of 'CommonLayerAttributes'");
        return false;
    }
    // Sentinel = 'eventRegions'
    if ((!((aMsg)->ReadSentinel(aIter, 539559162)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'eventRegions' (EventRegions) member of 'CommonLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->useClipRect())))))) {
        aActor->FatalError("Error deserializing 'useClipRect' (bool) member of 'CommonLayerAttributes'");
        return false;
    }
    // Sentinel = 'useClipRect'
    if ((!((aMsg)->ReadSentinel(aIter, 444597348)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'useClipRect' (bool) member of 'CommonLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->clipRect())))))) {
        aActor->FatalError("Error deserializing 'clipRect' (ParentLayerIntRect) member of 'CommonLayerAttributes'");
        return false;
    }
    // Sentinel = 'clipRect'
    if ((!((aMsg)->ReadSentinel(aIter, 241894199)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'clipRect' (ParentLayerIntRect) member of 'CommonLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->maskLayer())))))) {
        aActor->FatalError("Error deserializing 'maskLayer' (LayerHandle) member of 'CommonLayerAttributes'");
        return false;
    }
    // Sentinel = 'maskLayer'
    if ((!((aMsg)->ReadSentinel(aIter, 305398698)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'maskLayer' (LayerHandle) member of 'CommonLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ancestorMaskLayers())))))) {
        aActor->FatalError("Error deserializing 'ancestorMaskLayers' (LayerHandle[]) member of 'CommonLayerAttributes'");
        return false;
    }
    // Sentinel = 'ancestorMaskLayers'
    if ((!((aMsg)->ReadSentinel(aIter, 1167853404)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ancestorMaskLayers' (LayerHandle[]) member of 'CommonLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->compositorAnimations())))))) {
        aActor->FatalError("Error deserializing 'compositorAnimations' (CompositorAnimations) member of 'CommonLayerAttributes'");
        return false;
    }
    // Sentinel = 'compositorAnimations'
    if ((!((aMsg)->ReadSentinel(aIter, 1476724835)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'compositorAnimations' (CompositorAnimations) member of 'CommonLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->invalidRegion())))))) {
        aActor->FatalError("Error deserializing 'invalidRegion' (nsIntRegion) member of 'CommonLayerAttributes'");
        return false;
    }
    // Sentinel = 'invalidRegion'
    if ((!((aMsg)->ReadSentinel(aIter, 624821580)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'invalidRegion' (nsIntRegion) member of 'CommonLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->scrollMetadata())))))) {
        aActor->FatalError("Error deserializing 'scrollMetadata' (ScrollMetadata[]) member of 'CommonLayerAttributes'");
        return false;
    }
    // Sentinel = 'scrollMetadata'
    if ((!((aMsg)->ReadSentinel(aIter, 725878193)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'scrollMetadata' (ScrollMetadata[]) member of 'CommonLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->displayListLog())))))) {
        aActor->FatalError("Error deserializing 'displayListLog' (nsCString) member of 'CommonLayerAttributes'");
        return false;
    }
    // Sentinel = 'displayListLog'
    if ((!((aMsg)->ReadSentinel(aIter, 725222837)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'displayListLog' (nsCString) member of 'CommonLayerAttributes'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PaintedLayerAttributes|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PaintedLayerAttributes>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).validRegion());
    // Sentinel = 'validRegion'
    (aMsg)->WriteSentinel(448726133);
}

auto IPDLParamTraits<mozilla::layers::PaintedLayerAttributes>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->validRegion())))))) {
        aActor->FatalError("Error deserializing 'validRegion' (nsIntRegion) member of 'PaintedLayerAttributes'");
        return false;
    }
    // Sentinel = 'validRegion'
    if ((!((aMsg)->ReadSentinel(aIter, 448726133)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'validRegion' (nsIntRegion) member of 'PaintedLayerAttributes'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ContainerLayerAttributes|
//
namespace mozilla {
namespace layers {
auto ContainerLayerAttributes::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(ContainerLayerAttributes, presShellResolution_) - offsetof(ContainerLayerAttributes, preXScale_)) == 16,
        "Bad assumptions about field layout!");
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::ContainerLayerAttributes>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).preXScale())), 20);
    // Sentinel = 'preXScale | preYScale | inheritedXScale | inheritedYScale | presShellResolution'
    (aMsg)->WriteSentinel(2473336287);
}

auto IPDLParamTraits<mozilla::layers::ContainerLayerAttributes>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->preXScale())), 20)))) {
        aActor->FatalError("Error bulk reading fields from float");
        return false;
    }
    // Sentinel = 'preXScale | preYScale | inheritedXScale | inheritedYScale | presShellResolution'
    if ((!((aMsg)->ReadSentinel(aIter, 2473336287)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from float");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ColorLayerAttributes|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::ColorLayerAttributes>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).color());
    // Sentinel = 'color'
    (aMsg)->WriteSentinel(105120288);
    WriteIPDLParam(aMsg, aActor, (aVar).bounds());
    // Sentinel = 'bounds'
    (aMsg)->WriteSentinel(148243084);
}

auto IPDLParamTraits<mozilla::layers::ColorLayerAttributes>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->color())))))) {
        aActor->FatalError("Error deserializing 'color' (LayerColor) member of 'ColorLayerAttributes'");
        return false;
    }
    // Sentinel = 'color'
    if ((!((aMsg)->ReadSentinel(aIter, 105120288)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'color' (LayerColor) member of 'ColorLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->bounds())))))) {
        aActor->FatalError("Error deserializing 'bounds' (IntRect) member of 'ColorLayerAttributes'");
        return false;
    }
    // Sentinel = 'bounds'
    if ((!((aMsg)->ReadSentinel(aIter, 148243084)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bounds' (IntRect) member of 'ColorLayerAttributes'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CanvasLayerAttributes|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::CanvasLayerAttributes>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).samplingFilter());
    // Sentinel = 'samplingFilter'
    (aMsg)->WriteSentinel(726926786);
    WriteIPDLParam(aMsg, aActor, (aVar).bounds());
    // Sentinel = 'bounds'
    (aMsg)->WriteSentinel(148243084);
}

auto IPDLParamTraits<mozilla::layers::CanvasLayerAttributes>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->samplingFilter())))))) {
        aActor->FatalError("Error deserializing 'samplingFilter' (SamplingFilter) member of 'CanvasLayerAttributes'");
        return false;
    }
    // Sentinel = 'samplingFilter'
    if ((!((aMsg)->ReadSentinel(aIter, 726926786)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'samplingFilter' (SamplingFilter) member of 'CanvasLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->bounds())))))) {
        aActor->FatalError("Error deserializing 'bounds' (IntRect) member of 'CanvasLayerAttributes'");
        return false;
    }
    // Sentinel = 'bounds'
    if ((!((aMsg)->ReadSentinel(aIter, 148243084)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bounds' (IntRect) member of 'CanvasLayerAttributes'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RefLayerAttributes|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::RefLayerAttributes>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).id());
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
    WriteIPDLParam(aMsg, aActor, (aVar).eventRegionsOverride());
    // Sentinel = 'eventRegionsOverride'
    (aMsg)->WriteSentinel(1450379322);
    WriteIPDLParam(aMsg, aActor, (aVar).remoteDocumentSize());
    // Sentinel = 'remoteDocumentSize'
    (aMsg)->WriteSentinel(1181222759);
}

auto IPDLParamTraits<mozilla::layers::RefLayerAttributes>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->id())))))) {
        aActor->FatalError("Error deserializing 'id' (LayersId) member of 'RefLayerAttributes'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'id' (LayersId) member of 'RefLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->eventRegionsOverride())))))) {
        aActor->FatalError("Error deserializing 'eventRegionsOverride' (EventRegionsOverride) member of 'RefLayerAttributes'");
        return false;
    }
    // Sentinel = 'eventRegionsOverride'
    if ((!((aMsg)->ReadSentinel(aIter, 1450379322)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'eventRegionsOverride' (EventRegionsOverride) member of 'RefLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->remoteDocumentSize())))))) {
        aActor->FatalError("Error deserializing 'remoteDocumentSize' (LayerIntSize) member of 'RefLayerAttributes'");
        return false;
    }
    // Sentinel = 'remoteDocumentSize'
    if ((!((aMsg)->ReadSentinel(aIter, 1181222759)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'remoteDocumentSize' (LayerIntSize) member of 'RefLayerAttributes'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ImageLayerAttributes|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::ImageLayerAttributes>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).samplingFilter());
    // Sentinel = 'samplingFilter'
    (aMsg)->WriteSentinel(726926786);
    WriteIPDLParam(aMsg, aActor, (aVar).scaleToSize());
    // Sentinel = 'scaleToSize'
    (aMsg)->WriteSentinel(443090023);
    WriteIPDLParam(aMsg, aActor, (aVar).scaleMode());
    // Sentinel = 'scaleMode'
    (aMsg)->WriteSentinel(302121870);
}

auto IPDLParamTraits<mozilla::layers::ImageLayerAttributes>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->samplingFilter())))))) {
        aActor->FatalError("Error deserializing 'samplingFilter' (SamplingFilter) member of 'ImageLayerAttributes'");
        return false;
    }
    // Sentinel = 'samplingFilter'
    if ((!((aMsg)->ReadSentinel(aIter, 726926786)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'samplingFilter' (SamplingFilter) member of 'ImageLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->scaleToSize())))))) {
        aActor->FatalError("Error deserializing 'scaleToSize' (IntSize) member of 'ImageLayerAttributes'");
        return false;
    }
    // Sentinel = 'scaleToSize'
    if ((!((aMsg)->ReadSentinel(aIter, 443090023)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'scaleToSize' (IntSize) member of 'ImageLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->scaleMode())))))) {
        aActor->FatalError("Error deserializing 'scaleMode' (ScaleMode) member of 'ImageLayerAttributes'");
        return false;
    }
    // Sentinel = 'scaleMode'
    if ((!((aMsg)->ReadSentinel(aIter, 302121870)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'scaleMode' (ScaleMode) member of 'ImageLayerAttributes'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union SpecificLayerAttributes|
//
namespace mozilla {
namespace layers {
auto SpecificLayerAttributes::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tnull_t:
        {
            (ptr_null_t())->~null_t__tdef();
            break;
        }
    case TPaintedLayerAttributes:
        {
            (ptr_PaintedLayerAttributes())->~PaintedLayerAttributes__tdef();
            break;
        }
    case TContainerLayerAttributes:
        {
            (ptr_ContainerLayerAttributes())->~ContainerLayerAttributes__tdef();
            break;
        }
    case TColorLayerAttributes:
        {
            (ptr_ColorLayerAttributes())->~ColorLayerAttributes__tdef();
            break;
        }
    case TCanvasLayerAttributes:
        {
            (ptr_CanvasLayerAttributes())->~CanvasLayerAttributes__tdef();
            break;
        }
    case TRefLayerAttributes:
        {
            (ptr_RefLayerAttributes())->~RefLayerAttributes__tdef();
            break;
        }
    case TImageLayerAttributes:
        {
            (ptr_ImageLayerAttributes())->~ImageLayerAttributes__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT SpecificLayerAttributes::SpecificLayerAttributes(const null_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(aOther);
    mType = Tnull_t;
}

MOZ_IMPLICIT SpecificLayerAttributes::SpecificLayerAttributes(null_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move(aOther));
    mType = Tnull_t;
}

MOZ_IMPLICIT SpecificLayerAttributes::SpecificLayerAttributes(const PaintedLayerAttributes& aOther)
{
    new (mozilla::KnownNotNull, ptr_PaintedLayerAttributes()) PaintedLayerAttributes(aOther);
    mType = TPaintedLayerAttributes;
}

MOZ_IMPLICIT SpecificLayerAttributes::SpecificLayerAttributes(PaintedLayerAttributes&& aOther)
{
    new (mozilla::KnownNotNull, ptr_PaintedLayerAttributes()) PaintedLayerAttributes(std::move(aOther));
    mType = TPaintedLayerAttributes;
}

MOZ_IMPLICIT SpecificLayerAttributes::SpecificLayerAttributes(const ContainerLayerAttributes& aOther)
{
    new (mozilla::KnownNotNull, ptr_ContainerLayerAttributes()) ContainerLayerAttributes(aOther);
    mType = TContainerLayerAttributes;
}

MOZ_IMPLICIT SpecificLayerAttributes::SpecificLayerAttributes(ContainerLayerAttributes&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ContainerLayerAttributes()) ContainerLayerAttributes(std::move(aOther));
    mType = TContainerLayerAttributes;
}

MOZ_IMPLICIT SpecificLayerAttributes::SpecificLayerAttributes(const ColorLayerAttributes& aOther)
{
    new (mozilla::KnownNotNull, ptr_ColorLayerAttributes()) ColorLayerAttributes(aOther);
    mType = TColorLayerAttributes;
}

MOZ_IMPLICIT SpecificLayerAttributes::SpecificLayerAttributes(ColorLayerAttributes&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ColorLayerAttributes()) ColorLayerAttributes(std::move(aOther));
    mType = TColorLayerAttributes;
}

MOZ_IMPLICIT SpecificLayerAttributes::SpecificLayerAttributes(const CanvasLayerAttributes& aOther)
{
    new (mozilla::KnownNotNull, ptr_CanvasLayerAttributes()) CanvasLayerAttributes(aOther);
    mType = TCanvasLayerAttributes;
}

MOZ_IMPLICIT SpecificLayerAttributes::SpecificLayerAttributes(CanvasLayerAttributes&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CanvasLayerAttributes()) CanvasLayerAttributes(std::move(aOther));
    mType = TCanvasLayerAttributes;
}

MOZ_IMPLICIT SpecificLayerAttributes::SpecificLayerAttributes(const RefLayerAttributes& aOther)
{
    new (mozilla::KnownNotNull, ptr_RefLayerAttributes()) RefLayerAttributes(aOther);
    mType = TRefLayerAttributes;
}

MOZ_IMPLICIT SpecificLayerAttributes::SpecificLayerAttributes(RefLayerAttributes&& aOther)
{
    new (mozilla::KnownNotNull, ptr_RefLayerAttributes()) RefLayerAttributes(std::move(aOther));
    mType = TRefLayerAttributes;
}

MOZ_IMPLICIT SpecificLayerAttributes::SpecificLayerAttributes(const ImageLayerAttributes& aOther)
{
    new (mozilla::KnownNotNull, ptr_ImageLayerAttributes()) ImageLayerAttributes(aOther);
    mType = TImageLayerAttributes;
}

MOZ_IMPLICIT SpecificLayerAttributes::SpecificLayerAttributes(ImageLayerAttributes&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ImageLayerAttributes()) ImageLayerAttributes(std::move(aOther));
    mType = TImageLayerAttributes;
}

MOZ_IMPLICIT SpecificLayerAttributes::SpecificLayerAttributes(const SpecificLayerAttributes& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t((aOther).get_null_t());
            break;
        }
    case TPaintedLayerAttributes:
        {
            new (mozilla::KnownNotNull, ptr_PaintedLayerAttributes()) PaintedLayerAttributes((aOther).get_PaintedLayerAttributes());
            break;
        }
    case TContainerLayerAttributes:
        {
            new (mozilla::KnownNotNull, ptr_ContainerLayerAttributes()) ContainerLayerAttributes((aOther).get_ContainerLayerAttributes());
            break;
        }
    case TColorLayerAttributes:
        {
            new (mozilla::KnownNotNull, ptr_ColorLayerAttributes()) ColorLayerAttributes((aOther).get_ColorLayerAttributes());
            break;
        }
    case TCanvasLayerAttributes:
        {
            new (mozilla::KnownNotNull, ptr_CanvasLayerAttributes()) CanvasLayerAttributes((aOther).get_CanvasLayerAttributes());
            break;
        }
    case TRefLayerAttributes:
        {
            new (mozilla::KnownNotNull, ptr_RefLayerAttributes()) RefLayerAttributes((aOther).get_RefLayerAttributes());
            break;
        }
    case TImageLayerAttributes:
        {
            new (mozilla::KnownNotNull, ptr_ImageLayerAttributes()) ImageLayerAttributes((aOther).get_ImageLayerAttributes());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT SpecificLayerAttributes::SpecificLayerAttributes(SpecificLayerAttributes&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move((aOther).get_null_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPaintedLayerAttributes:
        {
            new (mozilla::KnownNotNull, ptr_PaintedLayerAttributes()) PaintedLayerAttributes(std::move((aOther).get_PaintedLayerAttributes()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TContainerLayerAttributes:
        {
            new (mozilla::KnownNotNull, ptr_ContainerLayerAttributes()) ContainerLayerAttributes(std::move((aOther).get_ContainerLayerAttributes()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TColorLayerAttributes:
        {
            new (mozilla::KnownNotNull, ptr_ColorLayerAttributes()) ColorLayerAttributes(std::move((aOther).get_ColorLayerAttributes()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCanvasLayerAttributes:
        {
            new (mozilla::KnownNotNull, ptr_CanvasLayerAttributes()) CanvasLayerAttributes(std::move((aOther).get_CanvasLayerAttributes()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TRefLayerAttributes:
        {
            new (mozilla::KnownNotNull, ptr_RefLayerAttributes()) RefLayerAttributes(std::move((aOther).get_RefLayerAttributes()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TImageLayerAttributes:
        {
            new (mozilla::KnownNotNull, ptr_ImageLayerAttributes()) ImageLayerAttributes(std::move((aOther).get_ImageLayerAttributes()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

SpecificLayerAttributes::~SpecificLayerAttributes()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto SpecificLayerAttributes::operator=(const null_t& aRhs) -> SpecificLayerAttributes&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = aRhs;
    mType = Tnull_t;
    return (*(this));
}

auto SpecificLayerAttributes::operator=(null_t&& aRhs) -> SpecificLayerAttributes&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = std::move(aRhs);
    mType = Tnull_t;
    return (*(this));
}

auto SpecificLayerAttributes::operator=(const PaintedLayerAttributes& aRhs) -> SpecificLayerAttributes&
{
    if (MaybeDestroy(TPaintedLayerAttributes)) {
        new (mozilla::KnownNotNull, ptr_PaintedLayerAttributes()) PaintedLayerAttributes;
    }
    (*(ptr_PaintedLayerAttributes())) = aRhs;
    mType = TPaintedLayerAttributes;
    return (*(this));
}

auto SpecificLayerAttributes::operator=(PaintedLayerAttributes&& aRhs) -> SpecificLayerAttributes&
{
    if (MaybeDestroy(TPaintedLayerAttributes)) {
        new (mozilla::KnownNotNull, ptr_PaintedLayerAttributes()) PaintedLayerAttributes;
    }
    (*(ptr_PaintedLayerAttributes())) = std::move(aRhs);
    mType = TPaintedLayerAttributes;
    return (*(this));
}

auto SpecificLayerAttributes::operator=(const ContainerLayerAttributes& aRhs) -> SpecificLayerAttributes&
{
    if (MaybeDestroy(TContainerLayerAttributes)) {
        new (mozilla::KnownNotNull, ptr_ContainerLayerAttributes()) ContainerLayerAttributes;
    }
    (*(ptr_ContainerLayerAttributes())) = aRhs;
    mType = TContainerLayerAttributes;
    return (*(this));
}

auto SpecificLayerAttributes::operator=(ContainerLayerAttributes&& aRhs) -> SpecificLayerAttributes&
{
    if (MaybeDestroy(TContainerLayerAttributes)) {
        new (mozilla::KnownNotNull, ptr_ContainerLayerAttributes()) ContainerLayerAttributes;
    }
    (*(ptr_ContainerLayerAttributes())) = std::move(aRhs);
    mType = TContainerLayerAttributes;
    return (*(this));
}

auto SpecificLayerAttributes::operator=(const ColorLayerAttributes& aRhs) -> SpecificLayerAttributes&
{
    if (MaybeDestroy(TColorLayerAttributes)) {
        new (mozilla::KnownNotNull, ptr_ColorLayerAttributes()) ColorLayerAttributes;
    }
    (*(ptr_ColorLayerAttributes())) = aRhs;
    mType = TColorLayerAttributes;
    return (*(this));
}

auto SpecificLayerAttributes::operator=(ColorLayerAttributes&& aRhs) -> SpecificLayerAttributes&
{
    if (MaybeDestroy(TColorLayerAttributes)) {
        new (mozilla::KnownNotNull, ptr_ColorLayerAttributes()) ColorLayerAttributes;
    }
    (*(ptr_ColorLayerAttributes())) = std::move(aRhs);
    mType = TColorLayerAttributes;
    return (*(this));
}

auto SpecificLayerAttributes::operator=(const CanvasLayerAttributes& aRhs) -> SpecificLayerAttributes&
{
    if (MaybeDestroy(TCanvasLayerAttributes)) {
        new (mozilla::KnownNotNull, ptr_CanvasLayerAttributes()) CanvasLayerAttributes;
    }
    (*(ptr_CanvasLayerAttributes())) = aRhs;
    mType = TCanvasLayerAttributes;
    return (*(this));
}

auto SpecificLayerAttributes::operator=(CanvasLayerAttributes&& aRhs) -> SpecificLayerAttributes&
{
    if (MaybeDestroy(TCanvasLayerAttributes)) {
        new (mozilla::KnownNotNull, ptr_CanvasLayerAttributes()) CanvasLayerAttributes;
    }
    (*(ptr_CanvasLayerAttributes())) = std::move(aRhs);
    mType = TCanvasLayerAttributes;
    return (*(this));
}

auto SpecificLayerAttributes::operator=(const RefLayerAttributes& aRhs) -> SpecificLayerAttributes&
{
    if (MaybeDestroy(TRefLayerAttributes)) {
        new (mozilla::KnownNotNull, ptr_RefLayerAttributes()) RefLayerAttributes;
    }
    (*(ptr_RefLayerAttributes())) = aRhs;
    mType = TRefLayerAttributes;
    return (*(this));
}

auto SpecificLayerAttributes::operator=(RefLayerAttributes&& aRhs) -> SpecificLayerAttributes&
{
    if (MaybeDestroy(TRefLayerAttributes)) {
        new (mozilla::KnownNotNull, ptr_RefLayerAttributes()) RefLayerAttributes;
    }
    (*(ptr_RefLayerAttributes())) = std::move(aRhs);
    mType = TRefLayerAttributes;
    return (*(this));
}

auto SpecificLayerAttributes::operator=(const ImageLayerAttributes& aRhs) -> SpecificLayerAttributes&
{
    if (MaybeDestroy(TImageLayerAttributes)) {
        new (mozilla::KnownNotNull, ptr_ImageLayerAttributes()) ImageLayerAttributes;
    }
    (*(ptr_ImageLayerAttributes())) = aRhs;
    mType = TImageLayerAttributes;
    return (*(this));
}

auto SpecificLayerAttributes::operator=(ImageLayerAttributes&& aRhs) -> SpecificLayerAttributes&
{
    if (MaybeDestroy(TImageLayerAttributes)) {
        new (mozilla::KnownNotNull, ptr_ImageLayerAttributes()) ImageLayerAttributes;
    }
    (*(ptr_ImageLayerAttributes())) = std::move(aRhs);
    mType = TImageLayerAttributes;
    return (*(this));
}

auto SpecificLayerAttributes::operator=(const SpecificLayerAttributes& aRhs) -> SpecificLayerAttributes&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = (aRhs).get_null_t();
            break;
        }
    case TPaintedLayerAttributes:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PaintedLayerAttributes()) PaintedLayerAttributes;
            }
            (*(ptr_PaintedLayerAttributes())) = (aRhs).get_PaintedLayerAttributes();
            break;
        }
    case TContainerLayerAttributes:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ContainerLayerAttributes()) ContainerLayerAttributes;
            }
            (*(ptr_ContainerLayerAttributes())) = (aRhs).get_ContainerLayerAttributes();
            break;
        }
    case TColorLayerAttributes:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ColorLayerAttributes()) ColorLayerAttributes;
            }
            (*(ptr_ColorLayerAttributes())) = (aRhs).get_ColorLayerAttributes();
            break;
        }
    case TCanvasLayerAttributes:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CanvasLayerAttributes()) CanvasLayerAttributes;
            }
            (*(ptr_CanvasLayerAttributes())) = (aRhs).get_CanvasLayerAttributes();
            break;
        }
    case TRefLayerAttributes:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RefLayerAttributes()) RefLayerAttributes;
            }
            (*(ptr_RefLayerAttributes())) = (aRhs).get_RefLayerAttributes();
            break;
        }
    case TImageLayerAttributes:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ImageLayerAttributes()) ImageLayerAttributes;
            }
            (*(ptr_ImageLayerAttributes())) = (aRhs).get_ImageLayerAttributes();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto SpecificLayerAttributes::operator=(SpecificLayerAttributes&& aRhs) -> SpecificLayerAttributes&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = std::move((aRhs).get_null_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPaintedLayerAttributes:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PaintedLayerAttributes()) PaintedLayerAttributes;
            }
            (*(ptr_PaintedLayerAttributes())) = std::move((aRhs).get_PaintedLayerAttributes());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TContainerLayerAttributes:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ContainerLayerAttributes()) ContainerLayerAttributes;
            }
            (*(ptr_ContainerLayerAttributes())) = std::move((aRhs).get_ContainerLayerAttributes());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TColorLayerAttributes:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ColorLayerAttributes()) ColorLayerAttributes;
            }
            (*(ptr_ColorLayerAttributes())) = std::move((aRhs).get_ColorLayerAttributes());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCanvasLayerAttributes:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CanvasLayerAttributes()) CanvasLayerAttributes;
            }
            (*(ptr_CanvasLayerAttributes())) = std::move((aRhs).get_CanvasLayerAttributes());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TRefLayerAttributes:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RefLayerAttributes()) RefLayerAttributes;
            }
            (*(ptr_RefLayerAttributes())) = std::move((aRhs).get_RefLayerAttributes());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TImageLayerAttributes:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ImageLayerAttributes()) ImageLayerAttributes;
            }
            (*(ptr_ImageLayerAttributes())) = std::move((aRhs).get_ImageLayerAttributes());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SpecificLayerAttributes>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::SpecificLayerAttributes union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'SpecificLayerAttributes'
    (aMsg)->WriteSentinel(1828915531);

    switch (type) {
    case union__::Tnull_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_null_t());
            // Sentinel = 'Tnull_t'
            (aMsg)->WriteSentinel(190186211);
            return;
        }
    case union__::TPaintedLayerAttributes:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_PaintedLayerAttributes());
            // Sentinel = 'TPaintedLayerAttributes'
            (aMsg)->WriteSentinel(1805977918);
            return;
        }
    case union__::TContainerLayerAttributes:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ContainerLayerAttributes());
            // Sentinel = 'TContainerLayerAttributes'
            (aMsg)->WriteSentinel(2150107676);
            return;
        }
    case union__::TColorLayerAttributes:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ColorLayerAttributes());
            // Sentinel = 'TColorLayerAttributes'
            (aMsg)->WriteSentinel(1513818232);
            return;
        }
    case union__::TCanvasLayerAttributes:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CanvasLayerAttributes());
            // Sentinel = 'TCanvasLayerAttributes'
            (aMsg)->WriteSentinel(1646921941);
            return;
        }
    case union__::TRefLayerAttributes:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_RefLayerAttributes());
            // Sentinel = 'TRefLayerAttributes'
            (aMsg)->WriteSentinel(1222248342);
            return;
        }
    case union__::TImageLayerAttributes:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ImageLayerAttributes());
            // Sentinel = 'TImageLayerAttributes'
            (aMsg)->WriteSentinel(1483671644);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::SpecificLayerAttributes>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::SpecificLayerAttributes union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union SpecificLayerAttributes");
        return false;
    }
    // Sentinel = 'SpecificLayerAttributes'
    if ((!((aMsg)->ReadSentinel(aIter, 1828915531)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union SpecificLayerAttributes");
        return false;
    }

    switch (type) {
    case union__::Tnull_t:
        {
            mozilla::null_t tmp = mozilla::null_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_null_t())))))) {
                aActor->FatalError("Error deserializing variant Tnull_t of union SpecificLayerAttributes");
                return false;
            }
            // Sentinel = 'Tnull_t'
            if ((!((aMsg)->ReadSentinel(aIter, 190186211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnull_t of union SpecificLayerAttributes");
                return false;
            }
            return true;
        }
    case union__::TPaintedLayerAttributes:
        {
            mozilla::layers::PaintedLayerAttributes tmp = mozilla::layers::PaintedLayerAttributes();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PaintedLayerAttributes())))))) {
                aActor->FatalError("Error deserializing variant TPaintedLayerAttributes of union SpecificLayerAttributes");
                return false;
            }
            // Sentinel = 'TPaintedLayerAttributes'
            if ((!((aMsg)->ReadSentinel(aIter, 1805977918)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPaintedLayerAttributes of union SpecificLayerAttributes");
                return false;
            }
            return true;
        }
    case union__::TContainerLayerAttributes:
        {
            mozilla::layers::ContainerLayerAttributes tmp = mozilla::layers::ContainerLayerAttributes();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ContainerLayerAttributes())))))) {
                aActor->FatalError("Error deserializing variant TContainerLayerAttributes of union SpecificLayerAttributes");
                return false;
            }
            // Sentinel = 'TContainerLayerAttributes'
            if ((!((aMsg)->ReadSentinel(aIter, 2150107676)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TContainerLayerAttributes of union SpecificLayerAttributes");
                return false;
            }
            return true;
        }
    case union__::TColorLayerAttributes:
        {
            mozilla::layers::ColorLayerAttributes tmp = mozilla::layers::ColorLayerAttributes();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ColorLayerAttributes())))))) {
                aActor->FatalError("Error deserializing variant TColorLayerAttributes of union SpecificLayerAttributes");
                return false;
            }
            // Sentinel = 'TColorLayerAttributes'
            if ((!((aMsg)->ReadSentinel(aIter, 1513818232)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TColorLayerAttributes of union SpecificLayerAttributes");
                return false;
            }
            return true;
        }
    case union__::TCanvasLayerAttributes:
        {
            mozilla::layers::CanvasLayerAttributes tmp = mozilla::layers::CanvasLayerAttributes();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CanvasLayerAttributes())))))) {
                aActor->FatalError("Error deserializing variant TCanvasLayerAttributes of union SpecificLayerAttributes");
                return false;
            }
            // Sentinel = 'TCanvasLayerAttributes'
            if ((!((aMsg)->ReadSentinel(aIter, 1646921941)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCanvasLayerAttributes of union SpecificLayerAttributes");
                return false;
            }
            return true;
        }
    case union__::TRefLayerAttributes:
        {
            mozilla::layers::RefLayerAttributes tmp = mozilla::layers::RefLayerAttributes();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_RefLayerAttributes())))))) {
                aActor->FatalError("Error deserializing variant TRefLayerAttributes of union SpecificLayerAttributes");
                return false;
            }
            // Sentinel = 'TRefLayerAttributes'
            if ((!((aMsg)->ReadSentinel(aIter, 1222248342)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TRefLayerAttributes of union SpecificLayerAttributes");
                return false;
            }
            return true;
        }
    case union__::TImageLayerAttributes:
        {
            mozilla::layers::ImageLayerAttributes tmp = mozilla::layers::ImageLayerAttributes();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ImageLayerAttributes())))))) {
                aActor->FatalError("Error deserializing variant TImageLayerAttributes of union SpecificLayerAttributes");
                return false;
            }
            // Sentinel = 'TImageLayerAttributes'
            if ((!((aMsg)->ReadSentinel(aIter, 1483671644)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TImageLayerAttributes of union SpecificLayerAttributes");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LayerAttributes|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::LayerAttributes>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).common());
    // Sentinel = 'common'
    (aMsg)->WriteSentinel(147456650);
    WriteIPDLParam(aMsg, aActor, (aVar).specific());
    // Sentinel = 'specific'
    (aMsg)->WriteSentinel(252183367);
}

auto IPDLParamTraits<mozilla::layers::LayerAttributes>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->common())))))) {
        aActor->FatalError("Error deserializing 'common' (CommonLayerAttributes) member of 'LayerAttributes'");
        return false;
    }
    // Sentinel = 'common'
    if ((!((aMsg)->ReadSentinel(aIter, 147456650)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'common' (CommonLayerAttributes) member of 'LayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->specific())))))) {
        aActor->FatalError("Error deserializing 'specific' (SpecificLayerAttributes) member of 'LayerAttributes'");
        return false;
    }
    // Sentinel = 'specific'
    if ((!((aMsg)->ReadSentinel(aIter, 252183367)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'specific' (SpecificLayerAttributes) member of 'LayerAttributes'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PluginWindowData|
//
namespace mozilla {
namespace layers {
auto PluginWindowData::operator==(const PluginWindowData& _o) const -> bool
{
    if ((!((windowId()) == ((_o).windowId())))) {
        return false;
    }
    if ((!((clip()) == ((_o).clip())))) {
        return false;
    }
    if ((!((bounds()) == ((_o).bounds())))) {
        return false;
    }
    if ((!((visible()) == ((_o).visible())))) {
        return false;
    }
    return true;
}

auto PluginWindowData::operator!=(const PluginWindowData& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PluginWindowData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).windowId());
    // Sentinel = 'windowId'
    (aMsg)->WriteSentinel(255722310);
    WriteIPDLParam(aMsg, aActor, (aVar).clip());
    // Sentinel = 'clip'
    (aMsg)->WriteSentinel(68551081);
    WriteIPDLParam(aMsg, aActor, (aVar).bounds());
    // Sentinel = 'bounds'
    (aMsg)->WriteSentinel(148243084);
    WriteIPDLParam(aMsg, aActor, (aVar).visible());
    // Sentinel = 'visible'
    (aMsg)->WriteSentinel(201130735);
}

auto IPDLParamTraits<mozilla::layers::PluginWindowData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->windowId())))))) {
        aActor->FatalError("Error deserializing 'windowId' (uintptr_t) member of 'PluginWindowData'");
        return false;
    }
    // Sentinel = 'windowId'
    if ((!((aMsg)->ReadSentinel(aIter, 255722310)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'windowId' (uintptr_t) member of 'PluginWindowData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->clip())))))) {
        aActor->FatalError("Error deserializing 'clip' (LayoutDeviceIntRect[]) member of 'PluginWindowData'");
        return false;
    }
    // Sentinel = 'clip'
    if ((!((aMsg)->ReadSentinel(aIter, 68551081)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'clip' (LayoutDeviceIntRect[]) member of 'PluginWindowData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->bounds())))))) {
        aActor->FatalError("Error deserializing 'bounds' (LayoutDeviceIntRect) member of 'PluginWindowData'");
        return false;
    }
    // Sentinel = 'bounds'
    if ((!((aMsg)->ReadSentinel(aIter, 148243084)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bounds' (LayoutDeviceIntRect) member of 'PluginWindowData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->visible())))))) {
        aActor->FatalError("Error deserializing 'visible' (bool) member of 'PluginWindowData'");
        return false;
    }
    // Sentinel = 'visible'
    if ((!((aMsg)->ReadSentinel(aIter, 201130735)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'visible' (bool) member of 'PluginWindowData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpSetSimpleLayerAttributes|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpSetSimpleLayerAttributes>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).layer());
    // Sentinel = 'layer'
    (aMsg)->WriteSentinel(105644574);
    WriteIPDLParam(aMsg, aActor, (aVar).attrs());
    // Sentinel = 'attrs'
    (aMsg)->WriteSentinel(107807279);
}

auto IPDLParamTraits<mozilla::layers::OpSetSimpleLayerAttributes>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->layer())))))) {
        aActor->FatalError("Error deserializing 'layer' (LayerHandle) member of 'OpSetSimpleLayerAttributes'");
        return false;
    }
    // Sentinel = 'layer'
    if ((!((aMsg)->ReadSentinel(aIter, 105644574)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'layer' (LayerHandle) member of 'OpSetSimpleLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->attrs())))))) {
        aActor->FatalError("Error deserializing 'attrs' (SimpleLayerAttributes) member of 'OpSetSimpleLayerAttributes'");
        return false;
    }
    // Sentinel = 'attrs'
    if ((!((aMsg)->ReadSentinel(aIter, 107807279)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'attrs' (SimpleLayerAttributes) member of 'OpSetSimpleLayerAttributes'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpSetLayerAttributes|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpSetLayerAttributes>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).layer());
    // Sentinel = 'layer'
    (aMsg)->WriteSentinel(105644574);
    WriteIPDLParam(aMsg, aActor, (aVar).attrs());
    // Sentinel = 'attrs'
    (aMsg)->WriteSentinel(107807279);
}

auto IPDLParamTraits<mozilla::layers::OpSetLayerAttributes>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->layer())))))) {
        aActor->FatalError("Error deserializing 'layer' (LayerHandle) member of 'OpSetLayerAttributes'");
        return false;
    }
    // Sentinel = 'layer'
    if ((!((aMsg)->ReadSentinel(aIter, 105644574)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'layer' (LayerHandle) member of 'OpSetLayerAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->attrs())))))) {
        aActor->FatalError("Error deserializing 'attrs' (LayerAttributes) member of 'OpSetLayerAttributes'");
        return false;
    }
    // Sentinel = 'attrs'
    if ((!((aMsg)->ReadSentinel(aIter, 107807279)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'attrs' (LayerAttributes) member of 'OpSetLayerAttributes'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpSetRoot|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpSetRoot>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).root());
    // Sentinel = 'root'
    (aMsg)->WriteSentinel(74121669);
}

auto IPDLParamTraits<mozilla::layers::OpSetRoot>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->root())))))) {
        aActor->FatalError("Error deserializing 'root' (LayerHandle) member of 'OpSetRoot'");
        return false;
    }
    // Sentinel = 'root'
    if ((!((aMsg)->ReadSentinel(aIter, 74121669)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'root' (LayerHandle) member of 'OpSetRoot'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpInsertAfter|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpInsertAfter>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).container());
    // Sentinel = 'container'
    (aMsg)->WriteSentinel(314901444);
    WriteIPDLParam(aMsg, aActor, (aVar).childLayer());
    // Sentinel = 'childLayer'
    (aMsg)->WriteSentinel(365626370);
    WriteIPDLParam(aMsg, aActor, (aVar).after());
    // Sentinel = 'after'
    (aMsg)->WriteSentinel(102367763);
}

auto IPDLParamTraits<mozilla::layers::OpInsertAfter>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->container())))))) {
        aActor->FatalError("Error deserializing 'container' (LayerHandle) member of 'OpInsertAfter'");
        return false;
    }
    // Sentinel = 'container'
    if ((!((aMsg)->ReadSentinel(aIter, 314901444)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'container' (LayerHandle) member of 'OpInsertAfter'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->childLayer())))))) {
        aActor->FatalError("Error deserializing 'childLayer' (LayerHandle) member of 'OpInsertAfter'");
        return false;
    }
    // Sentinel = 'childLayer'
    if ((!((aMsg)->ReadSentinel(aIter, 365626370)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'childLayer' (LayerHandle) member of 'OpInsertAfter'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->after())))))) {
        aActor->FatalError("Error deserializing 'after' (LayerHandle) member of 'OpInsertAfter'");
        return false;
    }
    // Sentinel = 'after'
    if ((!((aMsg)->ReadSentinel(aIter, 102367763)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'after' (LayerHandle) member of 'OpInsertAfter'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpPrependChild|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpPrependChild>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).container());
    // Sentinel = 'container'
    (aMsg)->WriteSentinel(314901444);
    WriteIPDLParam(aMsg, aActor, (aVar).childLayer());
    // Sentinel = 'childLayer'
    (aMsg)->WriteSentinel(365626370);
}

auto IPDLParamTraits<mozilla::layers::OpPrependChild>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->container())))))) {
        aActor->FatalError("Error deserializing 'container' (LayerHandle) member of 'OpPrependChild'");
        return false;
    }
    // Sentinel = 'container'
    if ((!((aMsg)->ReadSentinel(aIter, 314901444)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'container' (LayerHandle) member of 'OpPrependChild'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->childLayer())))))) {
        aActor->FatalError("Error deserializing 'childLayer' (LayerHandle) member of 'OpPrependChild'");
        return false;
    }
    // Sentinel = 'childLayer'
    if ((!((aMsg)->ReadSentinel(aIter, 365626370)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'childLayer' (LayerHandle) member of 'OpPrependChild'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpRemoveChild|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpRemoveChild>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).container());
    // Sentinel = 'container'
    (aMsg)->WriteSentinel(314901444);
    WriteIPDLParam(aMsg, aActor, (aVar).childLayer());
    // Sentinel = 'childLayer'
    (aMsg)->WriteSentinel(365626370);
}

auto IPDLParamTraits<mozilla::layers::OpRemoveChild>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->container())))))) {
        aActor->FatalError("Error deserializing 'container' (LayerHandle) member of 'OpRemoveChild'");
        return false;
    }
    // Sentinel = 'container'
    if ((!((aMsg)->ReadSentinel(aIter, 314901444)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'container' (LayerHandle) member of 'OpRemoveChild'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->childLayer())))))) {
        aActor->FatalError("Error deserializing 'childLayer' (LayerHandle) member of 'OpRemoveChild'");
        return false;
    }
    // Sentinel = 'childLayer'
    if ((!((aMsg)->ReadSentinel(aIter, 365626370)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'childLayer' (LayerHandle) member of 'OpRemoveChild'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpRepositionChild|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpRepositionChild>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).container());
    // Sentinel = 'container'
    (aMsg)->WriteSentinel(314901444);
    WriteIPDLParam(aMsg, aActor, (aVar).childLayer());
    // Sentinel = 'childLayer'
    (aMsg)->WriteSentinel(365626370);
    WriteIPDLParam(aMsg, aActor, (aVar).after());
    // Sentinel = 'after'
    (aMsg)->WriteSentinel(102367763);
}

auto IPDLParamTraits<mozilla::layers::OpRepositionChild>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->container())))))) {
        aActor->FatalError("Error deserializing 'container' (LayerHandle) member of 'OpRepositionChild'");
        return false;
    }
    // Sentinel = 'container'
    if ((!((aMsg)->ReadSentinel(aIter, 314901444)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'container' (LayerHandle) member of 'OpRepositionChild'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->childLayer())))))) {
        aActor->FatalError("Error deserializing 'childLayer' (LayerHandle) member of 'OpRepositionChild'");
        return false;
    }
    // Sentinel = 'childLayer'
    if ((!((aMsg)->ReadSentinel(aIter, 365626370)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'childLayer' (LayerHandle) member of 'OpRepositionChild'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->after())))))) {
        aActor->FatalError("Error deserializing 'after' (LayerHandle) member of 'OpRepositionChild'");
        return false;
    }
    // Sentinel = 'after'
    if ((!((aMsg)->ReadSentinel(aIter, 102367763)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'after' (LayerHandle) member of 'OpRepositionChild'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpRaiseToTopChild|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpRaiseToTopChild>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).container());
    // Sentinel = 'container'
    (aMsg)->WriteSentinel(314901444);
    WriteIPDLParam(aMsg, aActor, (aVar).childLayer());
    // Sentinel = 'childLayer'
    (aMsg)->WriteSentinel(365626370);
}

auto IPDLParamTraits<mozilla::layers::OpRaiseToTopChild>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->container())))))) {
        aActor->FatalError("Error deserializing 'container' (LayerHandle) member of 'OpRaiseToTopChild'");
        return false;
    }
    // Sentinel = 'container'
    if ((!((aMsg)->ReadSentinel(aIter, 314901444)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'container' (LayerHandle) member of 'OpRaiseToTopChild'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->childLayer())))))) {
        aActor->FatalError("Error deserializing 'childLayer' (LayerHandle) member of 'OpRaiseToTopChild'");
        return false;
    }
    // Sentinel = 'childLayer'
    if ((!((aMsg)->ReadSentinel(aIter, 365626370)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'childLayer' (LayerHandle) member of 'OpRaiseToTopChild'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpSetDiagnosticTypes|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpSetDiagnosticTypes>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).diagnostics());
    // Sentinel = 'diagnostics'
    (aMsg)->WriteSentinel(456197273);
}

auto IPDLParamTraits<mozilla::layers::OpSetDiagnosticTypes>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->diagnostics())))))) {
        aActor->FatalError("Error deserializing 'diagnostics' (DiagnosticTypes) member of 'OpSetDiagnosticTypes'");
        return false;
    }
    // Sentinel = 'diagnostics'
    if ((!((aMsg)->ReadSentinel(aIter, 456197273)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'diagnostics' (DiagnosticTypes) member of 'OpSetDiagnosticTypes'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ShmemSection|
//
namespace mozilla {
namespace layers {
auto ShmemSection::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(ShmemSection, size_) - offsetof(ShmemSection, offset_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::ShmemSection>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, std::move((aVar).shmem()));
    // Sentinel = 'shmem'
    (aMsg)->WriteSentinel(107086363);
    (aMsg)->WriteBytes((&((aVar).offset())), 8);
    // Sentinel = 'offset | size'
    (aMsg)->WriteSentinel(592250111);
}

auto IPDLParamTraits<mozilla::layers::ShmemSection>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->shmem())))))) {
        aActor->FatalError("Error deserializing 'shmem' (Shmem) member of 'ShmemSection'");
        return false;
    }
    // Sentinel = 'shmem'
    if ((!((aMsg)->ReadSentinel(aIter, 107086363)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'shmem' (Shmem) member of 'ShmemSection'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->offset())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'offset | size'
    if ((!((aMsg)->ReadSentinel(aIter, 592250111)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CrossProcessSemaphoreDescriptor|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::CrossProcessSemaphoreDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).sem());
    // Sentinel = 'sem'
    (aMsg)->WriteSentinel(43188550);
}

auto IPDLParamTraits<mozilla::layers::CrossProcessSemaphoreDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sem())))))) {
        aActor->FatalError("Error deserializing 'sem' (CrossProcessSemaphoreHandle) member of 'CrossProcessSemaphoreDescriptor'");
        return false;
    }
    // Sentinel = 'sem'
    if ((!((aMsg)->ReadSentinel(aIter, 43188550)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sem' (CrossProcessSemaphoreHandle) member of 'CrossProcessSemaphoreDescriptor'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union ReadLockDescriptor|
//
namespace mozilla {
namespace layers {
auto ReadLockDescriptor::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TShmemSection:
        {
            (ptr_ShmemSection())->~ShmemSection__tdef();
            break;
        }
    case TCrossProcessSemaphoreDescriptor:
        {
            (ptr_CrossProcessSemaphoreDescriptor())->~CrossProcessSemaphoreDescriptor__tdef();
            break;
        }
    case Tuintptr_t:
        {
            (ptr_uintptr_t())->~uintptr_t__tdef();
            break;
        }
    case Tnull_t:
        {
            (ptr_null_t())->~null_t__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT ReadLockDescriptor::ReadLockDescriptor(const ShmemSection& aOther)
{
    new (mozilla::KnownNotNull, ptr_ShmemSection()) ShmemSection(aOther);
    mType = TShmemSection;
}

MOZ_IMPLICIT ReadLockDescriptor::ReadLockDescriptor(ShmemSection&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ShmemSection()) ShmemSection(std::move(aOther));
    mType = TShmemSection;
}

MOZ_IMPLICIT ReadLockDescriptor::ReadLockDescriptor(const CrossProcessSemaphoreDescriptor& aOther)
{
    new (mozilla::KnownNotNull, ptr_CrossProcessSemaphoreDescriptor()) CrossProcessSemaphoreDescriptor(aOther);
    mType = TCrossProcessSemaphoreDescriptor;
}

MOZ_IMPLICIT ReadLockDescriptor::ReadLockDescriptor(CrossProcessSemaphoreDescriptor&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CrossProcessSemaphoreDescriptor()) CrossProcessSemaphoreDescriptor(std::move(aOther));
    mType = TCrossProcessSemaphoreDescriptor;
}

MOZ_IMPLICIT ReadLockDescriptor::ReadLockDescriptor(const uintptr_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_uintptr_t()) uintptr_t(aOther);
    mType = Tuintptr_t;
}

MOZ_IMPLICIT ReadLockDescriptor::ReadLockDescriptor(uintptr_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_uintptr_t()) uintptr_t(std::move(aOther));
    mType = Tuintptr_t;
}

MOZ_IMPLICIT ReadLockDescriptor::ReadLockDescriptor(const null_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(aOther);
    mType = Tnull_t;
}

MOZ_IMPLICIT ReadLockDescriptor::ReadLockDescriptor(null_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move(aOther));
    mType = Tnull_t;
}

MOZ_IMPLICIT ReadLockDescriptor::ReadLockDescriptor(const ReadLockDescriptor& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TShmemSection:
        {
            new (mozilla::KnownNotNull, ptr_ShmemSection()) ShmemSection((aOther).get_ShmemSection());
            break;
        }
    case TCrossProcessSemaphoreDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_CrossProcessSemaphoreDescriptor()) CrossProcessSemaphoreDescriptor((aOther).get_CrossProcessSemaphoreDescriptor());
            break;
        }
    case Tuintptr_t:
        {
            new (mozilla::KnownNotNull, ptr_uintptr_t()) uintptr_t((aOther).get_uintptr_t());
            break;
        }
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t((aOther).get_null_t());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT ReadLockDescriptor::ReadLockDescriptor(ReadLockDescriptor&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TShmemSection:
        {
            new (mozilla::KnownNotNull, ptr_ShmemSection()) ShmemSection(std::move((aOther).get_ShmemSection()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCrossProcessSemaphoreDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_CrossProcessSemaphoreDescriptor()) CrossProcessSemaphoreDescriptor(std::move((aOther).get_CrossProcessSemaphoreDescriptor()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tuintptr_t:
        {
            new (mozilla::KnownNotNull, ptr_uintptr_t()) uintptr_t(std::move((aOther).get_uintptr_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move((aOther).get_null_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

ReadLockDescriptor::~ReadLockDescriptor()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto ReadLockDescriptor::operator=(const ShmemSection& aRhs) -> ReadLockDescriptor&
{
    if (MaybeDestroy(TShmemSection)) {
        new (mozilla::KnownNotNull, ptr_ShmemSection()) ShmemSection;
    }
    (*(ptr_ShmemSection())) = aRhs;
    mType = TShmemSection;
    return (*(this));
}

auto ReadLockDescriptor::operator=(ShmemSection&& aRhs) -> ReadLockDescriptor&
{
    if (MaybeDestroy(TShmemSection)) {
        new (mozilla::KnownNotNull, ptr_ShmemSection()) ShmemSection;
    }
    (*(ptr_ShmemSection())) = std::move(aRhs);
    mType = TShmemSection;
    return (*(this));
}

auto ReadLockDescriptor::operator=(const CrossProcessSemaphoreDescriptor& aRhs) -> ReadLockDescriptor&
{
    if (MaybeDestroy(TCrossProcessSemaphoreDescriptor)) {
        new (mozilla::KnownNotNull, ptr_CrossProcessSemaphoreDescriptor()) CrossProcessSemaphoreDescriptor;
    }
    (*(ptr_CrossProcessSemaphoreDescriptor())) = aRhs;
    mType = TCrossProcessSemaphoreDescriptor;
    return (*(this));
}

auto ReadLockDescriptor::operator=(CrossProcessSemaphoreDescriptor&& aRhs) -> ReadLockDescriptor&
{
    if (MaybeDestroy(TCrossProcessSemaphoreDescriptor)) {
        new (mozilla::KnownNotNull, ptr_CrossProcessSemaphoreDescriptor()) CrossProcessSemaphoreDescriptor;
    }
    (*(ptr_CrossProcessSemaphoreDescriptor())) = std::move(aRhs);
    mType = TCrossProcessSemaphoreDescriptor;
    return (*(this));
}

auto ReadLockDescriptor::operator=(const uintptr_t& aRhs) -> ReadLockDescriptor&
{
    if (MaybeDestroy(Tuintptr_t)) {
        new (mozilla::KnownNotNull, ptr_uintptr_t()) uintptr_t;
    }
    (*(ptr_uintptr_t())) = aRhs;
    mType = Tuintptr_t;
    return (*(this));
}

auto ReadLockDescriptor::operator=(uintptr_t&& aRhs) -> ReadLockDescriptor&
{
    if (MaybeDestroy(Tuintptr_t)) {
        new (mozilla::KnownNotNull, ptr_uintptr_t()) uintptr_t;
    }
    (*(ptr_uintptr_t())) = std::move(aRhs);
    mType = Tuintptr_t;
    return (*(this));
}

auto ReadLockDescriptor::operator=(const null_t& aRhs) -> ReadLockDescriptor&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = aRhs;
    mType = Tnull_t;
    return (*(this));
}

auto ReadLockDescriptor::operator=(null_t&& aRhs) -> ReadLockDescriptor&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = std::move(aRhs);
    mType = Tnull_t;
    return (*(this));
}

auto ReadLockDescriptor::operator=(const ReadLockDescriptor& aRhs) -> ReadLockDescriptor&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TShmemSection:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ShmemSection()) ShmemSection;
            }
            (*(ptr_ShmemSection())) = (aRhs).get_ShmemSection();
            break;
        }
    case TCrossProcessSemaphoreDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CrossProcessSemaphoreDescriptor()) CrossProcessSemaphoreDescriptor;
            }
            (*(ptr_CrossProcessSemaphoreDescriptor())) = (aRhs).get_CrossProcessSemaphoreDescriptor();
            break;
        }
    case Tuintptr_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_uintptr_t()) uintptr_t;
            }
            (*(ptr_uintptr_t())) = (aRhs).get_uintptr_t();
            break;
        }
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = (aRhs).get_null_t();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto ReadLockDescriptor::operator=(ReadLockDescriptor&& aRhs) -> ReadLockDescriptor&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TShmemSection:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ShmemSection()) ShmemSection;
            }
            (*(ptr_ShmemSection())) = std::move((aRhs).get_ShmemSection());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCrossProcessSemaphoreDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CrossProcessSemaphoreDescriptor()) CrossProcessSemaphoreDescriptor;
            }
            (*(ptr_CrossProcessSemaphoreDescriptor())) = std::move((aRhs).get_CrossProcessSemaphoreDescriptor());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tuintptr_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_uintptr_t()) uintptr_t;
            }
            (*(ptr_uintptr_t())) = std::move((aRhs).get_uintptr_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = std::move((aRhs).get_null_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::ReadLockDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::ReadLockDescriptor union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'ReadLockDescriptor'
    (aMsg)->WriteSentinel(1093011237);

    switch (type) {
    case union__::TShmemSection:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ShmemSection());
            // Sentinel = 'TShmemSection'
            (aMsg)->WriteSentinel(583861540);
            return;
        }
    case union__::TCrossProcessSemaphoreDescriptor:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CrossProcessSemaphoreDescriptor());
            // Sentinel = 'TCrossProcessSemaphoreDescriptor'
            (aMsg)->WriteSentinel(3536981249);
            return;
        }
    case union__::Tuintptr_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_uintptr_t());
            // Sentinel = 'Tuintptr_t'
            (aMsg)->WriteSentinel(385418302);
            return;
        }
    case union__::Tnull_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_null_t());
            // Sentinel = 'Tnull_t'
            (aMsg)->WriteSentinel(190186211);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::ReadLockDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::ReadLockDescriptor union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union ReadLockDescriptor");
        return false;
    }
    // Sentinel = 'ReadLockDescriptor'
    if ((!((aMsg)->ReadSentinel(aIter, 1093011237)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union ReadLockDescriptor");
        return false;
    }

    switch (type) {
    case union__::TShmemSection:
        {
            mozilla::layers::ShmemSection tmp = mozilla::layers::ShmemSection();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ShmemSection())))))) {
                aActor->FatalError("Error deserializing variant TShmemSection of union ReadLockDescriptor");
                return false;
            }
            // Sentinel = 'TShmemSection'
            if ((!((aMsg)->ReadSentinel(aIter, 583861540)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TShmemSection of union ReadLockDescriptor");
                return false;
            }
            return true;
        }
    case union__::TCrossProcessSemaphoreDescriptor:
        {
            mozilla::layers::CrossProcessSemaphoreDescriptor tmp = mozilla::layers::CrossProcessSemaphoreDescriptor();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CrossProcessSemaphoreDescriptor())))))) {
                aActor->FatalError("Error deserializing variant TCrossProcessSemaphoreDescriptor of union ReadLockDescriptor");
                return false;
            }
            // Sentinel = 'TCrossProcessSemaphoreDescriptor'
            if ((!((aMsg)->ReadSentinel(aIter, 3536981249)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCrossProcessSemaphoreDescriptor of union ReadLockDescriptor");
                return false;
            }
            return true;
        }
    case union__::Tuintptr_t:
        {
            uintptr_t tmp = uintptr_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_uintptr_t())))))) {
                aActor->FatalError("Error deserializing variant Tuintptr_t of union ReadLockDescriptor");
                return false;
            }
            // Sentinel = 'Tuintptr_t'
            if ((!((aMsg)->ReadSentinel(aIter, 385418302)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tuintptr_t of union ReadLockDescriptor");
                return false;
            }
            return true;
        }
    case union__::Tnull_t:
        {
            mozilla::null_t tmp = mozilla::null_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_null_t())))))) {
                aActor->FatalError("Error deserializing variant Tnull_t of union ReadLockDescriptor");
                return false;
            }
            // Sentinel = 'Tnull_t'
            if ((!((aMsg)->ReadSentinel(aIter, 190186211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnull_t of union ReadLockDescriptor");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct TexturedTileDescriptor|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::TexturedTileDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).textureParent(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).textureParent());
        // Sentinel = 'texture'
        (aMsg)->WriteSentinel(207684370);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).textureChild(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).textureChild());
        // Sentinel = 'texture'
        (aMsg)->WriteSentinel(207684370);
    }
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        WriteIPDLParam(aMsg, aActor, (aVar).textureOnWhiteParent());
        // Sentinel = 'textureOnWhite'
        (aMsg)->WriteSentinel(745997776);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        WriteIPDLParam(aMsg, aActor, (aVar).textureOnWhiteChild());
        // Sentinel = 'textureOnWhite'
        (aMsg)->WriteSentinel(745997776);
    }
    WriteIPDLParam(aMsg, aActor, (aVar).updateRect());
    // Sentinel = 'updateRect'
    (aMsg)->WriteSentinel(380961810);
    WriteIPDLParam(aMsg, aActor, (aVar).readLocked());
    // Sentinel = 'readLocked'
    (aMsg)->WriteSentinel(364708847);
    WriteIPDLParam(aMsg, aActor, (aVar).readLockedOnWhite());
    // Sentinel = 'readLockedOnWhite'
    (aMsg)->WriteSentinel(1004406445);
    WriteIPDLParam(aMsg, aActor, (aVar).wasPlaceholder());
    // Sentinel = 'wasPlaceholder'
    (aMsg)->WriteSentinel(713033135);
}

auto IPDLParamTraits<mozilla::layers::TexturedTileDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureParent())))))) {
            aActor->FatalError("Error deserializing 'textureParent' (PTexture) member of 'TexturedTileDescriptor'");
            return false;
        }
        if ((!((*((&((aVar)->textureParent()))))))) {
            aActor->FatalError("Error deserializing 'textureParent' (PTexture) member of 'TexturedTileDescriptor'");
            return false;
        }
        // Sentinel = 'texture'
        if ((!((aMsg)->ReadSentinel(aIter, 207684370)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'textureParent' (PTexture) member of 'TexturedTileDescriptor'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureChild())))))) {
            aActor->FatalError("Error deserializing 'textureChild' (PTexture) member of 'TexturedTileDescriptor'");
            return false;
        }
        if ((!((*((&((aVar)->textureChild()))))))) {
            aActor->FatalError("Error deserializing 'textureChild' (PTexture) member of 'TexturedTileDescriptor'");
            return false;
        }
        // Sentinel = 'texture'
        if ((!((aMsg)->ReadSentinel(aIter, 207684370)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'textureChild' (PTexture) member of 'TexturedTileDescriptor'");
            return false;
        }
    }
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureOnWhiteParent())))))) {
            aActor->FatalError("Error deserializing 'textureOnWhiteParent' (PTexture?) member of 'TexturedTileDescriptor'");
            return false;
        }
        // Sentinel = 'textureOnWhite'
        if ((!((aMsg)->ReadSentinel(aIter, 745997776)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'textureOnWhiteParent' (PTexture?) member of 'TexturedTileDescriptor'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureOnWhiteChild())))))) {
            aActor->FatalError("Error deserializing 'textureOnWhiteChild' (PTexture?) member of 'TexturedTileDescriptor'");
            return false;
        }
        // Sentinel = 'textureOnWhite'
        if ((!((aMsg)->ReadSentinel(aIter, 745997776)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'textureOnWhiteChild' (PTexture?) member of 'TexturedTileDescriptor'");
            return false;
        }
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->updateRect())))))) {
        aActor->FatalError("Error deserializing 'updateRect' (IntRect) member of 'TexturedTileDescriptor'");
        return false;
    }
    // Sentinel = 'updateRect'
    if ((!((aMsg)->ReadSentinel(aIter, 380961810)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'updateRect' (IntRect) member of 'TexturedTileDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->readLocked())))))) {
        aActor->FatalError("Error deserializing 'readLocked' (bool) member of 'TexturedTileDescriptor'");
        return false;
    }
    // Sentinel = 'readLocked'
    if ((!((aMsg)->ReadSentinel(aIter, 364708847)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'readLocked' (bool) member of 'TexturedTileDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->readLockedOnWhite())))))) {
        aActor->FatalError("Error deserializing 'readLockedOnWhite' (bool) member of 'TexturedTileDescriptor'");
        return false;
    }
    // Sentinel = 'readLockedOnWhite'
    if ((!((aMsg)->ReadSentinel(aIter, 1004406445)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'readLockedOnWhite' (bool) member of 'TexturedTileDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->wasPlaceholder())))))) {
        aActor->FatalError("Error deserializing 'wasPlaceholder' (bool) member of 'TexturedTileDescriptor'");
        return false;
    }
    // Sentinel = 'wasPlaceholder'
    if ((!((aMsg)->ReadSentinel(aIter, 713033135)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'wasPlaceholder' (bool) member of 'TexturedTileDescriptor'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PlaceholderTileDescriptor|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PlaceholderTileDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::layers::PlaceholderTileDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union TileDescriptor|
//
namespace mozilla {
namespace layers {
auto TileDescriptor::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TTexturedTileDescriptor:
        {
            (ptr_TexturedTileDescriptor())->~TexturedTileDescriptor__tdef();
            break;
        }
    case TPlaceholderTileDescriptor:
        {
            (ptr_PlaceholderTileDescriptor())->~PlaceholderTileDescriptor__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT TileDescriptor::TileDescriptor(const TexturedTileDescriptor& aOther)
{
    new (mozilla::KnownNotNull, ptr_TexturedTileDescriptor()) TexturedTileDescriptor(aOther);
    mType = TTexturedTileDescriptor;
}

MOZ_IMPLICIT TileDescriptor::TileDescriptor(TexturedTileDescriptor&& aOther)
{
    new (mozilla::KnownNotNull, ptr_TexturedTileDescriptor()) TexturedTileDescriptor(std::move(aOther));
    mType = TTexturedTileDescriptor;
}

MOZ_IMPLICIT TileDescriptor::TileDescriptor(const PlaceholderTileDescriptor& aOther)
{
    new (mozilla::KnownNotNull, ptr_PlaceholderTileDescriptor()) PlaceholderTileDescriptor(aOther);
    mType = TPlaceholderTileDescriptor;
}

MOZ_IMPLICIT TileDescriptor::TileDescriptor(PlaceholderTileDescriptor&& aOther)
{
    new (mozilla::KnownNotNull, ptr_PlaceholderTileDescriptor()) PlaceholderTileDescriptor(std::move(aOther));
    mType = TPlaceholderTileDescriptor;
}

MOZ_IMPLICIT TileDescriptor::TileDescriptor(const TileDescriptor& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TTexturedTileDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_TexturedTileDescriptor()) TexturedTileDescriptor((aOther).get_TexturedTileDescriptor());
            break;
        }
    case TPlaceholderTileDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_PlaceholderTileDescriptor()) PlaceholderTileDescriptor((aOther).get_PlaceholderTileDescriptor());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT TileDescriptor::TileDescriptor(TileDescriptor&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TTexturedTileDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_TexturedTileDescriptor()) TexturedTileDescriptor(std::move((aOther).get_TexturedTileDescriptor()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPlaceholderTileDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_PlaceholderTileDescriptor()) PlaceholderTileDescriptor(std::move((aOther).get_PlaceholderTileDescriptor()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

TileDescriptor::~TileDescriptor()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto TileDescriptor::operator=(const TexturedTileDescriptor& aRhs) -> TileDescriptor&
{
    if (MaybeDestroy(TTexturedTileDescriptor)) {
        new (mozilla::KnownNotNull, ptr_TexturedTileDescriptor()) TexturedTileDescriptor;
    }
    (*(ptr_TexturedTileDescriptor())) = aRhs;
    mType = TTexturedTileDescriptor;
    return (*(this));
}

auto TileDescriptor::operator=(TexturedTileDescriptor&& aRhs) -> TileDescriptor&
{
    if (MaybeDestroy(TTexturedTileDescriptor)) {
        new (mozilla::KnownNotNull, ptr_TexturedTileDescriptor()) TexturedTileDescriptor;
    }
    (*(ptr_TexturedTileDescriptor())) = std::move(aRhs);
    mType = TTexturedTileDescriptor;
    return (*(this));
}

auto TileDescriptor::operator=(const PlaceholderTileDescriptor& aRhs) -> TileDescriptor&
{
    if (MaybeDestroy(TPlaceholderTileDescriptor)) {
        new (mozilla::KnownNotNull, ptr_PlaceholderTileDescriptor()) PlaceholderTileDescriptor;
    }
    (*(ptr_PlaceholderTileDescriptor())) = aRhs;
    mType = TPlaceholderTileDescriptor;
    return (*(this));
}

auto TileDescriptor::operator=(PlaceholderTileDescriptor&& aRhs) -> TileDescriptor&
{
    if (MaybeDestroy(TPlaceholderTileDescriptor)) {
        new (mozilla::KnownNotNull, ptr_PlaceholderTileDescriptor()) PlaceholderTileDescriptor;
    }
    (*(ptr_PlaceholderTileDescriptor())) = std::move(aRhs);
    mType = TPlaceholderTileDescriptor;
    return (*(this));
}

auto TileDescriptor::operator=(const TileDescriptor& aRhs) -> TileDescriptor&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TTexturedTileDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_TexturedTileDescriptor()) TexturedTileDescriptor;
            }
            (*(ptr_TexturedTileDescriptor())) = (aRhs).get_TexturedTileDescriptor();
            break;
        }
    case TPlaceholderTileDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PlaceholderTileDescriptor()) PlaceholderTileDescriptor;
            }
            (*(ptr_PlaceholderTileDescriptor())) = (aRhs).get_PlaceholderTileDescriptor();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto TileDescriptor::operator=(TileDescriptor&& aRhs) -> TileDescriptor&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TTexturedTileDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_TexturedTileDescriptor()) TexturedTileDescriptor;
            }
            (*(ptr_TexturedTileDescriptor())) = std::move((aRhs).get_TexturedTileDescriptor());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPlaceholderTileDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PlaceholderTileDescriptor()) PlaceholderTileDescriptor;
            }
            (*(ptr_PlaceholderTileDescriptor())) = std::move((aRhs).get_PlaceholderTileDescriptor());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::TileDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::TileDescriptor union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'TileDescriptor'
    (aMsg)->WriteSentinel(688457134);

    switch (type) {
    case union__::TTexturedTileDescriptor:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_TexturedTileDescriptor());
            // Sentinel = 'TTexturedTileDescriptor'
            (aMsg)->WriteSentinel(1846741335);
            return;
        }
    case union__::TPlaceholderTileDescriptor:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_PlaceholderTileDescriptor());
            // Sentinel = 'TPlaceholderTileDescriptor'
            (aMsg)->WriteSentinel(2292583013);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::TileDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::TileDescriptor union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union TileDescriptor");
        return false;
    }
    // Sentinel = 'TileDescriptor'
    if ((!((aMsg)->ReadSentinel(aIter, 688457134)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union TileDescriptor");
        return false;
    }

    switch (type) {
    case union__::TTexturedTileDescriptor:
        {
            mozilla::layers::TexturedTileDescriptor tmp = mozilla::layers::TexturedTileDescriptor();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_TexturedTileDescriptor())))))) {
                aActor->FatalError("Error deserializing variant TTexturedTileDescriptor of union TileDescriptor");
                return false;
            }
            // Sentinel = 'TTexturedTileDescriptor'
            if ((!((aMsg)->ReadSentinel(aIter, 1846741335)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TTexturedTileDescriptor of union TileDescriptor");
                return false;
            }
            return true;
        }
    case union__::TPlaceholderTileDescriptor:
        {
            mozilla::layers::PlaceholderTileDescriptor tmp = mozilla::layers::PlaceholderTileDescriptor();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PlaceholderTileDescriptor())))))) {
                aActor->FatalError("Error deserializing variant TPlaceholderTileDescriptor of union TileDescriptor");
                return false;
            }
            // Sentinel = 'TPlaceholderTileDescriptor'
            if ((!((aMsg)->ReadSentinel(aIter, 2292583013)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPlaceholderTileDescriptor of union TileDescriptor");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SurfaceDescriptorTiles|
//
namespace mozilla {
namespace layers {
auto SurfaceDescriptorTiles::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(SurfaceDescriptorTiles, frameYResolution_) - offsetof(SurfaceDescriptorTiles, resolution_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorTiles>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).validRegion());
    // Sentinel = 'validRegion'
    (aMsg)->WriteSentinel(448726133);
    WriteIPDLParam(aMsg, aActor, (aVar).tiles());
    // Sentinel = 'tiles'
    (aMsg)->WriteSentinel(107872802);
    WriteIPDLParam(aMsg, aActor, (aVar).tileOrigin());
    // Sentinel = 'tileOrigin'
    (aMsg)->WriteSentinel(378733591);
    WriteIPDLParam(aMsg, aActor, (aVar).tileSize());
    // Sentinel = 'tileSize'
    (aMsg)->WriteSentinel(250086218);
    WriteIPDLParam(aMsg, aActor, (aVar).firstTileX());
    // Sentinel = 'firstTileX'
    (aMsg)->WriteSentinel(382862351);
    WriteIPDLParam(aMsg, aActor, (aVar).firstTileY());
    // Sentinel = 'firstTileY'
    (aMsg)->WriteSentinel(382927888);
    WriteIPDLParam(aMsg, aActor, (aVar).retainedWidth());
    // Sentinel = 'retainedWidth'
    (aMsg)->WriteSentinel(627574093);
    WriteIPDLParam(aMsg, aActor, (aVar).retainedHeight());
    // Sentinel = 'retainedHeight'
    (aMsg)->WriteSentinel(715654566);
    WriteIPDLParam(aMsg, aActor, (aVar).isProgressive());
    // Sentinel = 'isProgressive'
    (aMsg)->WriteSentinel(635176310);
    (aMsg)->WriteBytes((&((aVar).resolution())), 12);
    // Sentinel = 'resolution | frameXResolution | frameYResolution'
    (aMsg)->WriteSentinel(3490386684);
}

auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorTiles>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->validRegion())))))) {
        aActor->FatalError("Error deserializing 'validRegion' (nsIntRegion) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    // Sentinel = 'validRegion'
    if ((!((aMsg)->ReadSentinel(aIter, 448726133)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'validRegion' (nsIntRegion) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->tiles())))))) {
        aActor->FatalError("Error deserializing 'tiles' (TileDescriptor[]) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    // Sentinel = 'tiles'
    if ((!((aMsg)->ReadSentinel(aIter, 107872802)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'tiles' (TileDescriptor[]) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->tileOrigin())))))) {
        aActor->FatalError("Error deserializing 'tileOrigin' (IntPoint) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    // Sentinel = 'tileOrigin'
    if ((!((aMsg)->ReadSentinel(aIter, 378733591)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'tileOrigin' (IntPoint) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->tileSize())))))) {
        aActor->FatalError("Error deserializing 'tileSize' (IntSize) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    // Sentinel = 'tileSize'
    if ((!((aMsg)->ReadSentinel(aIter, 250086218)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'tileSize' (IntSize) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->firstTileX())))))) {
        aActor->FatalError("Error deserializing 'firstTileX' (int) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    // Sentinel = 'firstTileX'
    if ((!((aMsg)->ReadSentinel(aIter, 382862351)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'firstTileX' (int) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->firstTileY())))))) {
        aActor->FatalError("Error deserializing 'firstTileY' (int) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    // Sentinel = 'firstTileY'
    if ((!((aMsg)->ReadSentinel(aIter, 382927888)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'firstTileY' (int) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->retainedWidth())))))) {
        aActor->FatalError("Error deserializing 'retainedWidth' (int) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    // Sentinel = 'retainedWidth'
    if ((!((aMsg)->ReadSentinel(aIter, 627574093)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'retainedWidth' (int) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->retainedHeight())))))) {
        aActor->FatalError("Error deserializing 'retainedHeight' (int) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    // Sentinel = 'retainedHeight'
    if ((!((aMsg)->ReadSentinel(aIter, 715654566)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'retainedHeight' (int) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isProgressive())))))) {
        aActor->FatalError("Error deserializing 'isProgressive' (bool) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    // Sentinel = 'isProgressive'
    if ((!((aMsg)->ReadSentinel(aIter, 635176310)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isProgressive' (bool) member of 'SurfaceDescriptorTiles'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->resolution())), 12)))) {
        aActor->FatalError("Error bulk reading fields from float");
        return false;
    }
    // Sentinel = 'resolution | frameXResolution | frameYResolution'
    if ((!((aMsg)->ReadSentinel(aIter, 3490386684)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from float");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpUseTiledLayerBuffer|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpUseTiledLayerBuffer>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).tileLayerDescriptor());
    // Sentinel = 'tileLayerDescriptor'
    (aMsg)->WriteSentinel(1287456715);
}

auto IPDLParamTraits<mozilla::layers::OpUseTiledLayerBuffer>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->tileLayerDescriptor())))))) {
        aActor->FatalError("Error deserializing 'tileLayerDescriptor' (SurfaceDescriptorTiles) member of 'OpUseTiledLayerBuffer'");
        return false;
    }
    // Sentinel = 'tileLayerDescriptor'
    if ((!((aMsg)->ReadSentinel(aIter, 1287456715)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'tileLayerDescriptor' (SurfaceDescriptorTiles) member of 'OpUseTiledLayerBuffer'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpPaintTextureRegion|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpPaintTextureRegion>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).bufferData());
    // Sentinel = 'bufferData'
    (aMsg)->WriteSentinel(369689589);
    WriteIPDLParam(aMsg, aActor, (aVar).updatedRegion());
    // Sentinel = 'updatedRegion'
    (aMsg)->WriteSentinel(626263372);
}

auto IPDLParamTraits<mozilla::layers::OpPaintTextureRegion>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->bufferData())))))) {
        aActor->FatalError("Error deserializing 'bufferData' (ThebesBufferData) member of 'OpPaintTextureRegion'");
        return false;
    }
    // Sentinel = 'bufferData'
    if ((!((aMsg)->ReadSentinel(aIter, 369689589)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bufferData' (ThebesBufferData) member of 'OpPaintTextureRegion'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->updatedRegion())))))) {
        aActor->FatalError("Error deserializing 'updatedRegion' (nsIntRegion) member of 'OpPaintTextureRegion'");
        return false;
    }
    // Sentinel = 'updatedRegion'
    if ((!((aMsg)->ReadSentinel(aIter, 626263372)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'updatedRegion' (nsIntRegion) member of 'OpPaintTextureRegion'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpRemoveTexture|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpRemoveTexture>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).textureParent(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).textureParent());
        // Sentinel = 'texture'
        (aMsg)->WriteSentinel(207684370);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).textureChild(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).textureChild());
        // Sentinel = 'texture'
        (aMsg)->WriteSentinel(207684370);
    }
}

auto IPDLParamTraits<mozilla::layers::OpRemoveTexture>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureParent())))))) {
            aActor->FatalError("Error deserializing 'textureParent' (PTexture) member of 'OpRemoveTexture'");
            return false;
        }
        if ((!((*((&((aVar)->textureParent()))))))) {
            aActor->FatalError("Error deserializing 'textureParent' (PTexture) member of 'OpRemoveTexture'");
            return false;
        }
        // Sentinel = 'texture'
        if ((!((aMsg)->ReadSentinel(aIter, 207684370)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'textureParent' (PTexture) member of 'OpRemoveTexture'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureChild())))))) {
            aActor->FatalError("Error deserializing 'textureChild' (PTexture) member of 'OpRemoveTexture'");
            return false;
        }
        if ((!((*((&((aVar)->textureChild()))))))) {
            aActor->FatalError("Error deserializing 'textureChild' (PTexture) member of 'OpRemoveTexture'");
            return false;
        }
        // Sentinel = 'texture'
        if ((!((aMsg)->ReadSentinel(aIter, 207684370)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'textureChild' (PTexture) member of 'OpRemoveTexture'");
            return false;
        }
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct TimedTexture|
//
namespace mozilla {
namespace layers {
auto TimedTexture::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(TimedTexture, producerID_) - offsetof(TimedTexture, frameID_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::TimedTexture>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).textureParent(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).textureParent());
        // Sentinel = 'texture'
        (aMsg)->WriteSentinel(207684370);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).textureChild(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).textureChild());
        // Sentinel = 'texture'
        (aMsg)->WriteSentinel(207684370);
    }
    WriteIPDLParam(aMsg, aActor, (aVar).timeStamp());
    // Sentinel = 'timeStamp'
    (aMsg)->WriteSentinel(312083381);
    WriteIPDLParam(aMsg, aActor, (aVar).picture());
    // Sentinel = 'picture'
    (aMsg)->WriteSentinel(200540925);
    WriteIPDLParam(aMsg, aActor, (aVar).readLocked());
    // Sentinel = 'readLocked'
    (aMsg)->WriteSentinel(364708847);
    (aMsg)->WriteBytes((&((aVar).frameID())), 8);
    // Sentinel = 'frameID | producerID'
    (aMsg)->WriteSentinel(1286801222);
}

auto IPDLParamTraits<mozilla::layers::TimedTexture>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureParent())))))) {
            aActor->FatalError("Error deserializing 'textureParent' (PTexture) member of 'TimedTexture'");
            return false;
        }
        if ((!((*((&((aVar)->textureParent()))))))) {
            aActor->FatalError("Error deserializing 'textureParent' (PTexture) member of 'TimedTexture'");
            return false;
        }
        // Sentinel = 'texture'
        if ((!((aMsg)->ReadSentinel(aIter, 207684370)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'textureParent' (PTexture) member of 'TimedTexture'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureChild())))))) {
            aActor->FatalError("Error deserializing 'textureChild' (PTexture) member of 'TimedTexture'");
            return false;
        }
        if ((!((*((&((aVar)->textureChild()))))))) {
            aActor->FatalError("Error deserializing 'textureChild' (PTexture) member of 'TimedTexture'");
            return false;
        }
        // Sentinel = 'texture'
        if ((!((aMsg)->ReadSentinel(aIter, 207684370)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'textureChild' (PTexture) member of 'TimedTexture'");
            return false;
        }
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->timeStamp())))))) {
        aActor->FatalError("Error deserializing 'timeStamp' (TimeStamp) member of 'TimedTexture'");
        return false;
    }
    // Sentinel = 'timeStamp'
    if ((!((aMsg)->ReadSentinel(aIter, 312083381)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'timeStamp' (TimeStamp) member of 'TimedTexture'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->picture())))))) {
        aActor->FatalError("Error deserializing 'picture' (IntRect) member of 'TimedTexture'");
        return false;
    }
    // Sentinel = 'picture'
    if ((!((aMsg)->ReadSentinel(aIter, 200540925)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'picture' (IntRect) member of 'TimedTexture'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->readLocked())))))) {
        aActor->FatalError("Error deserializing 'readLocked' (bool) member of 'TimedTexture'");
        return false;
    }
    // Sentinel = 'readLocked'
    if ((!((aMsg)->ReadSentinel(aIter, 364708847)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'readLocked' (bool) member of 'TimedTexture'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->frameID())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'frameID | producerID'
    if ((!((aMsg)->ReadSentinel(aIter, 1286801222)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpUseTexture|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpUseTexture>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).textures());
    // Sentinel = 'textures'
    (aMsg)->WriteSentinel(266732421);
}

auto IPDLParamTraits<mozilla::layers::OpUseTexture>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textures())))))) {
        aActor->FatalError("Error deserializing 'textures' (TimedTexture[]) member of 'OpUseTexture'");
        return false;
    }
    // Sentinel = 'textures'
    if ((!((aMsg)->ReadSentinel(aIter, 266732421)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'textures' (TimedTexture[]) member of 'OpUseTexture'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpUseComponentAlphaTextures|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpUseComponentAlphaTextures>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).textureOnBlackParent(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).textureOnBlackParent());
        // Sentinel = 'textureOnBlack'
        (aMsg)->WriteSentinel(736757164);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).textureOnBlackChild(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).textureOnBlackChild());
        // Sentinel = 'textureOnBlack'
        (aMsg)->WriteSentinel(736757164);
    }
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).textureOnWhiteParent(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).textureOnWhiteParent());
        // Sentinel = 'textureOnWhite'
        (aMsg)->WriteSentinel(745997776);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).textureOnWhiteChild(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).textureOnWhiteChild());
        // Sentinel = 'textureOnWhite'
        (aMsg)->WriteSentinel(745997776);
    }
    WriteIPDLParam(aMsg, aActor, (aVar).readLockedBlack());
    // Sentinel = 'readLockedBlack'
    (aMsg)->WriteSentinel(783680972);
    WriteIPDLParam(aMsg, aActor, (aVar).readLockedWhite());
    // Sentinel = 'readLockedWhite'
    (aMsg)->WriteSentinel(792921584);
}

auto IPDLParamTraits<mozilla::layers::OpUseComponentAlphaTextures>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureOnBlackParent())))))) {
            aActor->FatalError("Error deserializing 'textureOnBlackParent' (PTexture) member of 'OpUseComponentAlphaTextures'");
            return false;
        }
        if ((!((*((&((aVar)->textureOnBlackParent()))))))) {
            aActor->FatalError("Error deserializing 'textureOnBlackParent' (PTexture) member of 'OpUseComponentAlphaTextures'");
            return false;
        }
        // Sentinel = 'textureOnBlack'
        if ((!((aMsg)->ReadSentinel(aIter, 736757164)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'textureOnBlackParent' (PTexture) member of 'OpUseComponentAlphaTextures'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureOnBlackChild())))))) {
            aActor->FatalError("Error deserializing 'textureOnBlackChild' (PTexture) member of 'OpUseComponentAlphaTextures'");
            return false;
        }
        if ((!((*((&((aVar)->textureOnBlackChild()))))))) {
            aActor->FatalError("Error deserializing 'textureOnBlackChild' (PTexture) member of 'OpUseComponentAlphaTextures'");
            return false;
        }
        // Sentinel = 'textureOnBlack'
        if ((!((aMsg)->ReadSentinel(aIter, 736757164)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'textureOnBlackChild' (PTexture) member of 'OpUseComponentAlphaTextures'");
            return false;
        }
    }
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureOnWhiteParent())))))) {
            aActor->FatalError("Error deserializing 'textureOnWhiteParent' (PTexture) member of 'OpUseComponentAlphaTextures'");
            return false;
        }
        if ((!((*((&((aVar)->textureOnWhiteParent()))))))) {
            aActor->FatalError("Error deserializing 'textureOnWhiteParent' (PTexture) member of 'OpUseComponentAlphaTextures'");
            return false;
        }
        // Sentinel = 'textureOnWhite'
        if ((!((aMsg)->ReadSentinel(aIter, 745997776)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'textureOnWhiteParent' (PTexture) member of 'OpUseComponentAlphaTextures'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureOnWhiteChild())))))) {
            aActor->FatalError("Error deserializing 'textureOnWhiteChild' (PTexture) member of 'OpUseComponentAlphaTextures'");
            return false;
        }
        if ((!((*((&((aVar)->textureOnWhiteChild()))))))) {
            aActor->FatalError("Error deserializing 'textureOnWhiteChild' (PTexture) member of 'OpUseComponentAlphaTextures'");
            return false;
        }
        // Sentinel = 'textureOnWhite'
        if ((!((aMsg)->ReadSentinel(aIter, 745997776)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'textureOnWhiteChild' (PTexture) member of 'OpUseComponentAlphaTextures'");
            return false;
        }
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->readLockedBlack())))))) {
        aActor->FatalError("Error deserializing 'readLockedBlack' (bool) member of 'OpUseComponentAlphaTextures'");
        return false;
    }
    // Sentinel = 'readLockedBlack'
    if ((!((aMsg)->ReadSentinel(aIter, 783680972)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'readLockedBlack' (bool) member of 'OpUseComponentAlphaTextures'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->readLockedWhite())))))) {
        aActor->FatalError("Error deserializing 'readLockedWhite' (bool) member of 'OpUseComponentAlphaTextures'");
        return false;
    }
    // Sentinel = 'readLockedWhite'
    if ((!((aMsg)->ReadSentinel(aIter, 792921584)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'readLockedWhite' (bool) member of 'OpUseComponentAlphaTextures'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpNotifyNotUsed|
//
namespace mozilla {
namespace layers {
auto OpNotifyNotUsed::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(OpNotifyNotUsed, fwdTransactionId_) - offsetof(OpNotifyNotUsed, TextureId_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpNotifyNotUsed>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).TextureId())), 16);
    // Sentinel = 'TextureId | fwdTransactionId'
    (aMsg)->WriteSentinel(2613906127);
}

auto IPDLParamTraits<mozilla::layers::OpNotifyNotUsed>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->TextureId())), 16)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'TextureId | fwdTransactionId'
    if ((!((aMsg)->ReadSentinel(aIter, 2613906127)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpDeliverAcquireFence|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpDeliverAcquireFence>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).textureParent(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).textureParent());
        // Sentinel = 'texture'
        (aMsg)->WriteSentinel(207684370);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).textureChild(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).textureChild());
        // Sentinel = 'texture'
        (aMsg)->WriteSentinel(207684370);
    }
    WriteIPDLParam(aMsg, aActor, (aVar).fenceFd());
    // Sentinel = 'fenceFd'
    (aMsg)->WriteSentinel(184550060);
}

auto IPDLParamTraits<mozilla::layers::OpDeliverAcquireFence>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureParent())))))) {
            aActor->FatalError("Error deserializing 'textureParent' (PTexture) member of 'OpDeliverAcquireFence'");
            return false;
        }
        if ((!((*((&((aVar)->textureParent()))))))) {
            aActor->FatalError("Error deserializing 'textureParent' (PTexture) member of 'OpDeliverAcquireFence'");
            return false;
        }
        // Sentinel = 'texture'
        if ((!((aMsg)->ReadSentinel(aIter, 207684370)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'textureParent' (PTexture) member of 'OpDeliverAcquireFence'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureChild())))))) {
            aActor->FatalError("Error deserializing 'textureChild' (PTexture) member of 'OpDeliverAcquireFence'");
            return false;
        }
        if ((!((*((&((aVar)->textureChild()))))))) {
            aActor->FatalError("Error deserializing 'textureChild' (PTexture) member of 'OpDeliverAcquireFence'");
            return false;
        }
        // Sentinel = 'texture'
        if ((!((aMsg)->ReadSentinel(aIter, 207684370)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'textureChild' (PTexture) member of 'OpDeliverAcquireFence'");
            return false;
        }
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fenceFd())))))) {
        aActor->FatalError("Error deserializing 'fenceFd' (FileDescriptor) member of 'OpDeliverAcquireFence'");
        return false;
    }
    // Sentinel = 'fenceFd'
    if ((!((aMsg)->ReadSentinel(aIter, 184550060)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fenceFd' (FileDescriptor) member of 'OpDeliverAcquireFence'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpDeliverReleaseFence|
//
namespace mozilla {
namespace layers {
auto OpDeliverReleaseFence::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(OpDeliverReleaseFence, fwdTransactionId_) - offsetof(OpDeliverReleaseFence, bufferId_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpDeliverReleaseFence>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).fenceFd());
    // Sentinel = 'fenceFd'
    (aMsg)->WriteSentinel(184550060);
    WriteIPDLParam(aMsg, aActor, (aVar).usesImageBridge());
    // Sentinel = 'usesImageBridge'
    (aMsg)->WriteSentinel(810223089);
    (aMsg)->WriteBytes((&((aVar).bufferId())), 16);
    // Sentinel = 'bufferId | fwdTransactionId'
    (aMsg)->WriteSentinel(2401897048);
}

auto IPDLParamTraits<mozilla::layers::OpDeliverReleaseFence>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fenceFd())))))) {
        aActor->FatalError("Error deserializing 'fenceFd' (FileDescriptor?) member of 'OpDeliverReleaseFence'");
        return false;
    }
    // Sentinel = 'fenceFd'
    if ((!((aMsg)->ReadSentinel(aIter, 184550060)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fenceFd' (FileDescriptor?) member of 'OpDeliverReleaseFence'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->usesImageBridge())))))) {
        aActor->FatalError("Error deserializing 'usesImageBridge' (bool) member of 'OpDeliverReleaseFence'");
        return false;
    }
    // Sentinel = 'usesImageBridge'
    if ((!((aMsg)->ReadSentinel(aIter, 810223089)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'usesImageBridge' (bool) member of 'OpDeliverReleaseFence'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->bufferId())), 16)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'bufferId | fwdTransactionId'
    if ((!((aMsg)->ReadSentinel(aIter, 2401897048)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union CompositableOperationDetail|
//
namespace mozilla {
namespace layers {
auto CompositableOperationDetail::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TOpPaintTextureRegion:
        {
            (ptr_OpPaintTextureRegion())->~OpPaintTextureRegion__tdef();
            break;
        }
    case TOpUseTiledLayerBuffer:
        {
            (ptr_OpUseTiledLayerBuffer())->~OpUseTiledLayerBuffer__tdef();
            break;
        }
    case TOpRemoveTexture:
        {
            (ptr_OpRemoveTexture())->~OpRemoveTexture__tdef();
            break;
        }
    case TOpUseTexture:
        {
            (ptr_OpUseTexture())->~OpUseTexture__tdef();
            break;
        }
    case TOpUseComponentAlphaTextures:
        {
            (ptr_OpUseComponentAlphaTextures())->~OpUseComponentAlphaTextures__tdef();
            break;
        }
    case TOpDeliverAcquireFence:
        {
            (ptr_OpDeliverAcquireFence())->~OpDeliverAcquireFence__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT CompositableOperationDetail::CompositableOperationDetail(const OpPaintTextureRegion& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpPaintTextureRegion()) OpPaintTextureRegion(aOther);
    mType = TOpPaintTextureRegion;
}

MOZ_IMPLICIT CompositableOperationDetail::CompositableOperationDetail(OpPaintTextureRegion&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpPaintTextureRegion()) OpPaintTextureRegion(std::move(aOther));
    mType = TOpPaintTextureRegion;
}

MOZ_IMPLICIT CompositableOperationDetail::CompositableOperationDetail(const OpUseTiledLayerBuffer& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUseTiledLayerBuffer()) OpUseTiledLayerBuffer(aOther);
    mType = TOpUseTiledLayerBuffer;
}

MOZ_IMPLICIT CompositableOperationDetail::CompositableOperationDetail(OpUseTiledLayerBuffer&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUseTiledLayerBuffer()) OpUseTiledLayerBuffer(std::move(aOther));
    mType = TOpUseTiledLayerBuffer;
}

MOZ_IMPLICIT CompositableOperationDetail::CompositableOperationDetail(const OpRemoveTexture& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpRemoveTexture()) OpRemoveTexture(aOther);
    mType = TOpRemoveTexture;
}

MOZ_IMPLICIT CompositableOperationDetail::CompositableOperationDetail(OpRemoveTexture&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpRemoveTexture()) OpRemoveTexture(std::move(aOther));
    mType = TOpRemoveTexture;
}

MOZ_IMPLICIT CompositableOperationDetail::CompositableOperationDetail(const OpUseTexture& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUseTexture()) OpUseTexture(aOther);
    mType = TOpUseTexture;
}

MOZ_IMPLICIT CompositableOperationDetail::CompositableOperationDetail(OpUseTexture&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUseTexture()) OpUseTexture(std::move(aOther));
    mType = TOpUseTexture;
}

MOZ_IMPLICIT CompositableOperationDetail::CompositableOperationDetail(const OpUseComponentAlphaTextures& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUseComponentAlphaTextures()) OpUseComponentAlphaTextures(aOther);
    mType = TOpUseComponentAlphaTextures;
}

MOZ_IMPLICIT CompositableOperationDetail::CompositableOperationDetail(OpUseComponentAlphaTextures&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUseComponentAlphaTextures()) OpUseComponentAlphaTextures(std::move(aOther));
    mType = TOpUseComponentAlphaTextures;
}

MOZ_IMPLICIT CompositableOperationDetail::CompositableOperationDetail(const OpDeliverAcquireFence& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpDeliverAcquireFence()) OpDeliverAcquireFence(aOther);
    mType = TOpDeliverAcquireFence;
}

MOZ_IMPLICIT CompositableOperationDetail::CompositableOperationDetail(OpDeliverAcquireFence&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpDeliverAcquireFence()) OpDeliverAcquireFence(std::move(aOther));
    mType = TOpDeliverAcquireFence;
}

MOZ_IMPLICIT CompositableOperationDetail::CompositableOperationDetail(const CompositableOperationDetail& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TOpPaintTextureRegion:
        {
            new (mozilla::KnownNotNull, ptr_OpPaintTextureRegion()) OpPaintTextureRegion((aOther).get_OpPaintTextureRegion());
            break;
        }
    case TOpUseTiledLayerBuffer:
        {
            new (mozilla::KnownNotNull, ptr_OpUseTiledLayerBuffer()) OpUseTiledLayerBuffer((aOther).get_OpUseTiledLayerBuffer());
            break;
        }
    case TOpRemoveTexture:
        {
            new (mozilla::KnownNotNull, ptr_OpRemoveTexture()) OpRemoveTexture((aOther).get_OpRemoveTexture());
            break;
        }
    case TOpUseTexture:
        {
            new (mozilla::KnownNotNull, ptr_OpUseTexture()) OpUseTexture((aOther).get_OpUseTexture());
            break;
        }
    case TOpUseComponentAlphaTextures:
        {
            new (mozilla::KnownNotNull, ptr_OpUseComponentAlphaTextures()) OpUseComponentAlphaTextures((aOther).get_OpUseComponentAlphaTextures());
            break;
        }
    case TOpDeliverAcquireFence:
        {
            new (mozilla::KnownNotNull, ptr_OpDeliverAcquireFence()) OpDeliverAcquireFence((aOther).get_OpDeliverAcquireFence());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT CompositableOperationDetail::CompositableOperationDetail(CompositableOperationDetail&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TOpPaintTextureRegion:
        {
            new (mozilla::KnownNotNull, ptr_OpPaintTextureRegion()) OpPaintTextureRegion(std::move((aOther).get_OpPaintTextureRegion()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpUseTiledLayerBuffer:
        {
            new (mozilla::KnownNotNull, ptr_OpUseTiledLayerBuffer()) OpUseTiledLayerBuffer(std::move((aOther).get_OpUseTiledLayerBuffer()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpRemoveTexture:
        {
            new (mozilla::KnownNotNull, ptr_OpRemoveTexture()) OpRemoveTexture(std::move((aOther).get_OpRemoveTexture()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpUseTexture:
        {
            new (mozilla::KnownNotNull, ptr_OpUseTexture()) OpUseTexture(std::move((aOther).get_OpUseTexture()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpUseComponentAlphaTextures:
        {
            new (mozilla::KnownNotNull, ptr_OpUseComponentAlphaTextures()) OpUseComponentAlphaTextures(std::move((aOther).get_OpUseComponentAlphaTextures()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpDeliverAcquireFence:
        {
            new (mozilla::KnownNotNull, ptr_OpDeliverAcquireFence()) OpDeliverAcquireFence(std::move((aOther).get_OpDeliverAcquireFence()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

CompositableOperationDetail::~CompositableOperationDetail()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto CompositableOperationDetail::operator=(const OpPaintTextureRegion& aRhs) -> CompositableOperationDetail&
{
    if (MaybeDestroy(TOpPaintTextureRegion)) {
        new (mozilla::KnownNotNull, ptr_OpPaintTextureRegion()) OpPaintTextureRegion;
    }
    (*(ptr_OpPaintTextureRegion())) = aRhs;
    mType = TOpPaintTextureRegion;
    return (*(this));
}

auto CompositableOperationDetail::operator=(OpPaintTextureRegion&& aRhs) -> CompositableOperationDetail&
{
    if (MaybeDestroy(TOpPaintTextureRegion)) {
        new (mozilla::KnownNotNull, ptr_OpPaintTextureRegion()) OpPaintTextureRegion;
    }
    (*(ptr_OpPaintTextureRegion())) = std::move(aRhs);
    mType = TOpPaintTextureRegion;
    return (*(this));
}

auto CompositableOperationDetail::operator=(const OpUseTiledLayerBuffer& aRhs) -> CompositableOperationDetail&
{
    if (MaybeDestroy(TOpUseTiledLayerBuffer)) {
        new (mozilla::KnownNotNull, ptr_OpUseTiledLayerBuffer()) OpUseTiledLayerBuffer;
    }
    (*(ptr_OpUseTiledLayerBuffer())) = aRhs;
    mType = TOpUseTiledLayerBuffer;
    return (*(this));
}

auto CompositableOperationDetail::operator=(OpUseTiledLayerBuffer&& aRhs) -> CompositableOperationDetail&
{
    if (MaybeDestroy(TOpUseTiledLayerBuffer)) {
        new (mozilla::KnownNotNull, ptr_OpUseTiledLayerBuffer()) OpUseTiledLayerBuffer;
    }
    (*(ptr_OpUseTiledLayerBuffer())) = std::move(aRhs);
    mType = TOpUseTiledLayerBuffer;
    return (*(this));
}

auto CompositableOperationDetail::operator=(const OpRemoveTexture& aRhs) -> CompositableOperationDetail&
{
    if (MaybeDestroy(TOpRemoveTexture)) {
        new (mozilla::KnownNotNull, ptr_OpRemoveTexture()) OpRemoveTexture;
    }
    (*(ptr_OpRemoveTexture())) = aRhs;
    mType = TOpRemoveTexture;
    return (*(this));
}

auto CompositableOperationDetail::operator=(OpRemoveTexture&& aRhs) -> CompositableOperationDetail&
{
    if (MaybeDestroy(TOpRemoveTexture)) {
        new (mozilla::KnownNotNull, ptr_OpRemoveTexture()) OpRemoveTexture;
    }
    (*(ptr_OpRemoveTexture())) = std::move(aRhs);
    mType = TOpRemoveTexture;
    return (*(this));
}

auto CompositableOperationDetail::operator=(const OpUseTexture& aRhs) -> CompositableOperationDetail&
{
    if (MaybeDestroy(TOpUseTexture)) {
        new (mozilla::KnownNotNull, ptr_OpUseTexture()) OpUseTexture;
    }
    (*(ptr_OpUseTexture())) = aRhs;
    mType = TOpUseTexture;
    return (*(this));
}

auto CompositableOperationDetail::operator=(OpUseTexture&& aRhs) -> CompositableOperationDetail&
{
    if (MaybeDestroy(TOpUseTexture)) {
        new (mozilla::KnownNotNull, ptr_OpUseTexture()) OpUseTexture;
    }
    (*(ptr_OpUseTexture())) = std::move(aRhs);
    mType = TOpUseTexture;
    return (*(this));
}

auto CompositableOperationDetail::operator=(const OpUseComponentAlphaTextures& aRhs) -> CompositableOperationDetail&
{
    if (MaybeDestroy(TOpUseComponentAlphaTextures)) {
        new (mozilla::KnownNotNull, ptr_OpUseComponentAlphaTextures()) OpUseComponentAlphaTextures;
    }
    (*(ptr_OpUseComponentAlphaTextures())) = aRhs;
    mType = TOpUseComponentAlphaTextures;
    return (*(this));
}

auto CompositableOperationDetail::operator=(OpUseComponentAlphaTextures&& aRhs) -> CompositableOperationDetail&
{
    if (MaybeDestroy(TOpUseComponentAlphaTextures)) {
        new (mozilla::KnownNotNull, ptr_OpUseComponentAlphaTextures()) OpUseComponentAlphaTextures;
    }
    (*(ptr_OpUseComponentAlphaTextures())) = std::move(aRhs);
    mType = TOpUseComponentAlphaTextures;
    return (*(this));
}

auto CompositableOperationDetail::operator=(const OpDeliverAcquireFence& aRhs) -> CompositableOperationDetail&
{
    if (MaybeDestroy(TOpDeliverAcquireFence)) {
        new (mozilla::KnownNotNull, ptr_OpDeliverAcquireFence()) OpDeliverAcquireFence;
    }
    (*(ptr_OpDeliverAcquireFence())) = aRhs;
    mType = TOpDeliverAcquireFence;
    return (*(this));
}

auto CompositableOperationDetail::operator=(OpDeliverAcquireFence&& aRhs) -> CompositableOperationDetail&
{
    if (MaybeDestroy(TOpDeliverAcquireFence)) {
        new (mozilla::KnownNotNull, ptr_OpDeliverAcquireFence()) OpDeliverAcquireFence;
    }
    (*(ptr_OpDeliverAcquireFence())) = std::move(aRhs);
    mType = TOpDeliverAcquireFence;
    return (*(this));
}

auto CompositableOperationDetail::operator=(const CompositableOperationDetail& aRhs) -> CompositableOperationDetail&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TOpPaintTextureRegion:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpPaintTextureRegion()) OpPaintTextureRegion;
            }
            (*(ptr_OpPaintTextureRegion())) = (aRhs).get_OpPaintTextureRegion();
            break;
        }
    case TOpUseTiledLayerBuffer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUseTiledLayerBuffer()) OpUseTiledLayerBuffer;
            }
            (*(ptr_OpUseTiledLayerBuffer())) = (aRhs).get_OpUseTiledLayerBuffer();
            break;
        }
    case TOpRemoveTexture:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpRemoveTexture()) OpRemoveTexture;
            }
            (*(ptr_OpRemoveTexture())) = (aRhs).get_OpRemoveTexture();
            break;
        }
    case TOpUseTexture:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUseTexture()) OpUseTexture;
            }
            (*(ptr_OpUseTexture())) = (aRhs).get_OpUseTexture();
            break;
        }
    case TOpUseComponentAlphaTextures:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUseComponentAlphaTextures()) OpUseComponentAlphaTextures;
            }
            (*(ptr_OpUseComponentAlphaTextures())) = (aRhs).get_OpUseComponentAlphaTextures();
            break;
        }
    case TOpDeliverAcquireFence:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpDeliverAcquireFence()) OpDeliverAcquireFence;
            }
            (*(ptr_OpDeliverAcquireFence())) = (aRhs).get_OpDeliverAcquireFence();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto CompositableOperationDetail::operator=(CompositableOperationDetail&& aRhs) -> CompositableOperationDetail&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TOpPaintTextureRegion:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpPaintTextureRegion()) OpPaintTextureRegion;
            }
            (*(ptr_OpPaintTextureRegion())) = std::move((aRhs).get_OpPaintTextureRegion());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpUseTiledLayerBuffer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUseTiledLayerBuffer()) OpUseTiledLayerBuffer;
            }
            (*(ptr_OpUseTiledLayerBuffer())) = std::move((aRhs).get_OpUseTiledLayerBuffer());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpRemoveTexture:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpRemoveTexture()) OpRemoveTexture;
            }
            (*(ptr_OpRemoveTexture())) = std::move((aRhs).get_OpRemoveTexture());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpUseTexture:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUseTexture()) OpUseTexture;
            }
            (*(ptr_OpUseTexture())) = std::move((aRhs).get_OpUseTexture());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpUseComponentAlphaTextures:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUseComponentAlphaTextures()) OpUseComponentAlphaTextures;
            }
            (*(ptr_OpUseComponentAlphaTextures())) = std::move((aRhs).get_OpUseComponentAlphaTextures());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpDeliverAcquireFence:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpDeliverAcquireFence()) OpDeliverAcquireFence;
            }
            (*(ptr_OpDeliverAcquireFence())) = std::move((aRhs).get_OpDeliverAcquireFence());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::CompositableOperationDetail>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::CompositableOperationDetail union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'CompositableOperationDetail'
    (aMsg)->WriteSentinel(2559314663);

    switch (type) {
    case union__::TOpPaintTextureRegion:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpPaintTextureRegion());
            // Sentinel = 'TOpPaintTextureRegion'
            (aMsg)->WriteSentinel(1510475877);
            return;
        }
    case union__::TOpUseTiledLayerBuffer:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpUseTiledLayerBuffer());
            // Sentinel = 'TOpUseTiledLayerBuffer'
            (aMsg)->WriteSentinel(1613957258);
            return;
        }
    case union__::TOpRemoveTexture:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpRemoveTexture());
            // Sentinel = 'TOpRemoveTexture'
            (aMsg)->WriteSentinel(885261939);
            return;
        }
    case union__::TOpUseTexture:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpUseTexture());
            // Sentinel = 'TOpUseTexture'
            (aMsg)->WriteSentinel(584320306);
            return;
        }
    case union__::TOpUseComponentAlphaTextures:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpUseComponentAlphaTextures());
            // Sentinel = 'TOpUseComponentAlphaTextures'
            (aMsg)->WriteSentinel(2660502334);
            return;
        }
    case union__::TOpDeliverAcquireFence:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpDeliverAcquireFence());
            // Sentinel = 'TOpDeliverAcquireFence'
            (aMsg)->WriteSentinel(1621362826);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::CompositableOperationDetail>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::CompositableOperationDetail union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union CompositableOperationDetail");
        return false;
    }
    // Sentinel = 'CompositableOperationDetail'
    if ((!((aMsg)->ReadSentinel(aIter, 2559314663)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union CompositableOperationDetail");
        return false;
    }

    switch (type) {
    case union__::TOpPaintTextureRegion:
        {
            mozilla::layers::OpPaintTextureRegion tmp = mozilla::layers::OpPaintTextureRegion();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpPaintTextureRegion())))))) {
                aActor->FatalError("Error deserializing variant TOpPaintTextureRegion of union CompositableOperationDetail");
                return false;
            }
            // Sentinel = 'TOpPaintTextureRegion'
            if ((!((aMsg)->ReadSentinel(aIter, 1510475877)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpPaintTextureRegion of union CompositableOperationDetail");
                return false;
            }
            return true;
        }
    case union__::TOpUseTiledLayerBuffer:
        {
            mozilla::layers::OpUseTiledLayerBuffer tmp = mozilla::layers::OpUseTiledLayerBuffer();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpUseTiledLayerBuffer())))))) {
                aActor->FatalError("Error deserializing variant TOpUseTiledLayerBuffer of union CompositableOperationDetail");
                return false;
            }
            // Sentinel = 'TOpUseTiledLayerBuffer'
            if ((!((aMsg)->ReadSentinel(aIter, 1613957258)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpUseTiledLayerBuffer of union CompositableOperationDetail");
                return false;
            }
            return true;
        }
    case union__::TOpRemoveTexture:
        {
            mozilla::layers::OpRemoveTexture tmp = mozilla::layers::OpRemoveTexture();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpRemoveTexture())))))) {
                aActor->FatalError("Error deserializing variant TOpRemoveTexture of union CompositableOperationDetail");
                return false;
            }
            // Sentinel = 'TOpRemoveTexture'
            if ((!((aMsg)->ReadSentinel(aIter, 885261939)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpRemoveTexture of union CompositableOperationDetail");
                return false;
            }
            return true;
        }
    case union__::TOpUseTexture:
        {
            mozilla::layers::OpUseTexture tmp = mozilla::layers::OpUseTexture();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpUseTexture())))))) {
                aActor->FatalError("Error deserializing variant TOpUseTexture of union CompositableOperationDetail");
                return false;
            }
            // Sentinel = 'TOpUseTexture'
            if ((!((aMsg)->ReadSentinel(aIter, 584320306)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpUseTexture of union CompositableOperationDetail");
                return false;
            }
            return true;
        }
    case union__::TOpUseComponentAlphaTextures:
        {
            mozilla::layers::OpUseComponentAlphaTextures tmp = mozilla::layers::OpUseComponentAlphaTextures();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpUseComponentAlphaTextures())))))) {
                aActor->FatalError("Error deserializing variant TOpUseComponentAlphaTextures of union CompositableOperationDetail");
                return false;
            }
            // Sentinel = 'TOpUseComponentAlphaTextures'
            if ((!((aMsg)->ReadSentinel(aIter, 2660502334)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpUseComponentAlphaTextures of union CompositableOperationDetail");
                return false;
            }
            return true;
        }
    case union__::TOpDeliverAcquireFence:
        {
            mozilla::layers::OpDeliverAcquireFence tmp = mozilla::layers::OpDeliverAcquireFence();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpDeliverAcquireFence())))))) {
                aActor->FatalError("Error deserializing variant TOpDeliverAcquireFence of union CompositableOperationDetail");
                return false;
            }
            // Sentinel = 'TOpDeliverAcquireFence'
            if ((!((aMsg)->ReadSentinel(aIter, 1621362826)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpDeliverAcquireFence of union CompositableOperationDetail");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CompositableOperation|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::CompositableOperation>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).compositable());
    // Sentinel = 'compositable'
    (aMsg)->WriteSentinel(551879939);
    WriteIPDLParam(aMsg, aActor, (aVar).detail());
    // Sentinel = 'detail'
    (aMsg)->WriteSentinel(143131252);
}

auto IPDLParamTraits<mozilla::layers::CompositableOperation>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->compositable())))))) {
        aActor->FatalError("Error deserializing 'compositable' (CompositableHandle) member of 'CompositableOperation'");
        return false;
    }
    // Sentinel = 'compositable'
    if ((!((aMsg)->ReadSentinel(aIter, 551879939)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'compositable' (CompositableHandle) member of 'CompositableOperation'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->detail())))))) {
        aActor->FatalError("Error deserializing 'detail' (CompositableOperationDetail) member of 'CompositableOperation'");
        return false;
    }
    // Sentinel = 'detail'
    if ((!((aMsg)->ReadSentinel(aIter, 143131252)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'detail' (CompositableOperationDetail) member of 'CompositableOperation'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union Edit|
//
namespace mozilla {
namespace layers {
auto Edit::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TOpCreatePaintedLayer:
        {
            (ptr_OpCreatePaintedLayer())->~OpCreatePaintedLayer__tdef();
            break;
        }
    case TOpCreateContainerLayer:
        {
            (ptr_OpCreateContainerLayer())->~OpCreateContainerLayer__tdef();
            break;
        }
    case TOpCreateImageLayer:
        {
            (ptr_OpCreateImageLayer())->~OpCreateImageLayer__tdef();
            break;
        }
    case TOpCreateColorLayer:
        {
            (ptr_OpCreateColorLayer())->~OpCreateColorLayer__tdef();
            break;
        }
    case TOpCreateCanvasLayer:
        {
            (ptr_OpCreateCanvasLayer())->~OpCreateCanvasLayer__tdef();
            break;
        }
    case TOpCreateRefLayer:
        {
            (ptr_OpCreateRefLayer())->~OpCreateRefLayer__tdef();
            break;
        }
    case TOpSetDiagnosticTypes:
        {
            (ptr_OpSetDiagnosticTypes())->~OpSetDiagnosticTypes__tdef();
            break;
        }
    case TOpSetRoot:
        {
            (ptr_OpSetRoot())->~OpSetRoot__tdef();
            break;
        }
    case TOpInsertAfter:
        {
            (ptr_OpInsertAfter())->~OpInsertAfter__tdef();
            break;
        }
    case TOpPrependChild:
        {
            (ptr_OpPrependChild())->~OpPrependChild__tdef();
            break;
        }
    case TOpRemoveChild:
        {
            (ptr_OpRemoveChild())->~OpRemoveChild__tdef();
            break;
        }
    case TOpRepositionChild:
        {
            (ptr_OpRepositionChild())->~OpRepositionChild__tdef();
            break;
        }
    case TOpRaiseToTopChild:
        {
            (ptr_OpRaiseToTopChild())->~OpRaiseToTopChild__tdef();
            break;
        }
    case TOpAttachCompositable:
        {
            (ptr_OpAttachCompositable())->~OpAttachCompositable__tdef();
            break;
        }
    case TOpAttachAsyncCompositable:
        {
            (ptr_OpAttachAsyncCompositable())->~OpAttachAsyncCompositable__tdef();
            break;
        }
    case TCompositableOperation:
        {
            (ptr_CompositableOperation())->~CompositableOperation__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT Edit::Edit(const OpCreatePaintedLayer& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpCreatePaintedLayer()) OpCreatePaintedLayer(aOther);
    mType = TOpCreatePaintedLayer;
}

MOZ_IMPLICIT Edit::Edit(OpCreatePaintedLayer&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpCreatePaintedLayer()) OpCreatePaintedLayer(std::move(aOther));
    mType = TOpCreatePaintedLayer;
}

MOZ_IMPLICIT Edit::Edit(const OpCreateContainerLayer& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpCreateContainerLayer()) OpCreateContainerLayer(aOther);
    mType = TOpCreateContainerLayer;
}

MOZ_IMPLICIT Edit::Edit(OpCreateContainerLayer&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpCreateContainerLayer()) OpCreateContainerLayer(std::move(aOther));
    mType = TOpCreateContainerLayer;
}

MOZ_IMPLICIT Edit::Edit(const OpCreateImageLayer& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpCreateImageLayer()) OpCreateImageLayer(aOther);
    mType = TOpCreateImageLayer;
}

MOZ_IMPLICIT Edit::Edit(OpCreateImageLayer&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpCreateImageLayer()) OpCreateImageLayer(std::move(aOther));
    mType = TOpCreateImageLayer;
}

MOZ_IMPLICIT Edit::Edit(const OpCreateColorLayer& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpCreateColorLayer()) OpCreateColorLayer(aOther);
    mType = TOpCreateColorLayer;
}

MOZ_IMPLICIT Edit::Edit(OpCreateColorLayer&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpCreateColorLayer()) OpCreateColorLayer(std::move(aOther));
    mType = TOpCreateColorLayer;
}

MOZ_IMPLICIT Edit::Edit(const OpCreateCanvasLayer& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpCreateCanvasLayer()) OpCreateCanvasLayer(aOther);
    mType = TOpCreateCanvasLayer;
}

MOZ_IMPLICIT Edit::Edit(OpCreateCanvasLayer&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpCreateCanvasLayer()) OpCreateCanvasLayer(std::move(aOther));
    mType = TOpCreateCanvasLayer;
}

MOZ_IMPLICIT Edit::Edit(const OpCreateRefLayer& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpCreateRefLayer()) OpCreateRefLayer(aOther);
    mType = TOpCreateRefLayer;
}

MOZ_IMPLICIT Edit::Edit(OpCreateRefLayer&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpCreateRefLayer()) OpCreateRefLayer(std::move(aOther));
    mType = TOpCreateRefLayer;
}

MOZ_IMPLICIT Edit::Edit(const OpSetDiagnosticTypes& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpSetDiagnosticTypes()) OpSetDiagnosticTypes(aOther);
    mType = TOpSetDiagnosticTypes;
}

MOZ_IMPLICIT Edit::Edit(OpSetDiagnosticTypes&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpSetDiagnosticTypes()) OpSetDiagnosticTypes(std::move(aOther));
    mType = TOpSetDiagnosticTypes;
}

MOZ_IMPLICIT Edit::Edit(const OpSetRoot& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpSetRoot()) OpSetRoot(aOther);
    mType = TOpSetRoot;
}

MOZ_IMPLICIT Edit::Edit(OpSetRoot&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpSetRoot()) OpSetRoot(std::move(aOther));
    mType = TOpSetRoot;
}

MOZ_IMPLICIT Edit::Edit(const OpInsertAfter& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpInsertAfter()) OpInsertAfter(aOther);
    mType = TOpInsertAfter;
}

MOZ_IMPLICIT Edit::Edit(OpInsertAfter&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpInsertAfter()) OpInsertAfter(std::move(aOther));
    mType = TOpInsertAfter;
}

MOZ_IMPLICIT Edit::Edit(const OpPrependChild& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpPrependChild()) OpPrependChild(aOther);
    mType = TOpPrependChild;
}

MOZ_IMPLICIT Edit::Edit(OpPrependChild&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpPrependChild()) OpPrependChild(std::move(aOther));
    mType = TOpPrependChild;
}

MOZ_IMPLICIT Edit::Edit(const OpRemoveChild& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpRemoveChild()) OpRemoveChild(aOther);
    mType = TOpRemoveChild;
}

MOZ_IMPLICIT Edit::Edit(OpRemoveChild&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpRemoveChild()) OpRemoveChild(std::move(aOther));
    mType = TOpRemoveChild;
}

MOZ_IMPLICIT Edit::Edit(const OpRepositionChild& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpRepositionChild()) OpRepositionChild(aOther);
    mType = TOpRepositionChild;
}

MOZ_IMPLICIT Edit::Edit(OpRepositionChild&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpRepositionChild()) OpRepositionChild(std::move(aOther));
    mType = TOpRepositionChild;
}

MOZ_IMPLICIT Edit::Edit(const OpRaiseToTopChild& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpRaiseToTopChild()) OpRaiseToTopChild(aOther);
    mType = TOpRaiseToTopChild;
}

MOZ_IMPLICIT Edit::Edit(OpRaiseToTopChild&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpRaiseToTopChild()) OpRaiseToTopChild(std::move(aOther));
    mType = TOpRaiseToTopChild;
}

MOZ_IMPLICIT Edit::Edit(const OpAttachCompositable& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAttachCompositable()) OpAttachCompositable(aOther);
    mType = TOpAttachCompositable;
}

MOZ_IMPLICIT Edit::Edit(OpAttachCompositable&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAttachCompositable()) OpAttachCompositable(std::move(aOther));
    mType = TOpAttachCompositable;
}

MOZ_IMPLICIT Edit::Edit(const OpAttachAsyncCompositable& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAttachAsyncCompositable()) OpAttachAsyncCompositable(aOther);
    mType = TOpAttachAsyncCompositable;
}

MOZ_IMPLICIT Edit::Edit(OpAttachAsyncCompositable&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAttachAsyncCompositable()) OpAttachAsyncCompositable(std::move(aOther));
    mType = TOpAttachAsyncCompositable;
}

MOZ_IMPLICIT Edit::Edit(const CompositableOperation& aOther)
{
    new (mozilla::KnownNotNull, ptr_CompositableOperation()) CompositableOperation(aOther);
    mType = TCompositableOperation;
}

MOZ_IMPLICIT Edit::Edit(CompositableOperation&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CompositableOperation()) CompositableOperation(std::move(aOther));
    mType = TCompositableOperation;
}

MOZ_IMPLICIT Edit::Edit(const Edit& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TOpCreatePaintedLayer:
        {
            new (mozilla::KnownNotNull, ptr_OpCreatePaintedLayer()) OpCreatePaintedLayer((aOther).get_OpCreatePaintedLayer());
            break;
        }
    case TOpCreateContainerLayer:
        {
            new (mozilla::KnownNotNull, ptr_OpCreateContainerLayer()) OpCreateContainerLayer((aOther).get_OpCreateContainerLayer());
            break;
        }
    case TOpCreateImageLayer:
        {
            new (mozilla::KnownNotNull, ptr_OpCreateImageLayer()) OpCreateImageLayer((aOther).get_OpCreateImageLayer());
            break;
        }
    case TOpCreateColorLayer:
        {
            new (mozilla::KnownNotNull, ptr_OpCreateColorLayer()) OpCreateColorLayer((aOther).get_OpCreateColorLayer());
            break;
        }
    case TOpCreateCanvasLayer:
        {
            new (mozilla::KnownNotNull, ptr_OpCreateCanvasLayer()) OpCreateCanvasLayer((aOther).get_OpCreateCanvasLayer());
            break;
        }
    case TOpCreateRefLayer:
        {
            new (mozilla::KnownNotNull, ptr_OpCreateRefLayer()) OpCreateRefLayer((aOther).get_OpCreateRefLayer());
            break;
        }
    case TOpSetDiagnosticTypes:
        {
            new (mozilla::KnownNotNull, ptr_OpSetDiagnosticTypes()) OpSetDiagnosticTypes((aOther).get_OpSetDiagnosticTypes());
            break;
        }
    case TOpSetRoot:
        {
            new (mozilla::KnownNotNull, ptr_OpSetRoot()) OpSetRoot((aOther).get_OpSetRoot());
            break;
        }
    case TOpInsertAfter:
        {
            new (mozilla::KnownNotNull, ptr_OpInsertAfter()) OpInsertAfter((aOther).get_OpInsertAfter());
            break;
        }
    case TOpPrependChild:
        {
            new (mozilla::KnownNotNull, ptr_OpPrependChild()) OpPrependChild((aOther).get_OpPrependChild());
            break;
        }
    case TOpRemoveChild:
        {
            new (mozilla::KnownNotNull, ptr_OpRemoveChild()) OpRemoveChild((aOther).get_OpRemoveChild());
            break;
        }
    case TOpRepositionChild:
        {
            new (mozilla::KnownNotNull, ptr_OpRepositionChild()) OpRepositionChild((aOther).get_OpRepositionChild());
            break;
        }
    case TOpRaiseToTopChild:
        {
            new (mozilla::KnownNotNull, ptr_OpRaiseToTopChild()) OpRaiseToTopChild((aOther).get_OpRaiseToTopChild());
            break;
        }
    case TOpAttachCompositable:
        {
            new (mozilla::KnownNotNull, ptr_OpAttachCompositable()) OpAttachCompositable((aOther).get_OpAttachCompositable());
            break;
        }
    case TOpAttachAsyncCompositable:
        {
            new (mozilla::KnownNotNull, ptr_OpAttachAsyncCompositable()) OpAttachAsyncCompositable((aOther).get_OpAttachAsyncCompositable());
            break;
        }
    case TCompositableOperation:
        {
            new (mozilla::KnownNotNull, ptr_CompositableOperation()) CompositableOperation((aOther).get_CompositableOperation());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT Edit::Edit(Edit&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TOpCreatePaintedLayer:
        {
            new (mozilla::KnownNotNull, ptr_OpCreatePaintedLayer()) OpCreatePaintedLayer(std::move((aOther).get_OpCreatePaintedLayer()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpCreateContainerLayer:
        {
            new (mozilla::KnownNotNull, ptr_OpCreateContainerLayer()) OpCreateContainerLayer(std::move((aOther).get_OpCreateContainerLayer()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpCreateImageLayer:
        {
            new (mozilla::KnownNotNull, ptr_OpCreateImageLayer()) OpCreateImageLayer(std::move((aOther).get_OpCreateImageLayer()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpCreateColorLayer:
        {
            new (mozilla::KnownNotNull, ptr_OpCreateColorLayer()) OpCreateColorLayer(std::move((aOther).get_OpCreateColorLayer()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpCreateCanvasLayer:
        {
            new (mozilla::KnownNotNull, ptr_OpCreateCanvasLayer()) OpCreateCanvasLayer(std::move((aOther).get_OpCreateCanvasLayer()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpCreateRefLayer:
        {
            new (mozilla::KnownNotNull, ptr_OpCreateRefLayer()) OpCreateRefLayer(std::move((aOther).get_OpCreateRefLayer()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpSetDiagnosticTypes:
        {
            new (mozilla::KnownNotNull, ptr_OpSetDiagnosticTypes()) OpSetDiagnosticTypes(std::move((aOther).get_OpSetDiagnosticTypes()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpSetRoot:
        {
            new (mozilla::KnownNotNull, ptr_OpSetRoot()) OpSetRoot(std::move((aOther).get_OpSetRoot()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpInsertAfter:
        {
            new (mozilla::KnownNotNull, ptr_OpInsertAfter()) OpInsertAfter(std::move((aOther).get_OpInsertAfter()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpPrependChild:
        {
            new (mozilla::KnownNotNull, ptr_OpPrependChild()) OpPrependChild(std::move((aOther).get_OpPrependChild()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpRemoveChild:
        {
            new (mozilla::KnownNotNull, ptr_OpRemoveChild()) OpRemoveChild(std::move((aOther).get_OpRemoveChild()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpRepositionChild:
        {
            new (mozilla::KnownNotNull, ptr_OpRepositionChild()) OpRepositionChild(std::move((aOther).get_OpRepositionChild()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpRaiseToTopChild:
        {
            new (mozilla::KnownNotNull, ptr_OpRaiseToTopChild()) OpRaiseToTopChild(std::move((aOther).get_OpRaiseToTopChild()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpAttachCompositable:
        {
            new (mozilla::KnownNotNull, ptr_OpAttachCompositable()) OpAttachCompositable(std::move((aOther).get_OpAttachCompositable()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpAttachAsyncCompositable:
        {
            new (mozilla::KnownNotNull, ptr_OpAttachAsyncCompositable()) OpAttachAsyncCompositable(std::move((aOther).get_OpAttachAsyncCompositable()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCompositableOperation:
        {
            new (mozilla::KnownNotNull, ptr_CompositableOperation()) CompositableOperation(std::move((aOther).get_CompositableOperation()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

Edit::~Edit()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto Edit::operator=(const OpCreatePaintedLayer& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpCreatePaintedLayer)) {
        new (mozilla::KnownNotNull, ptr_OpCreatePaintedLayer()) OpCreatePaintedLayer;
    }
    (*(ptr_OpCreatePaintedLayer())) = aRhs;
    mType = TOpCreatePaintedLayer;
    return (*(this));
}

auto Edit::operator=(OpCreatePaintedLayer&& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpCreatePaintedLayer)) {
        new (mozilla::KnownNotNull, ptr_OpCreatePaintedLayer()) OpCreatePaintedLayer;
    }
    (*(ptr_OpCreatePaintedLayer())) = std::move(aRhs);
    mType = TOpCreatePaintedLayer;
    return (*(this));
}

auto Edit::operator=(const OpCreateContainerLayer& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpCreateContainerLayer)) {
        new (mozilla::KnownNotNull, ptr_OpCreateContainerLayer()) OpCreateContainerLayer;
    }
    (*(ptr_OpCreateContainerLayer())) = aRhs;
    mType = TOpCreateContainerLayer;
    return (*(this));
}

auto Edit::operator=(OpCreateContainerLayer&& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpCreateContainerLayer)) {
        new (mozilla::KnownNotNull, ptr_OpCreateContainerLayer()) OpCreateContainerLayer;
    }
    (*(ptr_OpCreateContainerLayer())) = std::move(aRhs);
    mType = TOpCreateContainerLayer;
    return (*(this));
}

auto Edit::operator=(const OpCreateImageLayer& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpCreateImageLayer)) {
        new (mozilla::KnownNotNull, ptr_OpCreateImageLayer()) OpCreateImageLayer;
    }
    (*(ptr_OpCreateImageLayer())) = aRhs;
    mType = TOpCreateImageLayer;
    return (*(this));
}

auto Edit::operator=(OpCreateImageLayer&& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpCreateImageLayer)) {
        new (mozilla::KnownNotNull, ptr_OpCreateImageLayer()) OpCreateImageLayer;
    }
    (*(ptr_OpCreateImageLayer())) = std::move(aRhs);
    mType = TOpCreateImageLayer;
    return (*(this));
}

auto Edit::operator=(const OpCreateColorLayer& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpCreateColorLayer)) {
        new (mozilla::KnownNotNull, ptr_OpCreateColorLayer()) OpCreateColorLayer;
    }
    (*(ptr_OpCreateColorLayer())) = aRhs;
    mType = TOpCreateColorLayer;
    return (*(this));
}

auto Edit::operator=(OpCreateColorLayer&& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpCreateColorLayer)) {
        new (mozilla::KnownNotNull, ptr_OpCreateColorLayer()) OpCreateColorLayer;
    }
    (*(ptr_OpCreateColorLayer())) = std::move(aRhs);
    mType = TOpCreateColorLayer;
    return (*(this));
}

auto Edit::operator=(const OpCreateCanvasLayer& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpCreateCanvasLayer)) {
        new (mozilla::KnownNotNull, ptr_OpCreateCanvasLayer()) OpCreateCanvasLayer;
    }
    (*(ptr_OpCreateCanvasLayer())) = aRhs;
    mType = TOpCreateCanvasLayer;
    return (*(this));
}

auto Edit::operator=(OpCreateCanvasLayer&& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpCreateCanvasLayer)) {
        new (mozilla::KnownNotNull, ptr_OpCreateCanvasLayer()) OpCreateCanvasLayer;
    }
    (*(ptr_OpCreateCanvasLayer())) = std::move(aRhs);
    mType = TOpCreateCanvasLayer;
    return (*(this));
}

auto Edit::operator=(const OpCreateRefLayer& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpCreateRefLayer)) {
        new (mozilla::KnownNotNull, ptr_OpCreateRefLayer()) OpCreateRefLayer;
    }
    (*(ptr_OpCreateRefLayer())) = aRhs;
    mType = TOpCreateRefLayer;
    return (*(this));
}

auto Edit::operator=(OpCreateRefLayer&& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpCreateRefLayer)) {
        new (mozilla::KnownNotNull, ptr_OpCreateRefLayer()) OpCreateRefLayer;
    }
    (*(ptr_OpCreateRefLayer())) = std::move(aRhs);
    mType = TOpCreateRefLayer;
    return (*(this));
}

auto Edit::operator=(const OpSetDiagnosticTypes& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpSetDiagnosticTypes)) {
        new (mozilla::KnownNotNull, ptr_OpSetDiagnosticTypes()) OpSetDiagnosticTypes;
    }
    (*(ptr_OpSetDiagnosticTypes())) = aRhs;
    mType = TOpSetDiagnosticTypes;
    return (*(this));
}

auto Edit::operator=(OpSetDiagnosticTypes&& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpSetDiagnosticTypes)) {
        new (mozilla::KnownNotNull, ptr_OpSetDiagnosticTypes()) OpSetDiagnosticTypes;
    }
    (*(ptr_OpSetDiagnosticTypes())) = std::move(aRhs);
    mType = TOpSetDiagnosticTypes;
    return (*(this));
}

auto Edit::operator=(const OpSetRoot& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpSetRoot)) {
        new (mozilla::KnownNotNull, ptr_OpSetRoot()) OpSetRoot;
    }
    (*(ptr_OpSetRoot())) = aRhs;
    mType = TOpSetRoot;
    return (*(this));
}

auto Edit::operator=(OpSetRoot&& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpSetRoot)) {
        new (mozilla::KnownNotNull, ptr_OpSetRoot()) OpSetRoot;
    }
    (*(ptr_OpSetRoot())) = std::move(aRhs);
    mType = TOpSetRoot;
    return (*(this));
}

auto Edit::operator=(const OpInsertAfter& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpInsertAfter)) {
        new (mozilla::KnownNotNull, ptr_OpInsertAfter()) OpInsertAfter;
    }
    (*(ptr_OpInsertAfter())) = aRhs;
    mType = TOpInsertAfter;
    return (*(this));
}

auto Edit::operator=(OpInsertAfter&& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpInsertAfter)) {
        new (mozilla::KnownNotNull, ptr_OpInsertAfter()) OpInsertAfter;
    }
    (*(ptr_OpInsertAfter())) = std::move(aRhs);
    mType = TOpInsertAfter;
    return (*(this));
}

auto Edit::operator=(const OpPrependChild& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpPrependChild)) {
        new (mozilla::KnownNotNull, ptr_OpPrependChild()) OpPrependChild;
    }
    (*(ptr_OpPrependChild())) = aRhs;
    mType = TOpPrependChild;
    return (*(this));
}

auto Edit::operator=(OpPrependChild&& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpPrependChild)) {
        new (mozilla::KnownNotNull, ptr_OpPrependChild()) OpPrependChild;
    }
    (*(ptr_OpPrependChild())) = std::move(aRhs);
    mType = TOpPrependChild;
    return (*(this));
}

auto Edit::operator=(const OpRemoveChild& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpRemoveChild)) {
        new (mozilla::KnownNotNull, ptr_OpRemoveChild()) OpRemoveChild;
    }
    (*(ptr_OpRemoveChild())) = aRhs;
    mType = TOpRemoveChild;
    return (*(this));
}

auto Edit::operator=(OpRemoveChild&& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpRemoveChild)) {
        new (mozilla::KnownNotNull, ptr_OpRemoveChild()) OpRemoveChild;
    }
    (*(ptr_OpRemoveChild())) = std::move(aRhs);
    mType = TOpRemoveChild;
    return (*(this));
}

auto Edit::operator=(const OpRepositionChild& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpRepositionChild)) {
        new (mozilla::KnownNotNull, ptr_OpRepositionChild()) OpRepositionChild;
    }
    (*(ptr_OpRepositionChild())) = aRhs;
    mType = TOpRepositionChild;
    return (*(this));
}

auto Edit::operator=(OpRepositionChild&& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpRepositionChild)) {
        new (mozilla::KnownNotNull, ptr_OpRepositionChild()) OpRepositionChild;
    }
    (*(ptr_OpRepositionChild())) = std::move(aRhs);
    mType = TOpRepositionChild;
    return (*(this));
}

auto Edit::operator=(const OpRaiseToTopChild& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpRaiseToTopChild)) {
        new (mozilla::KnownNotNull, ptr_OpRaiseToTopChild()) OpRaiseToTopChild;
    }
    (*(ptr_OpRaiseToTopChild())) = aRhs;
    mType = TOpRaiseToTopChild;
    return (*(this));
}

auto Edit::operator=(OpRaiseToTopChild&& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpRaiseToTopChild)) {
        new (mozilla::KnownNotNull, ptr_OpRaiseToTopChild()) OpRaiseToTopChild;
    }
    (*(ptr_OpRaiseToTopChild())) = std::move(aRhs);
    mType = TOpRaiseToTopChild;
    return (*(this));
}

auto Edit::operator=(const OpAttachCompositable& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpAttachCompositable)) {
        new (mozilla::KnownNotNull, ptr_OpAttachCompositable()) OpAttachCompositable;
    }
    (*(ptr_OpAttachCompositable())) = aRhs;
    mType = TOpAttachCompositable;
    return (*(this));
}

auto Edit::operator=(OpAttachCompositable&& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpAttachCompositable)) {
        new (mozilla::KnownNotNull, ptr_OpAttachCompositable()) OpAttachCompositable;
    }
    (*(ptr_OpAttachCompositable())) = std::move(aRhs);
    mType = TOpAttachCompositable;
    return (*(this));
}

auto Edit::operator=(const OpAttachAsyncCompositable& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpAttachAsyncCompositable)) {
        new (mozilla::KnownNotNull, ptr_OpAttachAsyncCompositable()) OpAttachAsyncCompositable;
    }
    (*(ptr_OpAttachAsyncCompositable())) = aRhs;
    mType = TOpAttachAsyncCompositable;
    return (*(this));
}

auto Edit::operator=(OpAttachAsyncCompositable&& aRhs) -> Edit&
{
    if (MaybeDestroy(TOpAttachAsyncCompositable)) {
        new (mozilla::KnownNotNull, ptr_OpAttachAsyncCompositable()) OpAttachAsyncCompositable;
    }
    (*(ptr_OpAttachAsyncCompositable())) = std::move(aRhs);
    mType = TOpAttachAsyncCompositable;
    return (*(this));
}

auto Edit::operator=(const CompositableOperation& aRhs) -> Edit&
{
    if (MaybeDestroy(TCompositableOperation)) {
        new (mozilla::KnownNotNull, ptr_CompositableOperation()) CompositableOperation;
    }
    (*(ptr_CompositableOperation())) = aRhs;
    mType = TCompositableOperation;
    return (*(this));
}

auto Edit::operator=(CompositableOperation&& aRhs) -> Edit&
{
    if (MaybeDestroy(TCompositableOperation)) {
        new (mozilla::KnownNotNull, ptr_CompositableOperation()) CompositableOperation;
    }
    (*(ptr_CompositableOperation())) = std::move(aRhs);
    mType = TCompositableOperation;
    return (*(this));
}

auto Edit::operator=(const Edit& aRhs) -> Edit&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TOpCreatePaintedLayer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpCreatePaintedLayer()) OpCreatePaintedLayer;
            }
            (*(ptr_OpCreatePaintedLayer())) = (aRhs).get_OpCreatePaintedLayer();
            break;
        }
    case TOpCreateContainerLayer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpCreateContainerLayer()) OpCreateContainerLayer;
            }
            (*(ptr_OpCreateContainerLayer())) = (aRhs).get_OpCreateContainerLayer();
            break;
        }
    case TOpCreateImageLayer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpCreateImageLayer()) OpCreateImageLayer;
            }
            (*(ptr_OpCreateImageLayer())) = (aRhs).get_OpCreateImageLayer();
            break;
        }
    case TOpCreateColorLayer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpCreateColorLayer()) OpCreateColorLayer;
            }
            (*(ptr_OpCreateColorLayer())) = (aRhs).get_OpCreateColorLayer();
            break;
        }
    case TOpCreateCanvasLayer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpCreateCanvasLayer()) OpCreateCanvasLayer;
            }
            (*(ptr_OpCreateCanvasLayer())) = (aRhs).get_OpCreateCanvasLayer();
            break;
        }
    case TOpCreateRefLayer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpCreateRefLayer()) OpCreateRefLayer;
            }
            (*(ptr_OpCreateRefLayer())) = (aRhs).get_OpCreateRefLayer();
            break;
        }
    case TOpSetDiagnosticTypes:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpSetDiagnosticTypes()) OpSetDiagnosticTypes;
            }
            (*(ptr_OpSetDiagnosticTypes())) = (aRhs).get_OpSetDiagnosticTypes();
            break;
        }
    case TOpSetRoot:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpSetRoot()) OpSetRoot;
            }
            (*(ptr_OpSetRoot())) = (aRhs).get_OpSetRoot();
            break;
        }
    case TOpInsertAfter:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpInsertAfter()) OpInsertAfter;
            }
            (*(ptr_OpInsertAfter())) = (aRhs).get_OpInsertAfter();
            break;
        }
    case TOpPrependChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpPrependChild()) OpPrependChild;
            }
            (*(ptr_OpPrependChild())) = (aRhs).get_OpPrependChild();
            break;
        }
    case TOpRemoveChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpRemoveChild()) OpRemoveChild;
            }
            (*(ptr_OpRemoveChild())) = (aRhs).get_OpRemoveChild();
            break;
        }
    case TOpRepositionChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpRepositionChild()) OpRepositionChild;
            }
            (*(ptr_OpRepositionChild())) = (aRhs).get_OpRepositionChild();
            break;
        }
    case TOpRaiseToTopChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpRaiseToTopChild()) OpRaiseToTopChild;
            }
            (*(ptr_OpRaiseToTopChild())) = (aRhs).get_OpRaiseToTopChild();
            break;
        }
    case TOpAttachCompositable:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAttachCompositable()) OpAttachCompositable;
            }
            (*(ptr_OpAttachCompositable())) = (aRhs).get_OpAttachCompositable();
            break;
        }
    case TOpAttachAsyncCompositable:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAttachAsyncCompositable()) OpAttachAsyncCompositable;
            }
            (*(ptr_OpAttachAsyncCompositable())) = (aRhs).get_OpAttachAsyncCompositable();
            break;
        }
    case TCompositableOperation:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CompositableOperation()) CompositableOperation;
            }
            (*(ptr_CompositableOperation())) = (aRhs).get_CompositableOperation();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto Edit::operator=(Edit&& aRhs) -> Edit&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TOpCreatePaintedLayer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpCreatePaintedLayer()) OpCreatePaintedLayer;
            }
            (*(ptr_OpCreatePaintedLayer())) = std::move((aRhs).get_OpCreatePaintedLayer());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpCreateContainerLayer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpCreateContainerLayer()) OpCreateContainerLayer;
            }
            (*(ptr_OpCreateContainerLayer())) = std::move((aRhs).get_OpCreateContainerLayer());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpCreateImageLayer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpCreateImageLayer()) OpCreateImageLayer;
            }
            (*(ptr_OpCreateImageLayer())) = std::move((aRhs).get_OpCreateImageLayer());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpCreateColorLayer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpCreateColorLayer()) OpCreateColorLayer;
            }
            (*(ptr_OpCreateColorLayer())) = std::move((aRhs).get_OpCreateColorLayer());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpCreateCanvasLayer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpCreateCanvasLayer()) OpCreateCanvasLayer;
            }
            (*(ptr_OpCreateCanvasLayer())) = std::move((aRhs).get_OpCreateCanvasLayer());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpCreateRefLayer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpCreateRefLayer()) OpCreateRefLayer;
            }
            (*(ptr_OpCreateRefLayer())) = std::move((aRhs).get_OpCreateRefLayer());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpSetDiagnosticTypes:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpSetDiagnosticTypes()) OpSetDiagnosticTypes;
            }
            (*(ptr_OpSetDiagnosticTypes())) = std::move((aRhs).get_OpSetDiagnosticTypes());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpSetRoot:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpSetRoot()) OpSetRoot;
            }
            (*(ptr_OpSetRoot())) = std::move((aRhs).get_OpSetRoot());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpInsertAfter:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpInsertAfter()) OpInsertAfter;
            }
            (*(ptr_OpInsertAfter())) = std::move((aRhs).get_OpInsertAfter());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpPrependChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpPrependChild()) OpPrependChild;
            }
            (*(ptr_OpPrependChild())) = std::move((aRhs).get_OpPrependChild());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpRemoveChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpRemoveChild()) OpRemoveChild;
            }
            (*(ptr_OpRemoveChild())) = std::move((aRhs).get_OpRemoveChild());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpRepositionChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpRepositionChild()) OpRepositionChild;
            }
            (*(ptr_OpRepositionChild())) = std::move((aRhs).get_OpRepositionChild());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpRaiseToTopChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpRaiseToTopChild()) OpRaiseToTopChild;
            }
            (*(ptr_OpRaiseToTopChild())) = std::move((aRhs).get_OpRaiseToTopChild());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpAttachCompositable:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAttachCompositable()) OpAttachCompositable;
            }
            (*(ptr_OpAttachCompositable())) = std::move((aRhs).get_OpAttachCompositable());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpAttachAsyncCompositable:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAttachAsyncCompositable()) OpAttachAsyncCompositable;
            }
            (*(ptr_OpAttachAsyncCompositable())) = std::move((aRhs).get_OpAttachAsyncCompositable());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCompositableOperation:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CompositableOperation()) CompositableOperation;
            }
            (*(ptr_CompositableOperation())) = std::move((aRhs).get_CompositableOperation());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::Edit>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::Edit union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'Edit'
    (aMsg)->WriteSentinel(59376007);

    switch (type) {
    case union__::TOpCreatePaintedLayer:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpCreatePaintedLayer());
            // Sentinel = 'TOpCreatePaintedLayer'
            (aMsg)->WriteSentinel(1467615274);
            return;
        }
    case union__::TOpCreateContainerLayer:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpCreateContainerLayer());
            // Sentinel = 'TOpCreateContainerLayer'
            (aMsg)->WriteSentinel(1769408776);
            return;
        }
    case union__::TOpCreateImageLayer:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpCreateImageLayer());
            // Sentinel = 'TOpCreateImageLayer'
            (aMsg)->WriteSentinel(1190266696);
            return;
        }
    case union__::TOpCreateColorLayer:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpCreateColorLayer());
            // Sentinel = 'TOpCreateColorLayer'
            (aMsg)->WriteSentinel(1202063204);
            return;
        }
    case union__::TOpCreateCanvasLayer:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpCreateCanvasLayer());
            // Sentinel = 'TOpCreateCanvasLayer'
            (aMsg)->WriteSentinel(1325795265);
            return;
        }
    case union__::TOpCreateRefLayer:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpCreateRefLayer());
            // Sentinel = 'TOpCreateRefLayer'
            (aMsg)->WriteSentinel(955451010);
            return;
        }
    case union__::TOpSetDiagnosticTypes:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpSetDiagnosticTypes());
            // Sentinel = 'TOpSetDiagnosticTypes'
            (aMsg)->WriteSentinel(1488717914);
            return;
        }
    case union__::TOpSetRoot:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpSetRoot());
            // Sentinel = 'TOpSetRoot'
            (aMsg)->WriteSentinel(342295524);
            return;
        }
    case union__::TOpInsertAfter:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpInsertAfter());
            // Sentinel = 'TOpInsertAfter'
            (aMsg)->WriteSentinel(668337531);
            return;
        }
    case union__::TOpPrependChild:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpPrependChild());
            // Sentinel = 'TOpPrependChild'
            (aMsg)->WriteSentinel(762119622);
            return;
        }
    case union__::TOpRemoveChild:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpRemoveChild());
            // Sentinel = 'TOpRemoveChild'
            (aMsg)->WriteSentinel(665584998);
            return;
        }
    case union__::TOpRepositionChild:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpRepositionChild());
            // Sentinel = 'TOpRepositionChild'
            (aMsg)->WriteSentinel(1121650468);
            return;
        }
    case union__::TOpRaiseToTopChild:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpRaiseToTopChild());
            // Sentinel = 'TOpRaiseToTopChild'
            (aMsg)->WriteSentinel(1078134498);
            return;
        }
    case union__::TOpAttachCompositable:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpAttachCompositable());
            // Sentinel = 'TOpAttachCompositable'
            (aMsg)->WriteSentinel(1488259147);
            return;
        }
    case union__::TOpAttachAsyncCompositable:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpAttachAsyncCompositable());
            // Sentinel = 'TOpAttachAsyncCompositable'
            (aMsg)->WriteSentinel(2271545929);
            return;
        }
    case union__::TCompositableOperation:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CompositableOperation());
            // Sentinel = 'TCompositableOperation'
            (aMsg)->WriteSentinel(1686833384);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::Edit>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::Edit union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union Edit");
        return false;
    }
    // Sentinel = 'Edit'
    if ((!((aMsg)->ReadSentinel(aIter, 59376007)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union Edit");
        return false;
    }

    switch (type) {
    case union__::TOpCreatePaintedLayer:
        {
            mozilla::layers::OpCreatePaintedLayer tmp = mozilla::layers::OpCreatePaintedLayer();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpCreatePaintedLayer())))))) {
                aActor->FatalError("Error deserializing variant TOpCreatePaintedLayer of union Edit");
                return false;
            }
            // Sentinel = 'TOpCreatePaintedLayer'
            if ((!((aMsg)->ReadSentinel(aIter, 1467615274)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpCreatePaintedLayer of union Edit");
                return false;
            }
            return true;
        }
    case union__::TOpCreateContainerLayer:
        {
            mozilla::layers::OpCreateContainerLayer tmp = mozilla::layers::OpCreateContainerLayer();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpCreateContainerLayer())))))) {
                aActor->FatalError("Error deserializing variant TOpCreateContainerLayer of union Edit");
                return false;
            }
            // Sentinel = 'TOpCreateContainerLayer'
            if ((!((aMsg)->ReadSentinel(aIter, 1769408776)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpCreateContainerLayer of union Edit");
                return false;
            }
            return true;
        }
    case union__::TOpCreateImageLayer:
        {
            mozilla::layers::OpCreateImageLayer tmp = mozilla::layers::OpCreateImageLayer();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpCreateImageLayer())))))) {
                aActor->FatalError("Error deserializing variant TOpCreateImageLayer of union Edit");
                return false;
            }
            // Sentinel = 'TOpCreateImageLayer'
            if ((!((aMsg)->ReadSentinel(aIter, 1190266696)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpCreateImageLayer of union Edit");
                return false;
            }
            return true;
        }
    case union__::TOpCreateColorLayer:
        {
            mozilla::layers::OpCreateColorLayer tmp = mozilla::layers::OpCreateColorLayer();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpCreateColorLayer())))))) {
                aActor->FatalError("Error deserializing variant TOpCreateColorLayer of union Edit");
                return false;
            }
            // Sentinel = 'TOpCreateColorLayer'
            if ((!((aMsg)->ReadSentinel(aIter, 1202063204)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpCreateColorLayer of union Edit");
                return false;
            }
            return true;
        }
    case union__::TOpCreateCanvasLayer:
        {
            mozilla::layers::OpCreateCanvasLayer tmp = mozilla::layers::OpCreateCanvasLayer();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpCreateCanvasLayer())))))) {
                aActor->FatalError("Error deserializing variant TOpCreateCanvasLayer of union Edit");
                return false;
            }
            // Sentinel = 'TOpCreateCanvasLayer'
            if ((!((aMsg)->ReadSentinel(aIter, 1325795265)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpCreateCanvasLayer of union Edit");
                return false;
            }
            return true;
        }
    case union__::TOpCreateRefLayer:
        {
            mozilla::layers::OpCreateRefLayer tmp = mozilla::layers::OpCreateRefLayer();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpCreateRefLayer())))))) {
                aActor->FatalError("Error deserializing variant TOpCreateRefLayer of union Edit");
                return false;
            }
            // Sentinel = 'TOpCreateRefLayer'
            if ((!((aMsg)->ReadSentinel(aIter, 955451010)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpCreateRefLayer of union Edit");
                return false;
            }
            return true;
        }
    case union__::TOpSetDiagnosticTypes:
        {
            mozilla::layers::OpSetDiagnosticTypes tmp = mozilla::layers::OpSetDiagnosticTypes();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpSetDiagnosticTypes())))))) {
                aActor->FatalError("Error deserializing variant TOpSetDiagnosticTypes of union Edit");
                return false;
            }
            // Sentinel = 'TOpSetDiagnosticTypes'
            if ((!((aMsg)->ReadSentinel(aIter, 1488717914)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpSetDiagnosticTypes of union Edit");
                return false;
            }
            return true;
        }
    case union__::TOpSetRoot:
        {
            mozilla::layers::OpSetRoot tmp = mozilla::layers::OpSetRoot();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpSetRoot())))))) {
                aActor->FatalError("Error deserializing variant TOpSetRoot of union Edit");
                return false;
            }
            // Sentinel = 'TOpSetRoot'
            if ((!((aMsg)->ReadSentinel(aIter, 342295524)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpSetRoot of union Edit");
                return false;
            }
            return true;
        }
    case union__::TOpInsertAfter:
        {
            mozilla::layers::OpInsertAfter tmp = mozilla::layers::OpInsertAfter();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpInsertAfter())))))) {
                aActor->FatalError("Error deserializing variant TOpInsertAfter of union Edit");
                return false;
            }
            // Sentinel = 'TOpInsertAfter'
            if ((!((aMsg)->ReadSentinel(aIter, 668337531)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpInsertAfter of union Edit");
                return false;
            }
            return true;
        }
    case union__::TOpPrependChild:
        {
            mozilla::layers::OpPrependChild tmp = mozilla::layers::OpPrependChild();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpPrependChild())))))) {
                aActor->FatalError("Error deserializing variant TOpPrependChild of union Edit");
                return false;
            }
            // Sentinel = 'TOpPrependChild'
            if ((!((aMsg)->ReadSentinel(aIter, 762119622)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpPrependChild of union Edit");
                return false;
            }
            return true;
        }
    case union__::TOpRemoveChild:
        {
            mozilla::layers::OpRemoveChild tmp = mozilla::layers::OpRemoveChild();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpRemoveChild())))))) {
                aActor->FatalError("Error deserializing variant TOpRemoveChild of union Edit");
                return false;
            }
            // Sentinel = 'TOpRemoveChild'
            if ((!((aMsg)->ReadSentinel(aIter, 665584998)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpRemoveChild of union Edit");
                return false;
            }
            return true;
        }
    case union__::TOpRepositionChild:
        {
            mozilla::layers::OpRepositionChild tmp = mozilla::layers::OpRepositionChild();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpRepositionChild())))))) {
                aActor->FatalError("Error deserializing variant TOpRepositionChild of union Edit");
                return false;
            }
            // Sentinel = 'TOpRepositionChild'
            if ((!((aMsg)->ReadSentinel(aIter, 1121650468)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpRepositionChild of union Edit");
                return false;
            }
            return true;
        }
    case union__::TOpRaiseToTopChild:
        {
            mozilla::layers::OpRaiseToTopChild tmp = mozilla::layers::OpRaiseToTopChild();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpRaiseToTopChild())))))) {
                aActor->FatalError("Error deserializing variant TOpRaiseToTopChild of union Edit");
                return false;
            }
            // Sentinel = 'TOpRaiseToTopChild'
            if ((!((aMsg)->ReadSentinel(aIter, 1078134498)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpRaiseToTopChild of union Edit");
                return false;
            }
            return true;
        }
    case union__::TOpAttachCompositable:
        {
            mozilla::layers::OpAttachCompositable tmp = mozilla::layers::OpAttachCompositable();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpAttachCompositable())))))) {
                aActor->FatalError("Error deserializing variant TOpAttachCompositable of union Edit");
                return false;
            }
            // Sentinel = 'TOpAttachCompositable'
            if ((!((aMsg)->ReadSentinel(aIter, 1488259147)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpAttachCompositable of union Edit");
                return false;
            }
            return true;
        }
    case union__::TOpAttachAsyncCompositable:
        {
            mozilla::layers::OpAttachAsyncCompositable tmp = mozilla::layers::OpAttachAsyncCompositable();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpAttachAsyncCompositable())))))) {
                aActor->FatalError("Error deserializing variant TOpAttachAsyncCompositable of union Edit");
                return false;
            }
            // Sentinel = 'TOpAttachAsyncCompositable'
            if ((!((aMsg)->ReadSentinel(aIter, 2271545929)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpAttachAsyncCompositable of union Edit");
                return false;
            }
            return true;
        }
    case union__::TCompositableOperation:
        {
            mozilla::layers::CompositableOperation tmp = mozilla::layers::CompositableOperation();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CompositableOperation())))))) {
                aActor->FatalError("Error deserializing variant TCompositableOperation of union Edit");
                return false;
            }
            // Sentinel = 'TCompositableOperation'
            if ((!((aMsg)->ReadSentinel(aIter, 1686833384)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCompositableOperation of union Edit");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union OpDestroy|
//
namespace mozilla {
namespace layers {
auto OpDestroy::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TPTextureParent:
        {
            (ptr_PTextureParent())->~PTextureParent__tdef();
            break;
        }
    case TPTextureChild:
        {
            (ptr_PTextureChild())->~PTextureChild__tdef();
            break;
        }
    case TCompositableHandle:
        {
            (ptr_CompositableHandle())->~CompositableHandle__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT OpDestroy::OpDestroy(PTextureParent* aOther)
{
    new (mozilla::KnownNotNull, ptr_PTextureParent()) PTextureParent*(const_cast<PTextureParent*>(aOther));
    mType = TPTextureParent;
}

MOZ_IMPLICIT OpDestroy::OpDestroy(PTextureChild* aOther)
{
    new (mozilla::KnownNotNull, ptr_PTextureChild()) PTextureChild*(const_cast<PTextureChild*>(aOther));
    mType = TPTextureChild;
}

MOZ_IMPLICIT OpDestroy::OpDestroy(const CompositableHandle& aOther)
{
    new (mozilla::KnownNotNull, ptr_CompositableHandle()) CompositableHandle(aOther);
    mType = TCompositableHandle;
}

MOZ_IMPLICIT OpDestroy::OpDestroy(CompositableHandle&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CompositableHandle()) CompositableHandle(std::move(aOther));
    mType = TCompositableHandle;
}

MOZ_IMPLICIT OpDestroy::OpDestroy(const OpDestroy& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TPTextureParent:
        {
            new (mozilla::KnownNotNull, ptr_PTextureParent()) PTextureParent*(const_cast<PTextureParent*>((aOther).get_PTextureParent()));
            break;
        }
    case TPTextureChild:
        {
            new (mozilla::KnownNotNull, ptr_PTextureChild()) PTextureChild*(const_cast<PTextureChild*>((aOther).get_PTextureChild()));
            break;
        }
    case TCompositableHandle:
        {
            new (mozilla::KnownNotNull, ptr_CompositableHandle()) CompositableHandle((aOther).get_CompositableHandle());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT OpDestroy::OpDestroy(OpDestroy&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TPTextureParent:
        {
            new (mozilla::KnownNotNull, ptr_PTextureParent()) PTextureParent*(const_cast<PTextureParent*>(std::move((aOther).get_PTextureParent())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPTextureChild:
        {
            new (mozilla::KnownNotNull, ptr_PTextureChild()) PTextureChild*(const_cast<PTextureChild*>(std::move((aOther).get_PTextureChild())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCompositableHandle:
        {
            new (mozilla::KnownNotNull, ptr_CompositableHandle()) CompositableHandle(std::move((aOther).get_CompositableHandle()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

OpDestroy::~OpDestroy()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto OpDestroy::operator=(PTextureParent* aRhs) -> OpDestroy&
{
    if (MaybeDestroy(TPTextureParent)) {
        new (mozilla::KnownNotNull, ptr_PTextureParent()) PTextureParent*;
    }
    (*(ptr_PTextureParent())) = const_cast<PTextureParent*>(aRhs);
    mType = TPTextureParent;
    return (*(this));
}

auto OpDestroy::operator=(PTextureChild* aRhs) -> OpDestroy&
{
    if (MaybeDestroy(TPTextureChild)) {
        new (mozilla::KnownNotNull, ptr_PTextureChild()) PTextureChild*;
    }
    (*(ptr_PTextureChild())) = const_cast<PTextureChild*>(aRhs);
    mType = TPTextureChild;
    return (*(this));
}

auto OpDestroy::operator=(const CompositableHandle& aRhs) -> OpDestroy&
{
    if (MaybeDestroy(TCompositableHandle)) {
        new (mozilla::KnownNotNull, ptr_CompositableHandle()) CompositableHandle;
    }
    (*(ptr_CompositableHandle())) = aRhs;
    mType = TCompositableHandle;
    return (*(this));
}

auto OpDestroy::operator=(CompositableHandle&& aRhs) -> OpDestroy&
{
    if (MaybeDestroy(TCompositableHandle)) {
        new (mozilla::KnownNotNull, ptr_CompositableHandle()) CompositableHandle;
    }
    (*(ptr_CompositableHandle())) = std::move(aRhs);
    mType = TCompositableHandle;
    return (*(this));
}

auto OpDestroy::operator=(const OpDestroy& aRhs) -> OpDestroy&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TPTextureParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PTextureParent()) PTextureParent*;
            }
            (*(ptr_PTextureParent())) = const_cast<PTextureParent*>((aRhs).get_PTextureParent());
            break;
        }
    case TPTextureChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PTextureChild()) PTextureChild*;
            }
            (*(ptr_PTextureChild())) = const_cast<PTextureChild*>((aRhs).get_PTextureChild());
            break;
        }
    case TCompositableHandle:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CompositableHandle()) CompositableHandle;
            }
            (*(ptr_CompositableHandle())) = (aRhs).get_CompositableHandle();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto OpDestroy::operator=(OpDestroy&& aRhs) -> OpDestroy&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TPTextureParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PTextureParent()) PTextureParent*;
            }
            (*(ptr_PTextureParent())) = const_cast<PTextureParent*>(std::move((aRhs).get_PTextureParent()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPTextureChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PTextureChild()) PTextureChild*;
            }
            (*(ptr_PTextureChild())) = const_cast<PTextureChild*>(std::move((aRhs).get_PTextureChild()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCompositableHandle:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CompositableHandle()) CompositableHandle;
            }
            (*(ptr_CompositableHandle())) = std::move((aRhs).get_CompositableHandle());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpDestroy>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::OpDestroy union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'OpDestroy'
    (aMsg)->WriteSentinel(289801130);

    switch (type) {
    case union__::TPTextureParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PTextureParent(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PTextureParent());
                // Sentinel = 'TPTextureParent'
                (aMsg)->WriteSentinel(780600832);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    case union__::TPTextureChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PTextureChild(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PTextureChild());
                // Sentinel = 'TPTextureChild'
                (aMsg)->WriteSentinel(676005242);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    case union__::TCompositableHandle:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CompositableHandle());
            // Sentinel = 'TCompositableHandle'
            (aMsg)->WriteSentinel(1252657027);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::OpDestroy>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::OpDestroy union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union OpDestroy");
        return false;
    }
    // Sentinel = 'OpDestroy'
    if ((!((aMsg)->ReadSentinel(aIter, 289801130)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union OpDestroy");
        return false;
    }

    switch (type) {
    case union__::TPTextureParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::layers::PTextureChild* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PTextureChild())))))) {
                aActor->FatalError("Error deserializing variant TPTextureParent of union OpDestroy");
                return false;
            }
            if ((!((*((&((aVar)->get_PTextureChild()))))))) {
                aActor->FatalError("Error deserializing variant TPTextureParent of union OpDestroy");
                return false;
            }
            // Sentinel = 'TPTextureParent'
            if ((!((aMsg)->ReadSentinel(aIter, 780600832)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPTextureParent of union OpDestroy");
                return false;
            }
            return true;
        }
    case union__::TPTextureChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::layers::PTextureParent* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PTextureParent())))))) {
                aActor->FatalError("Error deserializing variant TPTextureChild of union OpDestroy");
                return false;
            }
            if ((!((*((&((aVar)->get_PTextureParent()))))))) {
                aActor->FatalError("Error deserializing variant TPTextureChild of union OpDestroy");
                return false;
            }
            // Sentinel = 'TPTextureChild'
            if ((!((aMsg)->ReadSentinel(aIter, 676005242)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPTextureChild of union OpDestroy");
                return false;
            }
            return true;
        }
    case union__::TCompositableHandle:
        {
            mozilla::layers::CompositableHandle tmp = mozilla::layers::CompositableHandle();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CompositableHandle())))))) {
                aActor->FatalError("Error deserializing variant TCompositableHandle of union OpDestroy");
                return false;
            }
            // Sentinel = 'TCompositableHandle'
            if ((!((aMsg)->ReadSentinel(aIter, 1252657027)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCompositableHandle of union OpDestroy");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpContentBufferSwap|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpContentBufferSwap>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).compositable());
    // Sentinel = 'compositable'
    (aMsg)->WriteSentinel(551879939);
    WriteIPDLParam(aMsg, aActor, (aVar).frontUpdatedRegion());
    // Sentinel = 'frontUpdatedRegion'
    (aMsg)->WriteSentinel(1177618261);
}

auto IPDLParamTraits<mozilla::layers::OpContentBufferSwap>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->compositable())))))) {
        aActor->FatalError("Error deserializing 'compositable' (CompositableHandle) member of 'OpContentBufferSwap'");
        return false;
    }
    // Sentinel = 'compositable'
    if ((!((aMsg)->ReadSentinel(aIter, 551879939)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'compositable' (CompositableHandle) member of 'OpContentBufferSwap'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->frontUpdatedRegion())))))) {
        aActor->FatalError("Error deserializing 'frontUpdatedRegion' (nsIntRegion) member of 'OpContentBufferSwap'");
        return false;
    }
    // Sentinel = 'frontUpdatedRegion'
    if ((!((aMsg)->ReadSentinel(aIter, 1177618261)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'frontUpdatedRegion' (nsIntRegion) member of 'OpContentBufferSwap'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ImageCompositeNotification|
//
namespace mozilla {
namespace layers {
auto ImageCompositeNotification::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(ImageCompositeNotification, producerID_) - offsetof(ImageCompositeNotification, frameID_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::ImageCompositeNotification>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).compositable());
    // Sentinel = 'compositable'
    (aMsg)->WriteSentinel(551879939);
    WriteIPDLParam(aMsg, aActor, (aVar).imageTimeStamp());
    // Sentinel = 'imageTimeStamp'
    (aMsg)->WriteSentinel(699467160);
    WriteIPDLParam(aMsg, aActor, (aVar).firstCompositeTimeStamp());
    // Sentinel = 'firstCompositeTimeStamp'
    (aMsg)->WriteSentinel(1910638960);
    (aMsg)->WriteBytes((&((aVar).frameID())), 8);
    // Sentinel = 'frameID | producerID'
    (aMsg)->WriteSentinel(1286801222);
}

auto IPDLParamTraits<mozilla::layers::ImageCompositeNotification>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->compositable())))))) {
        aActor->FatalError("Error deserializing 'compositable' (CompositableHandle) member of 'ImageCompositeNotification'");
        return false;
    }
    // Sentinel = 'compositable'
    if ((!((aMsg)->ReadSentinel(aIter, 551879939)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'compositable' (CompositableHandle) member of 'ImageCompositeNotification'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->imageTimeStamp())))))) {
        aActor->FatalError("Error deserializing 'imageTimeStamp' (TimeStamp) member of 'ImageCompositeNotification'");
        return false;
    }
    // Sentinel = 'imageTimeStamp'
    if ((!((aMsg)->ReadSentinel(aIter, 699467160)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'imageTimeStamp' (TimeStamp) member of 'ImageCompositeNotification'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->firstCompositeTimeStamp())))))) {
        aActor->FatalError("Error deserializing 'firstCompositeTimeStamp' (TimeStamp) member of 'ImageCompositeNotification'");
        return false;
    }
    // Sentinel = 'firstCompositeTimeStamp'
    if ((!((aMsg)->ReadSentinel(aIter, 1910638960)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'firstCompositeTimeStamp' (TimeStamp) member of 'ImageCompositeNotification'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->frameID())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'frameID | producerID'
    if ((!((aMsg)->ReadSentinel(aIter, 1286801222)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union AsyncParentMessageData|
//
namespace mozilla {
namespace layers {
auto AsyncParentMessageData::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TOpNotifyNotUsed:
        {
            (ptr_OpNotifyNotUsed())->~OpNotifyNotUsed__tdef();
            break;
        }
    case TOpDeliverReleaseFence:
        {
            (ptr_OpDeliverReleaseFence())->~OpDeliverReleaseFence__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT AsyncParentMessageData::AsyncParentMessageData(const OpNotifyNotUsed& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpNotifyNotUsed()) OpNotifyNotUsed(aOther);
    mType = TOpNotifyNotUsed;
}

MOZ_IMPLICIT AsyncParentMessageData::AsyncParentMessageData(OpNotifyNotUsed&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpNotifyNotUsed()) OpNotifyNotUsed(std::move(aOther));
    mType = TOpNotifyNotUsed;
}

MOZ_IMPLICIT AsyncParentMessageData::AsyncParentMessageData(const OpDeliverReleaseFence& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpDeliverReleaseFence()) OpDeliverReleaseFence(aOther);
    mType = TOpDeliverReleaseFence;
}

MOZ_IMPLICIT AsyncParentMessageData::AsyncParentMessageData(OpDeliverReleaseFence&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpDeliverReleaseFence()) OpDeliverReleaseFence(std::move(aOther));
    mType = TOpDeliverReleaseFence;
}

MOZ_IMPLICIT AsyncParentMessageData::AsyncParentMessageData(const AsyncParentMessageData& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TOpNotifyNotUsed:
        {
            new (mozilla::KnownNotNull, ptr_OpNotifyNotUsed()) OpNotifyNotUsed((aOther).get_OpNotifyNotUsed());
            break;
        }
    case TOpDeliverReleaseFence:
        {
            new (mozilla::KnownNotNull, ptr_OpDeliverReleaseFence()) OpDeliverReleaseFence((aOther).get_OpDeliverReleaseFence());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT AsyncParentMessageData::AsyncParentMessageData(AsyncParentMessageData&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TOpNotifyNotUsed:
        {
            new (mozilla::KnownNotNull, ptr_OpNotifyNotUsed()) OpNotifyNotUsed(std::move((aOther).get_OpNotifyNotUsed()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpDeliverReleaseFence:
        {
            new (mozilla::KnownNotNull, ptr_OpDeliverReleaseFence()) OpDeliverReleaseFence(std::move((aOther).get_OpDeliverReleaseFence()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

AsyncParentMessageData::~AsyncParentMessageData()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto AsyncParentMessageData::operator=(const OpNotifyNotUsed& aRhs) -> AsyncParentMessageData&
{
    if (MaybeDestroy(TOpNotifyNotUsed)) {
        new (mozilla::KnownNotNull, ptr_OpNotifyNotUsed()) OpNotifyNotUsed;
    }
    (*(ptr_OpNotifyNotUsed())) = aRhs;
    mType = TOpNotifyNotUsed;
    return (*(this));
}

auto AsyncParentMessageData::operator=(OpNotifyNotUsed&& aRhs) -> AsyncParentMessageData&
{
    if (MaybeDestroy(TOpNotifyNotUsed)) {
        new (mozilla::KnownNotNull, ptr_OpNotifyNotUsed()) OpNotifyNotUsed;
    }
    (*(ptr_OpNotifyNotUsed())) = std::move(aRhs);
    mType = TOpNotifyNotUsed;
    return (*(this));
}

auto AsyncParentMessageData::operator=(const OpDeliverReleaseFence& aRhs) -> AsyncParentMessageData&
{
    if (MaybeDestroy(TOpDeliverReleaseFence)) {
        new (mozilla::KnownNotNull, ptr_OpDeliverReleaseFence()) OpDeliverReleaseFence;
    }
    (*(ptr_OpDeliverReleaseFence())) = aRhs;
    mType = TOpDeliverReleaseFence;
    return (*(this));
}

auto AsyncParentMessageData::operator=(OpDeliverReleaseFence&& aRhs) -> AsyncParentMessageData&
{
    if (MaybeDestroy(TOpDeliverReleaseFence)) {
        new (mozilla::KnownNotNull, ptr_OpDeliverReleaseFence()) OpDeliverReleaseFence;
    }
    (*(ptr_OpDeliverReleaseFence())) = std::move(aRhs);
    mType = TOpDeliverReleaseFence;
    return (*(this));
}

auto AsyncParentMessageData::operator=(const AsyncParentMessageData& aRhs) -> AsyncParentMessageData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TOpNotifyNotUsed:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpNotifyNotUsed()) OpNotifyNotUsed;
            }
            (*(ptr_OpNotifyNotUsed())) = (aRhs).get_OpNotifyNotUsed();
            break;
        }
    case TOpDeliverReleaseFence:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpDeliverReleaseFence()) OpDeliverReleaseFence;
            }
            (*(ptr_OpDeliverReleaseFence())) = (aRhs).get_OpDeliverReleaseFence();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto AsyncParentMessageData::operator=(AsyncParentMessageData&& aRhs) -> AsyncParentMessageData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TOpNotifyNotUsed:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpNotifyNotUsed()) OpNotifyNotUsed;
            }
            (*(ptr_OpNotifyNotUsed())) = std::move((aRhs).get_OpNotifyNotUsed());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpDeliverReleaseFence:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpDeliverReleaseFence()) OpDeliverReleaseFence;
            }
            (*(ptr_OpDeliverReleaseFence())) = std::move((aRhs).get_OpDeliverReleaseFence());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::AsyncParentMessageData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::AsyncParentMessageData union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'AsyncParentMessageData'
    (aMsg)->WriteSentinel(1672677544);

    switch (type) {
    case union__::TOpNotifyNotUsed:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpNotifyNotUsed());
            // Sentinel = 'TOpNotifyNotUsed'
            (aMsg)->WriteSentinel(881460815);
            return;
        }
    case union__::TOpDeliverReleaseFence:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpDeliverReleaseFence());
            // Sentinel = 'TOpDeliverReleaseFence'
            (aMsg)->WriteSentinel(1619724417);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::AsyncParentMessageData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::AsyncParentMessageData union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union AsyncParentMessageData");
        return false;
    }
    // Sentinel = 'AsyncParentMessageData'
    if ((!((aMsg)->ReadSentinel(aIter, 1672677544)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union AsyncParentMessageData");
        return false;
    }

    switch (type) {
    case union__::TOpNotifyNotUsed:
        {
            mozilla::layers::OpNotifyNotUsed tmp = mozilla::layers::OpNotifyNotUsed();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpNotifyNotUsed())))))) {
                aActor->FatalError("Error deserializing variant TOpNotifyNotUsed of union AsyncParentMessageData");
                return false;
            }
            // Sentinel = 'TOpNotifyNotUsed'
            if ((!((aMsg)->ReadSentinel(aIter, 881460815)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpNotifyNotUsed of union AsyncParentMessageData");
                return false;
            }
            return true;
        }
    case union__::TOpDeliverReleaseFence:
        {
            mozilla::layers::OpDeliverReleaseFence tmp = mozilla::layers::OpDeliverReleaseFence();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpDeliverReleaseFence())))))) {
                aActor->FatalError("Error deserializing variant TOpDeliverReleaseFence of union AsyncParentMessageData");
                return false;
            }
            // Sentinel = 'TOpDeliverReleaseFence'
            if ((!((aMsg)->ReadSentinel(aIter, 1619724417)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpDeliverReleaseFence of union AsyncParentMessageData");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PaintTiming|
//
namespace mozilla {
namespace layers {
auto PaintTiming::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(PaintTiming, rasterMs_) - offsetof(PaintTiming, serializeMs_)) == 20,
        "Bad assumptions about field layout!");
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PaintTiming>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).serializeMs())), 24);
    // Sentinel = 'serializeMs | sendMs | dlMs | dl2Ms | flbMs | rasterMs'
    (aMsg)->WriteSentinel(392434486);
}

auto IPDLParamTraits<mozilla::layers::PaintTiming>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->serializeMs())), 24)))) {
        aActor->FatalError("Error bulk reading fields from float");
        return false;
    }
    // Sentinel = 'serializeMs | sendMs | dlMs | dl2Ms | flbMs | rasterMs'
    if ((!((aMsg)->ReadSentinel(aIter, 392434486)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from float");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct TransactionInfo|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::TransactionInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).cset());
    // Sentinel = 'cset'
    (aMsg)->WriteSentinel(69665200);
    WriteIPDLParam(aMsg, aActor, (aVar).setSimpleAttrs());
    // Sentinel = 'setSimpleAttrs'
    (aMsg)->WriteSentinel(721618373);
    WriteIPDLParam(aMsg, aActor, (aVar).setAttrs());
    // Sentinel = 'setAttrs'
    (aMsg)->WriteSentinel(249758555);
    WriteIPDLParam(aMsg, aActor, (aVar).paints());
    // Sentinel = 'paints'
    (aMsg)->WriteSentinel(148112016);
    WriteIPDLParam(aMsg, aActor, (aVar).toDestroy());
    // Sentinel = 'toDestroy'
    (aMsg)->WriteSentinel(311100366);
    WriteIPDLParam(aMsg, aActor, (aVar).id());
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
    WriteIPDLParam(aMsg, aActor, (aVar).targetConfig());
    // Sentinel = 'targetConfig'
    (aMsg)->WriteSentinel(535692510);
    WriteIPDLParam(aMsg, aActor, (aVar).plugins());
    // Sentinel = 'plugins'
    (aMsg)->WriteSentinel(202244867);
    WriteIPDLParam(aMsg, aActor, (aVar).isFirstPaint());
    // Sentinel = 'isFirstPaint'
    (aMsg)->WriteSentinel(526517473);
    WriteIPDLParam(aMsg, aActor, (aVar).focusTarget());
    // Sentinel = 'focusTarget'
    (aMsg)->WriteSentinel(455279752);
    WriteIPDLParam(aMsg, aActor, (aVar).scheduleComposite());
    // Sentinel = 'scheduleComposite'
    (aMsg)->WriteSentinel(1049954049);
    WriteIPDLParam(aMsg, aActor, (aVar).isRepeatTransaction());
    // Sentinel = 'isRepeatTransaction'
    (aMsg)->WriteSentinel(1287849924);
    WriteIPDLParam(aMsg, aActor, (aVar).vsyncId());
    // Sentinel = 'vsyncId'
    (aMsg)->WriteSentinel(203883233);
    WriteIPDLParam(aMsg, aActor, (aVar).vsyncStart());
    // Sentinel = 'vsyncStart'
    (aMsg)->WriteSentinel(397870146);
    WriteIPDLParam(aMsg, aActor, (aVar).refreshStart());
    // Sentinel = 'refreshStart'
    (aMsg)->WriteSentinel(543163646);
    WriteIPDLParam(aMsg, aActor, (aVar).transactionStart());
    // Sentinel = 'transactionStart'
    (aMsg)->WriteSentinel(959579829);
    WriteIPDLParam(aMsg, aActor, (aVar).containsSVG());
    // Sentinel = 'containsSVG'
    (aMsg)->WriteSentinel(454755408);
    WriteIPDLParam(aMsg, aActor, (aVar).url());
    // Sentinel = 'url'
    (aMsg)->WriteSentinel(45220180);
    WriteIPDLParam(aMsg, aActor, (aVar).fwdTime());
    // Sentinel = 'fwdTime'
    (aMsg)->WriteSentinel(190382801);
    WriteIPDLParam(aMsg, aActor, (aVar).payload());
    // Sentinel = 'payload'
    (aMsg)->WriteSentinel(199033579);
    (aMsg)->WriteBytes((&((aVar).fwdTransactionId())), 8);
    // Sentinel = 'fwdTransactionId'
    (aMsg)->WriteSentinel(930940533);
    (aMsg)->WriteBytes((&((aVar).paintSequenceNumber())), 4);
    // Sentinel = 'paintSequenceNumber'
    (aMsg)->WriteSentinel(1303775167);
}

auto IPDLParamTraits<mozilla::layers::TransactionInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cset())))))) {
        aActor->FatalError("Error deserializing 'cset' (Edit[]) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'cset'
    if ((!((aMsg)->ReadSentinel(aIter, 69665200)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cset' (Edit[]) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->setSimpleAttrs())))))) {
        aActor->FatalError("Error deserializing 'setSimpleAttrs' (OpSetSimpleLayerAttributes[]) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'setSimpleAttrs'
    if ((!((aMsg)->ReadSentinel(aIter, 721618373)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'setSimpleAttrs' (OpSetSimpleLayerAttributes[]) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->setAttrs())))))) {
        aActor->FatalError("Error deserializing 'setAttrs' (OpSetLayerAttributes[]) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'setAttrs'
    if ((!((aMsg)->ReadSentinel(aIter, 249758555)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'setAttrs' (OpSetLayerAttributes[]) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->paints())))))) {
        aActor->FatalError("Error deserializing 'paints' (CompositableOperation[]) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'paints'
    if ((!((aMsg)->ReadSentinel(aIter, 148112016)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'paints' (CompositableOperation[]) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->toDestroy())))))) {
        aActor->FatalError("Error deserializing 'toDestroy' (OpDestroy[]) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'toDestroy'
    if ((!((aMsg)->ReadSentinel(aIter, 311100366)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'toDestroy' (OpDestroy[]) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->id())))))) {
        aActor->FatalError("Error deserializing 'id' (TransactionId) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'id' (TransactionId) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->targetConfig())))))) {
        aActor->FatalError("Error deserializing 'targetConfig' (TargetConfig) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'targetConfig'
    if ((!((aMsg)->ReadSentinel(aIter, 535692510)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'targetConfig' (TargetConfig) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->plugins())))))) {
        aActor->FatalError("Error deserializing 'plugins' (PluginWindowData[]) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'plugins'
    if ((!((aMsg)->ReadSentinel(aIter, 202244867)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'plugins' (PluginWindowData[]) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isFirstPaint())))))) {
        aActor->FatalError("Error deserializing 'isFirstPaint' (bool) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'isFirstPaint'
    if ((!((aMsg)->ReadSentinel(aIter, 526517473)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isFirstPaint' (bool) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->focusTarget())))))) {
        aActor->FatalError("Error deserializing 'focusTarget' (FocusTarget) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'focusTarget'
    if ((!((aMsg)->ReadSentinel(aIter, 455279752)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'focusTarget' (FocusTarget) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->scheduleComposite())))))) {
        aActor->FatalError("Error deserializing 'scheduleComposite' (bool) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'scheduleComposite'
    if ((!((aMsg)->ReadSentinel(aIter, 1049954049)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'scheduleComposite' (bool) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isRepeatTransaction())))))) {
        aActor->FatalError("Error deserializing 'isRepeatTransaction' (bool) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'isRepeatTransaction'
    if ((!((aMsg)->ReadSentinel(aIter, 1287849924)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isRepeatTransaction' (bool) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->vsyncId())))))) {
        aActor->FatalError("Error deserializing 'vsyncId' (VsyncId) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'vsyncId'
    if ((!((aMsg)->ReadSentinel(aIter, 203883233)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'vsyncId' (VsyncId) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->vsyncStart())))))) {
        aActor->FatalError("Error deserializing 'vsyncStart' (TimeStamp) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'vsyncStart'
    if ((!((aMsg)->ReadSentinel(aIter, 397870146)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'vsyncStart' (TimeStamp) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->refreshStart())))))) {
        aActor->FatalError("Error deserializing 'refreshStart' (TimeStamp) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'refreshStart'
    if ((!((aMsg)->ReadSentinel(aIter, 543163646)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'refreshStart' (TimeStamp) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->transactionStart())))))) {
        aActor->FatalError("Error deserializing 'transactionStart' (TimeStamp) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'transactionStart'
    if ((!((aMsg)->ReadSentinel(aIter, 959579829)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'transactionStart' (TimeStamp) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->containsSVG())))))) {
        aActor->FatalError("Error deserializing 'containsSVG' (bool) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'containsSVG'
    if ((!((aMsg)->ReadSentinel(aIter, 454755408)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'containsSVG' (bool) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->url())))))) {
        aActor->FatalError("Error deserializing 'url' (nsCString) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'url'
    if ((!((aMsg)->ReadSentinel(aIter, 45220180)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'url' (nsCString) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fwdTime())))))) {
        aActor->FatalError("Error deserializing 'fwdTime' (TimeStamp) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'fwdTime'
    if ((!((aMsg)->ReadSentinel(aIter, 190382801)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fwdTime' (TimeStamp) member of 'TransactionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->payload())))))) {
        aActor->FatalError("Error deserializing 'payload' (CompositionPayload[]) member of 'TransactionInfo'");
        return false;
    }
    // Sentinel = 'payload'
    if ((!((aMsg)->ReadSentinel(aIter, 199033579)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'payload' (CompositionPayload[]) member of 'TransactionInfo'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->fwdTransactionId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'fwdTransactionId'
    if ((!((aMsg)->ReadSentinel(aIter, 930940533)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->paintSequenceNumber())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'paintSequenceNumber'
    if ((!((aMsg)->ReadSentinel(aIter, 1303775167)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union OMTAValue|
//
namespace mozilla {
namespace layers {
auto OMTAValue::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tnull_t:
        {
            (ptr_null_t())->~null_t__tdef();
            break;
        }
    case Tnscolor:
        {
            (ptr_nscolor())->~nscolor__tdef();
            break;
        }
    case Tfloat:
        {
            (ptr_float())->~float__tdef();
            break;
        }
    case TMatrix4x4:
        {
            (ptr_Matrix4x4())->~Matrix4x4__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT OMTAValue::OMTAValue(const null_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(aOther);
    mType = Tnull_t;
}

MOZ_IMPLICIT OMTAValue::OMTAValue(null_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move(aOther));
    mType = Tnull_t;
}

MOZ_IMPLICIT OMTAValue::OMTAValue(const nscolor& aOther)
{
    new (mozilla::KnownNotNull, ptr_nscolor()) nscolor(aOther);
    mType = Tnscolor;
}

MOZ_IMPLICIT OMTAValue::OMTAValue(nscolor&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nscolor()) nscolor(std::move(aOther));
    mType = Tnscolor;
}

MOZ_IMPLICIT OMTAValue::OMTAValue(const float& aOther)
{
    new (mozilla::KnownNotNull, ptr_float()) float(aOther);
    mType = Tfloat;
}

MOZ_IMPLICIT OMTAValue::OMTAValue(float&& aOther)
{
    new (mozilla::KnownNotNull, ptr_float()) float(std::move(aOther));
    mType = Tfloat;
}

MOZ_IMPLICIT OMTAValue::OMTAValue(const Matrix4x4& aOther)
{
    new (mozilla::KnownNotNull, ptr_Matrix4x4()) Matrix4x4(aOther);
    mType = TMatrix4x4;
}

MOZ_IMPLICIT OMTAValue::OMTAValue(Matrix4x4&& aOther)
{
    new (mozilla::KnownNotNull, ptr_Matrix4x4()) Matrix4x4(std::move(aOther));
    mType = TMatrix4x4;
}

MOZ_IMPLICIT OMTAValue::OMTAValue(const OMTAValue& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t((aOther).get_null_t());
            break;
        }
    case Tnscolor:
        {
            new (mozilla::KnownNotNull, ptr_nscolor()) nscolor((aOther).get_nscolor());
            break;
        }
    case Tfloat:
        {
            new (mozilla::KnownNotNull, ptr_float()) float((aOther).get_float());
            break;
        }
    case TMatrix4x4:
        {
            new (mozilla::KnownNotNull, ptr_Matrix4x4()) Matrix4x4((aOther).get_Matrix4x4());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT OMTAValue::OMTAValue(OMTAValue&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move((aOther).get_null_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tnscolor:
        {
            new (mozilla::KnownNotNull, ptr_nscolor()) nscolor(std::move((aOther).get_nscolor()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tfloat:
        {
            new (mozilla::KnownNotNull, ptr_float()) float(std::move((aOther).get_float()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TMatrix4x4:
        {
            new (mozilla::KnownNotNull, ptr_Matrix4x4()) Matrix4x4(std::move((aOther).get_Matrix4x4()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

OMTAValue::~OMTAValue()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto OMTAValue::operator=(const null_t& aRhs) -> OMTAValue&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = aRhs;
    mType = Tnull_t;
    return (*(this));
}

auto OMTAValue::operator=(null_t&& aRhs) -> OMTAValue&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = std::move(aRhs);
    mType = Tnull_t;
    return (*(this));
}

auto OMTAValue::operator=(const nscolor& aRhs) -> OMTAValue&
{
    if (MaybeDestroy(Tnscolor)) {
        new (mozilla::KnownNotNull, ptr_nscolor()) nscolor;
    }
    (*(ptr_nscolor())) = aRhs;
    mType = Tnscolor;
    return (*(this));
}

auto OMTAValue::operator=(nscolor&& aRhs) -> OMTAValue&
{
    if (MaybeDestroy(Tnscolor)) {
        new (mozilla::KnownNotNull, ptr_nscolor()) nscolor;
    }
    (*(ptr_nscolor())) = std::move(aRhs);
    mType = Tnscolor;
    return (*(this));
}

auto OMTAValue::operator=(const float& aRhs) -> OMTAValue&
{
    if (MaybeDestroy(Tfloat)) {
        new (mozilla::KnownNotNull, ptr_float()) float;
    }
    (*(ptr_float())) = aRhs;
    mType = Tfloat;
    return (*(this));
}

auto OMTAValue::operator=(float&& aRhs) -> OMTAValue&
{
    if (MaybeDestroy(Tfloat)) {
        new (mozilla::KnownNotNull, ptr_float()) float;
    }
    (*(ptr_float())) = std::move(aRhs);
    mType = Tfloat;
    return (*(this));
}

auto OMTAValue::operator=(const Matrix4x4& aRhs) -> OMTAValue&
{
    if (MaybeDestroy(TMatrix4x4)) {
        new (mozilla::KnownNotNull, ptr_Matrix4x4()) Matrix4x4;
    }
    (*(ptr_Matrix4x4())) = aRhs;
    mType = TMatrix4x4;
    return (*(this));
}

auto OMTAValue::operator=(Matrix4x4&& aRhs) -> OMTAValue&
{
    if (MaybeDestroy(TMatrix4x4)) {
        new (mozilla::KnownNotNull, ptr_Matrix4x4()) Matrix4x4;
    }
    (*(ptr_Matrix4x4())) = std::move(aRhs);
    mType = TMatrix4x4;
    return (*(this));
}

auto OMTAValue::operator=(const OMTAValue& aRhs) -> OMTAValue&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = (aRhs).get_null_t();
            break;
        }
    case Tnscolor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nscolor()) nscolor;
            }
            (*(ptr_nscolor())) = (aRhs).get_nscolor();
            break;
        }
    case Tfloat:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_float()) float;
            }
            (*(ptr_float())) = (aRhs).get_float();
            break;
        }
    case TMatrix4x4:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_Matrix4x4()) Matrix4x4;
            }
            (*(ptr_Matrix4x4())) = (aRhs).get_Matrix4x4();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto OMTAValue::operator=(OMTAValue&& aRhs) -> OMTAValue&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = std::move((aRhs).get_null_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tnscolor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nscolor()) nscolor;
            }
            (*(ptr_nscolor())) = std::move((aRhs).get_nscolor());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tfloat:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_float()) float;
            }
            (*(ptr_float())) = std::move((aRhs).get_float());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TMatrix4x4:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_Matrix4x4()) Matrix4x4;
            }
            (*(ptr_Matrix4x4())) = std::move((aRhs).get_Matrix4x4());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OMTAValue>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::OMTAValue union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'OMTAValue'
    (aMsg)->WriteSentinel(248447791);

    switch (type) {
    case union__::Tnull_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_null_t());
            // Sentinel = 'Tnull_t'
            (aMsg)->WriteSentinel(190186211);
            return;
        }
    case union__::Tnscolor:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nscolor());
            // Sentinel = 'Tnscolor'
            (aMsg)->WriteSentinel(245039957);
            return;
        }
    case union__::Tfloat:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_float());
            // Sentinel = 'Tfloat'
            (aMsg)->WriteSentinel(137298539);
            return;
        }
    case union__::TMatrix4x4:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_Matrix4x4());
            // Sentinel = 'TMatrix4x4'
            (aMsg)->WriteSentinel(345244586);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::OMTAValue>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::OMTAValue union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union OMTAValue");
        return false;
    }
    // Sentinel = 'OMTAValue'
    if ((!((aMsg)->ReadSentinel(aIter, 248447791)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union OMTAValue");
        return false;
    }

    switch (type) {
    case union__::Tnull_t:
        {
            mozilla::null_t tmp = mozilla::null_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_null_t())))))) {
                aActor->FatalError("Error deserializing variant Tnull_t of union OMTAValue");
                return false;
            }
            // Sentinel = 'Tnull_t'
            if ((!((aMsg)->ReadSentinel(aIter, 190186211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnull_t of union OMTAValue");
                return false;
            }
            return true;
        }
    case union__::Tnscolor:
        {
            nscolor tmp = nscolor();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nscolor())))))) {
                aActor->FatalError("Error deserializing variant Tnscolor of union OMTAValue");
                return false;
            }
            // Sentinel = 'Tnscolor'
            if ((!((aMsg)->ReadSentinel(aIter, 245039957)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnscolor of union OMTAValue");
                return false;
            }
            return true;
        }
    case union__::Tfloat:
        {
            float tmp = float();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_float())))))) {
                aActor->FatalError("Error deserializing variant Tfloat of union OMTAValue");
                return false;
            }
            // Sentinel = 'Tfloat'
            if ((!((aMsg)->ReadSentinel(aIter, 137298539)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tfloat of union OMTAValue");
                return false;
            }
            return true;
        }
    case union__::TMatrix4x4:
        {
            mozilla::gfx::Matrix4x4 tmp = mozilla::gfx::Matrix4x4();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_Matrix4x4())))))) {
                aActor->FatalError("Error deserializing variant TMatrix4x4 of union OMTAValue");
                return false;
            }
            // Sentinel = 'TMatrix4x4'
            if ((!((aMsg)->ReadSentinel(aIter, 345244586)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TMatrix4x4 of union OMTAValue");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
