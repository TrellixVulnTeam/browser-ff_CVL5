//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/PTestShellParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ipc/TestShellParent.h"

#include "mozilla/dom/PContentParent.h"
#include "mozilla/ipc/PTestShellCommandParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace ipc {


MOZ_IMPLICIT PTestShellParent::PTestShellParent() :
    mozilla::ipc::IProtocol(PTestShellMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PTestShellParent);
}

PTestShellParent::~PTestShellParent()
{
    MOZ_COUNT_DTOR(PTestShellParent);
}

auto PTestShellParent::Manager() const -> PContentParent*
{
    return static_cast<PContentParent*>(IProtocol::Manager());
}

auto PTestShellParent::ManagedPTestShellCommandParent(nsTArray<PTestShellCommandParent*>& aArr) const -> void
{
    mManagedPTestShellCommandParent.ToArray(aArr);
}

auto PTestShellParent::ManagedPTestShellCommandParent() const -> const ManagedContainer<PTestShellCommandParent>&
{
    return mManagedPTestShellCommandParent;
}

auto PTestShellParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPTestShellCommandParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPTestShellCommandParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PTestShellParent::OpenPTestShellCommandEndpoint(PTestShellCommandParent* aActor) -> ManagedEndpoint<PTestShellCommandChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PTestShellCommandParent actor");
        return ManagedEndpoint<PTestShellCommandChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPTestShellCommandParent.PutEntry(aActor);

    return ManagedEndpoint<PTestShellCommandChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PTestShellParent::BindPTestShellCommandEndpoint(
        ManagedEndpoint<PTestShellCommandParent> aEndpoint,
        PTestShellCommandParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PTestShellCommandParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPTestShellCommandParent.PutEntry(aActor);

    return true;
}

auto PTestShellParent::Send__delete__(PTestShellParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PTestShell::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PTestShellParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PTestShellParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PTestShell::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PTestShellMsgStart, actor);
    return sendok__;
}

auto PTestShellParent::SendExecuteCommand(const nsString& aCommand) -> bool
{
    IPC::Message* msg__ = PTestShell::Msg_ExecuteCommand(Id());

    WriteIPDLParam(msg__, this, aCommand);
    // Sentinel = 'aCommand'
    (msg__)->WriteSentinel(230097697);




    if (mozilla::ipc::LoggingEnabledFor("PTestShellParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PTestShellParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PTestShell::Msg_ExecuteCommand", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PTestShellParent::SendPTestShellCommandConstructor(const nsString& aCommand) -> PTestShellCommandParent*
{
    PTestShellCommandParent* actor = (static_cast<TestShellParent*>(this))->AllocPTestShellCommandParent(aCommand);
    return SendPTestShellCommandConstructor(actor, aCommand);
}

auto PTestShellParent::SendPTestShellCommandConstructor(
        PTestShellCommandParent* actor,
        const nsString& aCommand) -> PTestShellCommandParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PTestShellCommandParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPTestShellCommandParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PTestShell::Msg_PTestShellCommandConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aCommand);
    // Sentinel = 'aCommand'
    (msg__)->WriteSentinel(230097697);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PTestShellParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PTestShellParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PTestShell::Msg_PTestShellCommandConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PTestShellCommandParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PTestShellCommandMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PTestShellParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PTestShellCommandMsgStart:
{
            PTestShellCommandParent* actor = static_cast<PTestShellCommandParent*>(aListener);
            auto& container = mManagedPTestShellCommandParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PTestShellParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PTestShellCommandMsgStart:
        static_cast<TestShellParent*>(this)->DeallocPTestShellCommandParent(static_cast<PTestShellCommandParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PTestShellParent::OnMessageReceived(const Message& msg__) -> PTestShellParent::Result
{
    switch (msg__.type()) {
    case PTestShell::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PTestShell::Reply_PTestShellCommandConstructor__ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PTestShellParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PTestShellParent::Result
{
    return MsgNotKnown;
}

auto PTestShellParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PTestShellParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PTestShellParent::ClearSubtree() -> void
{
    for (auto it = mManagedPTestShellCommandParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPTestShellCommandParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPTestShellCommandParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPTestShellCommandParent.Clear();

}



} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::PTestShellParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::ipc::PTestShellParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PTestShell", PTestShellMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::ipc::PTestShellParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
