//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PClientHandleParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"

#include "mozilla/dom/PClientManagerParent.h"
#include "mozilla/dom/PClientHandleOpParent.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PClientHandleParent::RecvPClientHandleOpConstructor(
        PClientHandleOpParent* actor,
        const ClientOpConstructorArgs& aArgs) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PClientHandleParent::PClientHandleParent() :
    mozilla::ipc::IProtocol(PClientHandleMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PClientHandleParent);
}

PClientHandleParent::~PClientHandleParent()
{
    MOZ_COUNT_DTOR(PClientHandleParent);
}

auto PClientHandleParent::Manager() const -> PClientManagerParent*
{
    return static_cast<PClientManagerParent*>(IProtocol::Manager());
}

auto PClientHandleParent::ManagedPClientHandleOpParent(nsTArray<PClientHandleOpParent*>& aArr) const -> void
{
    mManagedPClientHandleOpParent.ToArray(aArr);
}

auto PClientHandleParent::ManagedPClientHandleOpParent() const -> const ManagedContainer<PClientHandleOpParent>&
{
    return mManagedPClientHandleOpParent;
}

auto PClientHandleParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPClientHandleOpParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPClientHandleOpParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PClientHandleParent::OpenPClientHandleOpEndpoint(PClientHandleOpParent* aActor) -> ManagedEndpoint<PClientHandleOpChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientHandleOpParent actor");
        return ManagedEndpoint<PClientHandleOpChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPClientHandleOpParent.PutEntry(aActor);

    return ManagedEndpoint<PClientHandleOpChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PClientHandleParent::BindPClientHandleOpEndpoint(
        ManagedEndpoint<PClientHandleOpParent> aEndpoint,
        PClientHandleOpParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientHandleOpParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPClientHandleOpParent.PutEntry(aActor);

    return true;
}

auto PClientHandleParent::SendExecutionReady(const IPCClientInfo& aClientInfo) -> bool
{
    IPC::Message* msg__ = PClientHandle::Msg_ExecutionReady(Id());

    WriteIPDLParam(msg__, this, aClientInfo);
    // Sentinel = 'aClientInfo'
    (msg__)->WriteSentinel(422315085);




    if (mozilla::ipc::LoggingEnabledFor("PClientHandleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientHandleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientHandle::Msg_ExecutionReady", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PClientHandleParent::Send__delete__(PClientHandleParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PClientHandle::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PClientHandleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientHandleParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientHandle::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PClientHandleMsgStart, actor);
    return sendok__;
}

auto PClientHandleParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PClientHandleOpMsgStart:
{
            PClientHandleOpParent* actor = static_cast<PClientHandleOpParent*>(aListener);
            auto& container = mManagedPClientHandleOpParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PClientHandleParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PClientHandleOpMsgStart:
        this->DeallocPClientHandleOpParent(static_cast<PClientHandleOpParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PClientHandleParent::OnMessageReceived(const Message& msg__) -> PClientHandleParent::Result
{
    switch (msg__.type()) {
    case PClientHandle::Msg_Teardown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientHandleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientHandleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientHandle::Msg_Teardown", OTHER);

            if ((!((this)->RecvTeardown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PClientHandle::Msg_PClientHandleOpConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientHandleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientHandleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientHandle::Msg_PClientHandleOpConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            ClientOpConstructorArgs aArgs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aArgs)))))) {
                FatalError("Error deserializing 'ClientOpConstructorArgs'");
                return MsgValueError;
            }
            // Sentinel = 'aArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92602863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClientOpConstructorArgs'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PClientHandleOpParent* actor = (this)->AllocPClientHandleOpParent(aArgs);
            if (!actor) {
                NS_WARNING("Cannot bind null PClientHandleOpParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPClientHandleOpParent.PutEntry(actor);

            if ((!((this)->RecvPClientHandleOpConstructor(std::move(actor), std::move(aArgs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PClientHandle::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PClientHandleParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PClientHandleParent::Result
{
    return MsgNotKnown;
}

auto PClientHandleParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PClientHandleParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PClientHandleParent::ClearSubtree() -> void
{
    for (auto it = mManagedPClientHandleOpParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPClientHandleOpParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPClientHandleOpParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPClientHandleOpParent.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PClientHandleParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PClientHandleParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PClientHandle", PClientHandleMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PClientHandleParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
