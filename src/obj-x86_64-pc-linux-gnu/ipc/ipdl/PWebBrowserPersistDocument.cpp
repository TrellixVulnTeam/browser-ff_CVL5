//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/ReferrerInfoUtils.h"
#include "mozilla/dom/PContentParent.h"
#include "mozilla/dom/PContentChild.h"
#include "mozilla/PWebBrowserPersistResourcesParent.h"
#include "mozilla/PWebBrowserPersistResourcesChild.h"
#include "mozilla/PWebBrowserPersistSerializeParent.h"
#include "mozilla/PWebBrowserPersistSerializeChild.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/PWebBrowserPersistDocument.h"
#include "mozilla/PWebBrowserPersistDocumentParent.h"
#include "mozilla/PWebBrowserPersistDocumentChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace PWebBrowserPersistDocument {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::PWebBrowserPersistDocumentParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::PWebBrowserPersistDocumentChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_Attributes(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Attributes__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitFailure(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitFailure__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetPersistFlags(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetPersistFlags__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PWebBrowserPersistResourcesConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PWebBrowserPersistResourcesConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PWebBrowserPersistResourcesConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PWebBrowserPersistResourcesConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PWebBrowserPersistSerializeConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PWebBrowserPersistSerializeConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PWebBrowserPersistSerializeConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PWebBrowserPersistSerializeConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}

} // namespace PWebBrowserPersistDocument
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebBrowserPersistDocumentAttrs|
//
namespace mozilla {
auto WebBrowserPersistDocumentAttrs::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(WebBrowserPersistDocumentAttrs, persistFlags_) - offsetof(WebBrowserPersistDocumentAttrs, sessionHistoryCacheKey_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::WebBrowserPersistDocumentAttrs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).isPrivate());
    // Sentinel = 'isPrivate'
    (aMsg)->WriteSentinel(310576056);
    WriteIPDLParam(aMsg, aActor, (aVar).documentURI());
    // Sentinel = 'documentURI'
    (aMsg)->WriteSentinel(453706832);
    WriteIPDLParam(aMsg, aActor, (aVar).baseURI());
    // Sentinel = 'baseURI'
    (aMsg)->WriteSentinel(179962508);
    WriteIPDLParam(aMsg, aActor, (aVar).contentType());
    // Sentinel = 'contentType'
    (aMsg)->WriteSentinel(465241246);
    WriteIPDLParam(aMsg, aActor, (aVar).characterSet());
    // Sentinel = 'characterSet'
    (aMsg)->WriteSentinel(526451930);
    WriteIPDLParam(aMsg, aActor, (aVar).title());
    // Sentinel = 'title'
    (aMsg)->WriteSentinel(109445667);
    WriteIPDLParam(aMsg, aActor, (aVar).referrerInfo());
    // Sentinel = 'referrerInfo'
    (aMsg)->WriteSentinel(540214506);
    WriteIPDLParam(aMsg, aActor, (aVar).cookieJarSettings());
    // Sentinel = 'cookieJarSettings'
    (aMsg)->WriteSentinel(1031800553);
    WriteIPDLParam(aMsg, aActor, (aVar).contentDisposition());
    // Sentinel = 'contentDisposition'
    (aMsg)->WriteSentinel(1196361617);
    WriteIPDLParam(aMsg, aActor, (aVar).principal());
    // Sentinel = 'principal'
    (aMsg)->WriteSentinel(319620035);
    (aMsg)->WriteBytes((&((aVar).sessionHistoryCacheKey())), 8);
    // Sentinel = 'sessionHistoryCacheKey | persistFlags'
    (aMsg)->WriteSentinel(440340135);
}

auto IPDLParamTraits<mozilla::WebBrowserPersistDocumentAttrs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isPrivate())))))) {
        aActor->FatalError("Error deserializing 'isPrivate' (bool) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    // Sentinel = 'isPrivate'
    if ((!((aMsg)->ReadSentinel(aIter, 310576056)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isPrivate' (bool) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->documentURI())))))) {
        aActor->FatalError("Error deserializing 'documentURI' (nsCString) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    // Sentinel = 'documentURI'
    if ((!((aMsg)->ReadSentinel(aIter, 453706832)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'documentURI' (nsCString) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->baseURI())))))) {
        aActor->FatalError("Error deserializing 'baseURI' (nsCString) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    // Sentinel = 'baseURI'
    if ((!((aMsg)->ReadSentinel(aIter, 179962508)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'baseURI' (nsCString) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentType())))))) {
        aActor->FatalError("Error deserializing 'contentType' (nsCString) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    // Sentinel = 'contentType'
    if ((!((aMsg)->ReadSentinel(aIter, 465241246)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentType' (nsCString) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->characterSet())))))) {
        aActor->FatalError("Error deserializing 'characterSet' (nsCString) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    // Sentinel = 'characterSet'
    if ((!((aMsg)->ReadSentinel(aIter, 526451930)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'characterSet' (nsCString) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->title())))))) {
        aActor->FatalError("Error deserializing 'title' (nsString) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    // Sentinel = 'title'
    if ((!((aMsg)->ReadSentinel(aIter, 109445667)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'title' (nsString) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->referrerInfo())))))) {
        aActor->FatalError("Error deserializing 'referrerInfo' (nsIReferrerInfo) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    // Sentinel = 'referrerInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 540214506)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'referrerInfo' (nsIReferrerInfo) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cookieJarSettings())))))) {
        aActor->FatalError("Error deserializing 'cookieJarSettings' (CookieJarSettingsArgs) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    // Sentinel = 'cookieJarSettings'
    if ((!((aMsg)->ReadSentinel(aIter, 1031800553)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cookieJarSettings' (CookieJarSettingsArgs) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentDisposition())))))) {
        aActor->FatalError("Error deserializing 'contentDisposition' (nsString) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    // Sentinel = 'contentDisposition'
    if ((!((aMsg)->ReadSentinel(aIter, 1196361617)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentDisposition' (nsString) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principal())))))) {
        aActor->FatalError("Error deserializing 'principal' (PrincipalInfo) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    // Sentinel = 'principal'
    if ((!((aMsg)->ReadSentinel(aIter, 319620035)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principal' (PrincipalInfo) member of 'WebBrowserPersistDocumentAttrs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->sessionHistoryCacheKey())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'sessionHistoryCacheKey | persistFlags'
    if ((!((aMsg)->ReadSentinel(aIter, 440340135)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebBrowserPersistURIMapEntry|
//
namespace mozilla {
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::WebBrowserPersistURIMapEntry>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).mapFrom());
    // Sentinel = 'mapFrom'
    (aMsg)->WriteSentinel(187761363);
    WriteIPDLParam(aMsg, aActor, (aVar).mapTo());
    // Sentinel = 'mapTo'
    (aMsg)->WriteSentinel(101777922);
}

auto IPDLParamTraits<mozilla::WebBrowserPersistURIMapEntry>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mapFrom())))))) {
        aActor->FatalError("Error deserializing 'mapFrom' (nsCString) member of 'WebBrowserPersistURIMapEntry'");
        return false;
    }
    // Sentinel = 'mapFrom'
    if ((!((aMsg)->ReadSentinel(aIter, 187761363)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mapFrom' (nsCString) member of 'WebBrowserPersistURIMapEntry'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mapTo())))))) {
        aActor->FatalError("Error deserializing 'mapTo' (nsCString) member of 'WebBrowserPersistURIMapEntry'");
        return false;
    }
    // Sentinel = 'mapTo'
    if ((!((aMsg)->ReadSentinel(aIter, 101777922)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mapTo' (nsCString) member of 'WebBrowserPersistURIMapEntry'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebBrowserPersistURIMap|
//
namespace mozilla {
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::WebBrowserPersistURIMap>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).mapURIs());
    // Sentinel = 'mapURIs'
    (aMsg)->WriteSentinel(180814498);
    WriteIPDLParam(aMsg, aActor, (aVar).targetBaseURI());
    // Sentinel = 'targetBaseURI'
    (aMsg)->WriteSentinel(610862323);
}

auto IPDLParamTraits<mozilla::WebBrowserPersistURIMap>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mapURIs())))))) {
        aActor->FatalError("Error deserializing 'mapURIs' (WebBrowserPersistURIMapEntry[]) member of 'WebBrowserPersistURIMap'");
        return false;
    }
    // Sentinel = 'mapURIs'
    if ((!((aMsg)->ReadSentinel(aIter, 180814498)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mapURIs' (WebBrowserPersistURIMapEntry[]) member of 'WebBrowserPersistURIMap'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->targetBaseURI())))))) {
        aActor->FatalError("Error deserializing 'targetBaseURI' (nsCString) member of 'WebBrowserPersistURIMap'");
        return false;
    }
    // Sentinel = 'targetBaseURI'
    if ((!((aMsg)->ReadSentinel(aIter, 610862323)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'targetBaseURI' (nsCString) member of 'WebBrowserPersistURIMap'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
