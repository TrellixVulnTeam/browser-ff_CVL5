//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PWebrtcGlobalChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/RTCStatsReportBinding.h"
#include "mozilla/media/webrtc/WebrtcGlobal.h"

#include "mozilla/dom/PContentChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PWebrtcGlobalChild::PWebrtcGlobalChild() :
    mozilla::ipc::IProtocol(PWebrtcGlobalMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PWebrtcGlobalChild);
}

PWebrtcGlobalChild::~PWebrtcGlobalChild()
{
    MOZ_COUNT_DTOR(PWebrtcGlobalChild);
}

auto PWebrtcGlobalChild::Manager() const -> PContentChild*
{
    return static_cast<PContentChild*>(IProtocol::Manager());
}

auto PWebrtcGlobalChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PWebrtcGlobalChild::Send__delete__(PWebrtcGlobalChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PWebrtcGlobal::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebrtcGlobalChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebrtcGlobal::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PWebrtcGlobalMsgStart, actor);
    return sendok__;
}

auto PWebrtcGlobalChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebrtcGlobalChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebrtcGlobalChild::OnMessageReceived(const Message& msg__) -> PWebrtcGlobalChild::Result
{
    switch (msg__.type()) {
    case PWebrtcGlobal::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PWebrtcGlobal::Msg_GetStats__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebrtcGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebrtcGlobal::Msg_GetStats", OTHER);

            PickleIterator iter__{msg__};
            nsString aPcIdFilter{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPcIdFilter)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aPcIdFilter'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 399377448)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            GetStatsResolver resolver = [proxy__, seqno__, id__](nsTArray<RTCStatsReportInternal>&& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PWebrtcGlobalChild* self__ = static_cast<PWebrtcGlobalChild*>(proxy__->Get());

                IPC::Message* reply__ = PWebrtcGlobal::Reply_GetStats(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'stats'
                (reply__)->WriteSentinel(110232112);

                if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PWebrtcGlobalChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((this)->RecvGetStats(std::move(aPcIdFilter), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebrtcGlobal::Msg_ClearStats__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebrtcGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebrtcGlobal::Msg_ClearStats", OTHER);

            if ((!((this)->RecvClearStats()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebrtcGlobal::Msg_GetLog__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebrtcGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebrtcGlobal::Msg_GetLog", OTHER);

            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            GetLogResolver resolver = [proxy__, seqno__, id__](const WebrtcGlobalLog& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PWebrtcGlobalChild* self__ = static_cast<PWebrtcGlobalChild*>(proxy__->Get());

                IPC::Message* reply__ = PWebrtcGlobal::Reply_GetLog(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'logs'
                (reply__)->WriteSentinel(71434678);

                if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PWebrtcGlobalChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((this)->RecvGetLog(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebrtcGlobal::Msg_ClearLog__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebrtcGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebrtcGlobal::Msg_ClearLog", OTHER);

            if ((!((this)->RecvClearLog()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebrtcGlobal::Msg_SetAecLogging__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebrtcGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebrtcGlobal::Msg_SetAecLogging", OTHER);

            PickleIterator iter__{msg__};
            bool aEnable{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEnable)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aEnable'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 173605545)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvSetAecLogging(std::move(aEnable))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebrtcGlobal::Msg_SetDebugMode__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebrtcGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebrtcGlobal::Msg_SetDebugMode", OTHER);

            PickleIterator iter__{msg__};
            int aLevel{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLevel)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'aLevel'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133431898)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvSetDebugMode(std::move(aLevel))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebrtcGlobalChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWebrtcGlobalChild::Result
{
    return MsgNotKnown;
}

auto PWebrtcGlobalChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWebrtcGlobalChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWebrtcGlobalChild::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PWebrtcGlobalChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PWebrtcGlobalChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWebrtcGlobal", PWebrtcGlobalMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PWebrtcGlobalChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
