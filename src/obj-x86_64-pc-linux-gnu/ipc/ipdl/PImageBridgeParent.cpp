//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PImageBridgeParent.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/layers/CompositorTypes.h"
#include "mozilla/layers/ImageBridgeParent.h"
#include "mozilla/layers/LayersMessageUtils.h"
#include "mozilla/layers/WebRenderMessageUtils.h"

#include "mozilla/layers/PTextureParent.h"
#include "mozilla/media/PMediaSystemResourceManagerParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {


auto PImageBridgeParent::RecvPTextureConstructor(
        PTextureParent* actor,
        const SurfaceDescriptor& aSharedData,
        const ReadLockDescriptor& aReadLock,
        const LayersBackend& aBackend,
        const TextureFlags& aTextureFlags,
        const uint64_t& aSerial,
        const MaybeExternalImageId& aExternalImageId) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PImageBridgeParent::RecvPMediaSystemResourceManagerConstructor(PMediaSystemResourceManagerParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PImageBridgeParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PImageBridgeParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PImageBridgeParent::EnteredCxxStack() -> void
{
}

auto PImageBridgeParent::ExitedCxxStack() -> void
{
}

auto PImageBridgeParent::EnteredCall() -> void
{
}

auto PImageBridgeParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PImageBridgeParent::PImageBridgeParent() :
    mozilla::ipc::IToplevelProtocol("PImageBridgeParent", PImageBridgeMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PImageBridgeParent);
}

PImageBridgeParent::~PImageBridgeParent()
{
    MOZ_COUNT_DTOR(PImageBridgeParent);
}

auto PImageBridgeParent::ManagedPTextureParent(nsTArray<PTextureParent*>& aArr) const -> void
{
    mManagedPTextureParent.ToArray(aArr);
}

auto PImageBridgeParent::ManagedPTextureParent() const -> const ManagedContainer<PTextureParent>&
{
    return mManagedPTextureParent;
}

auto PImageBridgeParent::ManagedPMediaSystemResourceManagerParent(nsTArray<PMediaSystemResourceManagerParent*>& aArr) const -> void
{
    mManagedPMediaSystemResourceManagerParent.ToArray(aArr);
}

auto PImageBridgeParent::ManagedPMediaSystemResourceManagerParent() const -> const ManagedContainer<PMediaSystemResourceManagerParent>&
{
    return mManagedPMediaSystemResourceManagerParent;
}

auto PImageBridgeParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPTextureParent.Count();
    total += mManagedPMediaSystemResourceManagerParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPTextureParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPMediaSystemResourceManagerParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PImageBridgeParent::OpenPTextureEndpoint(PTextureParent* aActor) -> ManagedEndpoint<PTextureChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PTextureParent actor");
        return ManagedEndpoint<PTextureChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPTextureParent.PutEntry(aActor);

    return ManagedEndpoint<PTextureChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PImageBridgeParent::BindPTextureEndpoint(
        ManagedEndpoint<PTextureParent> aEndpoint,
        PTextureParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PTextureParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPTextureParent.PutEntry(aActor);

    return true;
}

auto PImageBridgeParent::OpenPMediaSystemResourceManagerEndpoint(PMediaSystemResourceManagerParent* aActor) -> ManagedEndpoint<PMediaSystemResourceManagerChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PMediaSystemResourceManagerParent actor");
        return ManagedEndpoint<PMediaSystemResourceManagerChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPMediaSystemResourceManagerParent.PutEntry(aActor);

    return ManagedEndpoint<PMediaSystemResourceManagerChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PImageBridgeParent::BindPMediaSystemResourceManagerEndpoint(
        ManagedEndpoint<PMediaSystemResourceManagerParent> aEndpoint,
        PMediaSystemResourceManagerParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PMediaSystemResourceManagerParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPMediaSystemResourceManagerParent.PutEntry(aActor);

    return true;
}

auto PImageBridgeParent::SendParentAsyncMessages(const nsTArray<AsyncParentMessageData>& aMessages) -> bool
{
    IPC::Message* msg__ = PImageBridge::Msg_ParentAsyncMessages(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aMessages);
    // Sentinel = 'aMessages'
    (msg__)->WriteSentinel(293864346);




    if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PImageBridgeParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PImageBridge::Msg_ParentAsyncMessages", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PImageBridgeParent::SendDidComposite(const nsTArray<ImageCompositeNotification>& aNotifications) -> bool
{
    IPC::Message* msg__ = PImageBridge::Msg_DidComposite(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aNotifications);
    // Sentinel = 'aNotifications'
    (msg__)->WriteSentinel(704185788);




    if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PImageBridgeParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PImageBridge::Msg_DidComposite", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PImageBridgeParent::SendReportFramesDropped(
        const CompositableHandle& aHandle,
        const uint32_t& aFrames) -> bool
{
    IPC::Message* msg__ = PImageBridge::Msg_ReportFramesDropped(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aHandle);
    // Sentinel = 'aHandle'
    (msg__)->WriteSentinel(174326446);
    WriteIPDLParam(msg__, this, aFrames);
    // Sentinel = 'aFrames'
    (msg__)->WriteSentinel(177472192);




    if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PImageBridgeParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PImageBridge::Msg_ReportFramesDropped", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PImageBridgeParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PTextureMsgStart:
{
            PTextureParent* actor = static_cast<PTextureParent*>(aListener);
            auto& container = mManagedPTextureParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PMediaSystemResourceManagerMsgStart:
{
            PMediaSystemResourceManagerParent* actor = static_cast<PMediaSystemResourceManagerParent*>(aListener);
            auto& container = mManagedPMediaSystemResourceManagerParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PImageBridgeParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PTextureMsgStart:
        static_cast<ImageBridgeParent*>(this)->DeallocPTextureParent(static_cast<PTextureParent*>(aListener));
        return;
    case PMediaSystemResourceManagerMsgStart:
        static_cast<ImageBridgeParent*>(this)->DeallocPMediaSystemResourceManagerParent(static_cast<PMediaSystemResourceManagerParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PImageBridgeParent::OnMessageReceived(const Message& msg__) -> PImageBridgeParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PImageBridgeParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PImageBridge::Msg_Update__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PImageBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PImageBridge::Msg_Update", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<CompositableOperation> ops{};
            nsTArray<OpDestroy> toDestroy{};
            uint64_t fwdTransactionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(ops)))))) {
                FatalError("Error deserializing 'CompositableOperation[]'");
                return MsgValueError;
            }
            // Sentinel = 'ops'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 44237139)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CompositableOperation[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(toDestroy)))))) {
                FatalError("Error deserializing 'OpDestroy[]'");
                return MsgValueError;
            }
            // Sentinel = 'toDestroy'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 311100366)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OpDestroy[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(fwdTransactionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'fwdTransactionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 930940533)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ImageBridgeParent*>(this))->RecvUpdate(std::move(ops), std::move(toDestroy), std::move(fwdTransactionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PImageBridge::Msg_WillClose__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PImageBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PImageBridge::Msg_WillClose", OTHER);

            if ((!((static_cast<ImageBridgeParent*>(this))->RecvWillClose()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PImageBridge::Msg_PTextureConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PImageBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PImageBridge::Msg_PTextureConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            SurfaceDescriptor aSharedData{};
            ReadLockDescriptor aReadLock{};
            LayersBackend aBackend{};
            TextureFlags aTextureFlags{};
            uint64_t aSerial{};
            MaybeExternalImageId aExternalImageId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSharedData)))))) {
                FatalError("Error deserializing 'SurfaceDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'aSharedData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 420480051)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceDescriptor'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReadLock)))))) {
                FatalError("Error deserializing 'ReadLockDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'aReadLock'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 279774055)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ReadLockDescriptor'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBackend)))))) {
                FatalError("Error deserializing 'LayersBackend'");
                return MsgValueError;
            }
            // Sentinel = 'aBackend'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 221119242)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayersBackend'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTextureFlags)))))) {
                FatalError("Error deserializing 'TextureFlags'");
                return MsgValueError;
            }
            // Sentinel = 'aTextureFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 614139200)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TextureFlags'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSerial)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aSerial'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 181011138)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aExternalImageId)))))) {
                FatalError("Error deserializing 'MaybeExternalImageId'");
                return MsgValueError;
            }
            // Sentinel = 'aExternalImageId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 898172469)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeExternalImageId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PTextureParent* actor = (static_cast<ImageBridgeParent*>(this))->AllocPTextureParent(aSharedData, aReadLock, aBackend, aTextureFlags, aSerial, aExternalImageId);
            if (!actor) {
                NS_WARNING("Cannot bind null PTextureParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPTextureParent.PutEntry(actor);

            if ((!((static_cast<ImageBridgeParent*>(this))->RecvPTextureConstructor(std::move(actor), std::move(aSharedData), std::move(aReadLock), std::move(aBackend), std::move(aTextureFlags), std::move(aSerial), std::move(aExternalImageId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PImageBridge::Msg_PMediaSystemResourceManagerConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PImageBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PImageBridge::Msg_PMediaSystemResourceManagerConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PMediaSystemResourceManagerParent* actor = (static_cast<ImageBridgeParent*>(this))->AllocPMediaSystemResourceManagerParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PMediaSystemResourceManagerParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPMediaSystemResourceManagerParent.PutEntry(actor);

            if ((!((static_cast<ImageBridgeParent*>(this))->RecvPMediaSystemResourceManagerConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PImageBridge::Msg_ReleaseCompositable__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PImageBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PImageBridge::Msg_ReleaseCompositable", OTHER);

            PickleIterator iter__{msg__};
            CompositableHandle aHandle{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHandle)))))) {
                FatalError("Error deserializing 'CompositableHandle'");
                return MsgValueError;
            }
            // Sentinel = 'aHandle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 174326446)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CompositableHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ImageBridgeParent*>(this))->RecvReleaseCompositable(std::move(aHandle))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PImageBridge::Msg_UpdateAsyncPluginSurface__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PImageBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PImageBridge::Msg_UpdateAsyncPluginSurface", OTHER);

            PickleIterator iter__{msg__};
            SurfaceDescriptorPlugin aSD{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSD)))))) {
                FatalError("Error deserializing 'SurfaceDescriptorPlugin'");
                return MsgValueError;
            }
            // Sentinel = 'aSD'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 34603257)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceDescriptorPlugin'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ImageBridgeParent*>(this))->RecvUpdateAsyncPluginSurface(std::move(aSD))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PImageBridge::Msg_RemoveAsyncPluginSurface__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PImageBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PImageBridge::Msg_RemoveAsyncPluginSurface", OTHER);

            PickleIterator iter__{msg__};
            SurfaceDescriptorPlugin aSD{};
            bool isFrontSurface{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSD)))))) {
                FatalError("Error deserializing 'SurfaceDescriptorPlugin'");
                return MsgValueError;
            }
            // Sentinel = 'aSD'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 34603257)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceDescriptorPlugin'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isFrontSurface)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'isFrontSurface'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 717751727)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ImageBridgeParent*>(this))->RecvRemoveAsyncPluginSurface(std::move(aSD), std::move(isFrontSurface))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PImageBridgeParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PImageBridgeParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PImageBridgeParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    switch (msg__.type()) {
    case PImageBridge::Msg_NewCompositable__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PImageBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PImageBridge::Msg_NewCompositable", OTHER);

            PickleIterator iter__{msg__};
            CompositableHandle aHandle{};
            TextureInfo aInfo{};
            LayersBackend aBackend{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHandle)))))) {
                FatalError("Error deserializing 'CompositableHandle'");
                return MsgValueError;
            }
            // Sentinel = 'aHandle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 174326446)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CompositableHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInfo)))))) {
                FatalError("Error deserializing 'TextureInfo'");
                return MsgValueError;
            }
            // Sentinel = 'aInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 93520366)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TextureInfo'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBackend)))))) {
                FatalError("Error deserializing 'LayersBackend'");
                return MsgValueError;
            }
            // Sentinel = 'aBackend'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 221119242)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayersBackend'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            if ((!((static_cast<ImageBridgeParent*>(this))->RecvNewCompositable(std::move(aHandle), std::move(aInfo), std::move(aBackend))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PImageBridge::Reply_NewCompositable(id__);


            if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PImageBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PImageBridge::Msg_MakeAsyncPluginSurfaces__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PImageBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PImageBridge::Msg_MakeAsyncPluginSurfaces", OTHER);

            PickleIterator iter__{msg__};
            SurfaceFormat format{};
            IntSize size{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(format)))))) {
                FatalError("Error deserializing 'SurfaceFormat'");
                return MsgValueError;
            }
            // Sentinel = 'format'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 148505226)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceFormat'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(size)))))) {
                FatalError("Error deserializing 'IntSize'");
                return MsgValueError;
            }
            // Sentinel = 'size'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 73662908)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IntSize'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            SurfaceDescriptorPlugin aSD{};
            if ((!((static_cast<ImageBridgeParent*>(this))->RecvMakeAsyncPluginSurfaces(std::move(format), std::move(size), (&(aSD)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PImageBridge::Reply_MakeAsyncPluginSurfaces(id__);

            WriteIPDLParam(reply__, this, aSD);
            // Sentinel = 'aSD'
            (reply__)->WriteSentinel(34603257);

            if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PImageBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PImageBridge::Msg_ReadbackAsyncPluginSurface__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PImageBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PImageBridge::Msg_ReadbackAsyncPluginSurface", OTHER);

            PickleIterator iter__{msg__};
            SurfaceDescriptorPlugin aSD{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSD)))))) {
                FatalError("Error deserializing 'SurfaceDescriptorPlugin'");
                return MsgValueError;
            }
            // Sentinel = 'aSD'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 34603257)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceDescriptorPlugin'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            SurfaceDescriptor result{};
            if ((!((static_cast<ImageBridgeParent*>(this))->RecvReadbackAsyncPluginSurface(std::move(aSD), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PImageBridge::Reply_ReadbackAsyncPluginSurface(id__);

            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PImageBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PImageBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PImageBridgeParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PImageBridgeParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PImageBridgeParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PImageBridgeParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PImageBridgeParent::ClearSubtree() -> void
{
    for (auto it = mManagedPTextureParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPTextureParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPTextureParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPTextureParent.Clear();

    for (auto it = mManagedPMediaSystemResourceManagerParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPMediaSystemResourceManagerParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPMediaSystemResourceManagerParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPMediaSystemResourceManagerParent.Clear();

}



} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PImageBridgeParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layers::PImageBridgeParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PImageBridge", PImageBridgeMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layers::PImageBridgeParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
