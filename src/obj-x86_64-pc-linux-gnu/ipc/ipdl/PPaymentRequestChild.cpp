//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PPaymentRequestChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/PaymentRequestChild.h"
#include "mozilla/dom/PermissionMessageUtils.h"
#include "nsIPrincipal.h"

#include "mozilla/dom/PBrowserChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PPaymentRequestChild::PPaymentRequestChild() :
    mozilla::ipc::IProtocol(PPaymentRequestMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PPaymentRequestChild);
}

PPaymentRequestChild::~PPaymentRequestChild()
{
    MOZ_COUNT_DTOR(PPaymentRequestChild);
}

auto PPaymentRequestChild::Manager() const -> PBrowserChild*
{
    return static_cast<PBrowserChild*>(IProtocol::Manager());
}

auto PPaymentRequestChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PPaymentRequestChild::Send__delete__(PPaymentRequestChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PPaymentRequest::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PPaymentRequestChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPaymentRequestChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPaymentRequest::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PPaymentRequestMsgStart, actor);
    return sendok__;
}

auto PPaymentRequestChild::SendRequestPayment(const IPCPaymentActionRequest& aAction) -> bool
{
    IPC::Message* msg__ = PPaymentRequest::Msg_RequestPayment(Id());

    WriteIPDLParam(msg__, this, aAction);
    // Sentinel = 'aAction'
    (msg__)->WriteSentinel(175768256);




    if (mozilla::ipc::LoggingEnabledFor("PPaymentRequestChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPaymentRequestChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPaymentRequest::Msg_RequestPayment", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPaymentRequestChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PPaymentRequestChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PPaymentRequestChild::OnMessageReceived(const Message& msg__) -> PPaymentRequestChild::Result
{
    switch (msg__.type()) {
    case PPaymentRequest::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PPaymentRequest::Msg_RespondPayment__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPaymentRequestChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPaymentRequestChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPaymentRequest::Msg_RespondPayment", OTHER);

            PickleIterator iter__{msg__};
            IPCPaymentActionResponse aResponse{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aResponse)))))) {
                FatalError("Error deserializing 'IPCPaymentActionResponse'");
                return MsgValueError;
            }
            // Sentinel = 'aResponse'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 301466545)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCPaymentActionResponse'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PaymentRequestChild*>(this))->RecvRespondPayment(std::move(aResponse))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPaymentRequest::Msg_ChangeShippingAddress__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPaymentRequestChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPaymentRequestChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPaymentRequest::Msg_ChangeShippingAddress", OTHER);

            PickleIterator iter__{msg__};
            nsString aRequestId{};
            IPCPaymentAddress aAddress{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequestId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aRequestId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365560824)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAddress)))))) {
                FatalError("Error deserializing 'IPCPaymentAddress'");
                return MsgValueError;
            }
            // Sentinel = 'aAddress'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 225641256)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCPaymentAddress'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PaymentRequestChild*>(this))->RecvChangeShippingAddress(std::move(aRequestId), std::move(aAddress))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPaymentRequest::Msg_ChangeShippingOption__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPaymentRequestChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPaymentRequestChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPaymentRequest::Msg_ChangeShippingOption", OTHER);

            PickleIterator iter__{msg__};
            nsString aRequestId{};
            nsString aOption{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequestId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aRequestId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365560824)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOption)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aOption'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 185533147)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PaymentRequestChild*>(this))->RecvChangeShippingOption(std::move(aRequestId), std::move(aOption))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPaymentRequest::Msg_ChangePayerDetail__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPaymentRequestChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPaymentRequestChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPaymentRequest::Msg_ChangePayerDetail", OTHER);

            PickleIterator iter__{msg__};
            nsString aRequestId{};
            nsString aPayerName{};
            nsString aPayerEmail{};
            nsString aPayerPhone{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequestId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aRequestId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365560824)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPayerName)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aPayerName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 355271652)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPayerEmail)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aPayerEmail'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 425985099)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPayerPhone)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aPayerPhone'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 431227997)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PaymentRequestChild*>(this))->RecvChangePayerDetail(std::move(aRequestId), std::move(aPayerName), std::move(aPayerEmail), std::move(aPayerPhone))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPaymentRequest::Msg_ChangePaymentMethod__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPaymentRequestChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPaymentRequestChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPaymentRequest::Msg_ChangePaymentMethod", OTHER);

            PickleIterator iter__{msg__};
            nsString aRequestId{};
            nsString aMethodName{};
            IPCMethodChangeDetails aMethodDetails{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequestId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aRequestId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365560824)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMethodName)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aMethodName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 426050628)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMethodDetails)))))) {
                FatalError("Error deserializing 'IPCMethodChangeDetails'");
                return MsgValueError;
            }
            // Sentinel = 'aMethodDetails'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 681313673)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCMethodChangeDetails'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PaymentRequestChild*>(this))->RecvChangePaymentMethod(std::move(aRequestId), std::move(aMethodName), std::move(aMethodDetails))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPaymentRequestChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PPaymentRequestChild::Result
{
    return MsgNotKnown;
}

auto PPaymentRequestChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PPaymentRequestChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PPaymentRequestChild::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PPaymentRequestChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PPaymentRequestChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PPaymentRequest", PPaymentRequestMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PPaymentRequestChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
