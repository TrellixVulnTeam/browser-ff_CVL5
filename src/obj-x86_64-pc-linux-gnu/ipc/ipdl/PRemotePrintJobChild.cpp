//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layout/PRemotePrintJobChild.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/embedding/PPrintingChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layout {


auto PRemotePrintJobChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PRemotePrintJobChild::PRemotePrintJobChild() :
    mozilla::ipc::IProtocol(PRemotePrintJobMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PRemotePrintJobChild);
}

PRemotePrintJobChild::~PRemotePrintJobChild()
{
    MOZ_COUNT_DTOR(PRemotePrintJobChild);
}

auto PRemotePrintJobChild::Manager() const -> PPrintingChild*
{
    return static_cast<PPrintingChild*>(IProtocol::Manager());
}

auto PRemotePrintJobChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PRemotePrintJobChild::SendAbortPrint(const nsresult& aRv) -> bool
{
    IPC::Message* msg__ = PRemotePrintJob::Msg_AbortPrint(Id());

    WriteIPDLParam(msg__, this, aRv);
    // Sentinel = 'aRv'
    (msg__)->WriteSentinel(37749034);




    if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemotePrintJobChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_AbortPrint", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRemotePrintJobChild::SendInitializePrint(
        const nsString& aDocumentTitle,
        const nsString& aPrintToFile,
        const int32_t& aStartPage,
        const int32_t& aEndPage) -> bool
{
    IPC::Message* msg__ = PRemotePrintJob::Msg_InitializePrint(Id());

    WriteIPDLParam(msg__, this, aDocumentTitle);
    // Sentinel = 'aDocumentTitle'
    (msg__)->WriteSentinel(695141795);
    WriteIPDLParam(msg__, this, aPrintToFile);
    // Sentinel = 'aPrintToFile'
    (msg__)->WriteSentinel(511444146);
    WriteIPDLParam(msg__, this, aStartPage);
    // Sentinel = 'aStartPage'
    (msg__)->WriteSentinel(361497581);
    WriteIPDLParam(msg__, this, aEndPage);
    // Sentinel = 'aEndPage'
    (msg__)->WriteSentinel(219218678);




    if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemotePrintJobChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_InitializePrint", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRemotePrintJobChild::SendProcessPage(const nsTArray<uint64_t>& deps) -> bool
{
    IPC::Message* msg__ = PRemotePrintJob::Msg_ProcessPage(Id());

    WriteIPDLParam(msg__, this, deps);
    // Sentinel = 'deps'
    (msg__)->WriteSentinel(68551085);




    if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemotePrintJobChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_ProcessPage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRemotePrintJobChild::SendFinalizePrint() -> bool
{
    IPC::Message* msg__ = PRemotePrintJob::Msg_FinalizePrint(Id());





    if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemotePrintJobChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_FinalizePrint", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRemotePrintJobChild::SendStateChange(
        const long& aStateFlags,
        const nsresult& aStatus) -> bool
{
    IPC::Message* msg__ = PRemotePrintJob::Msg_StateChange(Id());

    WriteIPDLParam(msg__, this, aStateFlags);
    // Sentinel = 'aStateFlags'
    (msg__)->WriteSentinel(428606544);
    WriteIPDLParam(msg__, this, aStatus);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(186712806);




    if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemotePrintJobChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_StateChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRemotePrintJobChild::SendProgressChange(
        const long& aCurSelfProgress,
        const long& aMaxSelfProgress,
        const long& aCurTotalProgress,
        const long& aMaxTotalProgress) -> bool
{
    IPC::Message* msg__ = PRemotePrintJob::Msg_ProgressChange(Id());

    WriteIPDLParam(msg__, this, aCurSelfProgress);
    // Sentinel = 'aCurSelfProgress'
    (msg__)->WriteSentinel(886113899);
    WriteIPDLParam(msg__, this, aMaxSelfProgress);
    // Sentinel = 'aMaxSelfProgress'
    (msg__)->WriteSentinel(882706023);
    WriteIPDLParam(msg__, this, aCurTotalProgress);
    // Sentinel = 'aCurTotalProgress'
    (msg__)->WriteSentinel(1012795109);
    WriteIPDLParam(msg__, this, aMaxTotalProgress);
    // Sentinel = 'aMaxTotalProgress'
    (msg__)->WriteSentinel(1009125089);




    if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemotePrintJobChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_ProgressChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRemotePrintJobChild::SendStatusChange(const nsresult& aStatus) -> bool
{
    IPC::Message* msg__ = PRemotePrintJob::Msg_StatusChange(Id());

    WriteIPDLParam(msg__, this, aStatus);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(186712806);




    if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemotePrintJobChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_StatusChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRemotePrintJobChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PRemotePrintJobChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PRemotePrintJobChild::OnMessageReceived(const Message& msg__) -> PRemotePrintJobChild::Result
{
    switch (msg__.type()) {
    case PRemotePrintJob::Msg_AbortPrint__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemotePrintJobChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_AbortPrint", OTHER);

            PickleIterator iter__{msg__};
            nsresult aRv{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRv)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aRv'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 37749034)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvAbortPrint(std::move(aRv))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemotePrintJob::Msg_PrintInitializationResult__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemotePrintJobChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_PrintInitializationResult", OTHER);

            PickleIterator iter__{msg__};
            nsresult aRv{};
            FileDescriptor aFd{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRv)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aRv'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 37749034)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFd)))))) {
                FatalError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'aFd'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 34996492)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvPrintInitializationResult(std::move(aRv), std::move(aFd))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemotePrintJob::Msg_PageProcessed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemotePrintJobChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemotePrintJob::Msg_PageProcessed", OTHER);

            PickleIterator iter__{msg__};
            FileDescriptor aFd{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFd)))))) {
                FatalError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'aFd'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 34996492)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvPageProcessed(std::move(aFd))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemotePrintJob::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemotePrintJobChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemotePrintJobChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemotePrintJob::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PRemotePrintJobChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PRemotePrintJob'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PRemotePrintJob'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PRemotePrintJob'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PRemotePrintJobMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PRemotePrintJobChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PRemotePrintJobChild::Result
{
    return MsgNotKnown;
}

auto PRemotePrintJobChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PRemotePrintJobChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PRemotePrintJobChild::ClearSubtree() -> void
{
}



} // namespace layout
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layout::PRemotePrintJobChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layout::PRemotePrintJobChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PRemotePrintJob", PRemotePrintJobMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layout::PRemotePrintJobChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
