//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/ipc/IPCStream.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCStream|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::IPCStream>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).stream());
    // Sentinel = 'stream'
    (aMsg)->WriteSentinel(153223821);
    WriteIPDLParam(aMsg, aActor, (aVar).optionalFds());
    // Sentinel = 'optionalFds'
    (aMsg)->WriteSentinel(466289796);
}

auto IPDLParamTraits<mozilla::ipc::IPCStream>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->stream())))))) {
        aActor->FatalError("Error deserializing 'stream' (InputStreamParams) member of 'IPCStream'");
        return false;
    }
    // Sentinel = 'stream'
    if ((!((aMsg)->ReadSentinel(aIter, 153223821)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'stream' (InputStreamParams) member of 'IPCStream'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->optionalFds())))))) {
        aActor->FatalError("Error deserializing 'optionalFds' (OptionalFileDescriptorSet) member of 'IPCStream'");
        return false;
    }
    // Sentinel = 'optionalFds'
    if ((!((aMsg)->ReadSentinel(aIter, 466289796)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'optionalFds' (OptionalFileDescriptorSet) member of 'IPCStream'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
