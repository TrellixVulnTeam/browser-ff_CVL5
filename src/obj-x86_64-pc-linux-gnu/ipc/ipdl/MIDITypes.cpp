//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/MIDITypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct MIDIPortInfo|
//
namespace mozilla {
namespace dom {
auto MIDIPortInfo::operator==(const MIDIPortInfo& _o) const -> bool
{
    if ((!((id()) == ((_o).id())))) {
        return false;
    }
    if ((!((name()) == ((_o).name())))) {
        return false;
    }
    if ((!((manufacturer()) == ((_o).manufacturer())))) {
        return false;
    }
    if ((!((version()) == ((_o).version())))) {
        return false;
    }
    if ((!((type()) == ((_o).type())))) {
        return false;
    }
    return true;
}

auto MIDIPortInfo::operator!=(const MIDIPortInfo& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::MIDIPortInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).id());
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).manufacturer());
    // Sentinel = 'manufacturer'
    (aMsg)->WriteSentinel(546243854);
    WriteIPDLParam(aMsg, aActor, (aVar).version());
    // Sentinel = 'version'
    (aMsg)->WriteSentinel(204210951);
    (aMsg)->WriteBytes((&((aVar).type())), 4);
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
}

auto IPDLParamTraits<mozilla::dom::MIDIPortInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->id())))))) {
        aActor->FatalError("Error deserializing 'id' (nsString) member of 'MIDIPortInfo'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'id' (nsString) member of 'MIDIPortInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsString) member of 'MIDIPortInfo'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsString) member of 'MIDIPortInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->manufacturer())))))) {
        aActor->FatalError("Error deserializing 'manufacturer' (nsString) member of 'MIDIPortInfo'");
        return false;
    }
    // Sentinel = 'manufacturer'
    if ((!((aMsg)->ReadSentinel(aIter, 546243854)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'manufacturer' (nsString) member of 'MIDIPortInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->version())))))) {
        aActor->FatalError("Error deserializing 'version' (nsString) member of 'MIDIPortInfo'");
        return false;
    }
    // Sentinel = 'version'
    if ((!((aMsg)->ReadSentinel(aIter, 204210951)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'version' (nsString) member of 'MIDIPortInfo'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->type())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct MIDIMessage|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::MIDIMessage>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
    WriteIPDLParam(aMsg, aActor, (aVar).timestamp());
    // Sentinel = 'timestamp'
    (aMsg)->WriteSentinel(322569173);
}

auto IPDLParamTraits<mozilla::dom::MIDIMessage>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (uint8_t[]) member of 'MIDIMessage'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (uint8_t[]) member of 'MIDIMessage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->timestamp())))))) {
        aActor->FatalError("Error deserializing 'timestamp' (TimeStamp) member of 'MIDIMessage'");
        return false;
    }
    // Sentinel = 'timestamp'
    if ((!((aMsg)->ReadSentinel(aIter, 322569173)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'timestamp' (TimeStamp) member of 'MIDIMessage'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct MIDIPortList|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::MIDIPortList>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).ports());
    // Sentinel = 'ports'
    (aMsg)->WriteSentinel(111280697);
}

auto IPDLParamTraits<mozilla::dom::MIDIPortList>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ports())))))) {
        aActor->FatalError("Error deserializing 'ports' (MIDIPortInfo[]) member of 'MIDIPortList'");
        return false;
    }
    // Sentinel = 'ports'
    if ((!((aMsg)->ReadSentinel(aIter, 111280697)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ports' (MIDIPortInfo[]) member of 'MIDIPortList'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
