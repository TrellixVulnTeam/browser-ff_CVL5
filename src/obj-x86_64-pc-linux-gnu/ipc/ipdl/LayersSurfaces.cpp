//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "gfxipc/ShadowLayerUtils.h"
#include "mozilla/layers/LayersSurfaces.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SurfaceDescriptorFileMapping|
//
namespace mozilla {
namespace layers {
auto SurfaceDescriptorFileMapping::operator==(const SurfaceDescriptorFileMapping& _o) const -> bool
{
    if ((!((handle()) == ((_o).handle())))) {
        return false;
    }
    if ((!((format()) == ((_o).format())))) {
        return false;
    }
    if ((!((size()) == ((_o).size())))) {
        return false;
    }
    return true;
}

auto SurfaceDescriptorFileMapping::operator!=(const SurfaceDescriptorFileMapping& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorFileMapping>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).handle());
    // Sentinel = 'handle'
    (aMsg)->WriteSentinel(142344813);
    WriteIPDLParam(aMsg, aActor, (aVar).format());
    // Sentinel = 'format'
    (aMsg)->WriteSentinel(148505226);
    WriteIPDLParam(aMsg, aActor, (aVar).size());
    // Sentinel = 'size'
    (aMsg)->WriteSentinel(73662908);
}

auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorFileMapping>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->handle())))))) {
        aActor->FatalError("Error deserializing 'handle' (WindowsHandle) member of 'SurfaceDescriptorFileMapping'");
        return false;
    }
    // Sentinel = 'handle'
    if ((!((aMsg)->ReadSentinel(aIter, 142344813)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'handle' (WindowsHandle) member of 'SurfaceDescriptorFileMapping'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->format())))))) {
        aActor->FatalError("Error deserializing 'format' (SurfaceFormat) member of 'SurfaceDescriptorFileMapping'");
        return false;
    }
    // Sentinel = 'format'
    if ((!((aMsg)->ReadSentinel(aIter, 148505226)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'format' (SurfaceFormat) member of 'SurfaceDescriptorFileMapping'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->size())))))) {
        aActor->FatalError("Error deserializing 'size' (IntSize) member of 'SurfaceDescriptorFileMapping'");
        return false;
    }
    // Sentinel = 'size'
    if ((!((aMsg)->ReadSentinel(aIter, 73662908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'size' (IntSize) member of 'SurfaceDescriptorFileMapping'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SurfaceDescriptorDIB|
//
namespace mozilla {
namespace layers {
auto SurfaceDescriptorDIB::operator==(const SurfaceDescriptorDIB& _o) const -> bool
{
    if ((!((surface()) == ((_o).surface())))) {
        return false;
    }
    return true;
}

auto SurfaceDescriptorDIB::operator!=(const SurfaceDescriptorDIB& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorDIB>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).surface());
    // Sentinel = 'surface'
    (aMsg)->WriteSentinel(201982698);
}

auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorDIB>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->surface())))))) {
        aActor->FatalError("Error deserializing 'surface' (uintptr_t) member of 'SurfaceDescriptorDIB'");
        return false;
    }
    // Sentinel = 'surface'
    if ((!((aMsg)->ReadSentinel(aIter, 201982698)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'surface' (uintptr_t) member of 'SurfaceDescriptorDIB'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SurfaceDescriptorD3D10|
//
namespace mozilla {
namespace layers {
auto SurfaceDescriptorD3D10::operator==(const SurfaceDescriptorD3D10& _o) const -> bool
{
    if ((!((handle()) == ((_o).handle())))) {
        return false;
    }
    if ((!((format()) == ((_o).format())))) {
        return false;
    }
    if ((!((size()) == ((_o).size())))) {
        return false;
    }
    if ((!((yUVColorSpace()) == ((_o).yUVColorSpace())))) {
        return false;
    }
    if ((!((colorRange()) == ((_o).colorRange())))) {
        return false;
    }
    return true;
}

auto SurfaceDescriptorD3D10::operator!=(const SurfaceDescriptorD3D10& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorD3D10>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).handle());
    // Sentinel = 'handle'
    (aMsg)->WriteSentinel(142344813);
    WriteIPDLParam(aMsg, aActor, (aVar).format());
    // Sentinel = 'format'
    (aMsg)->WriteSentinel(148505226);
    WriteIPDLParam(aMsg, aActor, (aVar).size());
    // Sentinel = 'size'
    (aMsg)->WriteSentinel(73662908);
    WriteIPDLParam(aMsg, aActor, (aVar).yUVColorSpace());
    // Sentinel = 'yUVColorSpace'
    (aMsg)->WriteSentinel(589759760);
    WriteIPDLParam(aMsg, aActor, (aVar).colorRange());
    // Sentinel = 'colorRange'
    (aMsg)->WriteSentinel(377422861);
}

auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorD3D10>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->handle())))))) {
        aActor->FatalError("Error deserializing 'handle' (WindowsHandle) member of 'SurfaceDescriptorD3D10'");
        return false;
    }
    // Sentinel = 'handle'
    if ((!((aMsg)->ReadSentinel(aIter, 142344813)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'handle' (WindowsHandle) member of 'SurfaceDescriptorD3D10'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->format())))))) {
        aActor->FatalError("Error deserializing 'format' (SurfaceFormat) member of 'SurfaceDescriptorD3D10'");
        return false;
    }
    // Sentinel = 'format'
    if ((!((aMsg)->ReadSentinel(aIter, 148505226)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'format' (SurfaceFormat) member of 'SurfaceDescriptorD3D10'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->size())))))) {
        aActor->FatalError("Error deserializing 'size' (IntSize) member of 'SurfaceDescriptorD3D10'");
        return false;
    }
    // Sentinel = 'size'
    if ((!((aMsg)->ReadSentinel(aIter, 73662908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'size' (IntSize) member of 'SurfaceDescriptorD3D10'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->yUVColorSpace())))))) {
        aActor->FatalError("Error deserializing 'yUVColorSpace' (YUVColorSpace) member of 'SurfaceDescriptorD3D10'");
        return false;
    }
    // Sentinel = 'yUVColorSpace'
    if ((!((aMsg)->ReadSentinel(aIter, 589759760)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'yUVColorSpace' (YUVColorSpace) member of 'SurfaceDescriptorD3D10'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->colorRange())))))) {
        aActor->FatalError("Error deserializing 'colorRange' (ColorRange) member of 'SurfaceDescriptorD3D10'");
        return false;
    }
    // Sentinel = 'colorRange'
    if ((!((aMsg)->ReadSentinel(aIter, 377422861)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'colorRange' (ColorRange) member of 'SurfaceDescriptorD3D10'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SurfaceDescriptorDXGIYCbCr|
//
namespace mozilla {
namespace layers {
auto SurfaceDescriptorDXGIYCbCr::operator==(const SurfaceDescriptorDXGIYCbCr& _o) const -> bool
{
    if ((!((handleY()) == ((_o).handleY())))) {
        return false;
    }
    if ((!((handleCb()) == ((_o).handleCb())))) {
        return false;
    }
    if ((!((handleCr()) == ((_o).handleCr())))) {
        return false;
    }
    if ((!((size()) == ((_o).size())))) {
        return false;
    }
    if ((!((sizeY()) == ((_o).sizeY())))) {
        return false;
    }
    if ((!((sizeCbCr()) == ((_o).sizeCbCr())))) {
        return false;
    }
    if ((!((colorDepth()) == ((_o).colorDepth())))) {
        return false;
    }
    if ((!((yUVColorSpace()) == ((_o).yUVColorSpace())))) {
        return false;
    }
    if ((!((colorRange()) == ((_o).colorRange())))) {
        return false;
    }
    return true;
}

auto SurfaceDescriptorDXGIYCbCr::operator!=(const SurfaceDescriptorDXGIYCbCr& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorDXGIYCbCr>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).handleY());
    // Sentinel = 'handleY'
    (aMsg)->WriteSentinel(188875462);
    WriteIPDLParam(aMsg, aActor, (aVar).handleCb());
    // Sentinel = 'handleCb'
    (aMsg)->WriteSentinel(238945042);
    WriteIPDLParam(aMsg, aActor, (aVar).handleCr());
    // Sentinel = 'handleCr'
    (aMsg)->WriteSentinel(239993634);
    WriteIPDLParam(aMsg, aActor, (aVar).size());
    // Sentinel = 'size'
    (aMsg)->WriteSentinel(73662908);
    WriteIPDLParam(aMsg, aActor, (aVar).sizeY());
    // Sentinel = 'sizeY'
    (aMsg)->WriteSentinel(108593685);
    WriteIPDLParam(aMsg, aActor, (aVar).sizeCbCr());
    // Sentinel = 'sizeCbCr'
    (aMsg)->WriteSentinel(243139350);
    WriteIPDLParam(aMsg, aActor, (aVar).colorDepth());
    // Sentinel = 'colorDepth'
    (aMsg)->WriteSentinel(376177685);
    WriteIPDLParam(aMsg, aActor, (aVar).yUVColorSpace());
    // Sentinel = 'yUVColorSpace'
    (aMsg)->WriteSentinel(589759760);
    WriteIPDLParam(aMsg, aActor, (aVar).colorRange());
    // Sentinel = 'colorRange'
    (aMsg)->WriteSentinel(377422861);
}

auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorDXGIYCbCr>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->handleY())))))) {
        aActor->FatalError("Error deserializing 'handleY' (WindowsHandle) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    // Sentinel = 'handleY'
    if ((!((aMsg)->ReadSentinel(aIter, 188875462)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'handleY' (WindowsHandle) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->handleCb())))))) {
        aActor->FatalError("Error deserializing 'handleCb' (WindowsHandle) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    // Sentinel = 'handleCb'
    if ((!((aMsg)->ReadSentinel(aIter, 238945042)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'handleCb' (WindowsHandle) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->handleCr())))))) {
        aActor->FatalError("Error deserializing 'handleCr' (WindowsHandle) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    // Sentinel = 'handleCr'
    if ((!((aMsg)->ReadSentinel(aIter, 239993634)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'handleCr' (WindowsHandle) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->size())))))) {
        aActor->FatalError("Error deserializing 'size' (IntSize) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    // Sentinel = 'size'
    if ((!((aMsg)->ReadSentinel(aIter, 73662908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'size' (IntSize) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sizeY())))))) {
        aActor->FatalError("Error deserializing 'sizeY' (IntSize) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    // Sentinel = 'sizeY'
    if ((!((aMsg)->ReadSentinel(aIter, 108593685)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sizeY' (IntSize) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sizeCbCr())))))) {
        aActor->FatalError("Error deserializing 'sizeCbCr' (IntSize) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    // Sentinel = 'sizeCbCr'
    if ((!((aMsg)->ReadSentinel(aIter, 243139350)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sizeCbCr' (IntSize) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->colorDepth())))))) {
        aActor->FatalError("Error deserializing 'colorDepth' (ColorDepth) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    // Sentinel = 'colorDepth'
    if ((!((aMsg)->ReadSentinel(aIter, 376177685)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'colorDepth' (ColorDepth) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->yUVColorSpace())))))) {
        aActor->FatalError("Error deserializing 'yUVColorSpace' (YUVColorSpace) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    // Sentinel = 'yUVColorSpace'
    if ((!((aMsg)->ReadSentinel(aIter, 589759760)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'yUVColorSpace' (YUVColorSpace) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->colorRange())))))) {
        aActor->FatalError("Error deserializing 'colorRange' (ColorRange) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    // Sentinel = 'colorRange'
    if ((!((aMsg)->ReadSentinel(aIter, 377422861)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'colorRange' (ColorRange) member of 'SurfaceDescriptorDXGIYCbCr'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SurfaceDescriptorMacIOSurface|
//
namespace mozilla {
namespace layers {
auto SurfaceDescriptorMacIOSurface::operator==(const SurfaceDescriptorMacIOSurface& _o) const -> bool
{
    if ((!((surfaceId()) == ((_o).surfaceId())))) {
        return false;
    }
    if ((!((scaleFactor()) == ((_o).scaleFactor())))) {
        return false;
    }
    if ((!((isOpaque()) == ((_o).isOpaque())))) {
        return false;
    }
    if ((!((yUVColorSpace()) == ((_o).yUVColorSpace())))) {
        return false;
    }
    return true;
}

auto SurfaceDescriptorMacIOSurface::operator!=(const SurfaceDescriptorMacIOSurface& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorMacIOSurface>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).isOpaque());
    // Sentinel = 'isOpaque'
    (aMsg)->WriteSentinel(245695304);
    WriteIPDLParam(aMsg, aActor, (aVar).yUVColorSpace());
    // Sentinel = 'yUVColorSpace'
    (aMsg)->WriteSentinel(589759760);
    (aMsg)->WriteBytes((&((aVar).scaleFactor())), 8);
    // Sentinel = 'scaleFactor'
    (aMsg)->WriteSentinel(438764648);
    (aMsg)->WriteBytes((&((aVar).surfaceId())), 4);
    // Sentinel = 'surfaceId'
    (aMsg)->WriteSentinel(315884439);
}

auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorMacIOSurface>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isOpaque())))))) {
        aActor->FatalError("Error deserializing 'isOpaque' (bool) member of 'SurfaceDescriptorMacIOSurface'");
        return false;
    }
    // Sentinel = 'isOpaque'
    if ((!((aMsg)->ReadSentinel(aIter, 245695304)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isOpaque' (bool) member of 'SurfaceDescriptorMacIOSurface'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->yUVColorSpace())))))) {
        aActor->FatalError("Error deserializing 'yUVColorSpace' (YUVColorSpace) member of 'SurfaceDescriptorMacIOSurface'");
        return false;
    }
    // Sentinel = 'yUVColorSpace'
    if ((!((aMsg)->ReadSentinel(aIter, 589759760)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'yUVColorSpace' (YUVColorSpace) member of 'SurfaceDescriptorMacIOSurface'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->scaleFactor())), 8)))) {
        aActor->FatalError("Error bulk reading fields from double");
        return false;
    }
    // Sentinel = 'scaleFactor'
    if ((!((aMsg)->ReadSentinel(aIter, 438764648)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from double");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->surfaceId())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'surfaceId'
    if ((!((aMsg)->ReadSentinel(aIter, 315884439)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SurfaceDescriptorDMABuf|
//
namespace mozilla {
namespace layers {
auto SurfaceDescriptorDMABuf::operator==(const SurfaceDescriptorDMABuf& _o) const -> bool
{
    if ((!((bufferType()) == ((_o).bufferType())))) {
        return false;
    }
    if ((!((modifier()) == ((_o).modifier())))) {
        return false;
    }
    if ((!((flags()) == ((_o).flags())))) {
        return false;
    }
    if ((!((fds()) == ((_o).fds())))) {
        return false;
    }
    if ((!((width()) == ((_o).width())))) {
        return false;
    }
    if ((!((height()) == ((_o).height())))) {
        return false;
    }
    if ((!((format()) == ((_o).format())))) {
        return false;
    }
    if ((!((strides()) == ((_o).strides())))) {
        return false;
    }
    if ((!((offsets()) == ((_o).offsets())))) {
        return false;
    }
    if ((!((yUVColorSpace()) == ((_o).yUVColorSpace())))) {
        return false;
    }
    if ((!((fence()) == ((_o).fence())))) {
        return false;
    }
    if ((!((uid()) == ((_o).uid())))) {
        return false;
    }
    if ((!((refCount()) == ((_o).refCount())))) {
        return false;
    }
    return true;
}

auto SurfaceDescriptorDMABuf::operator!=(const SurfaceDescriptorDMABuf& _o) const -> bool
{
    return (!(operator==(_o)));
}

auto SurfaceDescriptorDMABuf::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(SurfaceDescriptorDMABuf, uid_) - offsetof(SurfaceDescriptorDMABuf, bufferType_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorDMABuf>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).fds());
    // Sentinel = 'fds'
    (aMsg)->WriteSentinel(40894782);
    WriteIPDLParam(aMsg, aActor, (aVar).width());
    // Sentinel = 'width'
    (aMsg)->WriteSentinel(108528161);
    WriteIPDLParam(aMsg, aActor, (aVar).height());
    // Sentinel = 'height'
    (aMsg)->WriteSentinel(143393402);
    WriteIPDLParam(aMsg, aActor, (aVar).format());
    // Sentinel = 'format'
    (aMsg)->WriteSentinel(148505226);
    WriteIPDLParam(aMsg, aActor, (aVar).strides());
    // Sentinel = 'strides'
    (aMsg)->WriteSentinel(204145407);
    WriteIPDLParam(aMsg, aActor, (aVar).offsets());
    // Sentinel = 'offsets'
    (aMsg)->WriteSentinel(197657339);
    WriteIPDLParam(aMsg, aActor, (aVar).yUVColorSpace());
    // Sentinel = 'yUVColorSpace'
    (aMsg)->WriteSentinel(589759760);
    WriteIPDLParam(aMsg, aActor, (aVar).fence());
    // Sentinel = 'fence'
    (aMsg)->WriteSentinel(101450242);
    WriteIPDLParam(aMsg, aActor, (aVar).refCount());
    // Sentinel = 'refCount'
    (aMsg)->WriteSentinel(242811719);
    (aMsg)->WriteBytes((&((aVar).modifier())), 8);
    // Sentinel = 'modifier'
    (aMsg)->WriteSentinel(250413904);
    (aMsg)->WriteBytes((&((aVar).bufferType())), 12);
    // Sentinel = 'bufferType | flags | uid'
    (aMsg)->WriteSentinel(1917847780);
}

auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorDMABuf>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fds())))))) {
        aActor->FatalError("Error deserializing 'fds' (FileDescriptor[]) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    // Sentinel = 'fds'
    if ((!((aMsg)->ReadSentinel(aIter, 40894782)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fds' (FileDescriptor[]) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->width())))))) {
        aActor->FatalError("Error deserializing 'width' (uint32_t[]) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    // Sentinel = 'width'
    if ((!((aMsg)->ReadSentinel(aIter, 108528161)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'width' (uint32_t[]) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->height())))))) {
        aActor->FatalError("Error deserializing 'height' (uint32_t[]) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    // Sentinel = 'height'
    if ((!((aMsg)->ReadSentinel(aIter, 143393402)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'height' (uint32_t[]) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->format())))))) {
        aActor->FatalError("Error deserializing 'format' (uint32_t[]) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    // Sentinel = 'format'
    if ((!((aMsg)->ReadSentinel(aIter, 148505226)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'format' (uint32_t[]) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->strides())))))) {
        aActor->FatalError("Error deserializing 'strides' (uint32_t[]) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    // Sentinel = 'strides'
    if ((!((aMsg)->ReadSentinel(aIter, 204145407)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'strides' (uint32_t[]) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->offsets())))))) {
        aActor->FatalError("Error deserializing 'offsets' (uint32_t[]) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    // Sentinel = 'offsets'
    if ((!((aMsg)->ReadSentinel(aIter, 197657339)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'offsets' (uint32_t[]) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->yUVColorSpace())))))) {
        aActor->FatalError("Error deserializing 'yUVColorSpace' (YUVColorSpace) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    // Sentinel = 'yUVColorSpace'
    if ((!((aMsg)->ReadSentinel(aIter, 589759760)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'yUVColorSpace' (YUVColorSpace) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fence())))))) {
        aActor->FatalError("Error deserializing 'fence' (FileDescriptor[]) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    // Sentinel = 'fence'
    if ((!((aMsg)->ReadSentinel(aIter, 101450242)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fence' (FileDescriptor[]) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->refCount())))))) {
        aActor->FatalError("Error deserializing 'refCount' (FileDescriptor[]) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    // Sentinel = 'refCount'
    if ((!((aMsg)->ReadSentinel(aIter, 242811719)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'refCount' (FileDescriptor[]) member of 'SurfaceDescriptorDMABuf'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->modifier())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'modifier'
    if ((!((aMsg)->ReadSentinel(aIter, 250413904)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->bufferType())), 12)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'bufferType | flags | uid'
    if ((!((aMsg)->ReadSentinel(aIter, 1917847780)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SurfaceTextureDescriptor|
//
namespace mozilla {
namespace layers {
auto SurfaceTextureDescriptor::operator==(const SurfaceTextureDescriptor& _o) const -> bool
{
    if ((!((handle()) == ((_o).handle())))) {
        return false;
    }
    if ((!((size()) == ((_o).size())))) {
        return false;
    }
    if ((!((format()) == ((_o).format())))) {
        return false;
    }
    if ((!((continuous()) == ((_o).continuous())))) {
        return false;
    }
    if ((!((ignoreTransform()) == ((_o).ignoreTransform())))) {
        return false;
    }
    return true;
}

auto SurfaceTextureDescriptor::operator!=(const SurfaceTextureDescriptor& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceTextureDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).size());
    // Sentinel = 'size'
    (aMsg)->WriteSentinel(73662908);
    WriteIPDLParam(aMsg, aActor, (aVar).format());
    // Sentinel = 'format'
    (aMsg)->WriteSentinel(148505226);
    WriteIPDLParam(aMsg, aActor, (aVar).continuous());
    // Sentinel = 'continuous'
    (aMsg)->WriteSentinel(394593368);
    WriteIPDLParam(aMsg, aActor, (aVar).ignoreTransform());
    // Sentinel = 'ignoreTransform'
    (aMsg)->WriteSentinel(833488449);
    (aMsg)->WriteBytes((&((aVar).handle())), 8);
    // Sentinel = 'handle'
    (aMsg)->WriteSentinel(142344813);
}

auto IPDLParamTraits<mozilla::layers::SurfaceTextureDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->size())))))) {
        aActor->FatalError("Error deserializing 'size' (IntSize) member of 'SurfaceTextureDescriptor'");
        return false;
    }
    // Sentinel = 'size'
    if ((!((aMsg)->ReadSentinel(aIter, 73662908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'size' (IntSize) member of 'SurfaceTextureDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->format())))))) {
        aActor->FatalError("Error deserializing 'format' (SurfaceFormat) member of 'SurfaceTextureDescriptor'");
        return false;
    }
    // Sentinel = 'format'
    if ((!((aMsg)->ReadSentinel(aIter, 148505226)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'format' (SurfaceFormat) member of 'SurfaceTextureDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->continuous())))))) {
        aActor->FatalError("Error deserializing 'continuous' (bool) member of 'SurfaceTextureDescriptor'");
        return false;
    }
    // Sentinel = 'continuous'
    if ((!((aMsg)->ReadSentinel(aIter, 394593368)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'continuous' (bool) member of 'SurfaceTextureDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ignoreTransform())))))) {
        aActor->FatalError("Error deserializing 'ignoreTransform' (bool) member of 'SurfaceTextureDescriptor'");
        return false;
    }
    // Sentinel = 'ignoreTransform'
    if ((!((aMsg)->ReadSentinel(aIter, 833488449)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ignoreTransform' (bool) member of 'SurfaceTextureDescriptor'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->handle())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'handle'
    if ((!((aMsg)->ReadSentinel(aIter, 142344813)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SurfaceDescriptorAndroidHardwareBuffer|
//
namespace mozilla {
namespace layers {
auto SurfaceDescriptorAndroidHardwareBuffer::operator==(const SurfaceDescriptorAndroidHardwareBuffer& _o) const -> bool
{
    if ((!((handle()) == ((_o).handle())))) {
        return false;
    }
    if ((!((bufferId()) == ((_o).bufferId())))) {
        return false;
    }
    if ((!((size()) == ((_o).size())))) {
        return false;
    }
    if ((!((format()) == ((_o).format())))) {
        return false;
    }
    return true;
}

auto SurfaceDescriptorAndroidHardwareBuffer::operator!=(const SurfaceDescriptorAndroidHardwareBuffer& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorAndroidHardwareBuffer>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).handle());
    // Sentinel = 'handle'
    (aMsg)->WriteSentinel(142344813);
    WriteIPDLParam(aMsg, aActor, (aVar).size());
    // Sentinel = 'size'
    (aMsg)->WriteSentinel(73662908);
    WriteIPDLParam(aMsg, aActor, (aVar).format());
    // Sentinel = 'format'
    (aMsg)->WriteSentinel(148505226);
    (aMsg)->WriteBytes((&((aVar).bufferId())), 8);
    // Sentinel = 'bufferId'
    (aMsg)->WriteSentinel(244122408);
}

auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorAndroidHardwareBuffer>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->handle())))))) {
        aActor->FatalError("Error deserializing 'handle' (FileDescriptor) member of 'SurfaceDescriptorAndroidHardwareBuffer'");
        return false;
    }
    // Sentinel = 'handle'
    if ((!((aMsg)->ReadSentinel(aIter, 142344813)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'handle' (FileDescriptor) member of 'SurfaceDescriptorAndroidHardwareBuffer'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->size())))))) {
        aActor->FatalError("Error deserializing 'size' (IntSize) member of 'SurfaceDescriptorAndroidHardwareBuffer'");
        return false;
    }
    // Sentinel = 'size'
    if ((!((aMsg)->ReadSentinel(aIter, 73662908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'size' (IntSize) member of 'SurfaceDescriptorAndroidHardwareBuffer'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->format())))))) {
        aActor->FatalError("Error deserializing 'format' (SurfaceFormat) member of 'SurfaceDescriptorAndroidHardwareBuffer'");
        return false;
    }
    // Sentinel = 'format'
    if ((!((aMsg)->ReadSentinel(aIter, 148505226)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'format' (SurfaceFormat) member of 'SurfaceDescriptorAndroidHardwareBuffer'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->bufferId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'bufferId'
    if ((!((aMsg)->ReadSentinel(aIter, 244122408)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct EGLImageDescriptor|
//
namespace mozilla {
namespace layers {
auto EGLImageDescriptor::operator==(const EGLImageDescriptor& _o) const -> bool
{
    if ((!((image()) == ((_o).image())))) {
        return false;
    }
    if ((!((fence()) == ((_o).fence())))) {
        return false;
    }
    if ((!((size()) == ((_o).size())))) {
        return false;
    }
    if ((!((hasAlpha()) == ((_o).hasAlpha())))) {
        return false;
    }
    return true;
}

auto EGLImageDescriptor::operator!=(const EGLImageDescriptor& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::EGLImageDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).image());
    // Sentinel = 'image'
    (aMsg)->WriteSentinel(102498820);
    WriteIPDLParam(aMsg, aActor, (aVar).fence());
    // Sentinel = 'fence'
    (aMsg)->WriteSentinel(101450242);
    WriteIPDLParam(aMsg, aActor, (aVar).size());
    // Sentinel = 'size'
    (aMsg)->WriteSentinel(73662908);
    WriteIPDLParam(aMsg, aActor, (aVar).hasAlpha());
    // Sentinel = 'hasAlpha'
    (aMsg)->WriteSentinel(236389155);
}

auto IPDLParamTraits<mozilla::layers::EGLImageDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->image())))))) {
        aActor->FatalError("Error deserializing 'image' (uintptr_t) member of 'EGLImageDescriptor'");
        return false;
    }
    // Sentinel = 'image'
    if ((!((aMsg)->ReadSentinel(aIter, 102498820)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'image' (uintptr_t) member of 'EGLImageDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fence())))))) {
        aActor->FatalError("Error deserializing 'fence' (uintptr_t) member of 'EGLImageDescriptor'");
        return false;
    }
    // Sentinel = 'fence'
    if ((!((aMsg)->ReadSentinel(aIter, 101450242)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fence' (uintptr_t) member of 'EGLImageDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->size())))))) {
        aActor->FatalError("Error deserializing 'size' (IntSize) member of 'EGLImageDescriptor'");
        return false;
    }
    // Sentinel = 'size'
    if ((!((aMsg)->ReadSentinel(aIter, 73662908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'size' (IntSize) member of 'EGLImageDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hasAlpha())))))) {
        aActor->FatalError("Error deserializing 'hasAlpha' (bool) member of 'EGLImageDescriptor'");
        return false;
    }
    // Sentinel = 'hasAlpha'
    if ((!((aMsg)->ReadSentinel(aIter, 236389155)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hasAlpha' (bool) member of 'EGLImageDescriptor'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SurfaceDescriptorSharedGLTexture|
//
namespace mozilla {
namespace layers {
auto SurfaceDescriptorSharedGLTexture::operator==(const SurfaceDescriptorSharedGLTexture& _o) const -> bool
{
    if ((!((texture()) == ((_o).texture())))) {
        return false;
    }
    if ((!((target()) == ((_o).target())))) {
        return false;
    }
    if ((!((fence()) == ((_o).fence())))) {
        return false;
    }
    if ((!((size()) == ((_o).size())))) {
        return false;
    }
    if ((!((hasAlpha()) == ((_o).hasAlpha())))) {
        return false;
    }
    return true;
}

auto SurfaceDescriptorSharedGLTexture::operator!=(const SurfaceDescriptorSharedGLTexture& _o) const -> bool
{
    return (!(operator==(_o)));
}

auto SurfaceDescriptorSharedGLTexture::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(SurfaceDescriptorSharedGLTexture, target_) - offsetof(SurfaceDescriptorSharedGLTexture, texture_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorSharedGLTexture>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).fence());
    // Sentinel = 'fence'
    (aMsg)->WriteSentinel(101450242);
    WriteIPDLParam(aMsg, aActor, (aVar).size());
    // Sentinel = 'size'
    (aMsg)->WriteSentinel(73662908);
    WriteIPDLParam(aMsg, aActor, (aVar).hasAlpha());
    // Sentinel = 'hasAlpha'
    (aMsg)->WriteSentinel(236389155);
    (aMsg)->WriteBytes((&((aVar).texture())), 8);
    // Sentinel = 'texture | target'
    (aMsg)->WriteSentinel(918226517);
}

auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorSharedGLTexture>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fence())))))) {
        aActor->FatalError("Error deserializing 'fence' (uintptr_t) member of 'SurfaceDescriptorSharedGLTexture'");
        return false;
    }
    // Sentinel = 'fence'
    if ((!((aMsg)->ReadSentinel(aIter, 101450242)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fence' (uintptr_t) member of 'SurfaceDescriptorSharedGLTexture'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->size())))))) {
        aActor->FatalError("Error deserializing 'size' (IntSize) member of 'SurfaceDescriptorSharedGLTexture'");
        return false;
    }
    // Sentinel = 'size'
    if ((!((aMsg)->ReadSentinel(aIter, 73662908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'size' (IntSize) member of 'SurfaceDescriptorSharedGLTexture'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hasAlpha())))))) {
        aActor->FatalError("Error deserializing 'hasAlpha' (bool) member of 'SurfaceDescriptorSharedGLTexture'");
        return false;
    }
    // Sentinel = 'hasAlpha'
    if ((!((aMsg)->ReadSentinel(aIter, 236389155)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hasAlpha' (bool) member of 'SurfaceDescriptorSharedGLTexture'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->texture())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'texture | target'
    if ((!((aMsg)->ReadSentinel(aIter, 918226517)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union RemoteDecoderVideoSubDescriptor|
//
namespace mozilla {
namespace layers {
auto RemoteDecoderVideoSubDescriptor::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TSurfaceDescriptorD3D10:
        {
            (ptr_SurfaceDescriptorD3D10())->~SurfaceDescriptorD3D10__tdef();
            break;
        }
    case TSurfaceDescriptorDXGIYCbCr:
        {
            (ptr_SurfaceDescriptorDXGIYCbCr())->~SurfaceDescriptorDXGIYCbCr__tdef();
            break;
        }
    case TSurfaceDescriptorDMABuf:
        {
            (ptr_SurfaceDescriptorDMABuf())->~SurfaceDescriptorDMABuf__tdef();
            break;
        }
    case TSurfaceDescriptorMacIOSurface:
        {
            (ptr_SurfaceDescriptorMacIOSurface())->~SurfaceDescriptorMacIOSurface__tdef();
            break;
        }
    case Tnull_t:
        {
            (ptr_null_t())->~null_t__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT RemoteDecoderVideoSubDescriptor::RemoteDecoderVideoSubDescriptor(const SurfaceDescriptorD3D10& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorD3D10()) SurfaceDescriptorD3D10(aOther);
    mType = TSurfaceDescriptorD3D10;
}

MOZ_IMPLICIT RemoteDecoderVideoSubDescriptor::RemoteDecoderVideoSubDescriptor(SurfaceDescriptorD3D10&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorD3D10()) SurfaceDescriptorD3D10(std::move(aOther));
    mType = TSurfaceDescriptorD3D10;
}

MOZ_IMPLICIT RemoteDecoderVideoSubDescriptor::RemoteDecoderVideoSubDescriptor(const SurfaceDescriptorDXGIYCbCr& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDXGIYCbCr()) SurfaceDescriptorDXGIYCbCr(aOther);
    mType = TSurfaceDescriptorDXGIYCbCr;
}

MOZ_IMPLICIT RemoteDecoderVideoSubDescriptor::RemoteDecoderVideoSubDescriptor(SurfaceDescriptorDXGIYCbCr&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDXGIYCbCr()) SurfaceDescriptorDXGIYCbCr(std::move(aOther));
    mType = TSurfaceDescriptorDXGIYCbCr;
}

MOZ_IMPLICIT RemoteDecoderVideoSubDescriptor::RemoteDecoderVideoSubDescriptor(const SurfaceDescriptorDMABuf& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDMABuf()) SurfaceDescriptorDMABuf(aOther);
    mType = TSurfaceDescriptorDMABuf;
}

MOZ_IMPLICIT RemoteDecoderVideoSubDescriptor::RemoteDecoderVideoSubDescriptor(SurfaceDescriptorDMABuf&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDMABuf()) SurfaceDescriptorDMABuf(std::move(aOther));
    mType = TSurfaceDescriptorDMABuf;
}

MOZ_IMPLICIT RemoteDecoderVideoSubDescriptor::RemoteDecoderVideoSubDescriptor(const SurfaceDescriptorMacIOSurface& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorMacIOSurface()) SurfaceDescriptorMacIOSurface(aOther);
    mType = TSurfaceDescriptorMacIOSurface;
}

MOZ_IMPLICIT RemoteDecoderVideoSubDescriptor::RemoteDecoderVideoSubDescriptor(SurfaceDescriptorMacIOSurface&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorMacIOSurface()) SurfaceDescriptorMacIOSurface(std::move(aOther));
    mType = TSurfaceDescriptorMacIOSurface;
}

MOZ_IMPLICIT RemoteDecoderVideoSubDescriptor::RemoteDecoderVideoSubDescriptor(const null_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(aOther);
    mType = Tnull_t;
}

MOZ_IMPLICIT RemoteDecoderVideoSubDescriptor::RemoteDecoderVideoSubDescriptor(null_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move(aOther));
    mType = Tnull_t;
}

MOZ_IMPLICIT RemoteDecoderVideoSubDescriptor::RemoteDecoderVideoSubDescriptor(const RemoteDecoderVideoSubDescriptor& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TSurfaceDescriptorD3D10:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorD3D10()) SurfaceDescriptorD3D10((aOther).get_SurfaceDescriptorD3D10());
            break;
        }
    case TSurfaceDescriptorDXGIYCbCr:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDXGIYCbCr()) SurfaceDescriptorDXGIYCbCr((aOther).get_SurfaceDescriptorDXGIYCbCr());
            break;
        }
    case TSurfaceDescriptorDMABuf:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDMABuf()) SurfaceDescriptorDMABuf((aOther).get_SurfaceDescriptorDMABuf());
            break;
        }
    case TSurfaceDescriptorMacIOSurface:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorMacIOSurface()) SurfaceDescriptorMacIOSurface((aOther).get_SurfaceDescriptorMacIOSurface());
            break;
        }
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t((aOther).get_null_t());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT RemoteDecoderVideoSubDescriptor::RemoteDecoderVideoSubDescriptor(RemoteDecoderVideoSubDescriptor&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TSurfaceDescriptorD3D10:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorD3D10()) SurfaceDescriptorD3D10(std::move((aOther).get_SurfaceDescriptorD3D10()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorDXGIYCbCr:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDXGIYCbCr()) SurfaceDescriptorDXGIYCbCr(std::move((aOther).get_SurfaceDescriptorDXGIYCbCr()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorDMABuf:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDMABuf()) SurfaceDescriptorDMABuf(std::move((aOther).get_SurfaceDescriptorDMABuf()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorMacIOSurface:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorMacIOSurface()) SurfaceDescriptorMacIOSurface(std::move((aOther).get_SurfaceDescriptorMacIOSurface()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move((aOther).get_null_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

RemoteDecoderVideoSubDescriptor::~RemoteDecoderVideoSubDescriptor()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto RemoteDecoderVideoSubDescriptor::operator=(const SurfaceDescriptorD3D10& aRhs) -> RemoteDecoderVideoSubDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorD3D10)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorD3D10()) SurfaceDescriptorD3D10;
    }
    (*(ptr_SurfaceDescriptorD3D10())) = aRhs;
    mType = TSurfaceDescriptorD3D10;
    return (*(this));
}

auto RemoteDecoderVideoSubDescriptor::operator=(SurfaceDescriptorD3D10&& aRhs) -> RemoteDecoderVideoSubDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorD3D10)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorD3D10()) SurfaceDescriptorD3D10;
    }
    (*(ptr_SurfaceDescriptorD3D10())) = std::move(aRhs);
    mType = TSurfaceDescriptorD3D10;
    return (*(this));
}

auto RemoteDecoderVideoSubDescriptor::operator=(const SurfaceDescriptorDXGIYCbCr& aRhs) -> RemoteDecoderVideoSubDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorDXGIYCbCr)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDXGIYCbCr()) SurfaceDescriptorDXGIYCbCr;
    }
    (*(ptr_SurfaceDescriptorDXGIYCbCr())) = aRhs;
    mType = TSurfaceDescriptorDXGIYCbCr;
    return (*(this));
}

auto RemoteDecoderVideoSubDescriptor::operator=(SurfaceDescriptorDXGIYCbCr&& aRhs) -> RemoteDecoderVideoSubDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorDXGIYCbCr)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDXGIYCbCr()) SurfaceDescriptorDXGIYCbCr;
    }
    (*(ptr_SurfaceDescriptorDXGIYCbCr())) = std::move(aRhs);
    mType = TSurfaceDescriptorDXGIYCbCr;
    return (*(this));
}

auto RemoteDecoderVideoSubDescriptor::operator=(const SurfaceDescriptorDMABuf& aRhs) -> RemoteDecoderVideoSubDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorDMABuf)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDMABuf()) SurfaceDescriptorDMABuf;
    }
    (*(ptr_SurfaceDescriptorDMABuf())) = aRhs;
    mType = TSurfaceDescriptorDMABuf;
    return (*(this));
}

auto RemoteDecoderVideoSubDescriptor::operator=(SurfaceDescriptorDMABuf&& aRhs) -> RemoteDecoderVideoSubDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorDMABuf)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDMABuf()) SurfaceDescriptorDMABuf;
    }
    (*(ptr_SurfaceDescriptorDMABuf())) = std::move(aRhs);
    mType = TSurfaceDescriptorDMABuf;
    return (*(this));
}

auto RemoteDecoderVideoSubDescriptor::operator=(const SurfaceDescriptorMacIOSurface& aRhs) -> RemoteDecoderVideoSubDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorMacIOSurface)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorMacIOSurface()) SurfaceDescriptorMacIOSurface;
    }
    (*(ptr_SurfaceDescriptorMacIOSurface())) = aRhs;
    mType = TSurfaceDescriptorMacIOSurface;
    return (*(this));
}

auto RemoteDecoderVideoSubDescriptor::operator=(SurfaceDescriptorMacIOSurface&& aRhs) -> RemoteDecoderVideoSubDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorMacIOSurface)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorMacIOSurface()) SurfaceDescriptorMacIOSurface;
    }
    (*(ptr_SurfaceDescriptorMacIOSurface())) = std::move(aRhs);
    mType = TSurfaceDescriptorMacIOSurface;
    return (*(this));
}

auto RemoteDecoderVideoSubDescriptor::operator=(const null_t& aRhs) -> RemoteDecoderVideoSubDescriptor&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = aRhs;
    mType = Tnull_t;
    return (*(this));
}

auto RemoteDecoderVideoSubDescriptor::operator=(null_t&& aRhs) -> RemoteDecoderVideoSubDescriptor&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = std::move(aRhs);
    mType = Tnull_t;
    return (*(this));
}

auto RemoteDecoderVideoSubDescriptor::operator=(const RemoteDecoderVideoSubDescriptor& aRhs) -> RemoteDecoderVideoSubDescriptor&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TSurfaceDescriptorD3D10:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorD3D10()) SurfaceDescriptorD3D10;
            }
            (*(ptr_SurfaceDescriptorD3D10())) = (aRhs).get_SurfaceDescriptorD3D10();
            break;
        }
    case TSurfaceDescriptorDXGIYCbCr:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDXGIYCbCr()) SurfaceDescriptorDXGIYCbCr;
            }
            (*(ptr_SurfaceDescriptorDXGIYCbCr())) = (aRhs).get_SurfaceDescriptorDXGIYCbCr();
            break;
        }
    case TSurfaceDescriptorDMABuf:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDMABuf()) SurfaceDescriptorDMABuf;
            }
            (*(ptr_SurfaceDescriptorDMABuf())) = (aRhs).get_SurfaceDescriptorDMABuf();
            break;
        }
    case TSurfaceDescriptorMacIOSurface:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorMacIOSurface()) SurfaceDescriptorMacIOSurface;
            }
            (*(ptr_SurfaceDescriptorMacIOSurface())) = (aRhs).get_SurfaceDescriptorMacIOSurface();
            break;
        }
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = (aRhs).get_null_t();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto RemoteDecoderVideoSubDescriptor::operator=(RemoteDecoderVideoSubDescriptor&& aRhs) -> RemoteDecoderVideoSubDescriptor&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TSurfaceDescriptorD3D10:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorD3D10()) SurfaceDescriptorD3D10;
            }
            (*(ptr_SurfaceDescriptorD3D10())) = std::move((aRhs).get_SurfaceDescriptorD3D10());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorDXGIYCbCr:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDXGIYCbCr()) SurfaceDescriptorDXGIYCbCr;
            }
            (*(ptr_SurfaceDescriptorDXGIYCbCr())) = std::move((aRhs).get_SurfaceDescriptorDXGIYCbCr());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorDMABuf:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDMABuf()) SurfaceDescriptorDMABuf;
            }
            (*(ptr_SurfaceDescriptorDMABuf())) = std::move((aRhs).get_SurfaceDescriptorDMABuf());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorMacIOSurface:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorMacIOSurface()) SurfaceDescriptorMacIOSurface;
            }
            (*(ptr_SurfaceDescriptorMacIOSurface())) = std::move((aRhs).get_SurfaceDescriptorMacIOSurface());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = std::move((aRhs).get_null_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

auto RemoteDecoderVideoSubDescriptor::operator==(const SurfaceDescriptorD3D10& aRhs) const -> bool
{
    return (get_SurfaceDescriptorD3D10()) == (aRhs);
}

auto RemoteDecoderVideoSubDescriptor::operator==(const SurfaceDescriptorDXGIYCbCr& aRhs) const -> bool
{
    return (get_SurfaceDescriptorDXGIYCbCr()) == (aRhs);
}

auto RemoteDecoderVideoSubDescriptor::operator==(const SurfaceDescriptorDMABuf& aRhs) const -> bool
{
    return (get_SurfaceDescriptorDMABuf()) == (aRhs);
}

auto RemoteDecoderVideoSubDescriptor::operator==(const SurfaceDescriptorMacIOSurface& aRhs) const -> bool
{
    return (get_SurfaceDescriptorMacIOSurface()) == (aRhs);
}

auto RemoteDecoderVideoSubDescriptor::operator==(const null_t& aRhs) const -> bool
{
    return (get_null_t()) == (aRhs);
}

auto RemoteDecoderVideoSubDescriptor::operator==(const RemoteDecoderVideoSubDescriptor& aRhs) const -> bool
{
    if ((type()) != ((aRhs).type())) {
        return false;
    }

    switch (type()) {
    case TSurfaceDescriptorD3D10:
        {
            return (get_SurfaceDescriptorD3D10()) == ((aRhs).get_SurfaceDescriptorD3D10());
        }
    case TSurfaceDescriptorDXGIYCbCr:
        {
            return (get_SurfaceDescriptorDXGIYCbCr()) == ((aRhs).get_SurfaceDescriptorDXGIYCbCr());
        }
    case TSurfaceDescriptorDMABuf:
        {
            return (get_SurfaceDescriptorDMABuf()) == ((aRhs).get_SurfaceDescriptorDMABuf());
        }
    case TSurfaceDescriptorMacIOSurface:
        {
            return (get_SurfaceDescriptorMacIOSurface()) == ((aRhs).get_SurfaceDescriptorMacIOSurface());
        }
    case Tnull_t:
        {
            return (get_null_t()) == ((aRhs).get_null_t());
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return false;
        }
    }
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::RemoteDecoderVideoSubDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::RemoteDecoderVideoSubDescriptor union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'RemoteDecoderVideoSubDescriptor'
    (aMsg)->WriteSentinel(3267955811);

    switch (type) {
    case union__::TSurfaceDescriptorD3D10:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorD3D10());
            // Sentinel = 'TSurfaceDescriptorD3D10'
            (aMsg)->WriteSentinel(1783433305);
            return;
        }
    case union__::TSurfaceDescriptorDXGIYCbCr:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorDXGIYCbCr());
            // Sentinel = 'TSurfaceDescriptorDXGIYCbCr'
            (aMsg)->WriteSentinel(2440366620);
            return;
        }
    case union__::TSurfaceDescriptorDMABuf:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorDMABuf());
            // Sentinel = 'TSurfaceDescriptorDMABuf'
            (aMsg)->WriteSentinel(1950288172);
            return;
        }
    case union__::TSurfaceDescriptorMacIOSurface:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorMacIOSurface());
            // Sentinel = 'TSurfaceDescriptorMacIOSurface'
            (aMsg)->WriteSentinel(3041594287);
            return;
        }
    case union__::Tnull_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_null_t());
            // Sentinel = 'Tnull_t'
            (aMsg)->WriteSentinel(190186211);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::RemoteDecoderVideoSubDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::RemoteDecoderVideoSubDescriptor union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union RemoteDecoderVideoSubDescriptor");
        return false;
    }
    // Sentinel = 'RemoteDecoderVideoSubDescriptor'
    if ((!((aMsg)->ReadSentinel(aIter, 3267955811)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union RemoteDecoderVideoSubDescriptor");
        return false;
    }

    switch (type) {
    case union__::TSurfaceDescriptorD3D10:
        {
            mozilla::layers::SurfaceDescriptorD3D10 tmp = mozilla::layers::SurfaceDescriptorD3D10();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorD3D10())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorD3D10 of union RemoteDecoderVideoSubDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorD3D10'
            if ((!((aMsg)->ReadSentinel(aIter, 1783433305)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorD3D10 of union RemoteDecoderVideoSubDescriptor");
                return false;
            }
            return true;
        }
    case union__::TSurfaceDescriptorDXGIYCbCr:
        {
            mozilla::layers::SurfaceDescriptorDXGIYCbCr tmp = mozilla::layers::SurfaceDescriptorDXGIYCbCr();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorDXGIYCbCr())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorDXGIYCbCr of union RemoteDecoderVideoSubDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorDXGIYCbCr'
            if ((!((aMsg)->ReadSentinel(aIter, 2440366620)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorDXGIYCbCr of union RemoteDecoderVideoSubDescriptor");
                return false;
            }
            return true;
        }
    case union__::TSurfaceDescriptorDMABuf:
        {
            mozilla::layers::SurfaceDescriptorDMABuf tmp = mozilla::layers::SurfaceDescriptorDMABuf();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorDMABuf())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorDMABuf of union RemoteDecoderVideoSubDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorDMABuf'
            if ((!((aMsg)->ReadSentinel(aIter, 1950288172)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorDMABuf of union RemoteDecoderVideoSubDescriptor");
                return false;
            }
            return true;
        }
    case union__::TSurfaceDescriptorMacIOSurface:
        {
            mozilla::layers::SurfaceDescriptorMacIOSurface tmp = mozilla::layers::SurfaceDescriptorMacIOSurface();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorMacIOSurface())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorMacIOSurface of union RemoteDecoderVideoSubDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorMacIOSurface'
            if ((!((aMsg)->ReadSentinel(aIter, 3041594287)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorMacIOSurface of union RemoteDecoderVideoSubDescriptor");
                return false;
            }
            return true;
        }
    case union__::Tnull_t:
        {
            mozilla::null_t tmp = mozilla::null_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_null_t())))))) {
                aActor->FatalError("Error deserializing variant Tnull_t of union RemoteDecoderVideoSubDescriptor");
                return false;
            }
            // Sentinel = 'Tnull_t'
            if ((!((aMsg)->ReadSentinel(aIter, 190186211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnull_t of union RemoteDecoderVideoSubDescriptor");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SurfaceDescriptorRemoteDecoder|
//
namespace mozilla {
namespace layers {
auto SurfaceDescriptorRemoteDecoder::operator==(const SurfaceDescriptorRemoteDecoder& _o) const -> bool
{
    if ((!((handle()) == ((_o).handle())))) {
        return false;
    }
    if ((!((subdesc()) == ((_o).subdesc())))) {
        return false;
    }
    if ((!((source()) == ((_o).source())))) {
        return false;
    }
    return true;
}

auto SurfaceDescriptorRemoteDecoder::operator!=(const SurfaceDescriptorRemoteDecoder& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorRemoteDecoder>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).subdesc());
    // Sentinel = 'subdesc'
    (aMsg)->WriteSentinel(198968042);
    WriteIPDLParam(aMsg, aActor, (aVar).source());
    // Sentinel = 'source'
    (aMsg)->WriteSentinel(154665618);
    (aMsg)->WriteBytes((&((aVar).handle())), 8);
    // Sentinel = 'handle'
    (aMsg)->WriteSentinel(142344813);
}

auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorRemoteDecoder>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->subdesc())))))) {
        aActor->FatalError("Error deserializing 'subdesc' (RemoteDecoderVideoSubDescriptor) member of 'SurfaceDescriptorRemoteDecoder'");
        return false;
    }
    // Sentinel = 'subdesc'
    if ((!((aMsg)->ReadSentinel(aIter, 198968042)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'subdesc' (RemoteDecoderVideoSubDescriptor) member of 'SurfaceDescriptorRemoteDecoder'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->source())))))) {
        aActor->FatalError("Error deserializing 'source' (MaybeVideoBridgeSource) member of 'SurfaceDescriptorRemoteDecoder'");
        return false;
    }
    // Sentinel = 'source'
    if ((!((aMsg)->ReadSentinel(aIter, 154665618)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'source' (MaybeVideoBridgeSource) member of 'SurfaceDescriptorRemoteDecoder'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->handle())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'handle'
    if ((!((aMsg)->ReadSentinel(aIter, 142344813)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SurfaceDescriptorPlugin|
//
namespace mozilla {
namespace layers {
auto SurfaceDescriptorPlugin::operator==(const SurfaceDescriptorPlugin& _o) const -> bool
{
    if ((!((id()) == ((_o).id())))) {
        return false;
    }
    if ((!((pluginSurf()) == ((_o).pluginSurf())))) {
        return false;
    }
    if ((!((displaySurf()) == ((_o).displaySurf())))) {
        return false;
    }
    return true;
}

auto SurfaceDescriptorPlugin::operator!=(const SurfaceDescriptorPlugin& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorPlugin>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).pluginSurf());
    // Sentinel = 'pluginSurf'
    (aMsg)->WriteSentinel(390071344);
    WriteIPDLParam(aMsg, aActor, (aVar).displaySurf());
    // Sentinel = 'displaySurf'
    (aMsg)->WriteSentinel(461898903);
    (aMsg)->WriteBytes((&((aVar).id())), 8);
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
}

auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorPlugin>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->pluginSurf())))))) {
        aActor->FatalError("Error deserializing 'pluginSurf' (SurfaceDescriptorD3D10) member of 'SurfaceDescriptorPlugin'");
        return false;
    }
    // Sentinel = 'pluginSurf'
    if ((!((aMsg)->ReadSentinel(aIter, 390071344)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'pluginSurf' (SurfaceDescriptorD3D10) member of 'SurfaceDescriptorPlugin'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->displaySurf())))))) {
        aActor->FatalError("Error deserializing 'displaySurf' (SurfaceDescriptorD3D10) member of 'SurfaceDescriptorPlugin'");
        return false;
    }
    // Sentinel = 'displaySurf'
    if ((!((aMsg)->ReadSentinel(aIter, 461898903)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'displaySurf' (SurfaceDescriptorD3D10) member of 'SurfaceDescriptorPlugin'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->id())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union SurfaceDescriptorGPUVideo|
//
namespace mozilla {
namespace layers {
auto SurfaceDescriptorGPUVideo::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TSurfaceDescriptorRemoteDecoder:
        {
            (ptr_SurfaceDescriptorRemoteDecoder())->~SurfaceDescriptorRemoteDecoder__tdef();
            break;
        }
    case TSurfaceDescriptorPlugin:
        {
            (ptr_SurfaceDescriptorPlugin())->~SurfaceDescriptorPlugin__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT SurfaceDescriptorGPUVideo::SurfaceDescriptorGPUVideo(const SurfaceDescriptorRemoteDecoder& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorRemoteDecoder()) SurfaceDescriptorRemoteDecoder(aOther);
    mType = TSurfaceDescriptorRemoteDecoder;
}

MOZ_IMPLICIT SurfaceDescriptorGPUVideo::SurfaceDescriptorGPUVideo(SurfaceDescriptorRemoteDecoder&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorRemoteDecoder()) SurfaceDescriptorRemoteDecoder(std::move(aOther));
    mType = TSurfaceDescriptorRemoteDecoder;
}

MOZ_IMPLICIT SurfaceDescriptorGPUVideo::SurfaceDescriptorGPUVideo(const SurfaceDescriptorPlugin& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorPlugin()) SurfaceDescriptorPlugin(aOther);
    mType = TSurfaceDescriptorPlugin;
}

MOZ_IMPLICIT SurfaceDescriptorGPUVideo::SurfaceDescriptorGPUVideo(SurfaceDescriptorPlugin&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorPlugin()) SurfaceDescriptorPlugin(std::move(aOther));
    mType = TSurfaceDescriptorPlugin;
}

MOZ_IMPLICIT SurfaceDescriptorGPUVideo::SurfaceDescriptorGPUVideo(const SurfaceDescriptorGPUVideo& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TSurfaceDescriptorRemoteDecoder:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorRemoteDecoder()) SurfaceDescriptorRemoteDecoder((aOther).get_SurfaceDescriptorRemoteDecoder());
            break;
        }
    case TSurfaceDescriptorPlugin:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorPlugin()) SurfaceDescriptorPlugin((aOther).get_SurfaceDescriptorPlugin());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT SurfaceDescriptorGPUVideo::SurfaceDescriptorGPUVideo(SurfaceDescriptorGPUVideo&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TSurfaceDescriptorRemoteDecoder:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorRemoteDecoder()) SurfaceDescriptorRemoteDecoder(std::move((aOther).get_SurfaceDescriptorRemoteDecoder()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorPlugin:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorPlugin()) SurfaceDescriptorPlugin(std::move((aOther).get_SurfaceDescriptorPlugin()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

SurfaceDescriptorGPUVideo::~SurfaceDescriptorGPUVideo()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto SurfaceDescriptorGPUVideo::operator=(const SurfaceDescriptorRemoteDecoder& aRhs) -> SurfaceDescriptorGPUVideo&
{
    if (MaybeDestroy(TSurfaceDescriptorRemoteDecoder)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorRemoteDecoder()) SurfaceDescriptorRemoteDecoder;
    }
    (*(ptr_SurfaceDescriptorRemoteDecoder())) = aRhs;
    mType = TSurfaceDescriptorRemoteDecoder;
    return (*(this));
}

auto SurfaceDescriptorGPUVideo::operator=(SurfaceDescriptorRemoteDecoder&& aRhs) -> SurfaceDescriptorGPUVideo&
{
    if (MaybeDestroy(TSurfaceDescriptorRemoteDecoder)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorRemoteDecoder()) SurfaceDescriptorRemoteDecoder;
    }
    (*(ptr_SurfaceDescriptorRemoteDecoder())) = std::move(aRhs);
    mType = TSurfaceDescriptorRemoteDecoder;
    return (*(this));
}

auto SurfaceDescriptorGPUVideo::operator=(const SurfaceDescriptorPlugin& aRhs) -> SurfaceDescriptorGPUVideo&
{
    if (MaybeDestroy(TSurfaceDescriptorPlugin)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorPlugin()) SurfaceDescriptorPlugin;
    }
    (*(ptr_SurfaceDescriptorPlugin())) = aRhs;
    mType = TSurfaceDescriptorPlugin;
    return (*(this));
}

auto SurfaceDescriptorGPUVideo::operator=(SurfaceDescriptorPlugin&& aRhs) -> SurfaceDescriptorGPUVideo&
{
    if (MaybeDestroy(TSurfaceDescriptorPlugin)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorPlugin()) SurfaceDescriptorPlugin;
    }
    (*(ptr_SurfaceDescriptorPlugin())) = std::move(aRhs);
    mType = TSurfaceDescriptorPlugin;
    return (*(this));
}

auto SurfaceDescriptorGPUVideo::operator=(const SurfaceDescriptorGPUVideo& aRhs) -> SurfaceDescriptorGPUVideo&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TSurfaceDescriptorRemoteDecoder:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorRemoteDecoder()) SurfaceDescriptorRemoteDecoder;
            }
            (*(ptr_SurfaceDescriptorRemoteDecoder())) = (aRhs).get_SurfaceDescriptorRemoteDecoder();
            break;
        }
    case TSurfaceDescriptorPlugin:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorPlugin()) SurfaceDescriptorPlugin;
            }
            (*(ptr_SurfaceDescriptorPlugin())) = (aRhs).get_SurfaceDescriptorPlugin();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto SurfaceDescriptorGPUVideo::operator=(SurfaceDescriptorGPUVideo&& aRhs) -> SurfaceDescriptorGPUVideo&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TSurfaceDescriptorRemoteDecoder:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorRemoteDecoder()) SurfaceDescriptorRemoteDecoder;
            }
            (*(ptr_SurfaceDescriptorRemoteDecoder())) = std::move((aRhs).get_SurfaceDescriptorRemoteDecoder());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorPlugin:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorPlugin()) SurfaceDescriptorPlugin;
            }
            (*(ptr_SurfaceDescriptorPlugin())) = std::move((aRhs).get_SurfaceDescriptorPlugin());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

auto SurfaceDescriptorGPUVideo::operator==(const SurfaceDescriptorRemoteDecoder& aRhs) const -> bool
{
    return (get_SurfaceDescriptorRemoteDecoder()) == (aRhs);
}

auto SurfaceDescriptorGPUVideo::operator==(const SurfaceDescriptorPlugin& aRhs) const -> bool
{
    return (get_SurfaceDescriptorPlugin()) == (aRhs);
}

auto SurfaceDescriptorGPUVideo::operator==(const SurfaceDescriptorGPUVideo& aRhs) const -> bool
{
    if ((type()) != ((aRhs).type())) {
        return false;
    }

    switch (type()) {
    case TSurfaceDescriptorRemoteDecoder:
        {
            return (get_SurfaceDescriptorRemoteDecoder()) == ((aRhs).get_SurfaceDescriptorRemoteDecoder());
        }
    case TSurfaceDescriptorPlugin:
        {
            return (get_SurfaceDescriptorPlugin()) == ((aRhs).get_SurfaceDescriptorPlugin());
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return false;
        }
    }
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorGPUVideo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::SurfaceDescriptorGPUVideo union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'SurfaceDescriptorGPUVideo'
    (aMsg)->WriteSentinel(2149190092);

    switch (type) {
    case union__::TSurfaceDescriptorRemoteDecoder:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorRemoteDecoder());
            // Sentinel = 'TSurfaceDescriptorRemoteDecoder'
            (aMsg)->WriteSentinel(3291155551);
            return;
        }
    case union__::TSurfaceDescriptorPlugin:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorPlugin());
            // Sentinel = 'TSurfaceDescriptorPlugin'
            (aMsg)->WriteSentinel(1985022380);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorGPUVideo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::SurfaceDescriptorGPUVideo union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union SurfaceDescriptorGPUVideo");
        return false;
    }
    // Sentinel = 'SurfaceDescriptorGPUVideo'
    if ((!((aMsg)->ReadSentinel(aIter, 2149190092)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union SurfaceDescriptorGPUVideo");
        return false;
    }

    switch (type) {
    case union__::TSurfaceDescriptorRemoteDecoder:
        {
            mozilla::layers::SurfaceDescriptorRemoteDecoder tmp = mozilla::layers::SurfaceDescriptorRemoteDecoder();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorRemoteDecoder())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorRemoteDecoder of union SurfaceDescriptorGPUVideo");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorRemoteDecoder'
            if ((!((aMsg)->ReadSentinel(aIter, 3291155551)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorRemoteDecoder of union SurfaceDescriptorGPUVideo");
                return false;
            }
            return true;
        }
    case union__::TSurfaceDescriptorPlugin:
        {
            mozilla::layers::SurfaceDescriptorPlugin tmp = mozilla::layers::SurfaceDescriptorPlugin();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorPlugin())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorPlugin of union SurfaceDescriptorGPUVideo");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorPlugin'
            if ((!((aMsg)->ReadSentinel(aIter, 1985022380)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorPlugin of union SurfaceDescriptorGPUVideo");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RGBDescriptor|
//
namespace mozilla {
namespace layers {
auto RGBDescriptor::operator==(const RGBDescriptor& _o) const -> bool
{
    if ((!((size()) == ((_o).size())))) {
        return false;
    }
    if ((!((format()) == ((_o).format())))) {
        return false;
    }
    if ((!((hasIntermediateBuffer()) == ((_o).hasIntermediateBuffer())))) {
        return false;
    }
    return true;
}

auto RGBDescriptor::operator!=(const RGBDescriptor& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::RGBDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).size());
    // Sentinel = 'size'
    (aMsg)->WriteSentinel(73662908);
    WriteIPDLParam(aMsg, aActor, (aVar).format());
    // Sentinel = 'format'
    (aMsg)->WriteSentinel(148505226);
    WriteIPDLParam(aMsg, aActor, (aVar).hasIntermediateBuffer());
    // Sentinel = 'hasIntermediateBuffer'
    (aMsg)->WriteSentinel(1558382706);
}

auto IPDLParamTraits<mozilla::layers::RGBDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->size())))))) {
        aActor->FatalError("Error deserializing 'size' (IntSize) member of 'RGBDescriptor'");
        return false;
    }
    // Sentinel = 'size'
    if ((!((aMsg)->ReadSentinel(aIter, 73662908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'size' (IntSize) member of 'RGBDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->format())))))) {
        aActor->FatalError("Error deserializing 'format' (SurfaceFormat) member of 'RGBDescriptor'");
        return false;
    }
    // Sentinel = 'format'
    if ((!((aMsg)->ReadSentinel(aIter, 148505226)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'format' (SurfaceFormat) member of 'RGBDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hasIntermediateBuffer())))))) {
        aActor->FatalError("Error deserializing 'hasIntermediateBuffer' (bool) member of 'RGBDescriptor'");
        return false;
    }
    // Sentinel = 'hasIntermediateBuffer'
    if ((!((aMsg)->ReadSentinel(aIter, 1558382706)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hasIntermediateBuffer' (bool) member of 'RGBDescriptor'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct YCbCrDescriptor|
//
namespace mozilla {
namespace layers {
auto YCbCrDescriptor::operator==(const YCbCrDescriptor& _o) const -> bool
{
    if ((!((display()) == ((_o).display())))) {
        return false;
    }
    if ((!((ySize()) == ((_o).ySize())))) {
        return false;
    }
    if ((!((yStride()) == ((_o).yStride())))) {
        return false;
    }
    if ((!((cbCrSize()) == ((_o).cbCrSize())))) {
        return false;
    }
    if ((!((cbCrStride()) == ((_o).cbCrStride())))) {
        return false;
    }
    if ((!((yOffset()) == ((_o).yOffset())))) {
        return false;
    }
    if ((!((cbOffset()) == ((_o).cbOffset())))) {
        return false;
    }
    if ((!((crOffset()) == ((_o).crOffset())))) {
        return false;
    }
    if ((!((stereoMode()) == ((_o).stereoMode())))) {
        return false;
    }
    if ((!((colorDepth()) == ((_o).colorDepth())))) {
        return false;
    }
    if ((!((yUVColorSpace()) == ((_o).yUVColorSpace())))) {
        return false;
    }
    if ((!((colorRange()) == ((_o).colorRange())))) {
        return false;
    }
    if ((!((hasIntermediateBuffer()) == ((_o).hasIntermediateBuffer())))) {
        return false;
    }
    return true;
}

auto YCbCrDescriptor::operator!=(const YCbCrDescriptor& _o) const -> bool
{
    return (!(operator==(_o)));
}

auto YCbCrDescriptor::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(YCbCrDescriptor, crOffset_) - offsetof(YCbCrDescriptor, yStride_)) == 16,
        "Bad assumptions about field layout!");
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::YCbCrDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).display());
    // Sentinel = 'display'
    (aMsg)->WriteSentinel(196543223);
    WriteIPDLParam(aMsg, aActor, (aVar).ySize());
    // Sentinel = 'ySize'
    (aMsg)->WriteSentinel(104989205);
    WriteIPDLParam(aMsg, aActor, (aVar).cbCrSize());
    // Sentinel = 'cbCrSize'
    (aMsg)->WriteSentinel(226099990);
    WriteIPDLParam(aMsg, aActor, (aVar).stereoMode());
    // Sentinel = 'stereoMode'
    (aMsg)->WriteSentinel(387515416);
    WriteIPDLParam(aMsg, aActor, (aVar).colorDepth());
    // Sentinel = 'colorDepth'
    (aMsg)->WriteSentinel(376177685);
    WriteIPDLParam(aMsg, aActor, (aVar).yUVColorSpace());
    // Sentinel = 'yUVColorSpace'
    (aMsg)->WriteSentinel(589759760);
    WriteIPDLParam(aMsg, aActor, (aVar).colorRange());
    // Sentinel = 'colorRange'
    (aMsg)->WriteSentinel(377422861);
    WriteIPDLParam(aMsg, aActor, (aVar).hasIntermediateBuffer());
    // Sentinel = 'hasIntermediateBuffer'
    (aMsg)->WriteSentinel(1558382706);
    (aMsg)->WriteBytes((&((aVar).yStride())), 20);
    // Sentinel = 'yStride | cbCrStride | yOffset | cbOffset | crOffset'
    (aMsg)->WriteSentinel(4143190786);
}

auto IPDLParamTraits<mozilla::layers::YCbCrDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->display())))))) {
        aActor->FatalError("Error deserializing 'display' (IntRect) member of 'YCbCrDescriptor'");
        return false;
    }
    // Sentinel = 'display'
    if ((!((aMsg)->ReadSentinel(aIter, 196543223)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'display' (IntRect) member of 'YCbCrDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ySize())))))) {
        aActor->FatalError("Error deserializing 'ySize' (IntSize) member of 'YCbCrDescriptor'");
        return false;
    }
    // Sentinel = 'ySize'
    if ((!((aMsg)->ReadSentinel(aIter, 104989205)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ySize' (IntSize) member of 'YCbCrDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cbCrSize())))))) {
        aActor->FatalError("Error deserializing 'cbCrSize' (IntSize) member of 'YCbCrDescriptor'");
        return false;
    }
    // Sentinel = 'cbCrSize'
    if ((!((aMsg)->ReadSentinel(aIter, 226099990)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cbCrSize' (IntSize) member of 'YCbCrDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->stereoMode())))))) {
        aActor->FatalError("Error deserializing 'stereoMode' (StereoMode) member of 'YCbCrDescriptor'");
        return false;
    }
    // Sentinel = 'stereoMode'
    if ((!((aMsg)->ReadSentinel(aIter, 387515416)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'stereoMode' (StereoMode) member of 'YCbCrDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->colorDepth())))))) {
        aActor->FatalError("Error deserializing 'colorDepth' (ColorDepth) member of 'YCbCrDescriptor'");
        return false;
    }
    // Sentinel = 'colorDepth'
    if ((!((aMsg)->ReadSentinel(aIter, 376177685)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'colorDepth' (ColorDepth) member of 'YCbCrDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->yUVColorSpace())))))) {
        aActor->FatalError("Error deserializing 'yUVColorSpace' (YUVColorSpace) member of 'YCbCrDescriptor'");
        return false;
    }
    // Sentinel = 'yUVColorSpace'
    if ((!((aMsg)->ReadSentinel(aIter, 589759760)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'yUVColorSpace' (YUVColorSpace) member of 'YCbCrDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->colorRange())))))) {
        aActor->FatalError("Error deserializing 'colorRange' (ColorRange) member of 'YCbCrDescriptor'");
        return false;
    }
    // Sentinel = 'colorRange'
    if ((!((aMsg)->ReadSentinel(aIter, 377422861)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'colorRange' (ColorRange) member of 'YCbCrDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hasIntermediateBuffer())))))) {
        aActor->FatalError("Error deserializing 'hasIntermediateBuffer' (bool) member of 'YCbCrDescriptor'");
        return false;
    }
    // Sentinel = 'hasIntermediateBuffer'
    if ((!((aMsg)->ReadSentinel(aIter, 1558382706)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hasIntermediateBuffer' (bool) member of 'YCbCrDescriptor'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->yStride())), 20)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'yStride | cbCrStride | yOffset | cbOffset | crOffset'
    if ((!((aMsg)->ReadSentinel(aIter, 4143190786)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union BufferDescriptor|
//
namespace mozilla {
namespace layers {
auto BufferDescriptor::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TRGBDescriptor:
        {
            (ptr_RGBDescriptor())->~RGBDescriptor__tdef();
            break;
        }
    case TYCbCrDescriptor:
        {
            (ptr_YCbCrDescriptor())->~YCbCrDescriptor__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT BufferDescriptor::BufferDescriptor(const RGBDescriptor& aOther)
{
    new (mozilla::KnownNotNull, ptr_RGBDescriptor()) RGBDescriptor(aOther);
    mType = TRGBDescriptor;
}

MOZ_IMPLICIT BufferDescriptor::BufferDescriptor(RGBDescriptor&& aOther)
{
    new (mozilla::KnownNotNull, ptr_RGBDescriptor()) RGBDescriptor(std::move(aOther));
    mType = TRGBDescriptor;
}

MOZ_IMPLICIT BufferDescriptor::BufferDescriptor(const YCbCrDescriptor& aOther)
{
    new (mozilla::KnownNotNull, ptr_YCbCrDescriptor()) YCbCrDescriptor(aOther);
    mType = TYCbCrDescriptor;
}

MOZ_IMPLICIT BufferDescriptor::BufferDescriptor(YCbCrDescriptor&& aOther)
{
    new (mozilla::KnownNotNull, ptr_YCbCrDescriptor()) YCbCrDescriptor(std::move(aOther));
    mType = TYCbCrDescriptor;
}

MOZ_IMPLICIT BufferDescriptor::BufferDescriptor(const BufferDescriptor& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TRGBDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_RGBDescriptor()) RGBDescriptor((aOther).get_RGBDescriptor());
            break;
        }
    case TYCbCrDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_YCbCrDescriptor()) YCbCrDescriptor((aOther).get_YCbCrDescriptor());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT BufferDescriptor::BufferDescriptor(BufferDescriptor&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TRGBDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_RGBDescriptor()) RGBDescriptor(std::move((aOther).get_RGBDescriptor()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TYCbCrDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_YCbCrDescriptor()) YCbCrDescriptor(std::move((aOther).get_YCbCrDescriptor()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

BufferDescriptor::~BufferDescriptor()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto BufferDescriptor::operator=(const RGBDescriptor& aRhs) -> BufferDescriptor&
{
    if (MaybeDestroy(TRGBDescriptor)) {
        new (mozilla::KnownNotNull, ptr_RGBDescriptor()) RGBDescriptor;
    }
    (*(ptr_RGBDescriptor())) = aRhs;
    mType = TRGBDescriptor;
    return (*(this));
}

auto BufferDescriptor::operator=(RGBDescriptor&& aRhs) -> BufferDescriptor&
{
    if (MaybeDestroy(TRGBDescriptor)) {
        new (mozilla::KnownNotNull, ptr_RGBDescriptor()) RGBDescriptor;
    }
    (*(ptr_RGBDescriptor())) = std::move(aRhs);
    mType = TRGBDescriptor;
    return (*(this));
}

auto BufferDescriptor::operator=(const YCbCrDescriptor& aRhs) -> BufferDescriptor&
{
    if (MaybeDestroy(TYCbCrDescriptor)) {
        new (mozilla::KnownNotNull, ptr_YCbCrDescriptor()) YCbCrDescriptor;
    }
    (*(ptr_YCbCrDescriptor())) = aRhs;
    mType = TYCbCrDescriptor;
    return (*(this));
}

auto BufferDescriptor::operator=(YCbCrDescriptor&& aRhs) -> BufferDescriptor&
{
    if (MaybeDestroy(TYCbCrDescriptor)) {
        new (mozilla::KnownNotNull, ptr_YCbCrDescriptor()) YCbCrDescriptor;
    }
    (*(ptr_YCbCrDescriptor())) = std::move(aRhs);
    mType = TYCbCrDescriptor;
    return (*(this));
}

auto BufferDescriptor::operator=(const BufferDescriptor& aRhs) -> BufferDescriptor&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TRGBDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RGBDescriptor()) RGBDescriptor;
            }
            (*(ptr_RGBDescriptor())) = (aRhs).get_RGBDescriptor();
            break;
        }
    case TYCbCrDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_YCbCrDescriptor()) YCbCrDescriptor;
            }
            (*(ptr_YCbCrDescriptor())) = (aRhs).get_YCbCrDescriptor();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto BufferDescriptor::operator=(BufferDescriptor&& aRhs) -> BufferDescriptor&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TRGBDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RGBDescriptor()) RGBDescriptor;
            }
            (*(ptr_RGBDescriptor())) = std::move((aRhs).get_RGBDescriptor());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TYCbCrDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_YCbCrDescriptor()) YCbCrDescriptor;
            }
            (*(ptr_YCbCrDescriptor())) = std::move((aRhs).get_YCbCrDescriptor());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

auto BufferDescriptor::operator==(const RGBDescriptor& aRhs) const -> bool
{
    return (get_RGBDescriptor()) == (aRhs);
}

auto BufferDescriptor::operator==(const YCbCrDescriptor& aRhs) const -> bool
{
    return (get_YCbCrDescriptor()) == (aRhs);
}

auto BufferDescriptor::operator==(const BufferDescriptor& aRhs) const -> bool
{
    if ((type()) != ((aRhs).type())) {
        return false;
    }

    switch (type()) {
    case TRGBDescriptor:
        {
            return (get_RGBDescriptor()) == ((aRhs).get_RGBDescriptor());
        }
    case TYCbCrDescriptor:
        {
            return (get_YCbCrDescriptor()) == ((aRhs).get_YCbCrDescriptor());
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return false;
        }
    }
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::BufferDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::BufferDescriptor union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'BufferDescriptor'
    (aMsg)->WriteSentinel(890635898);

    switch (type) {
    case union__::TRGBDescriptor:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_RGBDescriptor());
            // Sentinel = 'TRGBDescriptor'
            (aMsg)->WriteSentinel(614532431);
            return;
        }
    case union__::TYCbCrDescriptor:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_YCbCrDescriptor());
            // Sentinel = 'TYCbCrDescriptor'
            (aMsg)->WriteSentinel(819725863);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::BufferDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::BufferDescriptor union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union BufferDescriptor");
        return false;
    }
    // Sentinel = 'BufferDescriptor'
    if ((!((aMsg)->ReadSentinel(aIter, 890635898)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union BufferDescriptor");
        return false;
    }

    switch (type) {
    case union__::TRGBDescriptor:
        {
            mozilla::layers::RGBDescriptor tmp = mozilla::layers::RGBDescriptor();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_RGBDescriptor())))))) {
                aActor->FatalError("Error deserializing variant TRGBDescriptor of union BufferDescriptor");
                return false;
            }
            // Sentinel = 'TRGBDescriptor'
            if ((!((aMsg)->ReadSentinel(aIter, 614532431)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TRGBDescriptor of union BufferDescriptor");
                return false;
            }
            return true;
        }
    case union__::TYCbCrDescriptor:
        {
            mozilla::layers::YCbCrDescriptor tmp = mozilla::layers::YCbCrDescriptor();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_YCbCrDescriptor())))))) {
                aActor->FatalError("Error deserializing variant TYCbCrDescriptor of union BufferDescriptor");
                return false;
            }
            // Sentinel = 'TYCbCrDescriptor'
            if ((!((aMsg)->ReadSentinel(aIter, 819725863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TYCbCrDescriptor of union BufferDescriptor");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union MemoryOrShmem|
//
namespace mozilla {
namespace layers {
auto MemoryOrShmem::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tuintptr_t:
        {
            (ptr_uintptr_t())->~uintptr_t__tdef();
            break;
        }
    case TShmem:
        {
            (ptr_Shmem())->~Shmem__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT MemoryOrShmem::MemoryOrShmem(const uintptr_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_uintptr_t()) uintptr_t(aOther);
    mType = Tuintptr_t;
}

MOZ_IMPLICIT MemoryOrShmem::MemoryOrShmem(uintptr_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_uintptr_t()) uintptr_t(std::move(aOther));
    mType = Tuintptr_t;
}

MOZ_IMPLICIT MemoryOrShmem::MemoryOrShmem(Shmem&& aOther)
{
    new (mozilla::KnownNotNull, ptr_Shmem()) Shmem(aOther);
    mType = TShmem;
}

MOZ_IMPLICIT MemoryOrShmem::MemoryOrShmem(const MemoryOrShmem& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tuintptr_t:
        {
            new (mozilla::KnownNotNull, ptr_uintptr_t()) uintptr_t((aOther).get_uintptr_t());
            break;
        }
    case TShmem:
        {
            new (mozilla::KnownNotNull, ptr_Shmem()) Shmem((aOther).get_Shmem());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT MemoryOrShmem::MemoryOrShmem(MemoryOrShmem&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tuintptr_t:
        {
            new (mozilla::KnownNotNull, ptr_uintptr_t()) uintptr_t(std::move((aOther).get_uintptr_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TShmem:
        {
            new (mozilla::KnownNotNull, ptr_Shmem()) Shmem(std::move((aOther).get_Shmem()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

MemoryOrShmem::~MemoryOrShmem()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto MemoryOrShmem::operator=(const uintptr_t& aRhs) -> MemoryOrShmem&
{
    if (MaybeDestroy(Tuintptr_t)) {
        new (mozilla::KnownNotNull, ptr_uintptr_t()) uintptr_t;
    }
    (*(ptr_uintptr_t())) = aRhs;
    mType = Tuintptr_t;
    return (*(this));
}

auto MemoryOrShmem::operator=(uintptr_t&& aRhs) -> MemoryOrShmem&
{
    if (MaybeDestroy(Tuintptr_t)) {
        new (mozilla::KnownNotNull, ptr_uintptr_t()) uintptr_t;
    }
    (*(ptr_uintptr_t())) = std::move(aRhs);
    mType = Tuintptr_t;
    return (*(this));
}

auto MemoryOrShmem::operator=(Shmem&& aRhs) -> MemoryOrShmem&
{
    if (MaybeDestroy(TShmem)) {
        new (mozilla::KnownNotNull, ptr_Shmem()) Shmem;
    }
    (*(ptr_Shmem())) = aRhs;
    mType = TShmem;
    return (*(this));
}

auto MemoryOrShmem::operator=(const MemoryOrShmem& aRhs) -> MemoryOrShmem&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tuintptr_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_uintptr_t()) uintptr_t;
            }
            (*(ptr_uintptr_t())) = (aRhs).get_uintptr_t();
            break;
        }
    case TShmem:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_Shmem()) Shmem;
            }
            (*(ptr_Shmem())) = (aRhs).get_Shmem();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto MemoryOrShmem::operator=(MemoryOrShmem&& aRhs) -> MemoryOrShmem&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tuintptr_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_uintptr_t()) uintptr_t;
            }
            (*(ptr_uintptr_t())) = std::move((aRhs).get_uintptr_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TShmem:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_Shmem()) Shmem;
            }
            (*(ptr_Shmem())) = std::move((aRhs).get_Shmem());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

auto MemoryOrShmem::operator==(const uintptr_t& aRhs) const -> bool
{
    return (get_uintptr_t()) == (aRhs);
}

auto MemoryOrShmem::operator==(Shmem&& aRhs) const -> bool
{
    return (get_Shmem()) == (aRhs);
}

auto MemoryOrShmem::operator==(const MemoryOrShmem& aRhs) const -> bool
{
    if ((type()) != ((aRhs).type())) {
        return false;
    }

    switch (type()) {
    case Tuintptr_t:
        {
            return (get_uintptr_t()) == ((aRhs).get_uintptr_t());
        }
    case TShmem:
        {
            return (get_Shmem()) == ((aRhs).get_Shmem());
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return false;
        }
    }
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::MemoryOrShmem>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::MemoryOrShmem union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'MemoryOrShmem'
    (aMsg)->WriteSentinel(605226293);

    switch (type) {
    case union__::Tuintptr_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_uintptr_t());
            // Sentinel = 'Tuintptr_t'
            (aMsg)->WriteSentinel(385418302);
            return;
        }
    case union__::TShmem:
        {
            WriteIPDLParam(aMsg, aActor, std::move((aVar).get_Shmem()));
            // Sentinel = 'TShmem'
            (aMsg)->WriteSentinel(129696335);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::MemoryOrShmem>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::MemoryOrShmem union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union MemoryOrShmem");
        return false;
    }
    // Sentinel = 'MemoryOrShmem'
    if ((!((aMsg)->ReadSentinel(aIter, 605226293)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union MemoryOrShmem");
        return false;
    }

    switch (type) {
    case union__::Tuintptr_t:
        {
            uintptr_t tmp = uintptr_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_uintptr_t())))))) {
                aActor->FatalError("Error deserializing variant Tuintptr_t of union MemoryOrShmem");
                return false;
            }
            // Sentinel = 'Tuintptr_t'
            if ((!((aMsg)->ReadSentinel(aIter, 385418302)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tuintptr_t of union MemoryOrShmem");
                return false;
            }
            return true;
        }
    case union__::TShmem:
        {
            mozilla::ipc::Shmem tmp = mozilla::ipc::Shmem();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_Shmem())))))) {
                aActor->FatalError("Error deserializing variant TShmem of union MemoryOrShmem");
                return false;
            }
            // Sentinel = 'TShmem'
            if ((!((aMsg)->ReadSentinel(aIter, 129696335)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TShmem of union MemoryOrShmem");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SurfaceDescriptorBuffer|
//
namespace mozilla {
namespace layers {
auto SurfaceDescriptorBuffer::operator==(const SurfaceDescriptorBuffer& _o) const -> bool
{
    if ((!((desc()) == ((_o).desc())))) {
        return false;
    }
    if ((!((data()) == ((_o).data())))) {
        return false;
    }
    return true;
}

auto SurfaceDescriptorBuffer::operator!=(const SurfaceDescriptorBuffer& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorBuffer>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).desc());
    // Sentinel = 'desc'
    (aMsg)->WriteSentinel(67895712);
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
}

auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorBuffer>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->desc())))))) {
        aActor->FatalError("Error deserializing 'desc' (BufferDescriptor) member of 'SurfaceDescriptorBuffer'");
        return false;
    }
    // Sentinel = 'desc'
    if ((!((aMsg)->ReadSentinel(aIter, 67895712)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'desc' (BufferDescriptor) member of 'SurfaceDescriptorBuffer'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (MemoryOrShmem) member of 'SurfaceDescriptorBuffer'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (MemoryOrShmem) member of 'SurfaceDescriptorBuffer'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SurfaceDescriptorShared|
//
namespace mozilla {
namespace layers {
auto SurfaceDescriptorShared::operator==(const SurfaceDescriptorShared& _o) const -> bool
{
    if ((!((size()) == ((_o).size())))) {
        return false;
    }
    if ((!((stride()) == ((_o).stride())))) {
        return false;
    }
    if ((!((format()) == ((_o).format())))) {
        return false;
    }
    if ((!((handle()) == ((_o).handle())))) {
        return false;
    }
    return true;
}

auto SurfaceDescriptorShared::operator!=(const SurfaceDescriptorShared& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorShared>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).size());
    // Sentinel = 'size'
    (aMsg)->WriteSentinel(73662908);
    WriteIPDLParam(aMsg, aActor, (aVar).format());
    // Sentinel = 'format'
    (aMsg)->WriteSentinel(148505226);
    WriteIPDLParam(aMsg, aActor, (aVar).handle());
    // Sentinel = 'handle'
    (aMsg)->WriteSentinel(142344813);
    (aMsg)->WriteBytes((&((aVar).stride())), 4);
    // Sentinel = 'stride'
    (aMsg)->WriteSentinel(153879180);
}

auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorShared>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->size())))))) {
        aActor->FatalError("Error deserializing 'size' (IntSize) member of 'SurfaceDescriptorShared'");
        return false;
    }
    // Sentinel = 'size'
    if ((!((aMsg)->ReadSentinel(aIter, 73662908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'size' (IntSize) member of 'SurfaceDescriptorShared'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->format())))))) {
        aActor->FatalError("Error deserializing 'format' (SurfaceFormat) member of 'SurfaceDescriptorShared'");
        return false;
    }
    // Sentinel = 'format'
    if ((!((aMsg)->ReadSentinel(aIter, 148505226)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'format' (SurfaceFormat) member of 'SurfaceDescriptorShared'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->handle())))))) {
        aActor->FatalError("Error deserializing 'handle' (Handle) member of 'SurfaceDescriptorShared'");
        return false;
    }
    // Sentinel = 'handle'
    if ((!((aMsg)->ReadSentinel(aIter, 142344813)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'handle' (Handle) member of 'SurfaceDescriptorShared'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->stride())), 4)))) {
        aActor->FatalError("Error bulk reading fields from int32_t");
        return false;
    }
    // Sentinel = 'stride'
    if ((!((aMsg)->ReadSentinel(aIter, 153879180)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SurfaceDescriptorRecorded|
//
namespace mozilla {
namespace layers {
auto SurfaceDescriptorRecorded::operator==(const SurfaceDescriptorRecorded& _o) const -> bool
{
    if ((!((textureId()) == ((_o).textureId())))) {
        return false;
    }
    return true;
}

auto SurfaceDescriptorRecorded::operator!=(const SurfaceDescriptorRecorded& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorRecorded>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).textureId())), 8);
    // Sentinel = 'textureId'
    (aMsg)->WriteSentinel(326828991);
}

auto IPDLParamTraits<mozilla::layers::SurfaceDescriptorRecorded>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->textureId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'textureId'
    if ((!((aMsg)->ReadSentinel(aIter, 326828991)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union SurfaceDescriptor|
//
namespace mozilla {
namespace layers {
auto SurfaceDescriptor::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TSurfaceDescriptorBuffer:
        {
            (ptr_SurfaceDescriptorBuffer())->~SurfaceDescriptorBuffer__tdef();
            break;
        }
    case TSurfaceDescriptorDIB:
        {
            (ptr_SurfaceDescriptorDIB())->~SurfaceDescriptorDIB__tdef();
            break;
        }
    case TSurfaceDescriptorD3D10:
        {
            (ptr_SurfaceDescriptorD3D10())->~SurfaceDescriptorD3D10__tdef();
            break;
        }
    case TSurfaceDescriptorFileMapping:
        {
            (ptr_SurfaceDescriptorFileMapping())->~SurfaceDescriptorFileMapping__tdef();
            break;
        }
    case TSurfaceDescriptorDXGIYCbCr:
        {
            (ptr_SurfaceDescriptorDXGIYCbCr())->~SurfaceDescriptorDXGIYCbCr__tdef();
            break;
        }
    case TSurfaceDescriptorX11:
        {
            (ptr_SurfaceDescriptorX11())->~SurfaceDescriptorX11__tdef();
            break;
        }
    case TSurfaceDescriptorDMABuf:
        {
            (ptr_SurfaceDescriptorDMABuf())->~SurfaceDescriptorDMABuf__tdef();
            break;
        }
    case TSurfaceTextureDescriptor:
        {
            (ptr_SurfaceTextureDescriptor())->~SurfaceTextureDescriptor__tdef();
            break;
        }
    case TSurfaceDescriptorAndroidHardwareBuffer:
        {
            (ptr_SurfaceDescriptorAndroidHardwareBuffer())->~SurfaceDescriptorAndroidHardwareBuffer__tdef();
            break;
        }
    case TEGLImageDescriptor:
        {
            (ptr_EGLImageDescriptor())->~EGLImageDescriptor__tdef();
            break;
        }
    case TSurfaceDescriptorMacIOSurface:
        {
            (ptr_SurfaceDescriptorMacIOSurface())->~SurfaceDescriptorMacIOSurface__tdef();
            break;
        }
    case TSurfaceDescriptorSharedGLTexture:
        {
            (ptr_SurfaceDescriptorSharedGLTexture())->~SurfaceDescriptorSharedGLTexture__tdef();
            break;
        }
    case TSurfaceDescriptorGPUVideo:
        {
            (ptr_SurfaceDescriptorGPUVideo())->~SurfaceDescriptorGPUVideo__tdef();
            break;
        }
    case TSurfaceDescriptorRecorded:
        {
            (ptr_SurfaceDescriptorRecorded())->~SurfaceDescriptorRecorded__tdef();
            break;
        }
    case Tnull_t:
        {
            (ptr_null_t())->~null_t__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const SurfaceDescriptorBuffer& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorBuffer()) SurfaceDescriptorBuffer(aOther);
    mType = TSurfaceDescriptorBuffer;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(SurfaceDescriptorBuffer&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorBuffer()) SurfaceDescriptorBuffer(std::move(aOther));
    mType = TSurfaceDescriptorBuffer;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const SurfaceDescriptorDIB& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDIB()) SurfaceDescriptorDIB(aOther);
    mType = TSurfaceDescriptorDIB;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(SurfaceDescriptorDIB&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDIB()) SurfaceDescriptorDIB(std::move(aOther));
    mType = TSurfaceDescriptorDIB;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const SurfaceDescriptorD3D10& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorD3D10()) SurfaceDescriptorD3D10(aOther);
    mType = TSurfaceDescriptorD3D10;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(SurfaceDescriptorD3D10&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorD3D10()) SurfaceDescriptorD3D10(std::move(aOther));
    mType = TSurfaceDescriptorD3D10;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const SurfaceDescriptorFileMapping& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorFileMapping()) SurfaceDescriptorFileMapping(aOther);
    mType = TSurfaceDescriptorFileMapping;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(SurfaceDescriptorFileMapping&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorFileMapping()) SurfaceDescriptorFileMapping(std::move(aOther));
    mType = TSurfaceDescriptorFileMapping;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const SurfaceDescriptorDXGIYCbCr& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDXGIYCbCr()) SurfaceDescriptorDXGIYCbCr(aOther);
    mType = TSurfaceDescriptorDXGIYCbCr;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(SurfaceDescriptorDXGIYCbCr&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDXGIYCbCr()) SurfaceDescriptorDXGIYCbCr(std::move(aOther));
    mType = TSurfaceDescriptorDXGIYCbCr;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const SurfaceDescriptorX11& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorX11()) SurfaceDescriptorX11(aOther);
    mType = TSurfaceDescriptorX11;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(SurfaceDescriptorX11&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorX11()) SurfaceDescriptorX11(std::move(aOther));
    mType = TSurfaceDescriptorX11;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const SurfaceDescriptorDMABuf& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDMABuf()) SurfaceDescriptorDMABuf(aOther);
    mType = TSurfaceDescriptorDMABuf;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(SurfaceDescriptorDMABuf&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDMABuf()) SurfaceDescriptorDMABuf(std::move(aOther));
    mType = TSurfaceDescriptorDMABuf;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const SurfaceTextureDescriptor& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceTextureDescriptor()) SurfaceTextureDescriptor(aOther);
    mType = TSurfaceTextureDescriptor;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(SurfaceTextureDescriptor&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceTextureDescriptor()) SurfaceTextureDescriptor(std::move(aOther));
    mType = TSurfaceTextureDescriptor;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const SurfaceDescriptorAndroidHardwareBuffer& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorAndroidHardwareBuffer()) SurfaceDescriptorAndroidHardwareBuffer(aOther);
    mType = TSurfaceDescriptorAndroidHardwareBuffer;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(SurfaceDescriptorAndroidHardwareBuffer&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorAndroidHardwareBuffer()) SurfaceDescriptorAndroidHardwareBuffer(std::move(aOther));
    mType = TSurfaceDescriptorAndroidHardwareBuffer;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const EGLImageDescriptor& aOther)
{
    new (mozilla::KnownNotNull, ptr_EGLImageDescriptor()) EGLImageDescriptor(aOther);
    mType = TEGLImageDescriptor;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(EGLImageDescriptor&& aOther)
{
    new (mozilla::KnownNotNull, ptr_EGLImageDescriptor()) EGLImageDescriptor(std::move(aOther));
    mType = TEGLImageDescriptor;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const SurfaceDescriptorMacIOSurface& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorMacIOSurface()) SurfaceDescriptorMacIOSurface(aOther);
    mType = TSurfaceDescriptorMacIOSurface;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(SurfaceDescriptorMacIOSurface&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorMacIOSurface()) SurfaceDescriptorMacIOSurface(std::move(aOther));
    mType = TSurfaceDescriptorMacIOSurface;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const SurfaceDescriptorSharedGLTexture& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorSharedGLTexture()) SurfaceDescriptorSharedGLTexture(aOther);
    mType = TSurfaceDescriptorSharedGLTexture;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(SurfaceDescriptorSharedGLTexture&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorSharedGLTexture()) SurfaceDescriptorSharedGLTexture(std::move(aOther));
    mType = TSurfaceDescriptorSharedGLTexture;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const SurfaceDescriptorGPUVideo& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorGPUVideo()) SurfaceDescriptorGPUVideo(aOther);
    mType = TSurfaceDescriptorGPUVideo;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(SurfaceDescriptorGPUVideo&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorGPUVideo()) SurfaceDescriptorGPUVideo(std::move(aOther));
    mType = TSurfaceDescriptorGPUVideo;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const SurfaceDescriptorRecorded& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorRecorded()) SurfaceDescriptorRecorded(aOther);
    mType = TSurfaceDescriptorRecorded;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(SurfaceDescriptorRecorded&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorRecorded()) SurfaceDescriptorRecorded(std::move(aOther));
    mType = TSurfaceDescriptorRecorded;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const null_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(aOther);
    mType = Tnull_t;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(null_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move(aOther));
    mType = Tnull_t;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const SurfaceDescriptor& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TSurfaceDescriptorBuffer:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorBuffer()) SurfaceDescriptorBuffer((aOther).get_SurfaceDescriptorBuffer());
            break;
        }
    case TSurfaceDescriptorDIB:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDIB()) SurfaceDescriptorDIB((aOther).get_SurfaceDescriptorDIB());
            break;
        }
    case TSurfaceDescriptorD3D10:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorD3D10()) SurfaceDescriptorD3D10((aOther).get_SurfaceDescriptorD3D10());
            break;
        }
    case TSurfaceDescriptorFileMapping:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorFileMapping()) SurfaceDescriptorFileMapping((aOther).get_SurfaceDescriptorFileMapping());
            break;
        }
    case TSurfaceDescriptorDXGIYCbCr:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDXGIYCbCr()) SurfaceDescriptorDXGIYCbCr((aOther).get_SurfaceDescriptorDXGIYCbCr());
            break;
        }
    case TSurfaceDescriptorX11:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorX11()) SurfaceDescriptorX11((aOther).get_SurfaceDescriptorX11());
            break;
        }
    case TSurfaceDescriptorDMABuf:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDMABuf()) SurfaceDescriptorDMABuf((aOther).get_SurfaceDescriptorDMABuf());
            break;
        }
    case TSurfaceTextureDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceTextureDescriptor()) SurfaceTextureDescriptor((aOther).get_SurfaceTextureDescriptor());
            break;
        }
    case TSurfaceDescriptorAndroidHardwareBuffer:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorAndroidHardwareBuffer()) SurfaceDescriptorAndroidHardwareBuffer((aOther).get_SurfaceDescriptorAndroidHardwareBuffer());
            break;
        }
    case TEGLImageDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_EGLImageDescriptor()) EGLImageDescriptor((aOther).get_EGLImageDescriptor());
            break;
        }
    case TSurfaceDescriptorMacIOSurface:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorMacIOSurface()) SurfaceDescriptorMacIOSurface((aOther).get_SurfaceDescriptorMacIOSurface());
            break;
        }
    case TSurfaceDescriptorSharedGLTexture:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorSharedGLTexture()) SurfaceDescriptorSharedGLTexture((aOther).get_SurfaceDescriptorSharedGLTexture());
            break;
        }
    case TSurfaceDescriptorGPUVideo:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorGPUVideo()) SurfaceDescriptorGPUVideo((aOther).get_SurfaceDescriptorGPUVideo());
            break;
        }
    case TSurfaceDescriptorRecorded:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorRecorded()) SurfaceDescriptorRecorded((aOther).get_SurfaceDescriptorRecorded());
            break;
        }
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t((aOther).get_null_t());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(SurfaceDescriptor&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TSurfaceDescriptorBuffer:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorBuffer()) SurfaceDescriptorBuffer(std::move((aOther).get_SurfaceDescriptorBuffer()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorDIB:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDIB()) SurfaceDescriptorDIB(std::move((aOther).get_SurfaceDescriptorDIB()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorD3D10:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorD3D10()) SurfaceDescriptorD3D10(std::move((aOther).get_SurfaceDescriptorD3D10()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorFileMapping:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorFileMapping()) SurfaceDescriptorFileMapping(std::move((aOther).get_SurfaceDescriptorFileMapping()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorDXGIYCbCr:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDXGIYCbCr()) SurfaceDescriptorDXGIYCbCr(std::move((aOther).get_SurfaceDescriptorDXGIYCbCr()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorX11:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorX11()) SurfaceDescriptorX11(std::move((aOther).get_SurfaceDescriptorX11()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorDMABuf:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDMABuf()) SurfaceDescriptorDMABuf(std::move((aOther).get_SurfaceDescriptorDMABuf()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceTextureDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceTextureDescriptor()) SurfaceTextureDescriptor(std::move((aOther).get_SurfaceTextureDescriptor()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorAndroidHardwareBuffer:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorAndroidHardwareBuffer()) SurfaceDescriptorAndroidHardwareBuffer(std::move((aOther).get_SurfaceDescriptorAndroidHardwareBuffer()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TEGLImageDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_EGLImageDescriptor()) EGLImageDescriptor(std::move((aOther).get_EGLImageDescriptor()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorMacIOSurface:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorMacIOSurface()) SurfaceDescriptorMacIOSurface(std::move((aOther).get_SurfaceDescriptorMacIOSurface()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorSharedGLTexture:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorSharedGLTexture()) SurfaceDescriptorSharedGLTexture(std::move((aOther).get_SurfaceDescriptorSharedGLTexture()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorGPUVideo:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorGPUVideo()) SurfaceDescriptorGPUVideo(std::move((aOther).get_SurfaceDescriptorGPUVideo()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorRecorded:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorRecorded()) SurfaceDescriptorRecorded(std::move((aOther).get_SurfaceDescriptorRecorded()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move((aOther).get_null_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

SurfaceDescriptor::~SurfaceDescriptor()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto SurfaceDescriptor::operator=(const SurfaceDescriptorBuffer& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorBuffer)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorBuffer()) SurfaceDescriptorBuffer;
    }
    (*(ptr_SurfaceDescriptorBuffer())) = aRhs;
    mType = TSurfaceDescriptorBuffer;
    return (*(this));
}

auto SurfaceDescriptor::operator=(SurfaceDescriptorBuffer&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorBuffer)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorBuffer()) SurfaceDescriptorBuffer;
    }
    (*(ptr_SurfaceDescriptorBuffer())) = std::move(aRhs);
    mType = TSurfaceDescriptorBuffer;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const SurfaceDescriptorDIB& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorDIB)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDIB()) SurfaceDescriptorDIB;
    }
    (*(ptr_SurfaceDescriptorDIB())) = aRhs;
    mType = TSurfaceDescriptorDIB;
    return (*(this));
}

auto SurfaceDescriptor::operator=(SurfaceDescriptorDIB&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorDIB)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDIB()) SurfaceDescriptorDIB;
    }
    (*(ptr_SurfaceDescriptorDIB())) = std::move(aRhs);
    mType = TSurfaceDescriptorDIB;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const SurfaceDescriptorD3D10& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorD3D10)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorD3D10()) SurfaceDescriptorD3D10;
    }
    (*(ptr_SurfaceDescriptorD3D10())) = aRhs;
    mType = TSurfaceDescriptorD3D10;
    return (*(this));
}

auto SurfaceDescriptor::operator=(SurfaceDescriptorD3D10&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorD3D10)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorD3D10()) SurfaceDescriptorD3D10;
    }
    (*(ptr_SurfaceDescriptorD3D10())) = std::move(aRhs);
    mType = TSurfaceDescriptorD3D10;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const SurfaceDescriptorFileMapping& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorFileMapping)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorFileMapping()) SurfaceDescriptorFileMapping;
    }
    (*(ptr_SurfaceDescriptorFileMapping())) = aRhs;
    mType = TSurfaceDescriptorFileMapping;
    return (*(this));
}

auto SurfaceDescriptor::operator=(SurfaceDescriptorFileMapping&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorFileMapping)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorFileMapping()) SurfaceDescriptorFileMapping;
    }
    (*(ptr_SurfaceDescriptorFileMapping())) = std::move(aRhs);
    mType = TSurfaceDescriptorFileMapping;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const SurfaceDescriptorDXGIYCbCr& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorDXGIYCbCr)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDXGIYCbCr()) SurfaceDescriptorDXGIYCbCr;
    }
    (*(ptr_SurfaceDescriptorDXGIYCbCr())) = aRhs;
    mType = TSurfaceDescriptorDXGIYCbCr;
    return (*(this));
}

auto SurfaceDescriptor::operator=(SurfaceDescriptorDXGIYCbCr&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorDXGIYCbCr)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDXGIYCbCr()) SurfaceDescriptorDXGIYCbCr;
    }
    (*(ptr_SurfaceDescriptorDXGIYCbCr())) = std::move(aRhs);
    mType = TSurfaceDescriptorDXGIYCbCr;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const SurfaceDescriptorX11& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorX11)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorX11()) SurfaceDescriptorX11;
    }
    (*(ptr_SurfaceDescriptorX11())) = aRhs;
    mType = TSurfaceDescriptorX11;
    return (*(this));
}

auto SurfaceDescriptor::operator=(SurfaceDescriptorX11&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorX11)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorX11()) SurfaceDescriptorX11;
    }
    (*(ptr_SurfaceDescriptorX11())) = std::move(aRhs);
    mType = TSurfaceDescriptorX11;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const SurfaceDescriptorDMABuf& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorDMABuf)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDMABuf()) SurfaceDescriptorDMABuf;
    }
    (*(ptr_SurfaceDescriptorDMABuf())) = aRhs;
    mType = TSurfaceDescriptorDMABuf;
    return (*(this));
}

auto SurfaceDescriptor::operator=(SurfaceDescriptorDMABuf&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorDMABuf)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDMABuf()) SurfaceDescriptorDMABuf;
    }
    (*(ptr_SurfaceDescriptorDMABuf())) = std::move(aRhs);
    mType = TSurfaceDescriptorDMABuf;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const SurfaceTextureDescriptor& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceTextureDescriptor)) {
        new (mozilla::KnownNotNull, ptr_SurfaceTextureDescriptor()) SurfaceTextureDescriptor;
    }
    (*(ptr_SurfaceTextureDescriptor())) = aRhs;
    mType = TSurfaceTextureDescriptor;
    return (*(this));
}

auto SurfaceDescriptor::operator=(SurfaceTextureDescriptor&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceTextureDescriptor)) {
        new (mozilla::KnownNotNull, ptr_SurfaceTextureDescriptor()) SurfaceTextureDescriptor;
    }
    (*(ptr_SurfaceTextureDescriptor())) = std::move(aRhs);
    mType = TSurfaceTextureDescriptor;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const SurfaceDescriptorAndroidHardwareBuffer& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorAndroidHardwareBuffer)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorAndroidHardwareBuffer()) SurfaceDescriptorAndroidHardwareBuffer;
    }
    (*(ptr_SurfaceDescriptorAndroidHardwareBuffer())) = aRhs;
    mType = TSurfaceDescriptorAndroidHardwareBuffer;
    return (*(this));
}

auto SurfaceDescriptor::operator=(SurfaceDescriptorAndroidHardwareBuffer&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorAndroidHardwareBuffer)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorAndroidHardwareBuffer()) SurfaceDescriptorAndroidHardwareBuffer;
    }
    (*(ptr_SurfaceDescriptorAndroidHardwareBuffer())) = std::move(aRhs);
    mType = TSurfaceDescriptorAndroidHardwareBuffer;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const EGLImageDescriptor& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TEGLImageDescriptor)) {
        new (mozilla::KnownNotNull, ptr_EGLImageDescriptor()) EGLImageDescriptor;
    }
    (*(ptr_EGLImageDescriptor())) = aRhs;
    mType = TEGLImageDescriptor;
    return (*(this));
}

auto SurfaceDescriptor::operator=(EGLImageDescriptor&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TEGLImageDescriptor)) {
        new (mozilla::KnownNotNull, ptr_EGLImageDescriptor()) EGLImageDescriptor;
    }
    (*(ptr_EGLImageDescriptor())) = std::move(aRhs);
    mType = TEGLImageDescriptor;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const SurfaceDescriptorMacIOSurface& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorMacIOSurface)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorMacIOSurface()) SurfaceDescriptorMacIOSurface;
    }
    (*(ptr_SurfaceDescriptorMacIOSurface())) = aRhs;
    mType = TSurfaceDescriptorMacIOSurface;
    return (*(this));
}

auto SurfaceDescriptor::operator=(SurfaceDescriptorMacIOSurface&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorMacIOSurface)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorMacIOSurface()) SurfaceDescriptorMacIOSurface;
    }
    (*(ptr_SurfaceDescriptorMacIOSurface())) = std::move(aRhs);
    mType = TSurfaceDescriptorMacIOSurface;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const SurfaceDescriptorSharedGLTexture& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorSharedGLTexture)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorSharedGLTexture()) SurfaceDescriptorSharedGLTexture;
    }
    (*(ptr_SurfaceDescriptorSharedGLTexture())) = aRhs;
    mType = TSurfaceDescriptorSharedGLTexture;
    return (*(this));
}

auto SurfaceDescriptor::operator=(SurfaceDescriptorSharedGLTexture&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorSharedGLTexture)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorSharedGLTexture()) SurfaceDescriptorSharedGLTexture;
    }
    (*(ptr_SurfaceDescriptorSharedGLTexture())) = std::move(aRhs);
    mType = TSurfaceDescriptorSharedGLTexture;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const SurfaceDescriptorGPUVideo& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorGPUVideo)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorGPUVideo()) SurfaceDescriptorGPUVideo;
    }
    (*(ptr_SurfaceDescriptorGPUVideo())) = aRhs;
    mType = TSurfaceDescriptorGPUVideo;
    return (*(this));
}

auto SurfaceDescriptor::operator=(SurfaceDescriptorGPUVideo&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorGPUVideo)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorGPUVideo()) SurfaceDescriptorGPUVideo;
    }
    (*(ptr_SurfaceDescriptorGPUVideo())) = std::move(aRhs);
    mType = TSurfaceDescriptorGPUVideo;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const SurfaceDescriptorRecorded& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorRecorded)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorRecorded()) SurfaceDescriptorRecorded;
    }
    (*(ptr_SurfaceDescriptorRecorded())) = aRhs;
    mType = TSurfaceDescriptorRecorded;
    return (*(this));
}

auto SurfaceDescriptor::operator=(SurfaceDescriptorRecorded&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorRecorded)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorRecorded()) SurfaceDescriptorRecorded;
    }
    (*(ptr_SurfaceDescriptorRecorded())) = std::move(aRhs);
    mType = TSurfaceDescriptorRecorded;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const null_t& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = aRhs;
    mType = Tnull_t;
    return (*(this));
}

auto SurfaceDescriptor::operator=(null_t&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = std::move(aRhs);
    mType = Tnull_t;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const SurfaceDescriptor& aRhs) -> SurfaceDescriptor&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TSurfaceDescriptorBuffer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorBuffer()) SurfaceDescriptorBuffer;
            }
            (*(ptr_SurfaceDescriptorBuffer())) = (aRhs).get_SurfaceDescriptorBuffer();
            break;
        }
    case TSurfaceDescriptorDIB:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDIB()) SurfaceDescriptorDIB;
            }
            (*(ptr_SurfaceDescriptorDIB())) = (aRhs).get_SurfaceDescriptorDIB();
            break;
        }
    case TSurfaceDescriptorD3D10:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorD3D10()) SurfaceDescriptorD3D10;
            }
            (*(ptr_SurfaceDescriptorD3D10())) = (aRhs).get_SurfaceDescriptorD3D10();
            break;
        }
    case TSurfaceDescriptorFileMapping:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorFileMapping()) SurfaceDescriptorFileMapping;
            }
            (*(ptr_SurfaceDescriptorFileMapping())) = (aRhs).get_SurfaceDescriptorFileMapping();
            break;
        }
    case TSurfaceDescriptorDXGIYCbCr:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDXGIYCbCr()) SurfaceDescriptorDXGIYCbCr;
            }
            (*(ptr_SurfaceDescriptorDXGIYCbCr())) = (aRhs).get_SurfaceDescriptorDXGIYCbCr();
            break;
        }
    case TSurfaceDescriptorX11:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorX11()) SurfaceDescriptorX11;
            }
            (*(ptr_SurfaceDescriptorX11())) = (aRhs).get_SurfaceDescriptorX11();
            break;
        }
    case TSurfaceDescriptorDMABuf:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDMABuf()) SurfaceDescriptorDMABuf;
            }
            (*(ptr_SurfaceDescriptorDMABuf())) = (aRhs).get_SurfaceDescriptorDMABuf();
            break;
        }
    case TSurfaceTextureDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceTextureDescriptor()) SurfaceTextureDescriptor;
            }
            (*(ptr_SurfaceTextureDescriptor())) = (aRhs).get_SurfaceTextureDescriptor();
            break;
        }
    case TSurfaceDescriptorAndroidHardwareBuffer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorAndroidHardwareBuffer()) SurfaceDescriptorAndroidHardwareBuffer;
            }
            (*(ptr_SurfaceDescriptorAndroidHardwareBuffer())) = (aRhs).get_SurfaceDescriptorAndroidHardwareBuffer();
            break;
        }
    case TEGLImageDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_EGLImageDescriptor()) EGLImageDescriptor;
            }
            (*(ptr_EGLImageDescriptor())) = (aRhs).get_EGLImageDescriptor();
            break;
        }
    case TSurfaceDescriptorMacIOSurface:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorMacIOSurface()) SurfaceDescriptorMacIOSurface;
            }
            (*(ptr_SurfaceDescriptorMacIOSurface())) = (aRhs).get_SurfaceDescriptorMacIOSurface();
            break;
        }
    case TSurfaceDescriptorSharedGLTexture:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorSharedGLTexture()) SurfaceDescriptorSharedGLTexture;
            }
            (*(ptr_SurfaceDescriptorSharedGLTexture())) = (aRhs).get_SurfaceDescriptorSharedGLTexture();
            break;
        }
    case TSurfaceDescriptorGPUVideo:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorGPUVideo()) SurfaceDescriptorGPUVideo;
            }
            (*(ptr_SurfaceDescriptorGPUVideo())) = (aRhs).get_SurfaceDescriptorGPUVideo();
            break;
        }
    case TSurfaceDescriptorRecorded:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorRecorded()) SurfaceDescriptorRecorded;
            }
            (*(ptr_SurfaceDescriptorRecorded())) = (aRhs).get_SurfaceDescriptorRecorded();
            break;
        }
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = (aRhs).get_null_t();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto SurfaceDescriptor::operator=(SurfaceDescriptor&& aRhs) -> SurfaceDescriptor&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TSurfaceDescriptorBuffer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorBuffer()) SurfaceDescriptorBuffer;
            }
            (*(ptr_SurfaceDescriptorBuffer())) = std::move((aRhs).get_SurfaceDescriptorBuffer());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorDIB:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDIB()) SurfaceDescriptorDIB;
            }
            (*(ptr_SurfaceDescriptorDIB())) = std::move((aRhs).get_SurfaceDescriptorDIB());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorD3D10:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorD3D10()) SurfaceDescriptorD3D10;
            }
            (*(ptr_SurfaceDescriptorD3D10())) = std::move((aRhs).get_SurfaceDescriptorD3D10());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorFileMapping:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorFileMapping()) SurfaceDescriptorFileMapping;
            }
            (*(ptr_SurfaceDescriptorFileMapping())) = std::move((aRhs).get_SurfaceDescriptorFileMapping());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorDXGIYCbCr:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDXGIYCbCr()) SurfaceDescriptorDXGIYCbCr;
            }
            (*(ptr_SurfaceDescriptorDXGIYCbCr())) = std::move((aRhs).get_SurfaceDescriptorDXGIYCbCr());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorX11:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorX11()) SurfaceDescriptorX11;
            }
            (*(ptr_SurfaceDescriptorX11())) = std::move((aRhs).get_SurfaceDescriptorX11());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorDMABuf:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorDMABuf()) SurfaceDescriptorDMABuf;
            }
            (*(ptr_SurfaceDescriptorDMABuf())) = std::move((aRhs).get_SurfaceDescriptorDMABuf());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceTextureDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceTextureDescriptor()) SurfaceTextureDescriptor;
            }
            (*(ptr_SurfaceTextureDescriptor())) = std::move((aRhs).get_SurfaceTextureDescriptor());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorAndroidHardwareBuffer:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorAndroidHardwareBuffer()) SurfaceDescriptorAndroidHardwareBuffer;
            }
            (*(ptr_SurfaceDescriptorAndroidHardwareBuffer())) = std::move((aRhs).get_SurfaceDescriptorAndroidHardwareBuffer());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TEGLImageDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_EGLImageDescriptor()) EGLImageDescriptor;
            }
            (*(ptr_EGLImageDescriptor())) = std::move((aRhs).get_EGLImageDescriptor());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorMacIOSurface:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorMacIOSurface()) SurfaceDescriptorMacIOSurface;
            }
            (*(ptr_SurfaceDescriptorMacIOSurface())) = std::move((aRhs).get_SurfaceDescriptorMacIOSurface());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorSharedGLTexture:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorSharedGLTexture()) SurfaceDescriptorSharedGLTexture;
            }
            (*(ptr_SurfaceDescriptorSharedGLTexture())) = std::move((aRhs).get_SurfaceDescriptorSharedGLTexture());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorGPUVideo:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorGPUVideo()) SurfaceDescriptorGPUVideo;
            }
            (*(ptr_SurfaceDescriptorGPUVideo())) = std::move((aRhs).get_SurfaceDescriptorGPUVideo());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorRecorded:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorRecorded()) SurfaceDescriptorRecorded;
            }
            (*(ptr_SurfaceDescriptorRecorded())) = std::move((aRhs).get_SurfaceDescriptorRecorded());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = std::move((aRhs).get_null_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

auto SurfaceDescriptor::operator==(const SurfaceDescriptorBuffer& aRhs) const -> bool
{
    return (get_SurfaceDescriptorBuffer()) == (aRhs);
}

auto SurfaceDescriptor::operator==(const SurfaceDescriptorDIB& aRhs) const -> bool
{
    return (get_SurfaceDescriptorDIB()) == (aRhs);
}

auto SurfaceDescriptor::operator==(const SurfaceDescriptorD3D10& aRhs) const -> bool
{
    return (get_SurfaceDescriptorD3D10()) == (aRhs);
}

auto SurfaceDescriptor::operator==(const SurfaceDescriptorFileMapping& aRhs) const -> bool
{
    return (get_SurfaceDescriptorFileMapping()) == (aRhs);
}

auto SurfaceDescriptor::operator==(const SurfaceDescriptorDXGIYCbCr& aRhs) const -> bool
{
    return (get_SurfaceDescriptorDXGIYCbCr()) == (aRhs);
}

auto SurfaceDescriptor::operator==(const SurfaceDescriptorX11& aRhs) const -> bool
{
    return (get_SurfaceDescriptorX11()) == (aRhs);
}

auto SurfaceDescriptor::operator==(const SurfaceDescriptorDMABuf& aRhs) const -> bool
{
    return (get_SurfaceDescriptorDMABuf()) == (aRhs);
}

auto SurfaceDescriptor::operator==(const SurfaceTextureDescriptor& aRhs) const -> bool
{
    return (get_SurfaceTextureDescriptor()) == (aRhs);
}

auto SurfaceDescriptor::operator==(const SurfaceDescriptorAndroidHardwareBuffer& aRhs) const -> bool
{
    return (get_SurfaceDescriptorAndroidHardwareBuffer()) == (aRhs);
}

auto SurfaceDescriptor::operator==(const EGLImageDescriptor& aRhs) const -> bool
{
    return (get_EGLImageDescriptor()) == (aRhs);
}

auto SurfaceDescriptor::operator==(const SurfaceDescriptorMacIOSurface& aRhs) const -> bool
{
    return (get_SurfaceDescriptorMacIOSurface()) == (aRhs);
}

auto SurfaceDescriptor::operator==(const SurfaceDescriptorSharedGLTexture& aRhs) const -> bool
{
    return (get_SurfaceDescriptorSharedGLTexture()) == (aRhs);
}

auto SurfaceDescriptor::operator==(const SurfaceDescriptorGPUVideo& aRhs) const -> bool
{
    return (get_SurfaceDescriptorGPUVideo()) == (aRhs);
}

auto SurfaceDescriptor::operator==(const SurfaceDescriptorRecorded& aRhs) const -> bool
{
    return (get_SurfaceDescriptorRecorded()) == (aRhs);
}

auto SurfaceDescriptor::operator==(const null_t& aRhs) const -> bool
{
    return (get_null_t()) == (aRhs);
}

auto SurfaceDescriptor::operator==(const SurfaceDescriptor& aRhs) const -> bool
{
    if ((type()) != ((aRhs).type())) {
        return false;
    }

    switch (type()) {
    case TSurfaceDescriptorBuffer:
        {
            return (get_SurfaceDescriptorBuffer()) == ((aRhs).get_SurfaceDescriptorBuffer());
        }
    case TSurfaceDescriptorDIB:
        {
            return (get_SurfaceDescriptorDIB()) == ((aRhs).get_SurfaceDescriptorDIB());
        }
    case TSurfaceDescriptorD3D10:
        {
            return (get_SurfaceDescriptorD3D10()) == ((aRhs).get_SurfaceDescriptorD3D10());
        }
    case TSurfaceDescriptorFileMapping:
        {
            return (get_SurfaceDescriptorFileMapping()) == ((aRhs).get_SurfaceDescriptorFileMapping());
        }
    case TSurfaceDescriptorDXGIYCbCr:
        {
            return (get_SurfaceDescriptorDXGIYCbCr()) == ((aRhs).get_SurfaceDescriptorDXGIYCbCr());
        }
    case TSurfaceDescriptorX11:
        {
            return (get_SurfaceDescriptorX11()) == ((aRhs).get_SurfaceDescriptorX11());
        }
    case TSurfaceDescriptorDMABuf:
        {
            return (get_SurfaceDescriptorDMABuf()) == ((aRhs).get_SurfaceDescriptorDMABuf());
        }
    case TSurfaceTextureDescriptor:
        {
            return (get_SurfaceTextureDescriptor()) == ((aRhs).get_SurfaceTextureDescriptor());
        }
    case TSurfaceDescriptorAndroidHardwareBuffer:
        {
            return (get_SurfaceDescriptorAndroidHardwareBuffer()) == ((aRhs).get_SurfaceDescriptorAndroidHardwareBuffer());
        }
    case TEGLImageDescriptor:
        {
            return (get_EGLImageDescriptor()) == ((aRhs).get_EGLImageDescriptor());
        }
    case TSurfaceDescriptorMacIOSurface:
        {
            return (get_SurfaceDescriptorMacIOSurface()) == ((aRhs).get_SurfaceDescriptorMacIOSurface());
        }
    case TSurfaceDescriptorSharedGLTexture:
        {
            return (get_SurfaceDescriptorSharedGLTexture()) == ((aRhs).get_SurfaceDescriptorSharedGLTexture());
        }
    case TSurfaceDescriptorGPUVideo:
        {
            return (get_SurfaceDescriptorGPUVideo()) == ((aRhs).get_SurfaceDescriptorGPUVideo());
        }
    case TSurfaceDescriptorRecorded:
        {
            return (get_SurfaceDescriptorRecorded()) == ((aRhs).get_SurfaceDescriptorRecorded());
        }
    case Tnull_t:
        {
            return (get_null_t()) == ((aRhs).get_null_t());
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return false;
        }
    }
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::SurfaceDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::SurfaceDescriptor union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'SurfaceDescriptor'
    (aMsg)->WriteSentinel(1018496745);

    switch (type) {
    case union__::TSurfaceDescriptorBuffer:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorBuffer());
            // Sentinel = 'TSurfaceDescriptorBuffer'
            (aMsg)->WriteSentinel(1978075543);
            return;
        }
    case union__::TSurfaceDescriptorDIB:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorDIB());
            // Sentinel = 'TSurfaceDescriptorDIB'
            (aMsg)->WriteSentinel(1509230604);
            return;
        }
    case union__::TSurfaceDescriptorD3D10:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorD3D10());
            // Sentinel = 'TSurfaceDescriptorD3D10'
            (aMsg)->WriteSentinel(1783433305);
            return;
        }
    case union__::TSurfaceDescriptorFileMapping:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorFileMapping());
            // Sentinel = 'TSurfaceDescriptorFileMapping'
            (aMsg)->WriteSentinel(2870741897);
            return;
        }
    case union__::TSurfaceDescriptorDXGIYCbCr:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorDXGIYCbCr());
            // Sentinel = 'TSurfaceDescriptorDXGIYCbCr'
            (aMsg)->WriteSentinel(2440366620);
            return;
        }
    case union__::TSurfaceDescriptorX11:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorX11());
            // Sentinel = 'TSurfaceDescriptorX11'
            (aMsg)->WriteSentinel(1508902903);
            return;
        }
    case union__::TSurfaceDescriptorDMABuf:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorDMABuf());
            // Sentinel = 'TSurfaceDescriptorDMABuf'
            (aMsg)->WriteSentinel(1950288172);
            return;
        }
    case union__::TSurfaceTextureDescriptor:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceTextureDescriptor());
            // Sentinel = 'TSurfaceTextureDescriptor'
            (aMsg)->WriteSentinel(2169768494);
            return;
        }
    case union__::TSurfaceDescriptorAndroidHardwareBuffer:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorAndroidHardwareBuffer());
            // Sentinel = 'TSurfaceDescriptorAndroidHardwareBuffer'
            (aMsg)->WriteSentinel(882118534);
            return;
        }
    case union__::TEGLImageDescriptor:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_EGLImageDescriptor());
            // Sentinel = 'TEGLImageDescriptor'
            (aMsg)->WriteSentinel(1117521711);
            return;
        }
    case union__::TSurfaceDescriptorMacIOSurface:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorMacIOSurface());
            // Sentinel = 'TSurfaceDescriptorMacIOSurface'
            (aMsg)->WriteSentinel(3041594287);
            return;
        }
    case union__::TSurfaceDescriptorSharedGLTexture:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorSharedGLTexture());
            // Sentinel = 'TSurfaceDescriptorSharedGLTexture'
            (aMsg)->WriteSentinel(3701148952);
            return;
        }
    case union__::TSurfaceDescriptorGPUVideo:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorGPUVideo());
            // Sentinel = 'TSurfaceDescriptorGPUVideo'
            (aMsg)->WriteSentinel(2292386336);
            return;
        }
    case union__::TSurfaceDescriptorRecorded:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorRecorded());
            // Sentinel = 'TSurfaceDescriptorRecorded'
            (aMsg)->WriteSentinel(2323122789);
            return;
        }
    case union__::Tnull_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_null_t());
            // Sentinel = 'Tnull_t'
            (aMsg)->WriteSentinel(190186211);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::SurfaceDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::SurfaceDescriptor union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union SurfaceDescriptor");
        return false;
    }
    // Sentinel = 'SurfaceDescriptor'
    if ((!((aMsg)->ReadSentinel(aIter, 1018496745)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union SurfaceDescriptor");
        return false;
    }

    switch (type) {
    case union__::TSurfaceDescriptorBuffer:
        {
            mozilla::layers::SurfaceDescriptorBuffer tmp = mozilla::layers::SurfaceDescriptorBuffer();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorBuffer())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorBuffer of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorBuffer'
            if ((!((aMsg)->ReadSentinel(aIter, 1978075543)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorBuffer of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TSurfaceDescriptorDIB:
        {
            mozilla::layers::SurfaceDescriptorDIB tmp = mozilla::layers::SurfaceDescriptorDIB();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorDIB())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorDIB of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorDIB'
            if ((!((aMsg)->ReadSentinel(aIter, 1509230604)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorDIB of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TSurfaceDescriptorD3D10:
        {
            mozilla::layers::SurfaceDescriptorD3D10 tmp = mozilla::layers::SurfaceDescriptorD3D10();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorD3D10())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorD3D10 of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorD3D10'
            if ((!((aMsg)->ReadSentinel(aIter, 1783433305)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorD3D10 of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TSurfaceDescriptorFileMapping:
        {
            mozilla::layers::SurfaceDescriptorFileMapping tmp = mozilla::layers::SurfaceDescriptorFileMapping();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorFileMapping())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorFileMapping of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorFileMapping'
            if ((!((aMsg)->ReadSentinel(aIter, 2870741897)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorFileMapping of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TSurfaceDescriptorDXGIYCbCr:
        {
            mozilla::layers::SurfaceDescriptorDXGIYCbCr tmp = mozilla::layers::SurfaceDescriptorDXGIYCbCr();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorDXGIYCbCr())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorDXGIYCbCr of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorDXGIYCbCr'
            if ((!((aMsg)->ReadSentinel(aIter, 2440366620)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorDXGIYCbCr of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TSurfaceDescriptorX11:
        {
            mozilla::layers::SurfaceDescriptorX11 tmp = mozilla::layers::SurfaceDescriptorX11();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorX11())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorX11 of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorX11'
            if ((!((aMsg)->ReadSentinel(aIter, 1508902903)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorX11 of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TSurfaceDescriptorDMABuf:
        {
            mozilla::layers::SurfaceDescriptorDMABuf tmp = mozilla::layers::SurfaceDescriptorDMABuf();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorDMABuf())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorDMABuf of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorDMABuf'
            if ((!((aMsg)->ReadSentinel(aIter, 1950288172)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorDMABuf of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TSurfaceTextureDescriptor:
        {
            mozilla::layers::SurfaceTextureDescriptor tmp = mozilla::layers::SurfaceTextureDescriptor();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceTextureDescriptor())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceTextureDescriptor of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceTextureDescriptor'
            if ((!((aMsg)->ReadSentinel(aIter, 2169768494)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceTextureDescriptor of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TSurfaceDescriptorAndroidHardwareBuffer:
        {
            mozilla::layers::SurfaceDescriptorAndroidHardwareBuffer tmp = mozilla::layers::SurfaceDescriptorAndroidHardwareBuffer();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorAndroidHardwareBuffer())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorAndroidHardwareBuffer of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorAndroidHardwareBuffer'
            if ((!((aMsg)->ReadSentinel(aIter, 882118534)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorAndroidHardwareBuffer of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TEGLImageDescriptor:
        {
            mozilla::layers::EGLImageDescriptor tmp = mozilla::layers::EGLImageDescriptor();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_EGLImageDescriptor())))))) {
                aActor->FatalError("Error deserializing variant TEGLImageDescriptor of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TEGLImageDescriptor'
            if ((!((aMsg)->ReadSentinel(aIter, 1117521711)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TEGLImageDescriptor of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TSurfaceDescriptorMacIOSurface:
        {
            mozilla::layers::SurfaceDescriptorMacIOSurface tmp = mozilla::layers::SurfaceDescriptorMacIOSurface();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorMacIOSurface())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorMacIOSurface of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorMacIOSurface'
            if ((!((aMsg)->ReadSentinel(aIter, 3041594287)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorMacIOSurface of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TSurfaceDescriptorSharedGLTexture:
        {
            mozilla::layers::SurfaceDescriptorSharedGLTexture tmp = mozilla::layers::SurfaceDescriptorSharedGLTexture();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorSharedGLTexture())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorSharedGLTexture of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorSharedGLTexture'
            if ((!((aMsg)->ReadSentinel(aIter, 3701148952)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorSharedGLTexture of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TSurfaceDescriptorGPUVideo:
        {
            mozilla::layers::SurfaceDescriptorGPUVideo tmp = mozilla::layers::SurfaceDescriptorGPUVideo();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorGPUVideo())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorGPUVideo of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorGPUVideo'
            if ((!((aMsg)->ReadSentinel(aIter, 2292386336)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorGPUVideo of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TSurfaceDescriptorRecorded:
        {
            mozilla::layers::SurfaceDescriptorRecorded tmp = mozilla::layers::SurfaceDescriptorRecorded();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorRecorded())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorRecorded of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorRecorded'
            if ((!((aMsg)->ReadSentinel(aIter, 2323122789)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorRecorded of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::Tnull_t:
        {
            mozilla::null_t tmp = mozilla::null_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_null_t())))))) {
                aActor->FatalError("Error deserializing variant Tnull_t of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'Tnull_t'
            if ((!((aMsg)->ReadSentinel(aIter, 190186211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnull_t of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
