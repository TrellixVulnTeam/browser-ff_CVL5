//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PFilePickerParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/FilePickerParent.h"
#include "mozilla/ipc/IPCCore.h"

#include "mozilla/dom/PBrowserParent.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PFilePickerParent::PFilePickerParent() :
    mozilla::ipc::IProtocol(PFilePickerMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PFilePickerParent);
}

PFilePickerParent::~PFilePickerParent()
{
    MOZ_COUNT_DTOR(PFilePickerParent);
}

auto PFilePickerParent::Manager() const -> PBrowserParent*
{
    return static_cast<PBrowserParent*>(IProtocol::Manager());
}

auto PFilePickerParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PFilePickerParent::Send__delete__(
        PFilePickerParent* actor,
        const MaybeInputData& data,
        const int16_t& result) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PFilePicker::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, actor, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);
    WriteIPDLParam(msg__, actor, result);
    // Sentinel = 'result'
    (msg__)->WriteSentinel(153223840);



    if (mozilla::ipc::LoggingEnabledFor("PFilePickerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PFilePickerParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PFilePicker::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PFilePickerMsgStart, actor);
    return sendok__;
}

auto PFilePickerParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PFilePickerParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PFilePickerParent::OnMessageReceived(const Message& msg__) -> PFilePickerParent::Result
{
    switch (msg__.type()) {
    case PFilePicker::Msg_Open__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PFilePickerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PFilePickerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PFilePicker::Msg_Open", OTHER);

            PickleIterator iter__{msg__};
            int16_t selectedType{};
            bool addToRecentDocs{};
            nsString defaultFile{};
            nsString defaultExtension{};
            nsTArray<nsString> filters{};
            nsTArray<nsString> filterNames{};
            nsTArray<nsString> rawFilters{};
            nsString displayDirectory{};
            nsString displaySpecialDirectory{};
            nsString okButtonLabel{};
            int16_t capture{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selectedType)))))) {
                FatalError("Error deserializing 'int16_t'");
                return MsgValueError;
            }
            // Sentinel = 'selectedType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 539100396)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int16_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(addToRecentDocs)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'addToRecentDocs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 772343255)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(defaultFile)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'defaultFile'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 443941990)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(defaultExtension)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'defaultExtension'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 932447907)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(filters)))))) {
                FatalError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            // Sentinel = 'filters'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 196674298)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(filterNames)))))) {
                FatalError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            // Sentinel = 'filterNames'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 451937403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(rawFilters)))))) {
                FatalError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            // Sentinel = 'rawFilters'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 376505380)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(displayDirectory)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'displayDirectory'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 938935980)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(displaySpecialDirectory)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'displaySpecialDirectory'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1884555629)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(okButtonLabel)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'okButtonLabel'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 617153847)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(capture)))))) {
                FatalError("Error deserializing 'int16_t'");
                return MsgValueError;
            }
            // Sentinel = 'capture'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 195691253)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int16_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<FilePickerParent*>(this))->RecvOpen(std::move(selectedType), std::move(addToRecentDocs), std::move(defaultFile), std::move(defaultExtension), std::move(filters), std::move(filterNames), std::move(rawFilters), std::move(displayDirectory), std::move(displaySpecialDirectory), std::move(okButtonLabel), std::move(capture))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PFilePicker::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PFilePickerParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PFilePickerParent::Result
{
    return MsgNotKnown;
}

auto PFilePickerParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PFilePickerParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PFilePickerParent::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PFilePickerParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PFilePickerParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PFilePicker", PFilePickerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PFilePickerParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
