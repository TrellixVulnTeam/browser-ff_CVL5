//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gmp/PGMPChild.h"
#include "GMPChild.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/gmp/PGMPContentChild.h"
#include "mozilla/gmp/PGMPTimerChild.h"
#include "mozilla/gmp/PGMPStorageChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gmp {


auto PGMPChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PGMPChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PGMPChild::EnteredCxxStack() -> void
{
}

auto PGMPChild::ExitedCxxStack() -> void
{
}

auto PGMPChild::EnteredCall() -> void
{
}

auto PGMPChild::ExitedCall() -> void
{
}

MOZ_IMPLICIT PGMPChild::PGMPChild() :
    mozilla::ipc::IToplevelProtocol("PGMPChild", PGMPMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PGMPChild);
}

PGMPChild::~PGMPChild()
{
    MOZ_COUNT_DTOR(PGMPChild);
}

auto PGMPChild::ManagedPGMPTimerChild(nsTArray<PGMPTimerChild*>& aArr) const -> void
{
    mManagedPGMPTimerChild.ToArray(aArr);
}

auto PGMPChild::ManagedPGMPTimerChild() const -> const ManagedContainer<PGMPTimerChild>&
{
    return mManagedPGMPTimerChild;
}

auto PGMPChild::ManagedPGMPStorageChild(nsTArray<PGMPStorageChild*>& aArr) const -> void
{
    mManagedPGMPStorageChild.ToArray(aArr);
}

auto PGMPChild::ManagedPGMPStorageChild() const -> const ManagedContainer<PGMPStorageChild>&
{
    return mManagedPGMPStorageChild;
}

auto PGMPChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPGMPTimerChild.Count();
    total += mManagedPGMPStorageChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPGMPTimerChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPGMPStorageChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PGMPChild::OpenPGMPTimerEndpoint(PGMPTimerChild* aActor) -> ManagedEndpoint<PGMPTimerParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PGMPTimerChild actor");
        return ManagedEndpoint<PGMPTimerParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPGMPTimerChild.PutEntry(aActor);

    return ManagedEndpoint<PGMPTimerParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PGMPChild::BindPGMPTimerEndpoint(
        ManagedEndpoint<PGMPTimerChild> aEndpoint,
        PGMPTimerChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PGMPTimerChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPGMPTimerChild.PutEntry(aActor);

    return true;
}

auto PGMPChild::OpenPGMPStorageEndpoint(PGMPStorageChild* aActor) -> ManagedEndpoint<PGMPStorageParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PGMPStorageChild actor");
        return ManagedEndpoint<PGMPStorageParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPGMPStorageChild.PutEntry(aActor);

    return ManagedEndpoint<PGMPStorageParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PGMPChild::BindPGMPStorageEndpoint(
        ManagedEndpoint<PGMPStorageChild> aEndpoint,
        PGMPStorageChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PGMPStorageChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPGMPStorageChild.PutEntry(aActor);

    return true;
}

auto PGMPChild::SendInitCrashReporter(const NativeThreadId& threadId) -> bool
{
    IPC::Message* msg__ = PGMP::Msg_InitCrashReporter(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, threadId);
    // Sentinel = 'threadId'
    (msg__)->WriteSentinel(248185638);




    if (mozilla::ipc::LoggingEnabledFor("PGMPChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMP::Msg_InitCrashReporter", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPChild::SendPGMPTimerConstructor() -> PGMPTimerChild*
{
    PGMPTimerChild* actor = (static_cast<GMPChild*>(this))->AllocPGMPTimerChild();
    return SendPGMPTimerConstructor(actor);
}

auto PGMPChild::SendPGMPTimerConstructor(PGMPTimerChild* actor) -> PGMPTimerChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PGMPTimerChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPGMPTimerChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PGMP::Msg_PGMPTimerConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PGMPChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMP::Msg_PGMPTimerConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PGMPTimerChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PGMPTimerMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PGMPChild::SendPGMPStorageConstructor() -> PGMPStorageChild*
{
    PGMPStorageChild* actor = (static_cast<GMPChild*>(this))->AllocPGMPStorageChild();
    return SendPGMPStorageConstructor(actor);
}

auto PGMPChild::SendPGMPStorageConstructor(PGMPStorageChild* actor) -> PGMPStorageChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PGMPStorageChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPGMPStorageChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PGMP::Msg_PGMPStorageConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PGMPChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMP::Msg_PGMPStorageConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PGMPStorageChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PGMPStorageMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PGMPChild::SendPGMPContentChildDestroyed() -> bool
{
    IPC::Message* msg__ = PGMP::Msg_PGMPContentChildDestroyed(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PGMPChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMP::Msg_PGMPContentChildDestroyed", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PGMPTimerMsgStart:
{
            PGMPTimerChild* actor = static_cast<PGMPTimerChild*>(aListener);
            auto& container = mManagedPGMPTimerChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PGMPStorageMsgStart:
{
            PGMPStorageChild* actor = static_cast<PGMPStorageChild*>(aListener);
            auto& container = mManagedPGMPStorageChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PGMPChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PGMPTimerMsgStart:
        static_cast<GMPChild*>(this)->DeallocPGMPTimerChild(static_cast<PGMPTimerChild*>(aListener));
        return;
    case PGMPStorageMsgStart:
        static_cast<GMPChild*>(this)->DeallocPGMPStorageChild(static_cast<PGMPStorageChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PGMPChild::OnMessageReceived(const Message& msg__) -> PGMPChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PGMPChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PGMP::Reply_PGMPTimerConstructor__ID:
        {
            return MsgProcessed;
        }
    case PGMP::Reply_PGMPStorageConstructor__ID:
        {
            return MsgProcessed;
        }
    case PGMP::Msg_CrashPluginNow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMP::Msg_CrashPluginNow", OTHER);

            if ((!((static_cast<GMPChild*>(this))->RecvCrashPluginNow()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMP::Msg_ProvideStorageId__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMP::Msg_ProvideStorageId", OTHER);

            PickleIterator iter__{msg__};
            nsCString storageId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(storageId)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'storageId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319751075)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GMPChild*>(this))->RecvProvideStorageId(std::move(storageId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMP::Msg_PreloadLibs__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMP::Msg_PreloadLibs", OTHER);

            PickleIterator iter__{msg__};
            nsCString libs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(libs)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'libs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 69599659)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GMPChild*>(this))->RecvPreloadLibs(std::move(libs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMP::Msg_CloseActive__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMP::Msg_CloseActive", OTHER);

            if ((!((static_cast<GMPChild*>(this))->RecvCloseActive()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMP::Msg_InitGMPContentChild__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMP::Msg_InitGMPContentChild", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::gmp::PGMPContentChild> endpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(endpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::gmp::PGMPContentChild>'");
                return MsgValueError;
            }
            // Sentinel = 'endpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251724642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::gmp::PGMPContentChild>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GMPChild*>(this))->RecvInitGMPContentChild(std::move(endpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PGMPChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PGMPChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    return MsgNotKnown;
}

auto PGMPChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PGMPChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnCallReceived(msg__, reply__);
    }

    switch (msg__.type()) {
    case PGMP::Msg_StartPlugin__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMP::Msg_StartPlugin", OTHER);

            PickleIterator iter__{msg__};
            nsString adapter{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(adapter)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'adapter'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 188941026)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            if ((!((static_cast<GMPChild*>(this))->AnswerStartPlugin(std::move(adapter))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PGMP::Reply_StartPlugin(id__);


            if (mozilla::ipc::LoggingEnabledFor("PGMPChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PGMPChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PGMPChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PGMPChild::ProcessNativeEventsInInterruptCall() -> void
{
#ifdef OS_WIN
    GetIPCChannel()->ProcessNativeEventsInInterruptCall();
#else
    FatalError("This method is Windows-only");
#endif
}

auto PGMPChild::ClearSubtree() -> void
{
    for (auto it = mManagedPGMPTimerChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPGMPTimerChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPGMPTimerChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPGMPTimerChild.Clear();

    for (auto it = mManagedPGMPStorageChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPGMPStorageChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPGMPStorageChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPGMPStorageChild.Clear();

}



} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gmp::PGMPChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gmp::PGMPChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PGMP", PGMPMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gmp::PGMPChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
