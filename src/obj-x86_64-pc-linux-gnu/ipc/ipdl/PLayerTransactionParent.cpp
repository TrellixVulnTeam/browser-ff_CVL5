//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PLayerTransactionParent.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ipc/IPCCore.h"
#include "mozilla/layers/APZTestData.h"
#include "mozilla/layers/CompositorTypes.h"
#include "mozilla/layers/LayerTransactionParent.h"
#include "mozilla/layers/LayersMessageUtils.h"

#include "mozilla/layers/PCompositorBridgeParent.h"
#include "mozilla/layers/PTextureParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {


MOZ_IMPLICIT PLayerTransactionParent::PLayerTransactionParent() :
    mozilla::ipc::IProtocol(PLayerTransactionMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PLayerTransactionParent);
}

PLayerTransactionParent::~PLayerTransactionParent()
{
    MOZ_COUNT_DTOR(PLayerTransactionParent);
}

auto PLayerTransactionParent::Manager() const -> PCompositorBridgeParent*
{
    return static_cast<PCompositorBridgeParent*>(IProtocol::Manager());
}

auto PLayerTransactionParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PLayerTransactionParent::Send__delete__(PLayerTransactionParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PLayerTransaction::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PLayerTransactionParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PLayerTransaction::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PLayerTransactionMsgStart, actor);
    return sendok__;
}

auto PLayerTransactionParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PLayerTransactionParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PLayerTransactionParent::OnMessageReceived(const Message& msg__) -> PLayerTransactionParent::Result
{
    switch (msg__.type()) {
    case PLayerTransaction::Msg_Update__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_Update", OTHER);

            PickleIterator iter__{msg__};
            TransactionInfo txn{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(txn)))))) {
                FatalError("Error deserializing 'TransactionInfo'");
                return MsgValueError;
            }
            // Sentinel = 'txn'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45941083)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TransactionInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvUpdate(std::move(txn))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PLayerTransaction::Msg_PaintTime__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_PaintTime", OTHER);

            PickleIterator iter__{msg__};
            TransactionId id{};
            TimeDuration paintTime{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'TransactionId'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TransactionId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(paintTime)))))) {
                FatalError("Error deserializing 'TimeDuration'");
                return MsgValueError;
            }
            // Sentinel = 'paintTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 310510508)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeDuration'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvPaintTime(std::move(id), std::move(paintTime))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PLayerTransaction::Msg_SetLayersObserverEpoch__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_SetLayersObserverEpoch", OTHER);

            PickleIterator iter__{msg__};
            LayersObserverEpoch aChildEpoch{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aChildEpoch)))))) {
                FatalError("Error deserializing 'LayersObserverEpoch'");
                return MsgValueError;
            }
            // Sentinel = 'aChildEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 413402165)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayersObserverEpoch'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvSetLayersObserverEpoch(std::move(aChildEpoch))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PLayerTransaction::Msg_NewCompositable__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_NewCompositable", OTHER);

            PickleIterator iter__{msg__};
            CompositableHandle handle{};
            TextureInfo info{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle)))))) {
                FatalError("Error deserializing 'CompositableHandle'");
                return MsgValueError;
            }
            // Sentinel = 'handle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 142344813)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CompositableHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(info)))))) {
                FatalError("Error deserializing 'TextureInfo'");
                return MsgValueError;
            }
            // Sentinel = 'info'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70058413)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TextureInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvNewCompositable(std::move(handle), std::move(info))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PLayerTransaction::Msg_ReleaseLayer__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_ReleaseLayer", OTHER);

            PickleIterator iter__{msg__};
            LayerHandle layer{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(layer)))))) {
                FatalError("Error deserializing 'LayerHandle'");
                return MsgValueError;
            }
            // Sentinel = 'layer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 105644574)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayerHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvReleaseLayer(std::move(layer))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PLayerTransaction::Msg_ReleaseCompositable__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_ReleaseCompositable", OTHER);

            PickleIterator iter__{msg__};
            CompositableHandle compositable{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(compositable)))))) {
                FatalError("Error deserializing 'CompositableHandle'");
                return MsgValueError;
            }
            // Sentinel = 'compositable'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 551879939)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CompositableHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvReleaseCompositable(std::move(compositable))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PLayerTransaction::Msg_SetConfirmedTargetAPZC__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_SetConfirmedTargetAPZC", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aInputBlockId{};
            nsTArray<ScrollableLayerGuid> aTargets{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTargets)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid[]'");
                return MsgValueError;
            }
            // Sentinel = 'aTargets'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235012924)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvSetConfirmedTargetAPZC(std::move(aInputBlockId), std::move(aTargets))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PLayerTransaction::Msg_FlushApzRepaints__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_FlushApzRepaints", OTHER);

            if ((!((static_cast<LayerTransactionParent*>(this))->RecvFlushApzRepaints()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PLayerTransaction::Msg_ClearCachedResources__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_ClearCachedResources", OTHER);

            if ((!((static_cast<LayerTransactionParent*>(this))->RecvClearCachedResources()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PLayerTransaction::Msg_ScheduleComposite__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_ScheduleComposite", OTHER);

            if ((!((static_cast<LayerTransactionParent*>(this))->RecvScheduleComposite()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PLayerTransaction::Msg_RecordPaintTimes__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_RecordPaintTimes", OTHER);

            PickleIterator iter__{msg__};
            PaintTiming timing{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(timing)))))) {
                FatalError("Error deserializing 'PaintTiming'");
                return MsgValueError;
            }
            // Sentinel = 'timing'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 150798985)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PaintTiming'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvRecordPaintTimes(std::move(timing))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PLayerTransaction::Msg_Shutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_Shutdown", OTHER);

            if ((!((static_cast<LayerTransactionParent*>(this))->RecvShutdown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PLayerTransaction::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PLayerTransactionParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PLayerTransactionParent::Result
{
    switch (msg__.type()) {
    case PLayerTransaction::Msg_SetTestSampleTime__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_SetTestSampleTime", OTHER);

            PickleIterator iter__{msg__};
            TimeStamp sampleTime{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sampleTime)))))) {
                FatalError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            // Sentinel = 'sampleTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 380896274)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvSetTestSampleTime(std::move(sampleTime))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PLayerTransaction::Reply_SetTestSampleTime(id__);


            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PLayerTransaction::Msg_LeaveTestMode__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_LeaveTestMode", OTHER);

            int32_t id__ = Id();
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvLeaveTestMode()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PLayerTransaction::Reply_LeaveTestMode(id__);


            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PLayerTransaction::Msg_GetAnimationValue__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_GetAnimationValue", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aCompositorAnimationId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCompositorAnimationId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCompositorAnimationId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1714358494)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            OMTAValue value{};
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvGetAnimationValue(std::move(aCompositorAnimationId), (&(value)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PLayerTransaction::Reply_GetAnimationValue(id__);

            WriteIPDLParam(reply__, this, value);
            // Sentinel = 'value'
            (reply__)->WriteSentinel(107610654);

            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PLayerTransaction::Msg_GetTransform__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_GetTransform", OTHER);

            PickleIterator iter__{msg__};
            LayerHandle layer{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(layer)))))) {
                FatalError("Error deserializing 'LayerHandle'");
                return MsgValueError;
            }
            // Sentinel = 'layer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 105644574)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayerHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            mozilla::Maybe<Matrix4x4> transform{};
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvGetTransform(std::move(layer), (&(transform)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PLayerTransaction::Reply_GetTransform(id__);

            WriteIPDLParam(reply__, this, transform);
            // Sentinel = 'transform'
            (reply__)->WriteSentinel(324862941);

            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PLayerTransaction::Msg_SetAsyncScrollOffset__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_SetAsyncScrollOffset", OTHER);

            PickleIterator iter__{msg__};
            ViewID id{};
            float x{};
            float y{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(x)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'x'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 7929977)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(y)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'y'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 7995514)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvSetAsyncScrollOffset(std::move(id), std::move(x), std::move(y))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PLayerTransaction::Reply_SetAsyncScrollOffset(id__);


            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PLayerTransaction::Msg_SetAsyncZoom__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_SetAsyncZoom", OTHER);

            PickleIterator iter__{msg__};
            ViewID id{};
            float zoom{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(zoom)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'zoom'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 75760070)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvSetAsyncZoom(std::move(id), std::move(zoom))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PLayerTransaction::Reply_SetAsyncZoom(id__);


            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PLayerTransaction::Msg_GetAPZTestData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_GetAPZTestData", OTHER);

            int32_t id__ = Id();
            APZTestData data{};
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvGetAPZTestData((&(data)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PLayerTransaction::Reply_GetAPZTestData(id__);

            WriteIPDLParam(reply__, this, data);
            // Sentinel = 'data'
            (reply__)->WriteSentinel(67109275);

            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PLayerTransaction::Msg_GetFrameUniformity__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_GetFrameUniformity", OTHER);

            int32_t id__ = Id();
            FrameUniformityData data{};
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvGetFrameUniformity((&(data)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PLayerTransaction::Reply_GetFrameUniformity(id__);

            WriteIPDLParam(reply__, this, data);
            // Sentinel = 'data'
            (reply__)->WriteSentinel(67109275);

            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PLayerTransaction::Msg_RequestProperty__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_RequestProperty", OTHER);

            PickleIterator iter__{msg__};
            nsString property{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(property)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'property'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 263914374)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            float value{};
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvRequestProperty(std::move(property), (&(value)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PLayerTransaction::Reply_RequestProperty(id__);

            WriteIPDLParam(reply__, this, value);
            // Sentinel = 'value'
            (reply__)->WriteSentinel(107610654);

            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PLayerTransaction::Msg_GetTextureFactoryIdentifier__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_GetTextureFactoryIdentifier", OTHER);

            int32_t id__ = Id();
            TextureFactoryIdentifier aIdentifier{};
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvGetTextureFactoryIdentifier((&(aIdentifier)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PLayerTransaction::Reply_GetTextureFactoryIdentifier(id__);

            WriteIPDLParam(reply__, this, aIdentifier);
            // Sentinel = 'aIdentifier'
            (reply__)->WriteSentinel(428999781);

            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PLayerTransaction::Msg_ShutdownSync__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PLayerTransaction::Msg_ShutdownSync", OTHER);

            int32_t id__ = Id();
            if ((!((static_cast<LayerTransactionParent*>(this))->RecvShutdownSync()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PLayerTransaction::Reply_ShutdownSync(id__);


            if (mozilla::ipc::LoggingEnabledFor("PLayerTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PLayerTransactionParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PLayerTransactionParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PLayerTransactionParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PLayerTransactionParent::ClearSubtree() -> void
{
}



} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PLayerTransactionParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layers::PLayerTransactionParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PLayerTransaction", PLayerTransactionMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layers::PLayerTransactionParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
