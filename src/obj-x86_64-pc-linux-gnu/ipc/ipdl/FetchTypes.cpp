//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/FetchIPCTypes.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"
#include "mozilla/dom/FetchTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct HeadersEntry|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::HeadersEntry>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).value());
    // Sentinel = 'value'
    (aMsg)->WriteSentinel(107610654);
}

auto IPDLParamTraits<mozilla::dom::HeadersEntry>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsCString) member of 'HeadersEntry'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsCString) member of 'HeadersEntry'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->value())))))) {
        aActor->FatalError("Error deserializing 'value' (nsCString) member of 'HeadersEntry'");
        return false;
    }
    // Sentinel = 'value'
    if ((!((aMsg)->ReadSentinel(aIter, 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'value' (nsCString) member of 'HeadersEntry'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ParentToParentStream|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ParentToParentStream>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).uuid());
    // Sentinel = 'uuid'
    (aMsg)->WriteSentinel(74252728);
}

auto IPDLParamTraits<mozilla::dom::ParentToParentStream>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uuid())))))) {
        aActor->FatalError("Error deserializing 'uuid' (nsID) member of 'ParentToParentStream'");
        return false;
    }
    // Sentinel = 'uuid'
    if ((!((aMsg)->ReadSentinel(aIter, 74252728)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uuid' (nsID) member of 'ParentToParentStream'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ParentToChildStream|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ParentToChildStream>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).actorParent(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).actorParent());
        // Sentinel = 'actor'
        (aMsg)->WriteSentinel(102892058);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).actorChild(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).actorChild());
        // Sentinel = 'actor'
        (aMsg)->WriteSentinel(102892058);
    }
}

auto IPDLParamTraits<mozilla::dom::ParentToChildStream>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->actorParent())))))) {
            aActor->FatalError("Error deserializing 'actorParent' (PRemoteLazyInputStream) member of 'ParentToChildStream'");
            return false;
        }
        if ((!((*((&((aVar)->actorParent()))))))) {
            aActor->FatalError("Error deserializing 'actorParent' (PRemoteLazyInputStream) member of 'ParentToChildStream'");
            return false;
        }
        // Sentinel = 'actor'
        if ((!((aMsg)->ReadSentinel(aIter, 102892058)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'actorParent' (PRemoteLazyInputStream) member of 'ParentToChildStream'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->actorChild())))))) {
            aActor->FatalError("Error deserializing 'actorChild' (PRemoteLazyInputStream) member of 'ParentToChildStream'");
            return false;
        }
        if ((!((*((&((aVar)->actorChild()))))))) {
            aActor->FatalError("Error deserializing 'actorChild' (PRemoteLazyInputStream) member of 'ParentToChildStream'");
            return false;
        }
        // Sentinel = 'actor'
        if ((!((aMsg)->ReadSentinel(aIter, 102892058)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'actorChild' (PRemoteLazyInputStream) member of 'ParentToChildStream'");
            return false;
        }
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ChildToParentStream|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ChildToParentStream>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).stream());
    // Sentinel = 'stream'
    (aMsg)->WriteSentinel(153223821);
}

auto IPDLParamTraits<mozilla::dom::ChildToParentStream>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->stream())))))) {
        aActor->FatalError("Error deserializing 'stream' (IPCStream) member of 'ChildToParentStream'");
        return false;
    }
    // Sentinel = 'stream'
    if ((!((aMsg)->ReadSentinel(aIter, 153223821)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'stream' (IPCStream) member of 'ChildToParentStream'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union BodyStreamVariant|
//
namespace mozilla {
namespace dom {
auto BodyStreamVariant::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TParentToParentStream:
        {
            (ptr_ParentToParentStream())->~ParentToParentStream__tdef();
            break;
        }
    case TParentToChildStream:
        {
            (ptr_ParentToChildStream())->~ParentToChildStream__tdef();
            break;
        }
    case TChildToParentStream:
        {
            (ptr_ChildToParentStream())->~ChildToParentStream__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT BodyStreamVariant::BodyStreamVariant(const ParentToParentStream& aOther)
{
    new (mozilla::KnownNotNull, ptr_ParentToParentStream()) ParentToParentStream(aOther);
    mType = TParentToParentStream;
}

MOZ_IMPLICIT BodyStreamVariant::BodyStreamVariant(ParentToParentStream&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ParentToParentStream()) ParentToParentStream(std::move(aOther));
    mType = TParentToParentStream;
}

MOZ_IMPLICIT BodyStreamVariant::BodyStreamVariant(const ParentToChildStream& aOther)
{
    new (mozilla::KnownNotNull, ptr_ParentToChildStream()) ParentToChildStream(aOther);
    mType = TParentToChildStream;
}

MOZ_IMPLICIT BodyStreamVariant::BodyStreamVariant(ParentToChildStream&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ParentToChildStream()) ParentToChildStream(std::move(aOther));
    mType = TParentToChildStream;
}

MOZ_IMPLICIT BodyStreamVariant::BodyStreamVariant(const ChildToParentStream& aOther)
{
    new (mozilla::KnownNotNull, ptr_ChildToParentStream()) ChildToParentStream(aOther);
    mType = TChildToParentStream;
}

MOZ_IMPLICIT BodyStreamVariant::BodyStreamVariant(ChildToParentStream&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ChildToParentStream()) ChildToParentStream(std::move(aOther));
    mType = TChildToParentStream;
}

MOZ_IMPLICIT BodyStreamVariant::BodyStreamVariant(const BodyStreamVariant& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TParentToParentStream:
        {
            new (mozilla::KnownNotNull, ptr_ParentToParentStream()) ParentToParentStream((aOther).get_ParentToParentStream());
            break;
        }
    case TParentToChildStream:
        {
            new (mozilla::KnownNotNull, ptr_ParentToChildStream()) ParentToChildStream((aOther).get_ParentToChildStream());
            break;
        }
    case TChildToParentStream:
        {
            new (mozilla::KnownNotNull, ptr_ChildToParentStream()) ChildToParentStream((aOther).get_ChildToParentStream());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT BodyStreamVariant::BodyStreamVariant(BodyStreamVariant&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TParentToParentStream:
        {
            new (mozilla::KnownNotNull, ptr_ParentToParentStream()) ParentToParentStream(std::move((aOther).get_ParentToParentStream()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TParentToChildStream:
        {
            new (mozilla::KnownNotNull, ptr_ParentToChildStream()) ParentToChildStream(std::move((aOther).get_ParentToChildStream()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TChildToParentStream:
        {
            new (mozilla::KnownNotNull, ptr_ChildToParentStream()) ChildToParentStream(std::move((aOther).get_ChildToParentStream()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

BodyStreamVariant::~BodyStreamVariant()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto BodyStreamVariant::operator=(const ParentToParentStream& aRhs) -> BodyStreamVariant&
{
    if (MaybeDestroy(TParentToParentStream)) {
        new (mozilla::KnownNotNull, ptr_ParentToParentStream()) ParentToParentStream;
    }
    (*(ptr_ParentToParentStream())) = aRhs;
    mType = TParentToParentStream;
    return (*(this));
}

auto BodyStreamVariant::operator=(ParentToParentStream&& aRhs) -> BodyStreamVariant&
{
    if (MaybeDestroy(TParentToParentStream)) {
        new (mozilla::KnownNotNull, ptr_ParentToParentStream()) ParentToParentStream;
    }
    (*(ptr_ParentToParentStream())) = std::move(aRhs);
    mType = TParentToParentStream;
    return (*(this));
}

auto BodyStreamVariant::operator=(const ParentToChildStream& aRhs) -> BodyStreamVariant&
{
    if (MaybeDestroy(TParentToChildStream)) {
        new (mozilla::KnownNotNull, ptr_ParentToChildStream()) ParentToChildStream;
    }
    (*(ptr_ParentToChildStream())) = aRhs;
    mType = TParentToChildStream;
    return (*(this));
}

auto BodyStreamVariant::operator=(ParentToChildStream&& aRhs) -> BodyStreamVariant&
{
    if (MaybeDestroy(TParentToChildStream)) {
        new (mozilla::KnownNotNull, ptr_ParentToChildStream()) ParentToChildStream;
    }
    (*(ptr_ParentToChildStream())) = std::move(aRhs);
    mType = TParentToChildStream;
    return (*(this));
}

auto BodyStreamVariant::operator=(const ChildToParentStream& aRhs) -> BodyStreamVariant&
{
    if (MaybeDestroy(TChildToParentStream)) {
        new (mozilla::KnownNotNull, ptr_ChildToParentStream()) ChildToParentStream;
    }
    (*(ptr_ChildToParentStream())) = aRhs;
    mType = TChildToParentStream;
    return (*(this));
}

auto BodyStreamVariant::operator=(ChildToParentStream&& aRhs) -> BodyStreamVariant&
{
    if (MaybeDestroy(TChildToParentStream)) {
        new (mozilla::KnownNotNull, ptr_ChildToParentStream()) ChildToParentStream;
    }
    (*(ptr_ChildToParentStream())) = std::move(aRhs);
    mType = TChildToParentStream;
    return (*(this));
}

auto BodyStreamVariant::operator=(const BodyStreamVariant& aRhs) -> BodyStreamVariant&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TParentToParentStream:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ParentToParentStream()) ParentToParentStream;
            }
            (*(ptr_ParentToParentStream())) = (aRhs).get_ParentToParentStream();
            break;
        }
    case TParentToChildStream:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ParentToChildStream()) ParentToChildStream;
            }
            (*(ptr_ParentToChildStream())) = (aRhs).get_ParentToChildStream();
            break;
        }
    case TChildToParentStream:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ChildToParentStream()) ChildToParentStream;
            }
            (*(ptr_ChildToParentStream())) = (aRhs).get_ChildToParentStream();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto BodyStreamVariant::operator=(BodyStreamVariant&& aRhs) -> BodyStreamVariant&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TParentToParentStream:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ParentToParentStream()) ParentToParentStream;
            }
            (*(ptr_ParentToParentStream())) = std::move((aRhs).get_ParentToParentStream());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TParentToChildStream:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ParentToChildStream()) ParentToChildStream;
            }
            (*(ptr_ParentToChildStream())) = std::move((aRhs).get_ParentToChildStream());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TChildToParentStream:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ChildToParentStream()) ChildToParentStream;
            }
            (*(ptr_ChildToParentStream())) = std::move((aRhs).get_ChildToParentStream());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::BodyStreamVariant>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::BodyStreamVariant union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'BodyStreamVariant'
    (aMsg)->WriteSentinel(1008600784);

    switch (type) {
    case union__::TParentToParentStream:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ParentToParentStream());
            // Sentinel = 'TParentToParentStream'
            (aMsg)->WriteSentinel(1508903000);
            return;
        }
    case union__::TParentToChildStream:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ParentToChildStream());
            // Sentinel = 'TParentToChildStream'
            (aMsg)->WriteSentinel(1352927186);
            return;
        }
    case union__::TChildToParentStream:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ChildToParentStream());
            // Sentinel = 'TChildToParentStream'
            (aMsg)->WriteSentinel(1335953362);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::BodyStreamVariant>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::BodyStreamVariant union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union BodyStreamVariant");
        return false;
    }
    // Sentinel = 'BodyStreamVariant'
    if ((!((aMsg)->ReadSentinel(aIter, 1008600784)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union BodyStreamVariant");
        return false;
    }

    switch (type) {
    case union__::TParentToParentStream:
        {
            mozilla::dom::ParentToParentStream tmp = mozilla::dom::ParentToParentStream();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ParentToParentStream())))))) {
                aActor->FatalError("Error deserializing variant TParentToParentStream of union BodyStreamVariant");
                return false;
            }
            // Sentinel = 'TParentToParentStream'
            if ((!((aMsg)->ReadSentinel(aIter, 1508903000)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TParentToParentStream of union BodyStreamVariant");
                return false;
            }
            return true;
        }
    case union__::TParentToChildStream:
        {
            mozilla::dom::ParentToChildStream tmp = mozilla::dom::ParentToChildStream();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ParentToChildStream())))))) {
                aActor->FatalError("Error deserializing variant TParentToChildStream of union BodyStreamVariant");
                return false;
            }
            // Sentinel = 'TParentToChildStream'
            if ((!((aMsg)->ReadSentinel(aIter, 1352927186)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TParentToChildStream of union BodyStreamVariant");
                return false;
            }
            return true;
        }
    case union__::TChildToParentStream:
        {
            mozilla::dom::ChildToParentStream tmp = mozilla::dom::ChildToParentStream();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ChildToParentStream())))))) {
                aActor->FatalError("Error deserializing variant TChildToParentStream of union BodyStreamVariant");
                return false;
            }
            // Sentinel = 'TChildToParentStream'
            if ((!((aMsg)->ReadSentinel(aIter, 1335953362)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TChildToParentStream of union BodyStreamVariant");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCInternalRequest|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCInternalRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).method());
    // Sentinel = 'method'
    (aMsg)->WriteSentinel(148308610);
    WriteIPDLParam(aMsg, aActor, (aVar).urlList());
    // Sentinel = 'urlList'
    (aMsg)->WriteSentinel(197591792);
    WriteIPDLParam(aMsg, aActor, (aVar).headersGuard());
    // Sentinel = 'headersGuard'
    (aMsg)->WriteSentinel(522912976);
    WriteIPDLParam(aMsg, aActor, (aVar).headers());
    // Sentinel = 'headers'
    (aMsg)->WriteSentinel(188220125);
    WriteIPDLParam(aMsg, aActor, (aVar).body());
    // Sentinel = 'body'
    (aMsg)->WriteSentinel(68813231);
    WriteIPDLParam(aMsg, aActor, (aVar).preferredAlternativeDataType());
    // Sentinel = 'preferredAlternativeDataType'
    (aMsg)->WriteSentinel(2781023067);
    WriteIPDLParam(aMsg, aActor, (aVar).referrer());
    // Sentinel = 'referrer'
    (aMsg)->WriteSentinel(252838750);
    WriteIPDLParam(aMsg, aActor, (aVar).referrerPolicy());
    // Sentinel = 'referrerPolicy'
    (aMsg)->WriteSentinel(729482702);
    WriteIPDLParam(aMsg, aActor, (aVar).requestMode());
    // Sentinel = 'requestMode'
    (aMsg)->WriteSentinel(468386959);
    WriteIPDLParam(aMsg, aActor, (aVar).requestCredentials());
    // Sentinel = 'requestCredentials'
    (aMsg)->WriteSentinel(1194461048);
    WriteIPDLParam(aMsg, aActor, (aVar).cacheMode());
    // Sentinel = 'cacheMode'
    (aMsg)->WriteSentinel(290980730);
    WriteIPDLParam(aMsg, aActor, (aVar).requestRedirect());
    // Sentinel = 'requestRedirect'
    (aMsg)->WriteSentinel(843974204);
    WriteIPDLParam(aMsg, aActor, (aVar).integrity());
    // Sentinel = 'integrity'
    (aMsg)->WriteSentinel(320537568);
    WriteIPDLParam(aMsg, aActor, (aVar).fragment());
    // Sentinel = 'fragment'
    (aMsg)->WriteSentinel(248644437);
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
    (aMsg)->WriteBytes((&((aVar).bodySize())), 8);
    // Sentinel = 'bodySize'
    (aMsg)->WriteSentinel(246809418);
    (aMsg)->WriteBytes((&((aVar).contentPolicyType())), 4);
    // Sentinel = 'contentPolicyType'
    (aMsg)->WriteSentinel(1066927886);
}

auto IPDLParamTraits<mozilla::dom::IPCInternalRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->method())))))) {
        aActor->FatalError("Error deserializing 'method' (nsCString) member of 'IPCInternalRequest'");
        return false;
    }
    // Sentinel = 'method'
    if ((!((aMsg)->ReadSentinel(aIter, 148308610)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'method' (nsCString) member of 'IPCInternalRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->urlList())))))) {
        aActor->FatalError("Error deserializing 'urlList' (nsCString[]) member of 'IPCInternalRequest'");
        return false;
    }
    // Sentinel = 'urlList'
    if ((!((aMsg)->ReadSentinel(aIter, 197591792)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'urlList' (nsCString[]) member of 'IPCInternalRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->headersGuard())))))) {
        aActor->FatalError("Error deserializing 'headersGuard' (HeadersGuardEnum) member of 'IPCInternalRequest'");
        return false;
    }
    // Sentinel = 'headersGuard'
    if ((!((aMsg)->ReadSentinel(aIter, 522912976)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'headersGuard' (HeadersGuardEnum) member of 'IPCInternalRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->headers())))))) {
        aActor->FatalError("Error deserializing 'headers' (HeadersEntry[]) member of 'IPCInternalRequest'");
        return false;
    }
    // Sentinel = 'headers'
    if ((!((aMsg)->ReadSentinel(aIter, 188220125)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'headers' (HeadersEntry[]) member of 'IPCInternalRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->body())))))) {
        aActor->FatalError("Error deserializing 'body' (BodyStreamVariant?) member of 'IPCInternalRequest'");
        return false;
    }
    // Sentinel = 'body'
    if ((!((aMsg)->ReadSentinel(aIter, 68813231)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'body' (BodyStreamVariant?) member of 'IPCInternalRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->preferredAlternativeDataType())))))) {
        aActor->FatalError("Error deserializing 'preferredAlternativeDataType' (nsCString) member of 'IPCInternalRequest'");
        return false;
    }
    // Sentinel = 'preferredAlternativeDataType'
    if ((!((aMsg)->ReadSentinel(aIter, 2781023067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'preferredAlternativeDataType' (nsCString) member of 'IPCInternalRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->referrer())))))) {
        aActor->FatalError("Error deserializing 'referrer' (nsString) member of 'IPCInternalRequest'");
        return false;
    }
    // Sentinel = 'referrer'
    if ((!((aMsg)->ReadSentinel(aIter, 252838750)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'referrer' (nsString) member of 'IPCInternalRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->referrerPolicy())))))) {
        aActor->FatalError("Error deserializing 'referrerPolicy' (ReferrerPolicy) member of 'IPCInternalRequest'");
        return false;
    }
    // Sentinel = 'referrerPolicy'
    if ((!((aMsg)->ReadSentinel(aIter, 729482702)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'referrerPolicy' (ReferrerPolicy) member of 'IPCInternalRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestMode())))))) {
        aActor->FatalError("Error deserializing 'requestMode' (RequestMode) member of 'IPCInternalRequest'");
        return false;
    }
    // Sentinel = 'requestMode'
    if ((!((aMsg)->ReadSentinel(aIter, 468386959)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestMode' (RequestMode) member of 'IPCInternalRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestCredentials())))))) {
        aActor->FatalError("Error deserializing 'requestCredentials' (RequestCredentials) member of 'IPCInternalRequest'");
        return false;
    }
    // Sentinel = 'requestCredentials'
    if ((!((aMsg)->ReadSentinel(aIter, 1194461048)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestCredentials' (RequestCredentials) member of 'IPCInternalRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cacheMode())))))) {
        aActor->FatalError("Error deserializing 'cacheMode' (RequestCache) member of 'IPCInternalRequest'");
        return false;
    }
    // Sentinel = 'cacheMode'
    if ((!((aMsg)->ReadSentinel(aIter, 290980730)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cacheMode' (RequestCache) member of 'IPCInternalRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestRedirect())))))) {
        aActor->FatalError("Error deserializing 'requestRedirect' (RequestRedirect) member of 'IPCInternalRequest'");
        return false;
    }
    // Sentinel = 'requestRedirect'
    if ((!((aMsg)->ReadSentinel(aIter, 843974204)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestRedirect' (RequestRedirect) member of 'IPCInternalRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->integrity())))))) {
        aActor->FatalError("Error deserializing 'integrity' (nsString) member of 'IPCInternalRequest'");
        return false;
    }
    // Sentinel = 'integrity'
    if ((!((aMsg)->ReadSentinel(aIter, 320537568)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'integrity' (nsString) member of 'IPCInternalRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fragment())))))) {
        aActor->FatalError("Error deserializing 'fragment' (nsCString) member of 'IPCInternalRequest'");
        return false;
    }
    // Sentinel = 'fragment'
    if ((!((aMsg)->ReadSentinel(aIter, 248644437)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fragment' (nsCString) member of 'IPCInternalRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo?) member of 'IPCInternalRequest'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo?) member of 'IPCInternalRequest'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->bodySize())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'bodySize'
    if ((!((aMsg)->ReadSentinel(aIter, 246809418)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->contentPolicyType())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'contentPolicyType'
    if ((!((aMsg)->ReadSentinel(aIter, 1066927886)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCInternalResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCInternalResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).type());
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
    WriteIPDLParam(aMsg, aActor, (aVar).urlList());
    // Sentinel = 'urlList'
    (aMsg)->WriteSentinel(197591792);
    WriteIPDLParam(aMsg, aActor, (aVar).statusText());
    // Sentinel = 'statusText'
    (aMsg)->WriteSentinel(397411402);
    WriteIPDLParam(aMsg, aActor, (aVar).headersGuard());
    // Sentinel = 'headersGuard'
    (aMsg)->WriteSentinel(522912976);
    WriteIPDLParam(aMsg, aActor, (aVar).headers());
    // Sentinel = 'headers'
    (aMsg)->WriteSentinel(188220125);
    WriteIPDLParam(aMsg, aActor, (aVar).body());
    // Sentinel = 'body'
    (aMsg)->WriteSentinel(68813231);
    WriteIPDLParam(aMsg, aActor, (aVar).errorCode());
    // Sentinel = 'errorCode'
    (aMsg)->WriteSentinel(312345510);
    WriteIPDLParam(aMsg, aActor, (aVar).alternativeDataType());
    // Sentinel = 'alternativeDataType'
    (aMsg)->WriteSentinel(1308690364);
    WriteIPDLParam(aMsg, aActor, (aVar).alternativeBody());
    // Sentinel = 'alternativeBody'
    (aMsg)->WriteSentinel(833816110);
    WriteIPDLParam(aMsg, aActor, (aVar).channelInfo());
    // Sentinel = 'channelInfo'
    (aMsg)->WriteSentinel(442106982);
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
    (aMsg)->WriteBytes((&((aVar).bodySize())), 8);
    // Sentinel = 'bodySize'
    (aMsg)->WriteSentinel(246809418);
    (aMsg)->WriteBytes((&((aVar).status())), 2);
    // Sentinel = 'status'
    (aMsg)->WriteSentinel(154731173);
}

auto IPDLParamTraits<mozilla::dom::IPCInternalResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->type())))))) {
        aActor->FatalError("Error deserializing 'type' (ResponseType) member of 'IPCInternalResponse'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'type' (ResponseType) member of 'IPCInternalResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->urlList())))))) {
        aActor->FatalError("Error deserializing 'urlList' (nsCString[]) member of 'IPCInternalResponse'");
        return false;
    }
    // Sentinel = 'urlList'
    if ((!((aMsg)->ReadSentinel(aIter, 197591792)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'urlList' (nsCString[]) member of 'IPCInternalResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->statusText())))))) {
        aActor->FatalError("Error deserializing 'statusText' (nsCString) member of 'IPCInternalResponse'");
        return false;
    }
    // Sentinel = 'statusText'
    if ((!((aMsg)->ReadSentinel(aIter, 397411402)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'statusText' (nsCString) member of 'IPCInternalResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->headersGuard())))))) {
        aActor->FatalError("Error deserializing 'headersGuard' (HeadersGuardEnum) member of 'IPCInternalResponse'");
        return false;
    }
    // Sentinel = 'headersGuard'
    if ((!((aMsg)->ReadSentinel(aIter, 522912976)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'headersGuard' (HeadersGuardEnum) member of 'IPCInternalResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->headers())))))) {
        aActor->FatalError("Error deserializing 'headers' (HeadersEntry[]) member of 'IPCInternalResponse'");
        return false;
    }
    // Sentinel = 'headers'
    if ((!((aMsg)->ReadSentinel(aIter, 188220125)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'headers' (HeadersEntry[]) member of 'IPCInternalResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->body())))))) {
        aActor->FatalError("Error deserializing 'body' (BodyStreamVariant?) member of 'IPCInternalResponse'");
        return false;
    }
    // Sentinel = 'body'
    if ((!((aMsg)->ReadSentinel(aIter, 68813231)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'body' (BodyStreamVariant?) member of 'IPCInternalResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->errorCode())))))) {
        aActor->FatalError("Error deserializing 'errorCode' (nsresult) member of 'IPCInternalResponse'");
        return false;
    }
    // Sentinel = 'errorCode'
    if ((!((aMsg)->ReadSentinel(aIter, 312345510)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'errorCode' (nsresult) member of 'IPCInternalResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->alternativeDataType())))))) {
        aActor->FatalError("Error deserializing 'alternativeDataType' (nsCString) member of 'IPCInternalResponse'");
        return false;
    }
    // Sentinel = 'alternativeDataType'
    if ((!((aMsg)->ReadSentinel(aIter, 1308690364)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'alternativeDataType' (nsCString) member of 'IPCInternalResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->alternativeBody())))))) {
        aActor->FatalError("Error deserializing 'alternativeBody' (BodyStreamVariant?) member of 'IPCInternalResponse'");
        return false;
    }
    // Sentinel = 'alternativeBody'
    if ((!((aMsg)->ReadSentinel(aIter, 833816110)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'alternativeBody' (BodyStreamVariant?) member of 'IPCInternalResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->channelInfo())))))) {
        aActor->FatalError("Error deserializing 'channelInfo' (IPCChannelInfo) member of 'IPCInternalResponse'");
        return false;
    }
    // Sentinel = 'channelInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 442106982)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'channelInfo' (IPCChannelInfo) member of 'IPCInternalResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo?) member of 'IPCInternalResponse'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo?) member of 'IPCInternalResponse'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->bodySize())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'bodySize'
    if ((!((aMsg)->ReadSentinel(aIter, 246809418)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->status())), 2)))) {
        aActor->FatalError("Error bulk reading fields from uint16_t");
        return false;
    }
    // Sentinel = 'status'
    if ((!((aMsg)->ReadSentinel(aIter, 154731173)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint16_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
