/* THIS FILE IS AUTOGENERATED FROM MediaKeysRequestStatus.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_MediaKeysRequestStatusBinding_h
#define mozilla_dom_MediaKeysRequestStatusBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ArrayUtils.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/Span.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"

namespace mozilla {
namespace dom {

struct NativePropertyHooks;
class ProtoAndIfaceCache;
struct RequestMediaKeySystemAccessNotificationAtoms;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

enum class MediaKeySystemStatus : uint8_t {
  Available,
  Api_disabled,
  Cdm_disabled,
  Cdm_not_supported,
  Cdm_not_installed,
  Cdm_created,
  EndGuard_
};

namespace MediaKeySystemStatusValues {
extern const EnumEntry strings[7];

static constexpr size_t Count = 6;

// Our "strings" contains an extra entry with a null string.
static_assert(mozilla::ArrayLength(strings) - 1 == Count,
              "Mismatch between enum strings and enum count");

static_assert(static_cast<size_t>(MediaKeySystemStatus::EndGuard_) == Count,
              "Mismatch between enum value and enum count");

inline auto GetString(MediaKeySystemStatus stringId) {
  MOZ_ASSERT(static_cast<uint8_t>(stringId) < Count);
  const EnumEntry& entry = strings[static_cast<uint8_t>(stringId)];
  return Span<const char>{entry.value, entry.length};
}
} // namespace MediaKeySystemStatusValues

bool
ToJSValue(JSContext* aCx, MediaKeySystemStatus aArgument, JS::MutableHandle<JS::Value> aValue);


struct RequestMediaKeySystemAccessNotification : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR nsString mKeySystem;
  MOZ_INIT_OUTSIDE_CTOR MediaKeySystemStatus mStatus;

  RequestMediaKeySystemAccessNotification();

  explicit inline RequestMediaKeySystemAccessNotification(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline RequestMediaKeySystemAccessNotification(const RequestMediaKeySystemAccessNotification& aOther)
  {
    *this = aOther;
  }

  bool
  Init(const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  bool
  ToJSON(nsAString& aJSON) const;

  void
  TraceDictionary(JSTracer* trc);

  RequestMediaKeySystemAccessNotification&
  operator=(const RequestMediaKeySystemAccessNotification& aOther);

private:
  static bool
  InitIds(JSContext* cx, RequestMediaKeySystemAccessNotificationAtoms* atomsCache);
};

namespace binding_detail {
struct FastRequestMediaKeySystemAccessNotification : public RequestMediaKeySystemAccessNotification
{
  inline FastRequestMediaKeySystemAccessNotification()
    : RequestMediaKeySystemAccessNotification(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_MediaKeysRequestStatusBinding_h
