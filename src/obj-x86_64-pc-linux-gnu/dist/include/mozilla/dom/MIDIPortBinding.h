/* THIS FILE IS AUTOGENERATED FROM MIDIPort.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_MIDIPortBinding_h
#define mozilla_dom_MIDIPortBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ArrayUtils.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/Span.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/PrototypeList.h"

namespace mozilla {
namespace dom {

class MIDIPort;
struct MIDIPortAtoms;
struct NativePropertyHooks;
class ProtoAndIfaceCache;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

enum class MIDIPortType : uint8_t {
  Input,
  Output,
  EndGuard_
};

namespace MIDIPortTypeValues {
extern const EnumEntry strings[3];

static constexpr size_t Count = 2;

// Our "strings" contains an extra entry with a null string.
static_assert(mozilla::ArrayLength(strings) - 1 == Count,
              "Mismatch between enum strings and enum count");

static_assert(static_cast<size_t>(MIDIPortType::EndGuard_) == Count,
              "Mismatch between enum value and enum count");

inline auto GetString(MIDIPortType stringId) {
  MOZ_ASSERT(static_cast<uint8_t>(stringId) < Count);
  const EnumEntry& entry = strings[static_cast<uint8_t>(stringId)];
  return Span<const char>{entry.value, entry.length};
}
} // namespace MIDIPortTypeValues

bool
ToJSValue(JSContext* aCx, MIDIPortType aArgument, JS::MutableHandle<JS::Value> aValue);


enum class MIDIPortDeviceState : uint8_t {
  Disconnected,
  Connected,
  EndGuard_
};

namespace MIDIPortDeviceStateValues {
extern const EnumEntry strings[3];

static constexpr size_t Count = 2;

// Our "strings" contains an extra entry with a null string.
static_assert(mozilla::ArrayLength(strings) - 1 == Count,
              "Mismatch between enum strings and enum count");

static_assert(static_cast<size_t>(MIDIPortDeviceState::EndGuard_) == Count,
              "Mismatch between enum value and enum count");

inline auto GetString(MIDIPortDeviceState stringId) {
  MOZ_ASSERT(static_cast<uint8_t>(stringId) < Count);
  const EnumEntry& entry = strings[static_cast<uint8_t>(stringId)];
  return Span<const char>{entry.value, entry.length};
}
} // namespace MIDIPortDeviceStateValues

bool
ToJSValue(JSContext* aCx, MIDIPortDeviceState aArgument, JS::MutableHandle<JS::Value> aValue);


enum class MIDIPortConnectionState : uint8_t {
  Open,
  Closed,
  Pending,
  EndGuard_
};

namespace MIDIPortConnectionStateValues {
extern const EnumEntry strings[4];

static constexpr size_t Count = 3;

// Our "strings" contains an extra entry with a null string.
static_assert(mozilla::ArrayLength(strings) - 1 == Count,
              "Mismatch between enum strings and enum count");

static_assert(static_cast<size_t>(MIDIPortConnectionState::EndGuard_) == Count,
              "Mismatch between enum value and enum count");

inline auto GetString(MIDIPortConnectionState stringId) {
  MOZ_ASSERT(static_cast<uint8_t>(stringId) < Count);
  const EnumEntry& entry = strings[static_cast<uint8_t>(stringId)];
  return Span<const char>{entry.value, entry.length};
}
} // namespace MIDIPortConnectionStateValues

bool
ToJSValue(JSContext* aCx, MIDIPortConnectionState aArgument, JS::MutableHandle<JS::Value> aValue);


namespace MIDIPort_Binding {

  typedef mozilla::dom::MIDIPort NativeType;

  bool
  ConstructorEnabled(JSContext* aCx, JS::Handle<JSObject*> aObj);

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  inline JS::Handle<JSObject*> GetProtoObjectHandle(JSContext* aCx)
  {
    /* Get the interface prototype object for this class.  This will create the
       object as needed. */
    return GetPerInterfaceObjectHandle(aCx, prototypes::id::MIDIPort,
                                       &CreateInterfaceObjects,
                                       /* aDefineOnGlobal = */ true);

  }

  JSObject*
  GetProtoObject(JSContext* aCx);

  inline JS::Handle<JSObject*> GetConstructorObjectHandle(JSContext* aCx, bool aDefineOnGlobal = true)
  {
    /* Get the interface object for this class.  This will create the object as
       needed. */

    return GetPerInterfaceObjectHandle(aCx, constructors::id::MIDIPort,
                                       &CreateInterfaceObjects,
                                       aDefineOnGlobal);
  }

  JSObject*
  GetConstructorObject(JSContext* aCx);

} // namespace MIDIPort_Binding



} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_MIDIPortBinding_h
