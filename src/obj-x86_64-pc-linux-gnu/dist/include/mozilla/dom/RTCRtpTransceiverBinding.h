/* THIS FILE IS AUTOGENERATED FROM RTCRtpTransceiver.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_RTCRtpTransceiverBinding_h
#define mozilla_dom_RTCRtpTransceiverBinding_h

#include "DOMMediaStream.h"
#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ArrayUtils.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/Span.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/CallbackInterface.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/PrototypeList.h"
#include "mozilla/dom/ToJSValue.h"
#include "nsWeakReference.h"

namespace mozilla {

class DOMMediaStream;

namespace dom {

struct NativePropertyHooks;
class ProtoAndIfaceCache;
class RTCRtpReceiver;
class RTCRtpSender;
class RTCRtpTransceiver;
struct RTCRtpTransceiverAtoms;
struct RTCRtpTransceiverInitAtoms;

} // namespace dom

} // namespace mozilla

namespace mozilla {
namespace dom {

enum class RTCRtpTransceiverDirection : uint8_t {
  Sendrecv,
  Sendonly,
  Recvonly,
  Inactive,
  EndGuard_
};

namespace RTCRtpTransceiverDirectionValues {
extern const EnumEntry strings[5];

static constexpr size_t Count = 4;

// Our "strings" contains an extra entry with a null string.
static_assert(mozilla::ArrayLength(strings) - 1 == Count,
              "Mismatch between enum strings and enum count");

static_assert(static_cast<size_t>(RTCRtpTransceiverDirection::EndGuard_) == Count,
              "Mismatch between enum value and enum count");

inline auto GetString(RTCRtpTransceiverDirection stringId) {
  MOZ_ASSERT(static_cast<uint8_t>(stringId) < Count);
  const EnumEntry& entry = strings[static_cast<uint8_t>(stringId)];
  return Span<const char>{entry.value, entry.length};
}
} // namespace RTCRtpTransceiverDirectionValues

bool
ToJSValue(JSContext* aCx, RTCRtpTransceiverDirection aArgument, JS::MutableHandle<JS::Value> aValue);


struct RTCRtpTransceiverInit : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR RTCRtpTransceiverDirection mDirection;
  MOZ_INIT_OUTSIDE_CTOR Sequence<OwningNonNull<mozilla::DOMMediaStream>> mStreams;

  RTCRtpTransceiverInit();

  explicit inline RTCRtpTransceiverInit(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline RTCRtpTransceiverInit(const RTCRtpTransceiverInit& aOther)
  {
    *this = aOther;
  }

  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

  inline void
  TraverseForCC(nsCycleCollectionTraversalCallback& aCallback, uint32_t aFlags)
  {
    ImplCycleCollectionTraverse(aCallback, mStreams, "mStreams", aFlags);
  }

  inline void
  UnlinkForCC()
  {
    ImplCycleCollectionUnlink(mStreams);
  }

  RTCRtpTransceiverInit&
  operator=(const RTCRtpTransceiverInit& aOther);

private:
  static bool
  InitIds(JSContext* cx, RTCRtpTransceiverInitAtoms* atomsCache);
};

namespace binding_detail {
struct FastRTCRtpTransceiverInit : public RTCRtpTransceiverInit
{
  inline FastRTCRtpTransceiverInit()
    : RTCRtpTransceiverInit(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


namespace RTCRtpTransceiver_Binding {

  typedef mozilla::dom::RTCRtpTransceiver NativeType;

  bool
  ConstructorEnabled(JSContext* aCx, JS::Handle<JSObject*> aObj);

  const JSClass*
  GetJSClass();

  bool
  Wrap(JSContext* aCx, mozilla::dom::RTCRtpTransceiver* aObject, nsWrapperCache* aCache, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector);

  template <class T>
  inline JSObject* Wrap(JSContext* aCx, T* aObject, JS::Handle<JSObject*> aGivenProto)
  {
    JS::Rooted<JSObject*> reflector(aCx);
    return Wrap(aCx, aObject, aObject, aGivenProto, &reflector) ? reflector.get() : nullptr;
  }

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  inline JS::Handle<JSObject*> GetProtoObjectHandle(JSContext* aCx)
  {
    /* Get the interface prototype object for this class.  This will create the
       object as needed. */
    return GetPerInterfaceObjectHandle(aCx, prototypes::id::RTCRtpTransceiver,
                                       &CreateInterfaceObjects,
                                       /* aDefineOnGlobal = */ true);

  }

  inline JS::Handle<JSObject*> GetConstructorObjectHandle(JSContext* aCx, bool aDefineOnGlobal = true)
  {
    /* Get the interface object for this class.  This will create the object as
       needed. */

    return GetPerInterfaceObjectHandle(aCx, constructors::id::RTCRtpTransceiver,
                                       &CreateInterfaceObjects,
                                       aDefineOnGlobal);
  }

  JSObject*
  GetConstructorObject(JSContext* aCx);

} // namespace RTCRtpTransceiver_Binding



class RTCRtpTransceiverJSImpl : public CallbackInterface
{
public:
  explicit inline RTCRtpTransceiverJSImpl(JSContext* aCx, JS::Handle<JSObject*> aCallback, JS::Handle<JSObject*> aCallbackGlobal, nsIGlobalObject* aIncumbentGlobal)
    : CallbackInterface(aCx, aCallback, aCallbackGlobal, aIncumbentGlobal)
  {
  }

  explicit inline RTCRtpTransceiverJSImpl(JSObject* aCallback, JSObject* aCallbackGlobal, const FastCallbackConstructor& )
    : CallbackInterface(aCallback, aCallbackGlobal, FastCallbackConstructor())
  {
  }

  explicit inline RTCRtpTransceiverJSImpl(JSObject* aCallback, JSObject* aCallbackGlobal, JSObject* aAsyncStack, nsIGlobalObject* aIncumbentGlobal)
    : CallbackInterface(aCallback, aCallbackGlobal, aAsyncStack, aIncumbentGlobal)
  {
  }

  void Stop(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void SetAddTrackMagic(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void SetCurrentDirection(RTCRtpTransceiverDirection direction, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void SetDirectionInternal(RTCRtpTransceiverDirection direction, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void SetMid(const nsAString& mid, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void UnsetMid(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void SetStopped(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void GetKind(nsString& aRetVal, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  bool HasBeenUsedToSend(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void Sync(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  inline bool
  operator==(const RTCRtpTransceiverJSImpl& aOther) const
  {
    return CallbackInterface::operator==(aOther);
  }

  void GetMid(nsString& aRetVal, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  already_AddRefed<RTCRtpSender> GetSender(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  already_AddRefed<RTCRtpReceiver> GetReceiver(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  bool GetStopped(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  RTCRtpTransceiverDirection GetDirection(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  Nullable<RTCRtpTransceiverDirection> GetCurrentDirection(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  bool GetAddTrackMagic(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  bool GetShouldRemove(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void SetDirection(RTCRtpTransceiverDirection arg, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void SetShouldRemove(bool arg, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

private:
  static bool
  InitIds(JSContext* cx, RTCRtpTransceiverAtoms* atomsCache);
};


class RTCRtpTransceiver final : public nsSupportsWeakReference,
                                public nsWrapperCache
{
public:
  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(RTCRtpTransceiver)

private:
  RefPtr<RTCRtpTransceiverJSImpl> mImpl;
  nsCOMPtr<nsIGlobalObject> mParent;

public:
  RTCRtpTransceiver(JS::Handle<JSObject*> aJSImplObject, JS::Handle<JSObject*> aJSImplGlobal, nsIGlobalObject* aParent);

private:
  ~RTCRtpTransceiver();

public:
  nsISupports* GetParentObject() const;

  JSObject* WrapObject(JSContext* aCx, JS::Handle<JSObject*> aGivenProto) override;

  void GetMid(nsString& aRetVal, ErrorResult& aRv, JS::Realm* aRealm = nullptr) const;

  // Return a raw pointer here to avoid refcounting, but make sure it's safe (the object should be kept alive by the callee).
  already_AddRefed<RTCRtpSender> GetSender(ErrorResult& aRv, JS::Realm* aRealm = nullptr) const;

  // Return a raw pointer here to avoid refcounting, but make sure it's safe (the object should be kept alive by the callee).
  already_AddRefed<RTCRtpReceiver> GetReceiver(ErrorResult& aRv, JS::Realm* aRealm = nullptr) const;

  bool GetStopped(ErrorResult& aRv, JS::Realm* aRealm = nullptr) const;

  RTCRtpTransceiverDirection GetDirection(ErrorResult& aRv, JS::Realm* aRealm = nullptr) const;

  void SetDirection(RTCRtpTransceiverDirection arg, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  Nullable<RTCRtpTransceiverDirection> GetCurrentDirection(ErrorResult& aRv, JS::Realm* aRealm = nullptr) const;

  void Stop(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void SetAddTrackMagic(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  bool GetAddTrackMagic(ErrorResult& aRv, JS::Realm* aRealm = nullptr) const;

  bool GetShouldRemove(ErrorResult& aRv, JS::Realm* aRealm = nullptr) const;

  void SetShouldRemove(bool arg, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void SetCurrentDirection(RTCRtpTransceiverDirection direction, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void SetDirectionInternal(RTCRtpTransceiverDirection direction, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void SetMid(const nsAString& mid, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void UnsetMid(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void SetStopped(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void GetKind(nsString& aRetVal, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  bool HasBeenUsedToSend(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void Sync(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  static bool
  _Create(JSContext* cx, unsigned argc, JS::Value* vp);
};


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_RTCRtpTransceiverBinding_h
