/* THIS FILE IS AUTOGENERATED FROM RTCIceCandidate.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_RTCIceCandidateBinding_h
#define mozilla_dom_RTCIceCandidateBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/CallbackInterface.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/PrototypeList.h"
#include "mozilla/dom/ToJSValue.h"
#include "nsWeakReference.h"

namespace mozilla {
namespace dom {

struct NativePropertyHooks;
class ProtoAndIfaceCache;
class RTCIceCandidate;
struct RTCIceCandidateAtoms;
struct RTCIceCandidateInit;
struct RTCIceCandidateInitAtoms;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct RTCIceCandidateInit : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR nsString mCandidate;
  MOZ_INIT_OUTSIDE_CTOR Nullable<uint16_t> mSdpMLineIndex;
  MOZ_INIT_OUTSIDE_CTOR nsString mSdpMid;
  MOZ_INIT_OUTSIDE_CTOR nsString mUsernameFragment;

  RTCIceCandidateInit();

  explicit inline RTCIceCandidateInit(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline RTCIceCandidateInit(const RTCIceCandidateInit& aOther)
  {
    *this = aOther;
  }

  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

  RTCIceCandidateInit&
  operator=(const RTCIceCandidateInit& aOther);

  bool
  operator==(const RTCIceCandidateInit& aOther) const;

private:
  static bool
  InitIds(JSContext* cx, RTCIceCandidateInitAtoms* atomsCache);
};

namespace binding_detail {
struct FastRTCIceCandidateInit : public RTCIceCandidateInit
{
  inline FastRTCIceCandidateInit()
    : RTCIceCandidateInit(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


namespace RTCIceCandidate_Binding {

  typedef mozilla::dom::RTCIceCandidate NativeType;

  MOZ_CAN_RUN_SCRIPT bool
  CollectJSONAttributes(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::RTCIceCandidate* self, JS::Rooted<JSObject*>& result);

  bool
  ConstructorEnabled(JSContext* aCx, JS::Handle<JSObject*> aObj);

  const JSClass*
  GetJSClass();

  bool
  Wrap(JSContext* aCx, mozilla::dom::RTCIceCandidate* aObject, nsWrapperCache* aCache, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector);

  template <class T>
  inline JSObject* Wrap(JSContext* aCx, T* aObject, JS::Handle<JSObject*> aGivenProto)
  {
    JS::Rooted<JSObject*> reflector(aCx);
    return Wrap(aCx, aObject, aObject, aGivenProto, &reflector) ? reflector.get() : nullptr;
  }

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  inline JS::Handle<JSObject*> GetProtoObjectHandle(JSContext* aCx)
  {
    /* Get the interface prototype object for this class.  This will create the
       object as needed. */
    return GetPerInterfaceObjectHandle(aCx, prototypes::id::RTCIceCandidate,
                                       &CreateInterfaceObjects,
                                       /* aDefineOnGlobal = */ true);

  }

  JSObject*
  GetProtoObject(JSContext* aCx);

  inline JS::Handle<JSObject*> GetConstructorObjectHandle(JSContext* aCx, bool aDefineOnGlobal = true)
  {
    /* Get the interface object for this class.  This will create the object as
       needed. */

    return GetPerInterfaceObjectHandle(aCx, constructors::id::RTCIceCandidate,
                                       &CreateInterfaceObjects,
                                       aDefineOnGlobal);
  }

  JSObject*
  GetConstructorObject(JSContext* aCx);

} // namespace RTCIceCandidate_Binding



class RTCIceCandidateJSImpl : public CallbackInterface
{
public:
  explicit inline RTCIceCandidateJSImpl(JSContext* aCx, JS::Handle<JSObject*> aCallback, JS::Handle<JSObject*> aCallbackGlobal, nsIGlobalObject* aIncumbentGlobal)
    : CallbackInterface(aCx, aCallback, aCallbackGlobal, aIncumbentGlobal)
  {
  }

  explicit inline RTCIceCandidateJSImpl(JSObject* aCallback, JSObject* aCallbackGlobal, const FastCallbackConstructor& )
    : CallbackInterface(aCallback, aCallbackGlobal, FastCallbackConstructor())
  {
  }

  explicit inline RTCIceCandidateJSImpl(JSObject* aCallback, JSObject* aCallbackGlobal, JSObject* aAsyncStack, nsIGlobalObject* aIncumbentGlobal)
    : CallbackInterface(aCallback, aCallbackGlobal, aAsyncStack, aIncumbentGlobal)
  {
  }

  void ToJSON(JS::MutableHandle<JSObject*> aRetVal, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void __Init(const RTCIceCandidateInit& candidateInitDict, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  inline bool
  operator==(const RTCIceCandidateJSImpl& aOther) const
  {
    return CallbackInterface::operator==(aOther);
  }

  void GetCandidate(nsString& aRetVal, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void GetSdpMid(nsString& aRetVal, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  Nullable<uint16_t> GetSdpMLineIndex(ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void GetUsernameFragment(nsString& aRetVal, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void SetCandidate(const nsAString& arg, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void SetSdpMid(const nsAString& arg, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void SetSdpMLineIndex(const Nullable<uint16_t>& arg, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void SetUsernameFragment(const nsAString& arg, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

private:
  static bool
  InitIds(JSContext* cx, RTCIceCandidateAtoms* atomsCache);
};


class RTCIceCandidate : public nsSupportsWeakReference,
                        public nsWrapperCache
{
public:
  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(RTCIceCandidate)

private:
  RefPtr<RTCIceCandidateJSImpl> mImpl;
  nsCOMPtr<nsIGlobalObject> mParent;

public:
  RTCIceCandidate(JS::Handle<JSObject*> aJSImplObject, JS::Handle<JSObject*> aJSImplGlobal, nsIGlobalObject* aParent);

protected:
  virtual ~RTCIceCandidate();

public:
  nsISupports* GetParentObject() const;

  JSObject* WrapObject(JSContext* aCx, JS::Handle<JSObject*> aGivenProto) override;

  static already_AddRefed<RTCIceCandidate> Constructor(const GlobalObject& global, JSContext* cx, const RTCIceCandidateInit& candidateInitDict, ErrorResult& aRv, JS::Handle<JSObject*> aGivenProto = nullptr);

  void GetCandidate(nsString& aRetVal, ErrorResult& aRv, JS::Realm* aRealm = nullptr) const;

  void SetCandidate(const nsAString& arg, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void GetSdpMid(nsString& aRetVal, ErrorResult& aRv, JS::Realm* aRealm = nullptr) const;

  void SetSdpMid(const nsAString& arg, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  Nullable<uint16_t> GetSdpMLineIndex(ErrorResult& aRv, JS::Realm* aRealm = nullptr) const;

  void SetSdpMLineIndex(const Nullable<uint16_t>& arg, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void GetUsernameFragment(nsString& aRetVal, ErrorResult& aRv, JS::Realm* aRealm = nullptr) const;

  void SetUsernameFragment(const nsAString& arg, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  void ToJSON(JS::MutableHandle<JSObject*> aRetVal, ErrorResult& aRv, JS::Realm* aRealm = nullptr);

  static bool
  _Create(JSContext* cx, unsigned argc, JS::Value* vp);
};


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_RTCIceCandidateBinding_h
