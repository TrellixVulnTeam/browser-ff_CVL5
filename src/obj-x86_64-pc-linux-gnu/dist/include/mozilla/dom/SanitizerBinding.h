/* THIS FILE IS AUTOGENERATED FROM Sanitizer.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_SanitizerBinding_h
#define mozilla_dom_SanitizerBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/FakeString.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/PrototypeList.h"
#include "mozilla/dom/UnionMember.h"

namespace mozilla {
namespace dom {

class Document;
class DocumentFragment;
struct NativePropertyHooks;
class OwningStringOrDocumentFragmentOrDocument;
class ProtoAndIfaceCache;
class Sanitizer;
struct SanitizerAtoms;
struct SanitizerOptionsAtoms;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

void
ImplCycleCollectionTraverse(nsCycleCollectionTraversalCallback& aCallback, OwningStringOrDocumentFragmentOrDocument& aUnion, const char* aName, uint32_t aFlags = 0);


void
ImplCycleCollectionUnlink(OwningStringOrDocumentFragmentOrDocument& aUnion);


struct SanitizerOptions : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR Optional<Sequence<nsString>> mAllowed;
  MOZ_INIT_OUTSIDE_CTOR Optional<Sequence<nsString>> mRemoved;

  SanitizerOptions();

  explicit inline SanitizerOptions(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline SanitizerOptions(const SanitizerOptions& aOther)
  {
    *this = aOther;
  }

  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  void
  TraceDictionary(JSTracer* trc);

  SanitizerOptions&
  operator=(const SanitizerOptions& aOther);

private:
  static bool
  InitIds(JSContext* cx, SanitizerOptionsAtoms* atomsCache);
};

namespace binding_detail {
struct FastSanitizerOptions : public SanitizerOptions
{
  inline FastSanitizerOptions()
    : SanitizerOptions(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


class StringOrDocumentFragmentOrDocument
{
  friend class StringOrDocumentFragmentOrDocumentArgument;
  enum Type
  {
    eUninitialized,
    eString,
    eDocumentFragment,
    eDocument
  };

  union Value
  {
    UnionMember<binding_detail::FakeString<char16_t> > mString;
    UnionMember<NonNull<mozilla::dom::DocumentFragment> > mDocumentFragment;
    UnionMember<NonNull<mozilla::dom::Document> > mDocument;

  };

  Type mType;
  Value mValue;

  StringOrDocumentFragmentOrDocument(const StringOrDocumentFragmentOrDocument&) = delete;
  StringOrDocumentFragmentOrDocument& operator=(const StringOrDocumentFragmentOrDocument&) = delete;
public:
  explicit inline StringOrDocumentFragmentOrDocument()
    : mType(eUninitialized)
  {
  }

  inline ~StringOrDocumentFragmentOrDocument()
  {
    Uninit();
  }

  inline binding_detail::FakeString<char16_t>&
  RawSetAsString()
  {
    if (mType == eString) {
      return mValue.mString.Value();
    }
    MOZ_ASSERT(mType == eUninitialized);
    mType = eString;
    return mValue.mString.SetValue();
  }

  inline binding_detail::FakeString<char16_t>&
  SetAsString()
  {
    if (mType == eString) {
      return mValue.mString.Value();
    }
    Uninit();
    mType = eString;
    return mValue.mString.SetValue();
  }

  inline bool
  IsString() const
  {
    return mType == eString;
  }

  inline binding_detail::FakeString<char16_t>&
  GetAsString()
  {
    MOZ_ASSERT(IsString(), "Wrong type!");
    return mValue.mString.Value();
  }

  inline const nsAString&
  GetAsString() const
  {
    MOZ_ASSERT(IsString(), "Wrong type!");
    return mValue.mString.Value();
  }

  inline NonNull<mozilla::dom::DocumentFragment>&
  RawSetAsDocumentFragment()
  {
    if (mType == eDocumentFragment) {
      return mValue.mDocumentFragment.Value();
    }
    MOZ_ASSERT(mType == eUninitialized);
    mType = eDocumentFragment;
    return mValue.mDocumentFragment.SetValue();
  }

  inline NonNull<mozilla::dom::DocumentFragment>&
  SetAsDocumentFragment()
  {
    if (mType == eDocumentFragment) {
      return mValue.mDocumentFragment.Value();
    }
    Uninit();
    mType = eDocumentFragment;
    return mValue.mDocumentFragment.SetValue();
  }

  inline bool
  IsDocumentFragment() const
  {
    return mType == eDocumentFragment;
  }

  inline NonNull<mozilla::dom::DocumentFragment>&
  GetAsDocumentFragment()
  {
    MOZ_ASSERT(IsDocumentFragment(), "Wrong type!");
    return mValue.mDocumentFragment.Value();
  }

  inline mozilla::dom::DocumentFragment&
  GetAsDocumentFragment() const
  {
    MOZ_ASSERT(IsDocumentFragment(), "Wrong type!");
    return mValue.mDocumentFragment.Value();
  }

  inline NonNull<mozilla::dom::Document>&
  RawSetAsDocument()
  {
    if (mType == eDocument) {
      return mValue.mDocument.Value();
    }
    MOZ_ASSERT(mType == eUninitialized);
    mType = eDocument;
    return mValue.mDocument.SetValue();
  }

  inline NonNull<mozilla::dom::Document>&
  SetAsDocument()
  {
    if (mType == eDocument) {
      return mValue.mDocument.Value();
    }
    Uninit();
    mType = eDocument;
    return mValue.mDocument.SetValue();
  }

  inline bool
  IsDocument() const
  {
    return mType == eDocument;
  }

  inline NonNull<mozilla::dom::Document>&
  GetAsDocument()
  {
    MOZ_ASSERT(IsDocument(), "Wrong type!");
    return mValue.mDocument.Value();
  }

  inline mozilla::dom::Document&
  GetAsDocument() const
  {
    MOZ_ASSERT(IsDocument(), "Wrong type!");
    return mValue.mDocument.Value();
  }

  inline void
  Uninit()
  {
    switch (mType) {
      case eUninitialized: {
        break;
      }
      case eString: {
        DestroyString();
        break;
      }
      case eDocumentFragment: {
        DestroyDocumentFragment();
        break;
      }
      case eDocument: {
        DestroyDocument();
        break;
      }
    }
  }

  bool
  ToJSVal(JSContext* cx, JS::Handle<JSObject*> scopeObj, JS::MutableHandle<JS::Value> rval) const;

private:
  inline void
  DestroyString()
  {
    MOZ_ASSERT(IsString(), "Wrong type!");
    mValue.mString.Destroy();
    mType = eUninitialized;
  }

  inline void
  DestroyDocumentFragment()
  {
    MOZ_ASSERT(IsDocumentFragment(), "Wrong type!");
    mValue.mDocumentFragment.Destroy();
    mType = eUninitialized;
  }

  inline void
  DestroyDocument()
  {
    MOZ_ASSERT(IsDocument(), "Wrong type!");
    mValue.mDocument.Destroy();
    mType = eUninitialized;
  }
};


class OwningStringOrDocumentFragmentOrDocument : public AllOwningUnionBase
{
  friend void ImplCycleCollectionUnlink(OwningStringOrDocumentFragmentOrDocument& aUnion);
  enum Type
  {
    eUninitialized,
    eString,
    eDocumentFragment,
    eDocument
  };

  union Value
  {
    UnionMember<nsString > mString;
    UnionMember<OwningNonNull<mozilla::dom::DocumentFragment> > mDocumentFragment;
    UnionMember<OwningNonNull<mozilla::dom::Document> > mDocument;

  };

  Type mType;
  Value mValue;

public:
  explicit inline OwningStringOrDocumentFragmentOrDocument()
    : mType(eUninitialized)
  {
  }

  explicit inline OwningStringOrDocumentFragmentOrDocument(const OwningStringOrDocumentFragmentOrDocument& aOther)
    : mType(eUninitialized)
  {
    *this = aOther;
  }

  inline ~OwningStringOrDocumentFragmentOrDocument()
  {
    Uninit();
  }

  nsString&
  RawSetAsString();

  nsString&
  SetAsString();

  bool
  TrySetToString(JSContext* cx, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  template <int N>
  inline void
  SetStringLiteral(const nsString::char_type (&aData)[N])
  {
    RawSetAsString().AssignLiteral(aData);
  }

  inline bool
  IsString() const
  {
    return mType == eString;
  }

  inline nsString&
  GetAsString()
  {
    MOZ_ASSERT(IsString(), "Wrong type!");
    return mValue.mString.Value();
  }

  inline nsString const &
  GetAsString() const
  {
    MOZ_ASSERT(IsString(), "Wrong type!");
    return mValue.mString.Value();
  }

  OwningNonNull<mozilla::dom::DocumentFragment>&
  RawSetAsDocumentFragment();

  OwningNonNull<mozilla::dom::DocumentFragment>&
  SetAsDocumentFragment();

  bool
  TrySetToDocumentFragment(BindingCallContext& cx, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  bool
  TrySetToDocumentFragment(JSContext* cx_, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  inline bool
  IsDocumentFragment() const
  {
    return mType == eDocumentFragment;
  }

  inline OwningNonNull<mozilla::dom::DocumentFragment>&
  GetAsDocumentFragment()
  {
    MOZ_ASSERT(IsDocumentFragment(), "Wrong type!");
    return mValue.mDocumentFragment.Value();
  }

  inline OwningNonNull<mozilla::dom::DocumentFragment> const &
  GetAsDocumentFragment() const
  {
    MOZ_ASSERT(IsDocumentFragment(), "Wrong type!");
    return mValue.mDocumentFragment.Value();
  }

  OwningNonNull<mozilla::dom::Document>&
  RawSetAsDocument();

  OwningNonNull<mozilla::dom::Document>&
  SetAsDocument();

  bool
  TrySetToDocument(BindingCallContext& cx, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  bool
  TrySetToDocument(JSContext* cx_, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  inline bool
  IsDocument() const
  {
    return mType == eDocument;
  }

  inline OwningNonNull<mozilla::dom::Document>&
  GetAsDocument()
  {
    MOZ_ASSERT(IsDocument(), "Wrong type!");
    return mValue.mDocument.Value();
  }

  inline OwningNonNull<mozilla::dom::Document> const &
  GetAsDocument() const
  {
    MOZ_ASSERT(IsDocument(), "Wrong type!");
    return mValue.mDocument.Value();
  }

  void
  Uninit();

  bool
  ToJSVal(JSContext* cx, JS::Handle<JSObject*> scopeObj, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceUnion(JSTracer* trc);

  OwningStringOrDocumentFragmentOrDocument&
  operator=(const OwningStringOrDocumentFragmentOrDocument& aOther);

private:
  void
  DestroyString();

  void
  DestroyDocumentFragment();

  void
  DestroyDocument();
};


namespace Sanitizer_Binding {

  typedef mozilla::dom::Sanitizer NativeType;

  bool
  ConstructorEnabled(JSContext* aCx, JS::Handle<JSObject*> aObj);

  const JSClass*
  GetJSClass();

  bool
  Wrap(JSContext* aCx, mozilla::dom::Sanitizer* aObject, nsWrapperCache* aCache, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector);

  template <class T>
  inline JSObject* Wrap(JSContext* aCx, T* aObject, JS::Handle<JSObject*> aGivenProto)
  {
    JS::Rooted<JSObject*> reflector(aCx);
    return Wrap(aCx, aObject, aObject, aGivenProto, &reflector) ? reflector.get() : nullptr;
  }

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  inline JS::Handle<JSObject*> GetProtoObjectHandle(JSContext* aCx)
  {
    /* Get the interface prototype object for this class.  This will create the
       object as needed. */
    return GetPerInterfaceObjectHandle(aCx, prototypes::id::Sanitizer,
                                       &CreateInterfaceObjects,
                                       /* aDefineOnGlobal = */ true);

  }

  inline JS::Handle<JSObject*> GetConstructorObjectHandle(JSContext* aCx, bool aDefineOnGlobal = true)
  {
    /* Get the interface object for this class.  This will create the object as
       needed. */

    return GetPerInterfaceObjectHandle(aCx, constructors::id::Sanitizer,
                                       &CreateInterfaceObjects,
                                       aDefineOnGlobal);
  }

  JSObject*
  GetConstructorObject(JSContext* aCx);

} // namespace Sanitizer_Binding



} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_SanitizerBinding_h
