/* THIS FILE IS AUTOGENERATED FROM WheelEvent.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_WheelEventBinding_h
#define mozilla_dom_WheelEventBinding_h

#include "MouseEventBinding.h"
#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/EventTarget.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/PrototypeList.h"
#include "nsGlobalWindow.h"

class nsGlobalWindowInner;

namespace mozilla {
namespace dom {

class EventTarget;
struct NativePropertyHooks;
class ProtoAndIfaceCache;
class WheelEvent;
struct WheelEventAtoms;
struct WheelEventInitAtoms;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct WheelEventInit : public MouseEventInit
{
  MOZ_INIT_OUTSIDE_CTOR uint32_t mDeltaMode;
  MOZ_INIT_OUTSIDE_CTOR double mDeltaX;
  MOZ_INIT_OUTSIDE_CTOR double mDeltaY;
  MOZ_INIT_OUTSIDE_CTOR double mDeltaZ;

  WheelEventInit();

  explicit inline WheelEventInit(const FastDictionaryInitializer& )
    : MouseEventInit(FastDictionaryInitializer())
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline WheelEventInit(const WheelEventInit& aOther)
    : MouseEventInit(FastDictionaryInitializer())
  {
    *this = aOther;
  }

  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  void
  TraceDictionary(JSTracer* trc);

  inline void
  TraverseForCC(nsCycleCollectionTraversalCallback& aCallback, uint32_t aFlags)
  {
    MouseEventInit::TraverseForCC(aCallback, aFlags);
  }

  inline void
  UnlinkForCC()
  {
    MouseEventInit::UnlinkForCC();
  }

  WheelEventInit&
  operator=(const WheelEventInit& aOther);

  bool
  operator==(const WheelEventInit& aOther) const;

private:
  static bool
  InitIds(JSContext* cx, WheelEventInitAtoms* atomsCache);
};

namespace binding_detail {
struct FastWheelEventInit : public WheelEventInit
{
  inline FastWheelEventInit()
    : WheelEventInit(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


namespace WheelEvent_Binding {

  typedef mozilla::dom::WheelEvent NativeType;

  static const uint32_t DOM_DELTA_PIXEL = 0;
  static const uint32_t DOM_DELTA_LINE = 1;
  static const uint32_t DOM_DELTA_PAGE = 2;
  const JSClass*
  GetJSClass();

  bool
  Wrap(JSContext* aCx, mozilla::dom::WheelEvent* aObject, nsWrapperCache* aCache, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector);

  template <class T>
  inline JSObject* Wrap(JSContext* aCx, T* aObject, JS::Handle<JSObject*> aGivenProto)
  {
    JS::Rooted<JSObject*> reflector(aCx);
    return Wrap(aCx, aObject, aObject, aGivenProto, &reflector) ? reflector.get() : nullptr;
  }

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  inline JS::Handle<JSObject*> GetProtoObjectHandle(JSContext* aCx)
  {
    /* Get the interface prototype object for this class.  This will create the
       object as needed. */
    return GetPerInterfaceObjectHandle(aCx, prototypes::id::WheelEvent,
                                       &CreateInterfaceObjects,
                                       /* aDefineOnGlobal = */ true);

  }

  inline JS::Handle<JSObject*> GetConstructorObjectHandle(JSContext* aCx, bool aDefineOnGlobal = true)
  {
    /* Get the interface object for this class.  This will create the object as
       needed. */

    return GetPerInterfaceObjectHandle(aCx, constructors::id::WheelEvent,
                                       &CreateInterfaceObjects,
                                       aDefineOnGlobal);
  }

  JSObject*
  GetConstructorObject(JSContext* aCx);

} // namespace WheelEvent_Binding



} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_WheelEventBinding_h
