/* THIS FILE IS AUTOGENERATED FROM RTCIdentityAssertion.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_RTCIdentityAssertionBinding_h
#define mozilla_dom_RTCIdentityAssertionBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"

namespace mozilla {
namespace dom {

struct NativePropertyHooks;
class ProtoAndIfaceCache;
struct RTCIdentityAssertionAtoms;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct RTCIdentityAssertion : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR Optional<nsString> mIdp;
  MOZ_INIT_OUTSIDE_CTOR Optional<nsString> mName;

  RTCIdentityAssertion();

  explicit inline RTCIdentityAssertion(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline RTCIdentityAssertion(const RTCIdentityAssertion& aOther)
  {
    *this = aOther;
  }

  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

  RTCIdentityAssertion&
  operator=(const RTCIdentityAssertion& aOther);

  bool
  operator==(const RTCIdentityAssertion& aOther) const;

private:
  static bool
  InitIds(JSContext* cx, RTCIdentityAssertionAtoms* atomsCache);
};

namespace binding_detail {
struct FastRTCIdentityAssertion : public RTCIdentityAssertion
{
  inline FastRTCIdentityAssertion()
    : RTCIdentityAssertion(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_RTCIdentityAssertionBinding_h
