/* THIS FILE IS AUTOGENERATED FROM PeerConnectionObserverEnums.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_PeerConnectionObserverEnumsBinding_h
#define mozilla_dom_PeerConnectionObserverEnumsBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ArrayUtils.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/Span.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"

namespace mozilla {
namespace dom {

struct NativePropertyHooks;
class ProtoAndIfaceCache;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

enum class PCObserverStateType : uint8_t {
  None,
  IceConnectionState,
  IceGatheringState,
  SignalingState,
  EndGuard_
};

namespace PCObserverStateTypeValues {
extern const EnumEntry strings[5];

static constexpr size_t Count = 4;

// Our "strings" contains an extra entry with a null string.
static_assert(mozilla::ArrayLength(strings) - 1 == Count,
              "Mismatch between enum strings and enum count");

static_assert(static_cast<size_t>(PCObserverStateType::EndGuard_) == Count,
              "Mismatch between enum value and enum count");

inline auto GetString(PCObserverStateType stringId) {
  MOZ_ASSERT(static_cast<uint8_t>(stringId) < Count);
  const EnumEntry& entry = strings[static_cast<uint8_t>(stringId)];
  return Span<const char>{entry.value, entry.length};
}
} // namespace PCObserverStateTypeValues

bool
ToJSValue(JSContext* aCx, PCObserverStateType aArgument, JS::MutableHandle<JS::Value> aValue);


enum class PCError : uint8_t {
  UnknownError,
  InvalidAccessError,
  InvalidStateError,
  InvalidModificationError,
  OperationError,
  NotSupportedError,
  SyntaxError,
  NotReadableError,
  TypeError,
  RangeError,
  InvalidCharacterError,
  EndGuard_
};

namespace PCErrorValues {
extern const EnumEntry strings[12];

static constexpr size_t Count = 11;

// Our "strings" contains an extra entry with a null string.
static_assert(mozilla::ArrayLength(strings) - 1 == Count,
              "Mismatch between enum strings and enum count");

static_assert(static_cast<size_t>(PCError::EndGuard_) == Count,
              "Mismatch between enum value and enum count");

inline auto GetString(PCError stringId) {
  MOZ_ASSERT(static_cast<uint8_t>(stringId) < Count);
  const EnumEntry& entry = strings[static_cast<uint8_t>(stringId)];
  return Span<const char>{entry.value, entry.length};
}
} // namespace PCErrorValues

bool
ToJSValue(JSContext* aCx, PCError aArgument, JS::MutableHandle<JS::Value> aValue);


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_PeerConnectionObserverEnumsBinding_h
