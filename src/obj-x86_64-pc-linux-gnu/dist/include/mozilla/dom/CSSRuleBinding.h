/* THIS FILE IS AUTOGENERATED FROM CSSRule.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_CSSRuleBinding_h
#define mozilla_dom_CSSRuleBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/PrototypeList.h"

namespace mozilla {

namespace css {

class Rule;
struct RuleAtoms;

} // namespace css

namespace dom {

struct NativePropertyHooks;
class ProtoAndIfaceCache;

} // namespace dom

} // namespace mozilla

namespace mozilla {
namespace dom {

namespace CSSRule_Binding {

  typedef mozilla::css::Rule NativeType;

  static const uint16_t STYLE_RULE = 1;
  static const uint16_t CHARSET_RULE = 2;
  static const uint16_t IMPORT_RULE = 3;
  static const uint16_t MEDIA_RULE = 4;
  static const uint16_t FONT_FACE_RULE = 5;
  static const uint16_t PAGE_RULE = 6;
  static const uint16_t NAMESPACE_RULE = 10;
  static const uint16_t KEYFRAMES_RULE = 7;
  static const uint16_t KEYFRAME_RULE = 8;
  static const uint16_t COUNTER_STYLE_RULE = 11;
  static const uint16_t SUPPORTS_RULE = 12;
  static const uint16_t DOCUMENT_RULE = 13;
  static const uint16_t FONT_FEATURE_VALUES_RULE = 14;
  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  inline JS::Handle<JSObject*> GetProtoObjectHandle(JSContext* aCx)
  {
    /* Get the interface prototype object for this class.  This will create the
       object as needed. */
    return GetPerInterfaceObjectHandle(aCx, prototypes::id::CSSRule,
                                       &CreateInterfaceObjects,
                                       /* aDefineOnGlobal = */ true);

  }

  JSObject*
  GetProtoObject(JSContext* aCx);

  inline JS::Handle<JSObject*> GetConstructorObjectHandle(JSContext* aCx, bool aDefineOnGlobal = true)
  {
    /* Get the interface object for this class.  This will create the object as
       needed. */

    return GetPerInterfaceObjectHandle(aCx, constructors::id::CSSRule,
                                       &CreateInterfaceObjects,
                                       aDefineOnGlobal);
  }

  JSObject*
  GetConstructorObject(JSContext* aCx);

} // namespace CSSRule_Binding



} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_CSSRuleBinding_h
