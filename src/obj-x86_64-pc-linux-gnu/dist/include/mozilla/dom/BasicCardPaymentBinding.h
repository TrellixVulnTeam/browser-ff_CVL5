/* THIS FILE IS AUTOGENERATED FROM BasicCardPayment.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_BasicCardPaymentBinding_h
#define mozilla_dom_BasicCardPaymentBinding_h

#include "PaymentRequestBinding.h"
#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/PaymentAddress.h"

namespace mozilla {
namespace dom {

struct AddressErrors;
struct BasicCardChangeDetailsAtoms;
struct BasicCardErrorsAtoms;
struct BasicCardRequestAtoms;
struct BasicCardResponseAtoms;
struct NativePropertyHooks;
class PaymentAddress;
class ProtoAndIfaceCache;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct BasicCardChangeDetails : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR RefPtr<mozilla::dom::PaymentAddress> mBillingAddress;

  BasicCardChangeDetails();

  explicit inline BasicCardChangeDetails(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline BasicCardChangeDetails(const BasicCardChangeDetails& aOther)
  {
    *this = aOther;
  }

  bool
  Init(const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

  inline void
  TraverseForCC(nsCycleCollectionTraversalCallback& aCallback, uint32_t aFlags)
  {
    ImplCycleCollectionTraverse(aCallback, mBillingAddress, "mBillingAddress", aFlags);
  }

  inline void
  UnlinkForCC()
  {
    ImplCycleCollectionUnlink(mBillingAddress);
  }

  BasicCardChangeDetails&
  operator=(const BasicCardChangeDetails& aOther);

private:
  static bool
  InitIds(JSContext* cx, BasicCardChangeDetailsAtoms* atomsCache);
};

namespace binding_detail {
struct FastBasicCardChangeDetails : public BasicCardChangeDetails
{
  inline FastBasicCardChangeDetails()
    : BasicCardChangeDetails(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct BasicCardErrors : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR Optional<AddressErrors> mBillingAddress;
  MOZ_INIT_OUTSIDE_CTOR Optional<nsString> mCardNumber;
  MOZ_INIT_OUTSIDE_CTOR Optional<nsString> mCardSecurityCode;
  MOZ_INIT_OUTSIDE_CTOR Optional<nsString> mCardholderName;
  MOZ_INIT_OUTSIDE_CTOR Optional<nsString> mExpiryMonth;
  MOZ_INIT_OUTSIDE_CTOR Optional<nsString> mExpiryYear;

  BasicCardErrors();

  explicit inline BasicCardErrors(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline BasicCardErrors(const BasicCardErrors& aOther)
  {
    *this = aOther;
  }

  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  void
  TraceDictionary(JSTracer* trc);

  BasicCardErrors&
  operator=(const BasicCardErrors& aOther);

private:
  static bool
  InitIds(JSContext* cx, BasicCardErrorsAtoms* atomsCache);
};

namespace binding_detail {
struct FastBasicCardErrors : public BasicCardErrors
{
  inline FastBasicCardErrors()
    : BasicCardErrors(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct BasicCardRequest : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR bool mRequestSecurityCode;
  MOZ_INIT_OUTSIDE_CTOR Sequence<nsString> mSupportedNetworks;

  BasicCardRequest();

  explicit inline BasicCardRequest(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline BasicCardRequest(const BasicCardRequest& aOther)
  {
    *this = aOther;
  }

  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  void
  TraceDictionary(JSTracer* trc);

  BasicCardRequest&
  operator=(const BasicCardRequest& aOther);

private:
  static bool
  InitIds(JSContext* cx, BasicCardRequestAtoms* atomsCache);
};

namespace binding_detail {
struct FastBasicCardRequest : public BasicCardRequest
{
  inline FastBasicCardRequest()
    : BasicCardRequest(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct BasicCardResponse : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR RefPtr<mozilla::dom::PaymentAddress> mBillingAddress;
  MOZ_INIT_OUTSIDE_CTOR nsString mCardNumber;
  MOZ_INIT_OUTSIDE_CTOR nsString mCardSecurityCode;
  MOZ_INIT_OUTSIDE_CTOR nsString mCardholderName;
  MOZ_INIT_OUTSIDE_CTOR nsString mExpiryMonth;
  MOZ_INIT_OUTSIDE_CTOR nsString mExpiryYear;

  BasicCardResponse();

  explicit inline BasicCardResponse(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline BasicCardResponse(const BasicCardResponse& aOther)
  {
    *this = aOther;
  }

  bool
  Init(const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

  inline void
  TraverseForCC(nsCycleCollectionTraversalCallback& aCallback, uint32_t aFlags)
  {
    ImplCycleCollectionTraverse(aCallback, mBillingAddress, "mBillingAddress", aFlags);
  }

  inline void
  UnlinkForCC()
  {
    ImplCycleCollectionUnlink(mBillingAddress);
  }

  BasicCardResponse&
  operator=(const BasicCardResponse& aOther);

private:
  static bool
  InitIds(JSContext* cx, BasicCardResponseAtoms* atomsCache);
};

namespace binding_detail {
struct FastBasicCardResponse : public BasicCardResponse
{
  inline FastBasicCardResponse()
    : BasicCardResponse(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_BasicCardPaymentBinding_h
