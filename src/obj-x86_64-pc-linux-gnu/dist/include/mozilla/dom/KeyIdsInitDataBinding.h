/* THIS FILE IS AUTOGENERATED FROM KeyIdsInitData.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_KeyIdsInitDataBinding_h
#define mozilla_dom_KeyIdsInitDataBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"

namespace mozilla {
namespace dom {

struct KeyIdsInitDataAtoms;
struct NativePropertyHooks;
class ProtoAndIfaceCache;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct KeyIdsInitData : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR Sequence<nsString> mKids;

  KeyIdsInitData();

  explicit inline KeyIdsInitData(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline KeyIdsInitData(const KeyIdsInitData& aOther)
  {
    *this = aOther;
  }

  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(const nsAString& aJSON);

  void
  TraceDictionary(JSTracer* trc);

  KeyIdsInitData&
  operator=(const KeyIdsInitData& aOther);

private:
  static bool
  InitIds(JSContext* cx, KeyIdsInitDataAtoms* atomsCache);
};

namespace binding_detail {
struct FastKeyIdsInitData : public KeyIdsInitData
{
  inline FastKeyIdsInitData()
    : KeyIdsInitData(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_KeyIdsInitDataBinding_h
