/* THIS FILE IS AUTOGENERATED FROM MIDIOptions.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_MIDIOptionsBinding_h
#define mozilla_dom_MIDIOptionsBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"

namespace mozilla {
namespace dom {

struct MIDIOptionsAtoms;
struct NativePropertyHooks;
class ProtoAndIfaceCache;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct MIDIOptions : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR bool mSoftware;
  MOZ_INIT_OUTSIDE_CTOR bool mSysex;

  MIDIOptions();

  explicit inline MIDIOptions(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline MIDIOptions(const MIDIOptions& aOther)
  {
    *this = aOther;
  }

  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  void
  TraceDictionary(JSTracer* trc);

  MIDIOptions&
  operator=(const MIDIOptions& aOther);

  bool
  operator==(const MIDIOptions& aOther) const;

private:
  static bool
  InitIds(JSContext* cx, MIDIOptionsAtoms* atomsCache);
};

namespace binding_detail {
struct FastMIDIOptions : public MIDIOptions
{
  inline FastMIDIOptions()
    : MIDIOptions(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_MIDIOptionsBinding_h
