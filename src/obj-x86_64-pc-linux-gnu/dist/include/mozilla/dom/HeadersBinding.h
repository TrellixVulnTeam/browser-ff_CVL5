/* THIS FILE IS AUTOGENERATED FROM Headers.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_HeadersBinding_h
#define mozilla_dom_HeadersBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ArrayUtils.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/Span.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/FakeString.h"
#include "mozilla/dom/IterableIterator.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/PrototypeList.h"
#include "mozilla/dom/Record.h"
#include "mozilla/dom/UnionMember.h"

namespace mozilla {
namespace dom {

class Headers;
struct HeadersAtoms;
struct NativePropertyHooks;
class ProtoAndIfaceCache;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

enum class HeadersGuardEnum : uint8_t {
  None,
  Request,
  Request_no_cors,
  Response,
  Immutable,
  EndGuard_
};

namespace HeadersGuardEnumValues {
extern const EnumEntry strings[6];

static constexpr size_t Count = 5;

// Our "strings" contains an extra entry with a null string.
static_assert(mozilla::ArrayLength(strings) - 1 == Count,
              "Mismatch between enum strings and enum count");

static_assert(static_cast<size_t>(HeadersGuardEnum::EndGuard_) == Count,
              "Mismatch between enum value and enum count");

inline auto GetString(HeadersGuardEnum stringId) {
  MOZ_ASSERT(static_cast<uint8_t>(stringId) < Count);
  const EnumEntry& entry = strings[static_cast<uint8_t>(stringId)];
  return Span<const char>{entry.value, entry.length};
}
} // namespace HeadersGuardEnumValues

bool
ToJSValue(JSContext* aCx, HeadersGuardEnum aArgument, JS::MutableHandle<JS::Value> aValue);


class ByteStringSequenceSequenceOrByteStringByteStringRecord
{
  friend class ByteStringSequenceSequenceOrByteStringByteStringRecordArgument;
  enum Type
  {
    eUninitialized,
    eByteStringSequenceSequence,
    eByteStringByteStringRecord
  };

  union Value
  {
    UnionMember<binding_detail::AutoSequence<Sequence<nsCString>> > mByteStringSequenceSequence;
    UnionMember<Record<nsCString, nsCString> > mByteStringByteStringRecord;

  };

  Type mType;
  Value mValue;

  ByteStringSequenceSequenceOrByteStringByteStringRecord(const ByteStringSequenceSequenceOrByteStringByteStringRecord&) = delete;
  ByteStringSequenceSequenceOrByteStringByteStringRecord& operator=(const ByteStringSequenceSequenceOrByteStringByteStringRecord&) = delete;
public:
  explicit inline ByteStringSequenceSequenceOrByteStringByteStringRecord()
    : mType(eUninitialized)
  {
  }

  inline ~ByteStringSequenceSequenceOrByteStringByteStringRecord()
  {
    Uninit();
  }

  inline binding_detail::AutoSequence<Sequence<nsCString>>&
  RawSetAsByteStringSequenceSequence()
  {
    if (mType == eByteStringSequenceSequence) {
      return mValue.mByteStringSequenceSequence.Value();
    }
    MOZ_ASSERT(mType == eUninitialized);
    mType = eByteStringSequenceSequence;
    return mValue.mByteStringSequenceSequence.SetValue();
  }

  inline binding_detail::AutoSequence<Sequence<nsCString>>&
  SetAsByteStringSequenceSequence()
  {
    if (mType == eByteStringSequenceSequence) {
      return mValue.mByteStringSequenceSequence.Value();
    }
    Uninit();
    mType = eByteStringSequenceSequence;
    return mValue.mByteStringSequenceSequence.SetValue();
  }

  inline bool
  IsByteStringSequenceSequence() const
  {
    return mType == eByteStringSequenceSequence;
  }

  inline binding_detail::AutoSequence<Sequence<nsCString>>&
  GetAsByteStringSequenceSequence()
  {
    MOZ_ASSERT(IsByteStringSequenceSequence(), "Wrong type!");
    return mValue.mByteStringSequenceSequence.Value();
  }

  inline const Sequence<Sequence<nsCString>>&
  GetAsByteStringSequenceSequence() const
  {
    MOZ_ASSERT(IsByteStringSequenceSequence(), "Wrong type!");
    return mValue.mByteStringSequenceSequence.Value();
  }

  inline Record<nsCString, nsCString>&
  RawSetAsByteStringByteStringRecord()
  {
    if (mType == eByteStringByteStringRecord) {
      return mValue.mByteStringByteStringRecord.Value();
    }
    MOZ_ASSERT(mType == eUninitialized);
    mType = eByteStringByteStringRecord;
    return mValue.mByteStringByteStringRecord.SetValue();
  }

  inline Record<nsCString, nsCString>&
  SetAsByteStringByteStringRecord()
  {
    if (mType == eByteStringByteStringRecord) {
      return mValue.mByteStringByteStringRecord.Value();
    }
    Uninit();
    mType = eByteStringByteStringRecord;
    return mValue.mByteStringByteStringRecord.SetValue();
  }

  inline bool
  IsByteStringByteStringRecord() const
  {
    return mType == eByteStringByteStringRecord;
  }

  inline Record<nsCString, nsCString>&
  GetAsByteStringByteStringRecord()
  {
    MOZ_ASSERT(IsByteStringByteStringRecord(), "Wrong type!");
    return mValue.mByteStringByteStringRecord.Value();
  }

  inline const Record<nsCString, nsCString>&
  GetAsByteStringByteStringRecord() const
  {
    MOZ_ASSERT(IsByteStringByteStringRecord(), "Wrong type!");
    return mValue.mByteStringByteStringRecord.Value();
  }

  inline void
  Uninit()
  {
    switch (mType) {
      case eUninitialized: {
        break;
      }
      case eByteStringSequenceSequence: {
        DestroyByteStringSequenceSequence();
        break;
      }
      case eByteStringByteStringRecord: {
        DestroyByteStringByteStringRecord();
        break;
      }
    }
  }

  bool
  ToJSVal(JSContext* cx, JS::Handle<JSObject*> scopeObj, JS::MutableHandle<JS::Value> rval) const;

private:
  inline void
  DestroyByteStringSequenceSequence()
  {
    MOZ_ASSERT(IsByteStringSequenceSequence(), "Wrong type!");
    mValue.mByteStringSequenceSequence.Destroy();
    mType = eUninitialized;
  }

  inline void
  DestroyByteStringByteStringRecord()
  {
    MOZ_ASSERT(IsByteStringByteStringRecord(), "Wrong type!");
    mValue.mByteStringByteStringRecord.Destroy();
    mType = eUninitialized;
  }
};


class OwningByteStringSequenceSequenceOrByteStringByteStringRecord : public AllOwningUnionBase
{
  friend void ImplCycleCollectionUnlink(OwningByteStringSequenceSequenceOrByteStringByteStringRecord& aUnion);
  enum Type
  {
    eUninitialized,
    eByteStringSequenceSequence,
    eByteStringByteStringRecord
  };

  union Value
  {
    UnionMember<Sequence<Sequence<nsCString>> > mByteStringSequenceSequence;
    UnionMember<Record<nsCString, nsCString> > mByteStringByteStringRecord;

  };

  Type mType;
  Value mValue;

  OwningByteStringSequenceSequenceOrByteStringByteStringRecord(const OwningByteStringSequenceSequenceOrByteStringByteStringRecord&) = delete;
  OwningByteStringSequenceSequenceOrByteStringByteStringRecord& operator=(const OwningByteStringSequenceSequenceOrByteStringByteStringRecord&) = delete;
public:
  explicit inline OwningByteStringSequenceSequenceOrByteStringByteStringRecord()
    : mType(eUninitialized)
  {
  }

  inline ~OwningByteStringSequenceSequenceOrByteStringByteStringRecord()
  {
    Uninit();
  }

  Sequence<Sequence<nsCString>>&
  RawSetAsByteStringSequenceSequence();

  Sequence<Sequence<nsCString>>&
  SetAsByteStringSequenceSequence();

  bool
  TrySetToByteStringSequenceSequence(BindingCallContext& cx, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  bool
  TrySetToByteStringSequenceSequence(JSContext* cx_, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  inline bool
  IsByteStringSequenceSequence() const
  {
    return mType == eByteStringSequenceSequence;
  }

  inline Sequence<Sequence<nsCString>>&
  GetAsByteStringSequenceSequence()
  {
    MOZ_ASSERT(IsByteStringSequenceSequence(), "Wrong type!");
    return mValue.mByteStringSequenceSequence.Value();
  }

  inline Sequence<Sequence<nsCString>> const &
  GetAsByteStringSequenceSequence() const
  {
    MOZ_ASSERT(IsByteStringSequenceSequence(), "Wrong type!");
    return mValue.mByteStringSequenceSequence.Value();
  }

  Record<nsCString, nsCString>&
  RawSetAsByteStringByteStringRecord();

  Record<nsCString, nsCString>&
  SetAsByteStringByteStringRecord();

  bool
  TrySetToByteStringByteStringRecord(BindingCallContext& cx, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  bool
  TrySetToByteStringByteStringRecord(JSContext* cx_, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  inline bool
  IsByteStringByteStringRecord() const
  {
    return mType == eByteStringByteStringRecord;
  }

  inline Record<nsCString, nsCString>&
  GetAsByteStringByteStringRecord()
  {
    MOZ_ASSERT(IsByteStringByteStringRecord(), "Wrong type!");
    return mValue.mByteStringByteStringRecord.Value();
  }

  inline Record<nsCString, nsCString> const &
  GetAsByteStringByteStringRecord() const
  {
    MOZ_ASSERT(IsByteStringByteStringRecord(), "Wrong type!");
    return mValue.mByteStringByteStringRecord.Value();
  }

  void
  Uninit();

  bool
  ToJSVal(JSContext* cx, JS::Handle<JSObject*> scopeObj, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceUnion(JSTracer* trc);

private:
  void
  DestroyByteStringSequenceSequence();

  void
  DestroyByteStringByteStringRecord();
};


namespace Headers_Binding {

  typedef mozilla::dom::Headers NativeType;

  const JSClass*
  GetJSClass();

  bool
  Wrap(JSContext* aCx, mozilla::dom::Headers* aObject, nsWrapperCache* aCache, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector);

  template <class T>
  inline JSObject* Wrap(JSContext* aCx, T* aObject, JS::Handle<JSObject*> aGivenProto)
  {
    JS::Rooted<JSObject*> reflector(aCx);
    return Wrap(aCx, aObject, aObject, aGivenProto, &reflector) ? reflector.get() : nullptr;
  }

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  inline JS::Handle<JSObject*> GetProtoObjectHandle(JSContext* aCx)
  {
    /* Get the interface prototype object for this class.  This will create the
       object as needed. */
    return GetPerInterfaceObjectHandle(aCx, prototypes::id::Headers,
                                       &CreateInterfaceObjects,
                                       /* aDefineOnGlobal = */ true);

  }

  inline JS::Handle<JSObject*> GetConstructorObjectHandle(JSContext* aCx, bool aDefineOnGlobal = true)
  {
    /* Get the interface object for this class.  This will create the object as
       needed. */

    return GetPerInterfaceObjectHandle(aCx, constructors::id::Headers,
                                       &CreateInterfaceObjects,
                                       aDefineOnGlobal);
  }

  JSObject*
  GetConstructorObject(JSContext* aCx);

} // namespace Headers_Binding



namespace HeadersIterator_Binding {

  typedef mozilla::dom::IterableIterator<mozilla::dom::Headers> NativeType;

  const JSClass*
  GetJSClass();

  bool
  Wrap(JSContext* aCx, mozilla::dom::IterableIterator<mozilla::dom::Headers>* aObject, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector);

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  inline JS::Handle<JSObject*> GetProtoObjectHandle(JSContext* aCx)
  {
    /* Get the interface prototype object for this class.  This will create the
       object as needed. */
    return GetPerInterfaceObjectHandle(aCx, prototypes::id::HeadersIterator,
                                       &CreateInterfaceObjects,
                                       /* aDefineOnGlobal = */ true);

  }

} // namespace HeadersIterator_Binding



} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_HeadersBinding_h
