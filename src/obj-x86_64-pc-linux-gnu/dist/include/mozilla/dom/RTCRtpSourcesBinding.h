/* THIS FILE IS AUTOGENERATED FROM RTCRtpSources.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_RTCRtpSourcesBinding_h
#define mozilla_dom_RTCRtpSourcesBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ArrayUtils.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/Span.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"

namespace mozilla {
namespace dom {

struct NativePropertyHooks;
class ProtoAndIfaceCache;
struct RTCRtpContributingSourceAtoms;
struct RTCRtpSourceEntryAtoms;
struct RTCRtpSynchronizationSourceAtoms;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

enum class RTCRtpSourceEntryType : uint8_t {
  Contributing,
  Synchronization,
  EndGuard_
};

namespace RTCRtpSourceEntryTypeValues {
extern const EnumEntry strings[3];

static constexpr size_t Count = 2;

// Our "strings" contains an extra entry with a null string.
static_assert(mozilla::ArrayLength(strings) - 1 == Count,
              "Mismatch between enum strings and enum count");

static_assert(static_cast<size_t>(RTCRtpSourceEntryType::EndGuard_) == Count,
              "Mismatch between enum value and enum count");

inline auto GetString(RTCRtpSourceEntryType stringId) {
  MOZ_ASSERT(static_cast<uint8_t>(stringId) < Count);
  const EnumEntry& entry = strings[static_cast<uint8_t>(stringId)];
  return Span<const char>{entry.value, entry.length};
}
} // namespace RTCRtpSourceEntryTypeValues

bool
ToJSValue(JSContext* aCx, RTCRtpSourceEntryType aArgument, JS::MutableHandle<JS::Value> aValue);


struct RTCRtpContributingSource : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR Optional<double> mAudioLevel;
  MOZ_INIT_OUTSIDE_CTOR uint32_t mRtpTimestamp;
  MOZ_INIT_OUTSIDE_CTOR uint32_t mSource;
  MOZ_INIT_OUTSIDE_CTOR double mTimestamp;

  RTCRtpContributingSource();

  explicit inline RTCRtpContributingSource(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline RTCRtpContributingSource(const RTCRtpContributingSource& aOther)
  {
    *this = aOther;
  }

  bool
  Init(const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

  RTCRtpContributingSource&
  operator=(const RTCRtpContributingSource& aOther);

  bool
  operator==(const RTCRtpContributingSource& aOther) const;

private:
  static bool
  InitIds(JSContext* cx, RTCRtpContributingSourceAtoms* atomsCache);
};

namespace binding_detail {
struct FastRTCRtpContributingSource : public RTCRtpContributingSource
{
  inline FastRTCRtpContributingSource()
    : RTCRtpContributingSource(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct RTCRtpSynchronizationSource : public RTCRtpContributingSource
{
  MOZ_INIT_OUTSIDE_CTOR Optional<Nullable<bool>> mVoiceActivityFlag;

  RTCRtpSynchronizationSource();

  explicit inline RTCRtpSynchronizationSource(const FastDictionaryInitializer& )
    : RTCRtpContributingSource(FastDictionaryInitializer())
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline RTCRtpSynchronizationSource(const RTCRtpSynchronizationSource& aOther)
    : RTCRtpContributingSource(FastDictionaryInitializer())
  {
    *this = aOther;
  }

  bool
  Init(const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

  RTCRtpSynchronizationSource&
  operator=(const RTCRtpSynchronizationSource& aOther);

  bool
  operator==(const RTCRtpSynchronizationSource& aOther) const;

private:
  static bool
  InitIds(JSContext* cx, RTCRtpSynchronizationSourceAtoms* atomsCache);
};

namespace binding_detail {
struct FastRTCRtpSynchronizationSource : public RTCRtpSynchronizationSource
{
  inline FastRTCRtpSynchronizationSource()
    : RTCRtpSynchronizationSource(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct RTCRtpSourceEntry : public RTCRtpSynchronizationSource
{
  MOZ_INIT_OUTSIDE_CTOR RTCRtpSourceEntryType mSourceType;

  RTCRtpSourceEntry();

  explicit inline RTCRtpSourceEntry(const FastDictionaryInitializer& )
    : RTCRtpSynchronizationSource(FastDictionaryInitializer())
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline RTCRtpSourceEntry(const RTCRtpSourceEntry& aOther)
    : RTCRtpSynchronizationSource(FastDictionaryInitializer())
  {
    *this = aOther;
  }

  bool
  Init(const char* sourceDescription = "Value", bool passedToJSImpl = false);

  void
  TraceDictionary(JSTracer* trc);

  RTCRtpSourceEntry&
  operator=(const RTCRtpSourceEntry& aOther);

private:
  static bool
  InitIds(JSContext* cx, RTCRtpSourceEntryAtoms* atomsCache);
};

namespace binding_detail {
struct FastRTCRtpSourceEntry : public RTCRtpSourceEntry
{
  inline FastRTCRtpSourceEntry()
    : RTCRtpSourceEntry(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_RTCRtpSourcesBinding_h
