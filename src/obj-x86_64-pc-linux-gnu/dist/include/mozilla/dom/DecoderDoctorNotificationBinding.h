/* THIS FILE IS AUTOGENERATED FROM DecoderDoctorNotification.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_DecoderDoctorNotificationBinding_h
#define mozilla_dom_DecoderDoctorNotificationBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ArrayUtils.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/Span.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"

namespace mozilla {
namespace dom {

struct DecoderDoctorNotificationAtoms;
struct NativePropertyHooks;
class ProtoAndIfaceCache;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

enum class DecoderDoctorNotificationType : uint8_t {
  Cannot_play,
  Platform_decoder_not_found,
  Can_play_but_some_missing_decoders,
  Cannot_initialize_pulseaudio,
  Unsupported_libavcodec,
  Decode_error,
  Decode_warning,
  EndGuard_
};

namespace DecoderDoctorNotificationTypeValues {
extern const EnumEntry strings[8];

static constexpr size_t Count = 7;

// Our "strings" contains an extra entry with a null string.
static_assert(mozilla::ArrayLength(strings) - 1 == Count,
              "Mismatch between enum strings and enum count");

static_assert(static_cast<size_t>(DecoderDoctorNotificationType::EndGuard_) == Count,
              "Mismatch between enum value and enum count");

inline auto GetString(DecoderDoctorNotificationType stringId) {
  MOZ_ASSERT(static_cast<uint8_t>(stringId) < Count);
  const EnumEntry& entry = strings[static_cast<uint8_t>(stringId)];
  return Span<const char>{entry.value, entry.length};
}
} // namespace DecoderDoctorNotificationTypeValues

bool
ToJSValue(JSContext* aCx, DecoderDoctorNotificationType aArgument, JS::MutableHandle<JS::Value> aValue);


struct DecoderDoctorNotification : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR Optional<nsString> mDecodeIssue;
  MOZ_INIT_OUTSIDE_CTOR nsString mDecoderDoctorReportId;
  MOZ_INIT_OUTSIDE_CTOR Optional<nsString> mDocURL;
  MOZ_INIT_OUTSIDE_CTOR Optional<nsString> mFormats;
  MOZ_INIT_OUTSIDE_CTOR bool mIsSolved;
  MOZ_INIT_OUTSIDE_CTOR Optional<nsString> mResourceURL;
  MOZ_INIT_OUTSIDE_CTOR DecoderDoctorNotificationType mType;

  DecoderDoctorNotification();

  explicit inline DecoderDoctorNotification(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline DecoderDoctorNotification(const DecoderDoctorNotification& aOther)
  {
    *this = aOther;
  }

  bool
  Init(const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  bool
  ToJSON(nsAString& aJSON) const;

  void
  TraceDictionary(JSTracer* trc);

  DecoderDoctorNotification&
  operator=(const DecoderDoctorNotification& aOther);

private:
  static bool
  InitIds(JSContext* cx, DecoderDoctorNotificationAtoms* atomsCache);
};

namespace binding_detail {
struct FastDecoderDoctorNotification : public DecoderDoctorNotification
{
  inline FastDecoderDoctorNotification()
    : DecoderDoctorNotification(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_DecoderDoctorNotificationBinding_h
