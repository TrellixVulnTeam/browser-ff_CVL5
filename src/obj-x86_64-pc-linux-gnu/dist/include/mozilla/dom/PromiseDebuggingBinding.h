/* THIS FILE IS AUTOGENERATED FROM PromiseDebugging.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_PromiseDebuggingBinding_h
#define mozilla_dom_PromiseDebuggingBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ArrayUtils.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/Span.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/CallbackInterface.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/PrototypeList.h"
#include "mozilla/dom/ToJSValue.h"

namespace mozilla {
namespace dom {

struct NativePropertyHooks;
class PromiseDebugging;
struct PromiseDebuggingAtoms;
struct PromiseDebuggingStateHolderAtoms;
class ProtoAndIfaceCache;
class UncaughtRejectionObserver;
struct UncaughtRejectionObserverAtoms;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

enum class PromiseDebuggingState : uint8_t {
  Pending,
  Fulfilled,
  Rejected,
  EndGuard_
};

namespace PromiseDebuggingStateValues {
extern const EnumEntry strings[4];

static constexpr size_t Count = 3;

// Our "strings" contains an extra entry with a null string.
static_assert(mozilla::ArrayLength(strings) - 1 == Count,
              "Mismatch between enum strings and enum count");

static_assert(static_cast<size_t>(PromiseDebuggingState::EndGuard_) == Count,
              "Mismatch between enum value and enum count");

inline auto GetString(PromiseDebuggingState stringId) {
  MOZ_ASSERT(static_cast<uint8_t>(stringId) < Count);
  const EnumEntry& entry = strings[static_cast<uint8_t>(stringId)];
  return Span<const char>{entry.value, entry.length};
}
} // namespace PromiseDebuggingStateValues

bool
ToJSValue(JSContext* aCx, PromiseDebuggingState aArgument, JS::MutableHandle<JS::Value> aValue);


struct PromiseDebuggingStateHolder : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR JS::Value mReason;
  MOZ_INIT_OUTSIDE_CTOR PromiseDebuggingState mState;
  MOZ_INIT_OUTSIDE_CTOR JS::Value mValue;

  PromiseDebuggingStateHolder();

  explicit inline PromiseDebuggingStateHolder(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

private:
  PromiseDebuggingStateHolder(const PromiseDebuggingStateHolder&) = delete;
  PromiseDebuggingStateHolder& operator=(const PromiseDebuggingStateHolder&) = delete;

  static bool
  InitIds(JSContext* cx, PromiseDebuggingStateHolderAtoms* atomsCache);

public:
  bool
  Init(const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);
};

namespace binding_detail {
struct FastPromiseDebuggingStateHolder : public PromiseDebuggingStateHolder
{
  inline FastPromiseDebuggingStateHolder()
    : PromiseDebuggingStateHolder(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


namespace PromiseDebugging_Binding {

  typedef mozilla::dom::PromiseDebugging NativeType;

  bool
  ConstructorEnabled(JSContext* aCx, JS::Handle<JSObject*> aObj);

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  inline JS::Handle<JSObject*> GetConstructorObjectHandle(JSContext* aCx, bool aDefineOnGlobal = true)
  {
    /* Get the interface object for this class.  This will create the object as
       needed. */

    return GetPerInterfaceObjectHandle(aCx, constructors::id::PromiseDebugging,
                                       &CreateInterfaceObjects,
                                       aDefineOnGlobal);
  }

  JSObject*
  GetConstructorObject(JSContext* aCx);

} // namespace PromiseDebugging_Binding



class UncaughtRejectionObserver : public CallbackInterface
{
public:
  explicit inline UncaughtRejectionObserver(JSContext* aCx, JS::Handle<JSObject*> aCallback, JS::Handle<JSObject*> aCallbackGlobal, nsIGlobalObject* aIncumbentGlobal)
    : CallbackInterface(aCx, aCallback, aCallbackGlobal, aIncumbentGlobal)
  {
  }

  explicit inline UncaughtRejectionObserver(JSObject* aCallback, JSObject* aCallbackGlobal, const FastCallbackConstructor& )
    : CallbackInterface(aCallback, aCallbackGlobal, FastCallbackConstructor())
  {
  }

  explicit inline UncaughtRejectionObserver(JSObject* aCallback, JSObject* aCallbackGlobal, JSObject* aAsyncStack, nsIGlobalObject* aIncumbentGlobal)
    : CallbackInterface(aCallback, aCallbackGlobal, aAsyncStack, aIncumbentGlobal)
  {
  }

  bool OnLeftUncaught(JS::Handle<JSObject*> p, ErrorResult& aRv, const char* aExecutionReason = nullptr, ExceptionHandling aExceptionHandling = eReportExceptions, JS::Realm* aRealm = nullptr);

  void OnConsumed(JS::Handle<JSObject*> p, ErrorResult& aRv, const char* aExecutionReason = nullptr, ExceptionHandling aExceptionHandling = eReportExceptions, JS::Realm* aRealm = nullptr);

  inline bool
  operator==(const UncaughtRejectionObserver& aOther) const
  {
    return CallbackInterface::operator==(aOther);
  }

private:
  static bool
  InitIds(JSContext* cx, UncaughtRejectionObserverAtoms* atomsCache);
};


namespace binding_detail {
class FastUncaughtRejectionObserver : public UncaughtRejectionObserver
{
public:
  explicit inline FastUncaughtRejectionObserver(JSObject* aCallback, JSObject* aCallbackGlobal)
    : UncaughtRejectionObserver(aCallback, aCallbackGlobal, FastCallbackConstructor())
  {
  }

  inline void
  Trace(JSTracer* aTracer)
  {
    UncaughtRejectionObserver::Trace(aTracer);
  }

  inline void
  FinishSlowJSInitIfMoreThanOneOwner(JSContext* aCx)
  {
    UncaughtRejectionObserver::FinishSlowJSInitIfMoreThanOneOwner(aCx);
  }
};
} // namespace binding_detail


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_PromiseDebuggingBinding_h
