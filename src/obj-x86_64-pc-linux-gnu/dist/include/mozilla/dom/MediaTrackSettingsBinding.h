/* THIS FILE IS AUTOGENERATED FROM MediaTrackSettings.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_MediaTrackSettingsBinding_h
#define mozilla_dom_MediaTrackSettingsBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"

namespace mozilla {
namespace dom {

struct MediaTrackSettingsAtoms;
struct NativePropertyHooks;
class ProtoAndIfaceCache;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct MediaTrackSettings : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR Optional<bool> mAutoGainControl;
  MOZ_INIT_OUTSIDE_CTOR Optional<int64_t> mBrowserWindow;
  MOZ_INIT_OUTSIDE_CTOR Optional<int32_t> mChannelCount;
  MOZ_INIT_OUTSIDE_CTOR Optional<nsString> mDeviceId;
  MOZ_INIT_OUTSIDE_CTOR Optional<bool> mEchoCancellation;
  MOZ_INIT_OUTSIDE_CTOR Optional<nsString> mFacingMode;
  MOZ_INIT_OUTSIDE_CTOR Optional<double> mFrameRate;
  MOZ_INIT_OUTSIDE_CTOR Optional<nsString> mGroupId;
  MOZ_INIT_OUTSIDE_CTOR Optional<int32_t> mHeight;
  MOZ_INIT_OUTSIDE_CTOR Optional<nsString> mMediaSource;
  MOZ_INIT_OUTSIDE_CTOR Optional<bool> mNoiseSuppression;
  MOZ_INIT_OUTSIDE_CTOR Optional<bool> mScrollWithPage;
  MOZ_INIT_OUTSIDE_CTOR Optional<int32_t> mViewportHeight;
  MOZ_INIT_OUTSIDE_CTOR Optional<int32_t> mViewportOffsetX;
  MOZ_INIT_OUTSIDE_CTOR Optional<int32_t> mViewportOffsetY;
  MOZ_INIT_OUTSIDE_CTOR Optional<int32_t> mViewportWidth;
  MOZ_INIT_OUTSIDE_CTOR Optional<int32_t> mWidth;

  MediaTrackSettings();

  explicit inline MediaTrackSettings(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline MediaTrackSettings(const MediaTrackSettings& aOther)
  {
    *this = aOther;
  }

  bool
  Init(const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

  MediaTrackSettings&
  operator=(const MediaTrackSettings& aOther);

  bool
  operator==(const MediaTrackSettings& aOther) const;

private:
  static bool
  InitIds(JSContext* cx, MediaTrackSettingsAtoms* atomsCache);
};

namespace binding_detail {
struct FastMediaTrackSettings : public MediaTrackSettings
{
  inline FastMediaTrackSettings()
    : MediaTrackSettings(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_MediaTrackSettingsBinding_h
