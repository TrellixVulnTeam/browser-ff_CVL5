/* THIS FILE IS AUTOGENERATED FROM IDBObjectStore.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_IDBObjectStoreBinding_h
#define mozilla_dom_IDBObjectStoreBinding_h

#include "IDBCursorBinding.h"
#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/PrototypeList.h"
#include "mozilla/dom/UnionTypes.h"

namespace mozilla {
namespace dom {

class IDBObjectStore;
struct IDBObjectStoreAtoms;
struct IDBObjectStoreParametersAtoms;
struct NativePropertyHooks;
class OwningStringOrStringSequence;
class ProtoAndIfaceCache;
class StringOrStringSequence;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct IDBObjectStoreParameters : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR bool mAutoIncrement;
  MOZ_INIT_OUTSIDE_CTOR Nullable<OwningStringOrStringSequence > mKeyPath;

  IDBObjectStoreParameters();

  explicit inline IDBObjectStoreParameters(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline IDBObjectStoreParameters(const IDBObjectStoreParameters& aOther)
  {
    *this = aOther;
  }

  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  void
  TraceDictionary(JSTracer* trc);

  IDBObjectStoreParameters&
  operator=(const IDBObjectStoreParameters& aOther);

private:
  static bool
  InitIds(JSContext* cx, IDBObjectStoreParametersAtoms* atomsCache);
};

namespace binding_detail {
struct FastIDBObjectStoreParameters : public IDBObjectStoreParameters
{
  inline FastIDBObjectStoreParameters()
    : IDBObjectStoreParameters(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


namespace IDBObjectStore_Binding {

  typedef mozilla::dom::IDBObjectStore NativeType;

  const JSClass*
  GetJSClass();

  bool
  Wrap(JSContext* aCx, mozilla::dom::IDBObjectStore* aObject, nsWrapperCache* aCache, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector);

  template <class T>
  inline JSObject* Wrap(JSContext* aCx, T* aObject, JS::Handle<JSObject*> aGivenProto)
  {
    JS::Rooted<JSObject*> reflector(aCx);
    return Wrap(aCx, aObject, aObject, aGivenProto, &reflector) ? reflector.get() : nullptr;
  }

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  inline JS::Handle<JSObject*> GetProtoObjectHandle(JSContext* aCx)
  {
    /* Get the interface prototype object for this class.  This will create the
       object as needed. */
    return GetPerInterfaceObjectHandle(aCx, prototypes::id::IDBObjectStore,
                                       &CreateInterfaceObjects,
                                       /* aDefineOnGlobal = */ true);

  }

  inline JS::Handle<JSObject*> GetConstructorObjectHandle(JSContext* aCx, bool aDefineOnGlobal = true)
  {
    /* Get the interface object for this class.  This will create the object as
       needed. */

    return GetPerInterfaceObjectHandle(aCx, constructors::id::IDBObjectStore,
                                       &CreateInterfaceObjects,
                                       aDefineOnGlobal);
  }

  JSObject*
  GetConstructorObject(JSContext* aCx);

} // namespace IDBObjectStore_Binding



} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_IDBObjectStoreBinding_h
