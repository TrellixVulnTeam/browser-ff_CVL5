/* THIS FILE IS AUTOGENERATED FROM Localization.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_LocalizationBinding_h
#define mozilla_dom_LocalizationBinding_h

#include "FluentBinding.h"
#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/CallbackFunction.h"
#include "mozilla/dom/FakeString.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/PrototypeList.h"
#include "mozilla/dom/Record.h"
#include "mozilla/dom/ToJSValue.h"
#include "mozilla/dom/UnionMember.h"

namespace mozilla {

namespace dom {

struct AttributeNameValue;
struct AttributeNameValueAtoms;
struct BundleGeneratorAtoms;
class GenerateBundles;
class GenerateBundlesSync;
struct L10nArgsHelperDictAtoms;
struct L10nIdArgsAtoms;
struct L10nMessageAtoms;
struct NativePropertyHooks;
class OwningUTF8StringOrDouble;
class Promise;
class ProtoAndIfaceCache;
class UTF8StringOrDouble;

} // namespace dom

namespace intl {

class Localization;
struct LocalizationAtoms;

} // namespace intl

} // namespace mozilla

namespace mozilla {
namespace dom {

struct AttributeNameValue : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR nsCString mName;
  MOZ_INIT_OUTSIDE_CTOR nsCString mValue;

  AttributeNameValue();

  explicit inline AttributeNameValue(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline AttributeNameValue(const AttributeNameValue& aOther)
  {
    *this = aOther;
  }

  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

  AttributeNameValue&
  operator=(const AttributeNameValue& aOther);

  bool
  operator==(const AttributeNameValue& aOther) const;

private:
  static bool
  InitIds(JSContext* cx, AttributeNameValueAtoms* atomsCache);
};

namespace binding_detail {
struct FastAttributeNameValue : public AttributeNameValue
{
  inline FastAttributeNameValue()
    : AttributeNameValue(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct BundleGenerator : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR Optional<OwningNonNull<GenerateBundles>> mGenerateBundles;
  MOZ_INIT_OUTSIDE_CTOR Optional<OwningNonNull<GenerateBundlesSync>> mGenerateBundlesSync;

  BundleGenerator();

  explicit inline BundleGenerator(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

private:
  BundleGenerator(const BundleGenerator&) = delete;
  BundleGenerator& operator=(const BundleGenerator&) = delete;

  static bool
  InitIds(JSContext* cx, BundleGeneratorAtoms* atomsCache);

public:
  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  void
  TraceDictionary(JSTracer* trc);

  inline void
  TraverseForCC(nsCycleCollectionTraversalCallback& aCallback, uint32_t aFlags)
  {
    ImplCycleCollectionTraverse(aCallback, mGenerateBundles, "mGenerateBundles", aFlags);
    ImplCycleCollectionTraverse(aCallback, mGenerateBundlesSync, "mGenerateBundlesSync", aFlags);
  }

  inline void
  UnlinkForCC()
  {
    ImplCycleCollectionUnlink(mGenerateBundles);
    ImplCycleCollectionUnlink(mGenerateBundlesSync);
  }
};

namespace binding_detail {
struct FastBundleGenerator : public BundleGenerator
{
  inline FastBundleGenerator()
    : BundleGenerator(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct L10nArgsHelperDict : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR Record<nsCString, Nullable<OwningUTF8StringOrDouble >> mArgs;

  L10nArgsHelperDict();

  explicit inline L10nArgsHelperDict(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

private:
  L10nArgsHelperDict(const L10nArgsHelperDict&) = delete;
  L10nArgsHelperDict& operator=(const L10nArgsHelperDict&) = delete;

  static bool
  InitIds(JSContext* cx, L10nArgsHelperDictAtoms* atomsCache);

public:
  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(const nsAString& aJSON);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);
};

namespace binding_detail {
struct FastL10nArgsHelperDict : public L10nArgsHelperDict
{
  inline FastL10nArgsHelperDict()
    : L10nArgsHelperDict(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct L10nIdArgs : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR Nullable<Record<nsCString, Nullable<OwningUTF8StringOrDouble >>> mArgs;
  MOZ_INIT_OUTSIDE_CTOR nsCString mId;

  L10nIdArgs();

  explicit inline L10nIdArgs(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

private:
  L10nIdArgs(const L10nIdArgs&) = delete;
  L10nIdArgs& operator=(const L10nIdArgs&) = delete;

  static bool
  InitIds(JSContext* cx, L10nIdArgsAtoms* atomsCache);

public:
  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);
};

namespace binding_detail {
struct FastL10nIdArgs : public L10nIdArgs
{
  inline FastL10nIdArgs()
    : L10nIdArgs(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct L10nMessage : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR Nullable<Sequence<AttributeNameValue>> mAttributes;
  MOZ_INIT_OUTSIDE_CTOR nsCString mValue;

  L10nMessage();

  explicit inline L10nMessage(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline L10nMessage(const L10nMessage& aOther)
  {
    *this = aOther;
  }

  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

  L10nMessage&
  operator=(const L10nMessage& aOther);

private:
  static bool
  InitIds(JSContext* cx, L10nMessageAtoms* atomsCache);
};

namespace binding_detail {
struct FastL10nMessage : public L10nMessage
{
  inline FastL10nMessage()
    : L10nMessage(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


class UTF8StringOrL10nIdArgs
{
  friend class UTF8StringOrL10nIdArgsArgument;
  enum Type
  {
    eUninitialized,
    eUTF8String,
    eL10nIdArgs
  };

  union Value
  {
    UnionMember<binding_detail::FakeString<char> > mUTF8String;
    UnionMember<binding_detail::FastL10nIdArgs > mL10nIdArgs;

  };

  Type mType;
  Value mValue;

  UTF8StringOrL10nIdArgs(const UTF8StringOrL10nIdArgs&) = delete;
  UTF8StringOrL10nIdArgs& operator=(const UTF8StringOrL10nIdArgs&) = delete;
public:
  explicit inline UTF8StringOrL10nIdArgs()
    : mType(eUninitialized)
  {
  }

  inline ~UTF8StringOrL10nIdArgs()
  {
    Uninit();
  }

  inline binding_detail::FakeString<char>&
  RawSetAsUTF8String()
  {
    if (mType == eUTF8String) {
      return mValue.mUTF8String.Value();
    }
    MOZ_ASSERT(mType == eUninitialized);
    mType = eUTF8String;
    return mValue.mUTF8String.SetValue();
  }

  inline binding_detail::FakeString<char>&
  SetAsUTF8String()
  {
    if (mType == eUTF8String) {
      return mValue.mUTF8String.Value();
    }
    Uninit();
    mType = eUTF8String;
    return mValue.mUTF8String.SetValue();
  }

  inline bool
  IsUTF8String() const
  {
    return mType == eUTF8String;
  }

  inline binding_detail::FakeString<char>&
  GetAsUTF8String()
  {
    MOZ_ASSERT(IsUTF8String(), "Wrong type!");
    return mValue.mUTF8String.Value();
  }

  inline const nsACString&
  GetAsUTF8String() const
  {
    MOZ_ASSERT(IsUTF8String(), "Wrong type!");
    return mValue.mUTF8String.Value();
  }

  inline binding_detail::FastL10nIdArgs&
  RawSetAsL10nIdArgs()
  {
    if (mType == eL10nIdArgs) {
      return mValue.mL10nIdArgs.Value();
    }
    MOZ_ASSERT(mType == eUninitialized);
    mType = eL10nIdArgs;
    return mValue.mL10nIdArgs.SetValue();
  }

  inline binding_detail::FastL10nIdArgs&
  SetAsL10nIdArgs()
  {
    if (mType == eL10nIdArgs) {
      return mValue.mL10nIdArgs.Value();
    }
    Uninit();
    mType = eL10nIdArgs;
    return mValue.mL10nIdArgs.SetValue();
  }

  inline bool
  IsL10nIdArgs() const
  {
    return mType == eL10nIdArgs;
  }

  inline binding_detail::FastL10nIdArgs&
  GetAsL10nIdArgs()
  {
    MOZ_ASSERT(IsL10nIdArgs(), "Wrong type!");
    return mValue.mL10nIdArgs.Value();
  }

  inline const L10nIdArgs&
  GetAsL10nIdArgs() const
  {
    MOZ_ASSERT(IsL10nIdArgs(), "Wrong type!");
    return mValue.mL10nIdArgs.Value();
  }

  inline void
  Uninit()
  {
    switch (mType) {
      case eUninitialized: {
        break;
      }
      case eUTF8String: {
        DestroyUTF8String();
        break;
      }
      case eL10nIdArgs: {
        DestroyL10nIdArgs();
        break;
      }
    }
  }

  bool
  ToJSVal(JSContext* cx, JS::Handle<JSObject*> scopeObj, JS::MutableHandle<JS::Value> rval) const;

private:
  inline void
  DestroyUTF8String()
  {
    MOZ_ASSERT(IsUTF8String(), "Wrong type!");
    mValue.mUTF8String.Destroy();
    mType = eUninitialized;
  }

  inline void
  DestroyL10nIdArgs()
  {
    MOZ_ASSERT(IsL10nIdArgs(), "Wrong type!");
    mValue.mL10nIdArgs.Destroy();
    mType = eUninitialized;
  }
};


class OwningUTF8StringOrL10nIdArgs : public AllOwningUnionBase
{
  friend void ImplCycleCollectionUnlink(OwningUTF8StringOrL10nIdArgs& aUnion);
  enum Type
  {
    eUninitialized,
    eUTF8String,
    eL10nIdArgs
  };

  union Value
  {
    UnionMember<nsCString > mUTF8String;
    UnionMember<L10nIdArgs > mL10nIdArgs;

  };

  Type mType;
  Value mValue;

  OwningUTF8StringOrL10nIdArgs(const OwningUTF8StringOrL10nIdArgs&) = delete;
  OwningUTF8StringOrL10nIdArgs& operator=(const OwningUTF8StringOrL10nIdArgs&) = delete;
public:
  explicit inline OwningUTF8StringOrL10nIdArgs()
    : mType(eUninitialized)
  {
  }

  inline ~OwningUTF8StringOrL10nIdArgs()
  {
    Uninit();
  }

  nsCString&
  RawSetAsUTF8String();

  nsCString&
  SetAsUTF8String();

  bool
  TrySetToUTF8String(JSContext* cx, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  template <int N>
  inline void
  SetStringLiteral(const nsCString::char_type (&aData)[N])
  {
    RawSetAsUTF8String().AssignLiteral(aData);
  }

  inline bool
  IsUTF8String() const
  {
    return mType == eUTF8String;
  }

  inline nsCString&
  GetAsUTF8String()
  {
    MOZ_ASSERT(IsUTF8String(), "Wrong type!");
    return mValue.mUTF8String.Value();
  }

  inline nsCString const &
  GetAsUTF8String() const
  {
    MOZ_ASSERT(IsUTF8String(), "Wrong type!");
    return mValue.mUTF8String.Value();
  }

  L10nIdArgs&
  RawSetAsL10nIdArgs();

  L10nIdArgs&
  SetAsL10nIdArgs();

  bool
  TrySetToL10nIdArgs(BindingCallContext& cx, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  bool
  TrySetToL10nIdArgs(JSContext* cx_, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  inline bool
  IsL10nIdArgs() const
  {
    return mType == eL10nIdArgs;
  }

  inline L10nIdArgs&
  GetAsL10nIdArgs()
  {
    MOZ_ASSERT(IsL10nIdArgs(), "Wrong type!");
    return mValue.mL10nIdArgs.Value();
  }

  inline L10nIdArgs const &
  GetAsL10nIdArgs() const
  {
    MOZ_ASSERT(IsL10nIdArgs(), "Wrong type!");
    return mValue.mL10nIdArgs.Value();
  }

  void
  Uninit();

  bool
  ToJSVal(JSContext* cx, JS::Handle<JSObject*> scopeObj, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceUnion(JSTracer* trc);

private:
  void
  DestroyUTF8String();

  void
  DestroyL10nIdArgs();
};


class GenerateBundles : public CallbackFunction
{
public:
  explicit inline GenerateBundles(JSContext* aCx, JS::Handle<JSObject*> aCallback, JS::Handle<JSObject*> aCallbackGlobal, nsIGlobalObject* aIncumbentGlobal)
    : CallbackFunction(aCx, aCallback, aCallbackGlobal, aIncumbentGlobal)
  {
    MOZ_ASSERT(JS::IsCallable(mCallback));
  }

  explicit inline GenerateBundles(JSObject* aCallback, JSObject* aCallbackGlobal, const FastCallbackConstructor& )
    : CallbackFunction(aCallback, aCallbackGlobal, FastCallbackConstructor())
  {
    MOZ_ASSERT(JS::IsCallable(mCallback));
  }

  explicit inline GenerateBundles(JSObject* aCallback, JSObject* aCallbackGlobal, JSObject* aAsyncStack, nsIGlobalObject* aIncumbentGlobal)
    : CallbackFunction(aCallback, aCallbackGlobal, aAsyncStack, aIncumbentGlobal)
  {
    MOZ_ASSERT(JS::IsCallable(mCallback));
  }

  explicit inline GenerateBundles(CallbackFunction* aOther)
    : CallbackFunction(aOther)
  {
  }

  template <typename T>
  MOZ_CAN_RUN_SCRIPT inline already_AddRefed<Promise>
  Call(const T& thisVal, const Sequence<nsString>& aResourceIds, ErrorResult& aRv, const char* aExecutionReason = nullptr, ExceptionHandling aExceptionHandling = eReportExceptions, JS::Realm* aRealm = nullptr)
  {
    MOZ_ASSERT(!aRv.Failed(), "Don't pass an already-failed ErrorResult to a callback!");
    if (!aExecutionReason) {
      aExecutionReason = "GenerateBundles";
    }
    CallSetup s(this, aRv, aExecutionReason, aExceptionHandling, aRealm);
    if (!s.GetContext()) {
      MOZ_ASSERT(aRv.Failed());
      return nullptr;
    }
    JS::Rooted<JS::Value> thisValJS(s.GetContext());
    if (!ToJSValue(s.GetContext(), thisVal, &thisValJS)) {
      aRv.Throw(NS_ERROR_FAILURE);
      return nullptr;
    }
    return Call(s.GetCallContext(), thisValJS, aResourceIds, aRv);
  }

  MOZ_CAN_RUN_SCRIPT inline already_AddRefed<Promise>
  Call(const Sequence<nsString>& aResourceIds, ErrorResult& aRv, const char* aExecutionReason = nullptr, ExceptionHandling aExceptionHandling = eReportExceptions, JS::Realm* aRealm = nullptr)
  {
    MOZ_ASSERT(!aRv.Failed(), "Don't pass an already-failed ErrorResult to a callback!");
    if (!aExecutionReason) {
      aExecutionReason = "GenerateBundles";
    }
    CallSetup s(this, aRv, aExecutionReason, aExceptionHandling, aRealm);
    if (!s.GetContext()) {
      MOZ_ASSERT(aRv.Failed());
      return nullptr;
    }
    return Call(s.GetCallContext(), JS::UndefinedHandleValue, aResourceIds, aRv);
  }

  template <typename T>
  MOZ_CAN_RUN_SCRIPT inline already_AddRefed<Promise>
  Call(const T& thisVal, const Sequence<nsString>& aResourceIds, const char* aExecutionReason = nullptr)
  {
    return Call(thisVal, aResourceIds, IgnoreErrors(), aExecutionReason);
  }

  MOZ_CAN_RUN_SCRIPT inline already_AddRefed<Promise>
  Call(const Sequence<nsString>& aResourceIds, const char* aExecutionReason = nullptr)
  {
    return Call(aResourceIds, IgnoreErrors(), aExecutionReason, eReportExceptions, nullptr);
  }

  inline bool
  operator==(const GenerateBundles& aOther) const
  {
    return CallbackFunction::operator==(aOther);
  }

private:
  MOZ_CAN_RUN_SCRIPT already_AddRefed<Promise> Call(BindingCallContext& cx, JS::Handle<JS::Value> aThisVal, const Sequence<nsString>& aResourceIds, ErrorResult& aRv);
};


class GenerateBundlesSync : public CallbackFunction
{
public:
  explicit inline GenerateBundlesSync(JSContext* aCx, JS::Handle<JSObject*> aCallback, JS::Handle<JSObject*> aCallbackGlobal, nsIGlobalObject* aIncumbentGlobal)
    : CallbackFunction(aCx, aCallback, aCallbackGlobal, aIncumbentGlobal)
  {
    MOZ_ASSERT(JS::IsCallable(mCallback));
  }

  explicit inline GenerateBundlesSync(JSObject* aCallback, JSObject* aCallbackGlobal, const FastCallbackConstructor& )
    : CallbackFunction(aCallback, aCallbackGlobal, FastCallbackConstructor())
  {
    MOZ_ASSERT(JS::IsCallable(mCallback));
  }

  explicit inline GenerateBundlesSync(JSObject* aCallback, JSObject* aCallbackGlobal, JSObject* aAsyncStack, nsIGlobalObject* aIncumbentGlobal)
    : CallbackFunction(aCallback, aCallbackGlobal, aAsyncStack, aIncumbentGlobal)
  {
    MOZ_ASSERT(JS::IsCallable(mCallback));
  }

  explicit inline GenerateBundlesSync(CallbackFunction* aOther)
    : CallbackFunction(aOther)
  {
  }

  template <typename T>
  MOZ_CAN_RUN_SCRIPT inline void
  Call(const T& thisVal, const Sequence<nsString>& aResourceIds, JS::MutableHandle<JS::Value> aRetVal, ErrorResult& aRv, const char* aExecutionReason = nullptr, ExceptionHandling aExceptionHandling = eReportExceptions, JS::Realm* aRealm = nullptr)
  {
    MOZ_ASSERT(!aRv.Failed(), "Don't pass an already-failed ErrorResult to a callback!");
    if (!aExecutionReason) {
      aExecutionReason = "GenerateBundlesSync";
    }
    CallSetup s(this, aRv, aExecutionReason, aExceptionHandling, aRealm);
    if (!s.GetContext()) {
      MOZ_ASSERT(aRv.Failed());
      return;
    }
    JS::Rooted<JS::Value> thisValJS(s.GetContext());
    if (!ToJSValue(s.GetContext(), thisVal, &thisValJS)) {
      aRv.Throw(NS_ERROR_FAILURE);
      return;
    }
    return Call(s.GetCallContext(), thisValJS, aResourceIds, aRetVal, aRv);
  }

  MOZ_CAN_RUN_SCRIPT inline void
  Call(const Sequence<nsString>& aResourceIds, JS::MutableHandle<JS::Value> aRetVal, ErrorResult& aRv, const char* aExecutionReason = nullptr, ExceptionHandling aExceptionHandling = eReportExceptions, JS::Realm* aRealm = nullptr)
  {
    MOZ_ASSERT(!aRv.Failed(), "Don't pass an already-failed ErrorResult to a callback!");
    if (!aExecutionReason) {
      aExecutionReason = "GenerateBundlesSync";
    }
    CallSetup s(this, aRv, aExecutionReason, aExceptionHandling, aRealm);
    if (!s.GetContext()) {
      MOZ_ASSERT(aRv.Failed());
      return;
    }
    return Call(s.GetCallContext(), JS::UndefinedHandleValue, aResourceIds, aRetVal, aRv);
  }

  template <typename T>
  MOZ_CAN_RUN_SCRIPT inline void
  Call(const T& thisVal, const Sequence<nsString>& aResourceIds, JS::MutableHandle<JS::Value> aRetVal, const char* aExecutionReason = nullptr)
  {
    return Call(thisVal, aResourceIds, aRetVal, IgnoreErrors(), aExecutionReason);
  }

  MOZ_CAN_RUN_SCRIPT inline void
  Call(const Sequence<nsString>& aResourceIds, JS::MutableHandle<JS::Value> aRetVal, const char* aExecutionReason = nullptr)
  {
    return Call(aResourceIds, aRetVal, IgnoreErrors(), aExecutionReason, eReportExceptions, nullptr);
  }

  inline bool
  operator==(const GenerateBundlesSync& aOther) const
  {
    return CallbackFunction::operator==(aOther);
  }

private:
  MOZ_CAN_RUN_SCRIPT void Call(BindingCallContext& cx, JS::Handle<JS::Value> aThisVal, const Sequence<nsString>& aResourceIds, JS::MutableHandle<JS::Value> aRetVal, ErrorResult& aRv);
};


namespace binding_detail {
class FastGenerateBundles : public GenerateBundles
{
public:
  explicit inline FastGenerateBundles(JSObject* aCallback, JSObject* aCallbackGlobal)
    : GenerateBundles(aCallback, aCallbackGlobal, FastCallbackConstructor())
  {
  }

  inline void
  Trace(JSTracer* aTracer)
  {
    GenerateBundles::Trace(aTracer);
  }

  inline void
  FinishSlowJSInitIfMoreThanOneOwner(JSContext* aCx)
  {
    GenerateBundles::FinishSlowJSInitIfMoreThanOneOwner(aCx);
  }
};
} // namespace binding_detail


namespace binding_detail {
class FastGenerateBundlesSync : public GenerateBundlesSync
{
public:
  explicit inline FastGenerateBundlesSync(JSObject* aCallback, JSObject* aCallbackGlobal)
    : GenerateBundlesSync(aCallback, aCallbackGlobal, FastCallbackConstructor())
  {
  }

  inline void
  Trace(JSTracer* aTracer)
  {
    GenerateBundlesSync::Trace(aTracer);
  }

  inline void
  FinishSlowJSInitIfMoreThanOneOwner(JSContext* aCx)
  {
    GenerateBundlesSync::FinishSlowJSInitIfMoreThanOneOwner(aCx);
  }
};
} // namespace binding_detail


namespace Localization_Binding {

  typedef mozilla::intl::Localization NativeType;

  bool
  ConstructorEnabled(JSContext* aCx, JS::Handle<JSObject*> aObj);

  const JSClass*
  GetJSClass();

  bool
  Wrap(JSContext* aCx, mozilla::intl::Localization* aObject, nsWrapperCache* aCache, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector);

  template <class T>
  inline JSObject* Wrap(JSContext* aCx, T* aObject, JS::Handle<JSObject*> aGivenProto)
  {
    JS::Rooted<JSObject*> reflector(aCx);
    return Wrap(aCx, aObject, aObject, aGivenProto, &reflector) ? reflector.get() : nullptr;
  }

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  inline JS::Handle<JSObject*> GetProtoObjectHandle(JSContext* aCx)
  {
    /* Get the interface prototype object for this class.  This will create the
       object as needed. */
    return GetPerInterfaceObjectHandle(aCx, prototypes::id::Localization,
                                       &CreateInterfaceObjects,
                                       /* aDefineOnGlobal = */ true);

  }

  JSObject*
  GetProtoObject(JSContext* aCx);

  inline JS::Handle<JSObject*> GetConstructorObjectHandle(JSContext* aCx, bool aDefineOnGlobal = true)
  {
    /* Get the interface object for this class.  This will create the object as
       needed. */

    return GetPerInterfaceObjectHandle(aCx, constructors::id::Localization,
                                       &CreateInterfaceObjects,
                                       aDefineOnGlobal);
  }

  JSObject*
  GetConstructorObject(JSContext* aCx);

} // namespace Localization_Binding



} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_LocalizationBinding_h
