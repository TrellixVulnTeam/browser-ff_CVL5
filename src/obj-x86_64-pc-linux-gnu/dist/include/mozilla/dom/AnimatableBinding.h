/* THIS FILE IS AUTOGENERATED FROM Animatable.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_AnimatableBinding_h
#define mozilla_dom_AnimatableBinding_h

#include "AnimationEffectBinding.h"
#include "BaseKeyframeTypesBinding.h"
#include "KeyframeEffectBinding.h"
#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/UnionTypes.h"

namespace mozilla {
namespace dom {

struct GetAnimationsOptionsAtoms;
struct KeyframeAnimationOptionsAtoms;
struct NativePropertyHooks;
class OwningUnrestrictedDoubleOrString;
class ProtoAndIfaceCache;
class UnrestrictedDoubleOrString;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct GetAnimationsOptions : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR bool mSubtree;

  GetAnimationsOptions();

  explicit inline GetAnimationsOptions(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline GetAnimationsOptions(const GetAnimationsOptions& aOther)
  {
    *this = aOther;
  }

  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  void
  TraceDictionary(JSTracer* trc);

  GetAnimationsOptions&
  operator=(const GetAnimationsOptions& aOther);

  bool
  operator==(const GetAnimationsOptions& aOther) const;

private:
  static bool
  InitIds(JSContext* cx, GetAnimationsOptionsAtoms* atomsCache);
};

namespace binding_detail {
struct FastGetAnimationsOptions : public GetAnimationsOptions
{
  inline FastGetAnimationsOptions()
    : GetAnimationsOptions(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct KeyframeAnimationOptions : public KeyframeEffectOptions
{
  MOZ_INIT_OUTSIDE_CTOR nsString mId;

  KeyframeAnimationOptions();

  explicit inline KeyframeAnimationOptions(const FastDictionaryInitializer& )
    : KeyframeEffectOptions(FastDictionaryInitializer())
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline KeyframeAnimationOptions(const KeyframeAnimationOptions& aOther)
    : KeyframeEffectOptions(FastDictionaryInitializer())
  {
    *this = aOther;
  }

  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  void
  TraceDictionary(JSTracer* trc);

  KeyframeAnimationOptions&
  operator=(const KeyframeAnimationOptions& aOther);

  bool
  operator==(const KeyframeAnimationOptions& aOther) const;

private:
  static bool
  InitIds(JSContext* cx, KeyframeAnimationOptionsAtoms* atomsCache);
};

namespace binding_detail {
struct FastKeyframeAnimationOptions : public KeyframeAnimationOptions
{
  inline FastKeyframeAnimationOptions()
    : KeyframeAnimationOptions(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_AnimatableBinding_h
