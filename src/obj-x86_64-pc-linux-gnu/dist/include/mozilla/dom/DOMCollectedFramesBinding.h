/* THIS FILE IS AUTOGENERATED FROM DOMCollectedFrames.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_DOMCollectedFramesBinding_h
#define mozilla_dom_DOMCollectedFramesBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"

namespace mozilla {
namespace dom {

struct DOMCollectedFrame;
struct DOMCollectedFrameAtoms;
struct DOMCollectedFramesAtoms;
struct NativePropertyHooks;
class ProtoAndIfaceCache;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct DOMCollectedFrame : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR nsCString mDataUri;
  MOZ_INIT_OUTSIDE_CTOR double mTimeOffset;

  DOMCollectedFrame();

  explicit inline DOMCollectedFrame(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline DOMCollectedFrame(const DOMCollectedFrame& aOther)
  {
    *this = aOther;
  }

  bool
  Init(const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

  DOMCollectedFrame&
  operator=(const DOMCollectedFrame& aOther);

  bool
  operator==(const DOMCollectedFrame& aOther) const;

private:
  static bool
  InitIds(JSContext* cx, DOMCollectedFrameAtoms* atomsCache);
};

namespace binding_detail {
struct FastDOMCollectedFrame : public DOMCollectedFrame
{
  inline FastDOMCollectedFrame()
    : DOMCollectedFrame(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct DOMCollectedFrames : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR Sequence<DOMCollectedFrame> mFrames;
  MOZ_INIT_OUTSIDE_CTOR double mRecordingStart;

  DOMCollectedFrames();

  explicit inline DOMCollectedFrames(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline DOMCollectedFrames(const DOMCollectedFrames& aOther)
  {
    *this = aOther;
  }

  bool
  Init(const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

  DOMCollectedFrames&
  operator=(const DOMCollectedFrames& aOther);

private:
  static bool
  InitIds(JSContext* cx, DOMCollectedFramesAtoms* atomsCache);
};

namespace binding_detail {
struct FastDOMCollectedFrames : public DOMCollectedFrames
{
  inline FastDOMCollectedFrames()
    : DOMCollectedFrames(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_DOMCollectedFramesBinding_h
