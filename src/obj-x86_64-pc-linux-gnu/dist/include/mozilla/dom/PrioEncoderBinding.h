/* THIS FILE IS AUTOGENERATED FROM PrioEncoder.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_PrioEncoderBinding_h
#define mozilla_dom_PrioEncoderBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/PrototypeList.h"
#include "mozilla/dom/TypedArray.h"

namespace mozilla {
namespace dom {

struct NativePropertyHooks;
struct PrioEncodedDataAtoms;
class PrioEncoder;
struct PrioEncoderAtoms;
struct PrioParamsAtoms;
class ProtoAndIfaceCache;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct PrioEncodedData : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR Optional<Uint8Array> mA;
  MOZ_INIT_OUTSIDE_CTOR Optional<Uint8Array> mB;

  PrioEncodedData();

  explicit inline PrioEncodedData(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

private:
  PrioEncodedData(const PrioEncodedData&) = delete;
  PrioEncodedData& operator=(const PrioEncodedData&) = delete;

  static bool
  InitIds(JSContext* cx, PrioEncodedDataAtoms* atomsCache);

public:
  bool
  Init(const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);
};

namespace binding_detail {
struct FastPrioEncodedData : public PrioEncodedData
{
  inline FastPrioEncodedData()
    : PrioEncodedData(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct PrioParams : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR Sequence<bool> mBooleans;

  PrioParams();

  explicit inline PrioParams(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline PrioParams(const PrioParams& aOther)
  {
    *this = aOther;
  }

  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  void
  TraceDictionary(JSTracer* trc);

  PrioParams&
  operator=(const PrioParams& aOther);

private:
  static bool
  InitIds(JSContext* cx, PrioParamsAtoms* atomsCache);
};

namespace binding_detail {
struct FastPrioParams : public PrioParams
{
  inline FastPrioParams()
    : PrioParams(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


namespace PrioEncoder_Binding {

  typedef mozilla::dom::PrioEncoder NativeType;

  bool
  ConstructorEnabled(JSContext* aCx, JS::Handle<JSObject*> aObj);

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  inline JS::Handle<JSObject*> GetConstructorObjectHandle(JSContext* aCx, bool aDefineOnGlobal = true)
  {
    /* Get the interface object for this class.  This will create the object as
       needed. */

    return GetPerInterfaceObjectHandle(aCx, constructors::id::PrioEncoder,
                                       &CreateInterfaceObjects,
                                       aDefineOnGlobal);
  }

  JSObject*
  GetConstructorObject(JSContext* aCx);

} // namespace PrioEncoder_Binding



} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_PrioEncoderBinding_h
