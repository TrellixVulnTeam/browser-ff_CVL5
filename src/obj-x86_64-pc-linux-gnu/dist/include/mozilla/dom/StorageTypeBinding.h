/* THIS FILE IS AUTOGENERATED FROM StorageType.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_StorageTypeBinding_h
#define mozilla_dom_StorageTypeBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ArrayUtils.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/Span.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"

namespace mozilla {
namespace dom {

struct NativePropertyHooks;
class ProtoAndIfaceCache;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

enum class StorageType : uint8_t {
  Persistent,
  Temporary,
  Default,
  EndGuard_
};

namespace StorageTypeValues {
extern const EnumEntry strings[4];

static constexpr size_t Count = 3;

// Our "strings" contains an extra entry with a null string.
static_assert(mozilla::ArrayLength(strings) - 1 == Count,
              "Mismatch between enum strings and enum count");

static_assert(static_cast<size_t>(StorageType::EndGuard_) == Count,
              "Mismatch between enum value and enum count");

inline auto GetString(StorageType stringId) {
  MOZ_ASSERT(static_cast<uint8_t>(stringId) < Count);
  const EnumEntry& entry = strings[static_cast<uint8_t>(stringId)];
  return Span<const char>{entry.value, entry.length};
}
} // namespace StorageTypeValues

bool
ToJSValue(JSContext* aCx, StorageType aArgument, JS::MutableHandle<JS::Value> aValue);


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_StorageTypeBinding_h
