/* THIS FILE IS AUTOGENERATED FROM XULPopupElement.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_XULPopupElementBinding_h
#define mozilla_dom_XULPopupElementBinding_h

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Event.h"
#include "mozilla/dom/FakeString.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/PrototypeList.h"
#include "mozilla/dom/UnionMember.h"

namespace mozilla {
namespace dom {

class Event;
struct NativePropertyHooks;
struct OpenPopupOptionsAtoms;
class OwningStringOrOpenPopupOptions;
class ProtoAndIfaceCache;
class XULPopupElement;
struct XULPopupElementAtoms;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

void
ImplCycleCollectionTraverse(nsCycleCollectionTraversalCallback& aCallback, OwningStringOrOpenPopupOptions& aUnion, const char* aName, uint32_t aFlags = 0);


void
ImplCycleCollectionUnlink(OwningStringOrOpenPopupOptions& aUnion);


struct OpenPopupOptions : public DictionaryBase
{
  MOZ_INIT_OUTSIDE_CTOR bool mAttributesOverride;
  MOZ_INIT_OUTSIDE_CTOR bool mIsContextMenu;
  MOZ_INIT_OUTSIDE_CTOR nsString mPosition;
  MOZ_INIT_OUTSIDE_CTOR RefPtr<mozilla::dom::Event> mTriggerEvent;
  MOZ_INIT_OUTSIDE_CTOR int32_t mX;
  MOZ_INIT_OUTSIDE_CTOR int32_t mY;

  OpenPopupOptions();

  explicit inline OpenPopupOptions(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline OpenPopupOptions(const OpenPopupOptions& aOther)
  {
    *this = aOther;
  }

  bool
  Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  void
  TraceDictionary(JSTracer* trc);

  inline void
  TraverseForCC(nsCycleCollectionTraversalCallback& aCallback, uint32_t aFlags)
  {
    ImplCycleCollectionTraverse(aCallback, mTriggerEvent, "mTriggerEvent", aFlags);
  }

  inline void
  UnlinkForCC()
  {
    ImplCycleCollectionUnlink(mTriggerEvent);
  }

  OpenPopupOptions&
  operator=(const OpenPopupOptions& aOther);

private:
  static bool
  InitIds(JSContext* cx, OpenPopupOptionsAtoms* atomsCache);
};

namespace binding_detail {
struct FastOpenPopupOptions : public OpenPopupOptions
{
  inline FastOpenPopupOptions()
    : OpenPopupOptions(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


class StringOrOpenPopupOptions
{
  friend class StringOrOpenPopupOptionsArgument;
  enum Type
  {
    eUninitialized,
    eString,
    eOpenPopupOptions
  };

  union Value
  {
    UnionMember<binding_detail::FakeString<char16_t> > mString;
    UnionMember<binding_detail::FastOpenPopupOptions > mOpenPopupOptions;

  };

  Type mType;
  Value mValue;

  StringOrOpenPopupOptions(const StringOrOpenPopupOptions&) = delete;
  StringOrOpenPopupOptions& operator=(const StringOrOpenPopupOptions&) = delete;
public:
  explicit inline StringOrOpenPopupOptions()
    : mType(eUninitialized)
  {
  }

  inline ~StringOrOpenPopupOptions()
  {
    Uninit();
  }

  inline binding_detail::FakeString<char16_t>&
  RawSetAsString()
  {
    if (mType == eString) {
      return mValue.mString.Value();
    }
    MOZ_ASSERT(mType == eUninitialized);
    mType = eString;
    return mValue.mString.SetValue();
  }

  inline binding_detail::FakeString<char16_t>&
  SetAsString()
  {
    if (mType == eString) {
      return mValue.mString.Value();
    }
    Uninit();
    mType = eString;
    return mValue.mString.SetValue();
  }

  inline bool
  IsString() const
  {
    return mType == eString;
  }

  inline binding_detail::FakeString<char16_t>&
  GetAsString()
  {
    MOZ_ASSERT(IsString(), "Wrong type!");
    return mValue.mString.Value();
  }

  inline const nsAString&
  GetAsString() const
  {
    MOZ_ASSERT(IsString(), "Wrong type!");
    return mValue.mString.Value();
  }

  inline binding_detail::FastOpenPopupOptions&
  RawSetAsOpenPopupOptions()
  {
    if (mType == eOpenPopupOptions) {
      return mValue.mOpenPopupOptions.Value();
    }
    MOZ_ASSERT(mType == eUninitialized);
    mType = eOpenPopupOptions;
    return mValue.mOpenPopupOptions.SetValue();
  }

  inline binding_detail::FastOpenPopupOptions&
  SetAsOpenPopupOptions()
  {
    if (mType == eOpenPopupOptions) {
      return mValue.mOpenPopupOptions.Value();
    }
    Uninit();
    mType = eOpenPopupOptions;
    return mValue.mOpenPopupOptions.SetValue();
  }

  inline bool
  IsOpenPopupOptions() const
  {
    return mType == eOpenPopupOptions;
  }

  inline binding_detail::FastOpenPopupOptions&
  GetAsOpenPopupOptions()
  {
    MOZ_ASSERT(IsOpenPopupOptions(), "Wrong type!");
    return mValue.mOpenPopupOptions.Value();
  }

  inline const OpenPopupOptions&
  GetAsOpenPopupOptions() const
  {
    MOZ_ASSERT(IsOpenPopupOptions(), "Wrong type!");
    return mValue.mOpenPopupOptions.Value();
  }

  inline void
  Uninit()
  {
    switch (mType) {
      case eUninitialized: {
        break;
      }
      case eString: {
        DestroyString();
        break;
      }
      case eOpenPopupOptions: {
        DestroyOpenPopupOptions();
        break;
      }
    }
  }

private:
  inline void
  DestroyString()
  {
    MOZ_ASSERT(IsString(), "Wrong type!");
    mValue.mString.Destroy();
    mType = eUninitialized;
  }

  inline void
  DestroyOpenPopupOptions()
  {
    MOZ_ASSERT(IsOpenPopupOptions(), "Wrong type!");
    mValue.mOpenPopupOptions.Destroy();
    mType = eUninitialized;
  }
};


class OwningStringOrOpenPopupOptions : public AllOwningUnionBase
{
  friend void ImplCycleCollectionUnlink(OwningStringOrOpenPopupOptions& aUnion);
  enum Type
  {
    eUninitialized,
    eString,
    eOpenPopupOptions
  };

  union Value
  {
    UnionMember<nsString > mString;
    UnionMember<OpenPopupOptions > mOpenPopupOptions;

  };

  Type mType;
  Value mValue;

public:
  explicit inline OwningStringOrOpenPopupOptions()
    : mType(eUninitialized)
  {
  }

  explicit inline OwningStringOrOpenPopupOptions(const OwningStringOrOpenPopupOptions& aOther)
    : mType(eUninitialized)
  {
    *this = aOther;
  }

  inline ~OwningStringOrOpenPopupOptions()
  {
    Uninit();
  }

  nsString&
  RawSetAsString();

  nsString&
  SetAsString();

  bool
  TrySetToString(JSContext* cx, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  template <int N>
  inline void
  SetStringLiteral(const nsString::char_type (&aData)[N])
  {
    RawSetAsString().AssignLiteral(aData);
  }

  inline bool
  IsString() const
  {
    return mType == eString;
  }

  inline nsString&
  GetAsString()
  {
    MOZ_ASSERT(IsString(), "Wrong type!");
    return mValue.mString.Value();
  }

  inline nsString const &
  GetAsString() const
  {
    MOZ_ASSERT(IsString(), "Wrong type!");
    return mValue.mString.Value();
  }

  OpenPopupOptions&
  RawSetAsOpenPopupOptions();

  OpenPopupOptions&
  SetAsOpenPopupOptions();

  bool
  TrySetToOpenPopupOptions(BindingCallContext& cx, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  bool
  TrySetToOpenPopupOptions(JSContext* cx_, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  inline bool
  IsOpenPopupOptions() const
  {
    return mType == eOpenPopupOptions;
  }

  inline OpenPopupOptions&
  GetAsOpenPopupOptions()
  {
    MOZ_ASSERT(IsOpenPopupOptions(), "Wrong type!");
    return mValue.mOpenPopupOptions.Value();
  }

  inline OpenPopupOptions const &
  GetAsOpenPopupOptions() const
  {
    MOZ_ASSERT(IsOpenPopupOptions(), "Wrong type!");
    return mValue.mOpenPopupOptions.Value();
  }

  void
  Uninit();

  void
  TraceUnion(JSTracer* trc);

  OwningStringOrOpenPopupOptions&
  operator=(const OwningStringOrOpenPopupOptions& aOther);

private:
  void
  DestroyString();

  void
  DestroyOpenPopupOptions();
};


namespace XULPopupElement_Binding {

  typedef mozilla::dom::XULPopupElement NativeType;

  bool
  ConstructorEnabled(JSContext* aCx, JS::Handle<JSObject*> aObj);

  const JSClass*
  GetJSClass();

  bool
  Wrap(JSContext* aCx, mozilla::dom::XULPopupElement* aObject, nsWrapperCache* aCache, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector);

  template <class T>
  inline JSObject* Wrap(JSContext* aCx, T* aObject, JS::Handle<JSObject*> aGivenProto)
  {
    JS::Rooted<JSObject*> reflector(aCx);
    return Wrap(aCx, aObject, aObject, aGivenProto, &reflector) ? reflector.get() : nullptr;
  }

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  inline JS::Handle<JSObject*> GetProtoObjectHandle(JSContext* aCx)
  {
    /* Get the interface prototype object for this class.  This will create the
       object as needed. */
    return GetPerInterfaceObjectHandle(aCx, prototypes::id::XULPopupElement,
                                       &CreateInterfaceObjects,
                                       /* aDefineOnGlobal = */ true);

  }

  inline JS::Handle<JSObject*> GetConstructorObjectHandle(JSContext* aCx, bool aDefineOnGlobal = true)
  {
    /* Get the interface object for this class.  This will create the object as
       needed. */

    return GetPerInterfaceObjectHandle(aCx, constructors::id::XULPopupElement,
                                       &CreateInterfaceObjects,
                                       aDefineOnGlobal);
  }

  JSObject*
  GetConstructorObject(JSContext* aCx);

} // namespace XULPopupElement_Binding



} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_XULPopupElementBinding_h
