/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#include "xpcAccEvents.h"
#include "nsIAccessible.h"
#include "nsIAccessibleDocument.h"
#include "nsINode.h"
#include "nsIAccessible.h"
#include "nsIAccessibleDocument.h"
#include "nsINode.h"
#include "nsIAccessible.h"
#include "nsIAccessibleDocument.h"
#include "nsINode.h"
#include "nsIAccessible.h"
#include "nsIAccessibleDocument.h"
#include "nsINode.h"
#include "nsIArray.h"
#include "nsIAccessible.h"
#include "nsIAccessibleDocument.h"
#include "nsINode.h"
#include "nsIAccessible.h"
#include "nsIAccessible.h"
#include "nsIAccessible.h"
#include "nsIAccessible.h"
#include "nsIAccessibleDocument.h"
#include "nsINode.h"
#include "nsIAccessible.h"
#include "nsIAccessibleDocument.h"
#include "nsINode.h"
#include "nsIAccessible.h"
#include "nsIAccessibleDocument.h"
#include "nsINode.h"
#include "nsIAccessible.h"
#include "nsIAccessibleDocument.h"
#include "nsINode.h"
#include "nsIAccessible.h"
#include "nsIAccessible.h"
#include "nsIAccessible.h"
#include "nsIAccessibleDocument.h"
#include "nsINode.h"
#include "nsIAccessible.h"
#include "nsIAccessibleDocument.h"
#include "nsINode.h"

NS_IMPL_CYCLE_COLLECTION(xpcAccEvent, mAccessible, mAccessibleDocument, mDOMNode)

NS_IMPL_CYCLE_COLLECTING_ADDREF(xpcAccEvent)
NS_IMPL_CYCLE_COLLECTING_RELEASE(xpcAccEvent)

NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(xpcAccEvent)
  NS_INTERFACE_MAP_ENTRY(nsISupports)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleEvent)
NS_INTERFACE_MAP_END

NS_IMETHODIMP
xpcAccEvent::GetEventType(uint32_t *aEventType)
{
  *aEventType = mEventType;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccEvent::GetAccessible(nsIAccessible** aAccessible)
{
  NS_IF_ADDREF(*aAccessible = mAccessible);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccEvent::GetAccessibleDocument(nsIAccessibleDocument** aAccessibleDocument)
{
  NS_IF_ADDREF(*aAccessibleDocument = mAccessibleDocument);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccEvent::GetDOMNode(nsINode** aDOMNode)
{
  NS_IF_ADDREF(*aDOMNode = mDOMNode);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccEvent::GetIsFromUserInput(bool *aIsFromUserInput)
{
  *aIsFromUserInput = mIsFromUserInput;
  return NS_OK;
}

NS_IMPL_CYCLE_COLLECTION(xpcAccStateChangeEvent, mAccessible, mAccessibleDocument, mDOMNode)

NS_IMPL_CYCLE_COLLECTING_ADDREF(xpcAccStateChangeEvent)
NS_IMPL_CYCLE_COLLECTING_RELEASE(xpcAccStateChangeEvent)

NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(xpcAccStateChangeEvent)
  NS_INTERFACE_MAP_ENTRY(nsISupports)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleEvent)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleStateChangeEvent)
NS_INTERFACE_MAP_END

NS_IMETHODIMP
xpcAccStateChangeEvent::GetEventType(uint32_t *aEventType)
{
  *aEventType = mEventType;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccStateChangeEvent::GetAccessible(nsIAccessible** aAccessible)
{
  NS_IF_ADDREF(*aAccessible = mAccessible);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccStateChangeEvent::GetAccessibleDocument(nsIAccessibleDocument** aAccessibleDocument)
{
  NS_IF_ADDREF(*aAccessibleDocument = mAccessibleDocument);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccStateChangeEvent::GetDOMNode(nsINode** aDOMNode)
{
  NS_IF_ADDREF(*aDOMNode = mDOMNode);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccStateChangeEvent::GetIsFromUserInput(bool *aIsFromUserInput)
{
  *aIsFromUserInput = mIsFromUserInput;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccStateChangeEvent::GetState(uint32_t *aState)
{
  *aState = mState;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccStateChangeEvent::GetIsExtraState(bool *aIsExtraState)
{
  *aIsExtraState = mIsExtraState;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccStateChangeEvent::GetIsEnabled(bool *aIsEnabled)
{
  *aIsEnabled = mIsEnabled;
  return NS_OK;
}

NS_IMPL_CYCLE_COLLECTION(xpcAccTextChangeEvent, mAccessible, mAccessibleDocument, mDOMNode)

NS_IMPL_CYCLE_COLLECTING_ADDREF(xpcAccTextChangeEvent)
NS_IMPL_CYCLE_COLLECTING_RELEASE(xpcAccTextChangeEvent)

NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(xpcAccTextChangeEvent)
  NS_INTERFACE_MAP_ENTRY(nsISupports)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleEvent)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleTextChangeEvent)
NS_INTERFACE_MAP_END

NS_IMETHODIMP
xpcAccTextChangeEvent::GetEventType(uint32_t *aEventType)
{
  *aEventType = mEventType;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTextChangeEvent::GetAccessible(nsIAccessible** aAccessible)
{
  NS_IF_ADDREF(*aAccessible = mAccessible);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTextChangeEvent::GetAccessibleDocument(nsIAccessibleDocument** aAccessibleDocument)
{
  NS_IF_ADDREF(*aAccessibleDocument = mAccessibleDocument);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTextChangeEvent::GetDOMNode(nsINode** aDOMNode)
{
  NS_IF_ADDREF(*aDOMNode = mDOMNode);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTextChangeEvent::GetIsFromUserInput(bool *aIsFromUserInput)
{
  *aIsFromUserInput = mIsFromUserInput;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTextChangeEvent::GetStart(int32_t *aStart)
{
  *aStart = mStart;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTextChangeEvent::GetLength(uint32_t *aLength)
{
  *aLength = mLength;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTextChangeEvent::GetIsInserted(bool *aIsInserted)
{
  *aIsInserted = mIsInserted;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTextChangeEvent::GetModifiedText(nsAString& aModifiedText)
{
  aModifiedText = mModifiedText;
  return NS_OK;
}

NS_IMPL_CYCLE_COLLECTION(xpcAccTextSelectionChangeEvent, mAccessible, mAccessibleDocument, mDOMNode, mSelectionRanges)

NS_IMPL_CYCLE_COLLECTING_ADDREF(xpcAccTextSelectionChangeEvent)
NS_IMPL_CYCLE_COLLECTING_RELEASE(xpcAccTextSelectionChangeEvent)

NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(xpcAccTextSelectionChangeEvent)
  NS_INTERFACE_MAP_ENTRY(nsISupports)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleEvent)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleTextSelectionChangeEvent)
NS_INTERFACE_MAP_END

NS_IMETHODIMP
xpcAccTextSelectionChangeEvent::GetEventType(uint32_t *aEventType)
{
  *aEventType = mEventType;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTextSelectionChangeEvent::GetAccessible(nsIAccessible** aAccessible)
{
  NS_IF_ADDREF(*aAccessible = mAccessible);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTextSelectionChangeEvent::GetAccessibleDocument(nsIAccessibleDocument** aAccessibleDocument)
{
  NS_IF_ADDREF(*aAccessibleDocument = mAccessibleDocument);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTextSelectionChangeEvent::GetDOMNode(nsINode** aDOMNode)
{
  NS_IF_ADDREF(*aDOMNode = mDOMNode);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTextSelectionChangeEvent::GetIsFromUserInput(bool *aIsFromUserInput)
{
  *aIsFromUserInput = mIsFromUserInput;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTextSelectionChangeEvent::GetSelectionRanges(nsIArray** aSelectionRanges)
{
  NS_IF_ADDREF(*aSelectionRanges = mSelectionRanges);
  return NS_OK;
}

NS_IMPL_CYCLE_COLLECTION(xpcAccHideEvent, mAccessible, mAccessibleDocument, mDOMNode, mTargetParent, mTargetNextSibling, mTargetPrevSibling)

NS_IMPL_CYCLE_COLLECTING_ADDREF(xpcAccHideEvent)
NS_IMPL_CYCLE_COLLECTING_RELEASE(xpcAccHideEvent)

NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(xpcAccHideEvent)
  NS_INTERFACE_MAP_ENTRY(nsISupports)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleEvent)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleHideEvent)
NS_INTERFACE_MAP_END

NS_IMETHODIMP
xpcAccHideEvent::GetEventType(uint32_t *aEventType)
{
  *aEventType = mEventType;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccHideEvent::GetAccessible(nsIAccessible** aAccessible)
{
  NS_IF_ADDREF(*aAccessible = mAccessible);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccHideEvent::GetAccessibleDocument(nsIAccessibleDocument** aAccessibleDocument)
{
  NS_IF_ADDREF(*aAccessibleDocument = mAccessibleDocument);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccHideEvent::GetDOMNode(nsINode** aDOMNode)
{
  NS_IF_ADDREF(*aDOMNode = mDOMNode);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccHideEvent::GetIsFromUserInput(bool *aIsFromUserInput)
{
  *aIsFromUserInput = mIsFromUserInput;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccHideEvent::GetTargetParent(nsIAccessible** aTargetParent)
{
  NS_IF_ADDREF(*aTargetParent = mTargetParent);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccHideEvent::GetTargetNextSibling(nsIAccessible** aTargetNextSibling)
{
  NS_IF_ADDREF(*aTargetNextSibling = mTargetNextSibling);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccHideEvent::GetTargetPrevSibling(nsIAccessible** aTargetPrevSibling)
{
  NS_IF_ADDREF(*aTargetPrevSibling = mTargetPrevSibling);
  return NS_OK;
}

NS_IMPL_CYCLE_COLLECTION(xpcAccCaretMoveEvent, mAccessible, mAccessibleDocument, mDOMNode)

NS_IMPL_CYCLE_COLLECTING_ADDREF(xpcAccCaretMoveEvent)
NS_IMPL_CYCLE_COLLECTING_RELEASE(xpcAccCaretMoveEvent)

NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(xpcAccCaretMoveEvent)
  NS_INTERFACE_MAP_ENTRY(nsISupports)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleEvent)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleCaretMoveEvent)
NS_INTERFACE_MAP_END

NS_IMETHODIMP
xpcAccCaretMoveEvent::GetEventType(uint32_t *aEventType)
{
  *aEventType = mEventType;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccCaretMoveEvent::GetAccessible(nsIAccessible** aAccessible)
{
  NS_IF_ADDREF(*aAccessible = mAccessible);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccCaretMoveEvent::GetAccessibleDocument(nsIAccessibleDocument** aAccessibleDocument)
{
  NS_IF_ADDREF(*aAccessibleDocument = mAccessibleDocument);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccCaretMoveEvent::GetDOMNode(nsINode** aDOMNode)
{
  NS_IF_ADDREF(*aDOMNode = mDOMNode);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccCaretMoveEvent::GetIsFromUserInput(bool *aIsFromUserInput)
{
  *aIsFromUserInput = mIsFromUserInput;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccCaretMoveEvent::GetCaretOffset(int32_t *aCaretOffset)
{
  *aCaretOffset = mCaretOffset;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccCaretMoveEvent::GetIsSelectionCollapsed(bool *aIsSelectionCollapsed)
{
  *aIsSelectionCollapsed = mIsSelectionCollapsed;
  return NS_OK;
}

NS_IMPL_CYCLE_COLLECTION(xpcAccObjectAttributeChangedEvent, mAccessible, mAccessibleDocument, mDOMNode)

NS_IMPL_CYCLE_COLLECTING_ADDREF(xpcAccObjectAttributeChangedEvent)
NS_IMPL_CYCLE_COLLECTING_RELEASE(xpcAccObjectAttributeChangedEvent)

NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(xpcAccObjectAttributeChangedEvent)
  NS_INTERFACE_MAP_ENTRY(nsISupports)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleEvent)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleObjectAttributeChangedEvent)
NS_INTERFACE_MAP_END

NS_IMETHODIMP
xpcAccObjectAttributeChangedEvent::GetEventType(uint32_t *aEventType)
{
  *aEventType = mEventType;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccObjectAttributeChangedEvent::GetAccessible(nsIAccessible** aAccessible)
{
  NS_IF_ADDREF(*aAccessible = mAccessible);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccObjectAttributeChangedEvent::GetAccessibleDocument(nsIAccessibleDocument** aAccessibleDocument)
{
  NS_IF_ADDREF(*aAccessibleDocument = mAccessibleDocument);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccObjectAttributeChangedEvent::GetDOMNode(nsINode** aDOMNode)
{
  NS_IF_ADDREF(*aDOMNode = mDOMNode);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccObjectAttributeChangedEvent::GetIsFromUserInput(bool *aIsFromUserInput)
{
  *aIsFromUserInput = mIsFromUserInput;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccObjectAttributeChangedEvent::GetChangedAttribute(nsAString& aChangedAttribute)
{
  aChangedAttribute = mChangedAttribute;
  return NS_OK;
}

NS_IMPL_CYCLE_COLLECTION(xpcAccTableChangeEvent, mAccessible, mAccessibleDocument, mDOMNode)

NS_IMPL_CYCLE_COLLECTING_ADDREF(xpcAccTableChangeEvent)
NS_IMPL_CYCLE_COLLECTING_RELEASE(xpcAccTableChangeEvent)

NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(xpcAccTableChangeEvent)
  NS_INTERFACE_MAP_ENTRY(nsISupports)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleEvent)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleTableChangeEvent)
NS_INTERFACE_MAP_END

NS_IMETHODIMP
xpcAccTableChangeEvent::GetEventType(uint32_t *aEventType)
{
  *aEventType = mEventType;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTableChangeEvent::GetAccessible(nsIAccessible** aAccessible)
{
  NS_IF_ADDREF(*aAccessible = mAccessible);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTableChangeEvent::GetAccessibleDocument(nsIAccessibleDocument** aAccessibleDocument)
{
  NS_IF_ADDREF(*aAccessibleDocument = mAccessibleDocument);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTableChangeEvent::GetDOMNode(nsINode** aDOMNode)
{
  NS_IF_ADDREF(*aDOMNode = mDOMNode);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTableChangeEvent::GetIsFromUserInput(bool *aIsFromUserInput)
{
  *aIsFromUserInput = mIsFromUserInput;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTableChangeEvent::GetRowOrColIndex(int32_t *aRowOrColIndex)
{
  *aRowOrColIndex = mRowOrColIndex;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccTableChangeEvent::GetRowsOrColsCount(int32_t *aRowsOrColsCount)
{
  *aRowsOrColsCount = mRowsOrColsCount;
  return NS_OK;
}

NS_IMPL_CYCLE_COLLECTION(xpcAccVirtualCursorChangeEvent, mAccessible, mAccessibleDocument, mDOMNode, mOldAccessible, mNewAccessible)

NS_IMPL_CYCLE_COLLECTING_ADDREF(xpcAccVirtualCursorChangeEvent)
NS_IMPL_CYCLE_COLLECTING_RELEASE(xpcAccVirtualCursorChangeEvent)

NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(xpcAccVirtualCursorChangeEvent)
  NS_INTERFACE_MAP_ENTRY(nsISupports)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleEvent)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleVirtualCursorChangeEvent)
NS_INTERFACE_MAP_END

NS_IMETHODIMP
xpcAccVirtualCursorChangeEvent::GetEventType(uint32_t *aEventType)
{
  *aEventType = mEventType;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccVirtualCursorChangeEvent::GetAccessible(nsIAccessible** aAccessible)
{
  NS_IF_ADDREF(*aAccessible = mAccessible);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccVirtualCursorChangeEvent::GetAccessibleDocument(nsIAccessibleDocument** aAccessibleDocument)
{
  NS_IF_ADDREF(*aAccessibleDocument = mAccessibleDocument);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccVirtualCursorChangeEvent::GetDOMNode(nsINode** aDOMNode)
{
  NS_IF_ADDREF(*aDOMNode = mDOMNode);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccVirtualCursorChangeEvent::GetIsFromUserInput(bool *aIsFromUserInput)
{
  *aIsFromUserInput = mIsFromUserInput;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccVirtualCursorChangeEvent::GetOldAccessible(nsIAccessible** aOldAccessible)
{
  NS_IF_ADDREF(*aOldAccessible = mOldAccessible);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccVirtualCursorChangeEvent::GetOldStartOffset(int32_t *aOldStartOffset)
{
  *aOldStartOffset = mOldStartOffset;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccVirtualCursorChangeEvent::GetOldEndOffset(int32_t *aOldEndOffset)
{
  *aOldEndOffset = mOldEndOffset;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccVirtualCursorChangeEvent::GetNewAccessible(nsIAccessible** aNewAccessible)
{
  NS_IF_ADDREF(*aNewAccessible = mNewAccessible);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccVirtualCursorChangeEvent::GetNewStartOffset(int32_t *aNewStartOffset)
{
  *aNewStartOffset = mNewStartOffset;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccVirtualCursorChangeEvent::GetNewEndOffset(int32_t *aNewEndOffset)
{
  *aNewEndOffset = mNewEndOffset;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccVirtualCursorChangeEvent::GetReason(int16_t *aReason)
{
  *aReason = mReason;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccVirtualCursorChangeEvent::GetBoundaryType(int16_t *aBoundaryType)
{
  *aBoundaryType = mBoundaryType;
  return NS_OK;
}

NS_IMPL_CYCLE_COLLECTION(xpcAccScrollingEvent, mAccessible, mAccessibleDocument, mDOMNode)

NS_IMPL_CYCLE_COLLECTING_ADDREF(xpcAccScrollingEvent)
NS_IMPL_CYCLE_COLLECTING_RELEASE(xpcAccScrollingEvent)

NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(xpcAccScrollingEvent)
  NS_INTERFACE_MAP_ENTRY(nsISupports)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleEvent)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleScrollingEvent)
NS_INTERFACE_MAP_END

NS_IMETHODIMP
xpcAccScrollingEvent::GetEventType(uint32_t *aEventType)
{
  *aEventType = mEventType;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccScrollingEvent::GetAccessible(nsIAccessible** aAccessible)
{
  NS_IF_ADDREF(*aAccessible = mAccessible);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccScrollingEvent::GetAccessibleDocument(nsIAccessibleDocument** aAccessibleDocument)
{
  NS_IF_ADDREF(*aAccessibleDocument = mAccessibleDocument);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccScrollingEvent::GetDOMNode(nsINode** aDOMNode)
{
  NS_IF_ADDREF(*aDOMNode = mDOMNode);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccScrollingEvent::GetIsFromUserInput(bool *aIsFromUserInput)
{
  *aIsFromUserInput = mIsFromUserInput;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccScrollingEvent::GetScrollX(uint32_t *aScrollX)
{
  *aScrollX = mScrollX;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccScrollingEvent::GetScrollY(uint32_t *aScrollY)
{
  *aScrollY = mScrollY;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccScrollingEvent::GetMaxScrollX(uint32_t *aMaxScrollX)
{
  *aMaxScrollX = mMaxScrollX;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccScrollingEvent::GetMaxScrollY(uint32_t *aMaxScrollY)
{
  *aMaxScrollY = mMaxScrollY;
  return NS_OK;
}

NS_IMPL_CYCLE_COLLECTION(xpcAccAnnouncementEvent, mAccessible, mAccessibleDocument, mDOMNode)

NS_IMPL_CYCLE_COLLECTING_ADDREF(xpcAccAnnouncementEvent)
NS_IMPL_CYCLE_COLLECTING_RELEASE(xpcAccAnnouncementEvent)

NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(xpcAccAnnouncementEvent)
  NS_INTERFACE_MAP_ENTRY(nsISupports)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleEvent)
  NS_INTERFACE_MAP_ENTRY(nsIAccessibleAnnouncementEvent)
NS_INTERFACE_MAP_END

NS_IMETHODIMP
xpcAccAnnouncementEvent::GetEventType(uint32_t *aEventType)
{
  *aEventType = mEventType;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccAnnouncementEvent::GetAccessible(nsIAccessible** aAccessible)
{
  NS_IF_ADDREF(*aAccessible = mAccessible);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccAnnouncementEvent::GetAccessibleDocument(nsIAccessibleDocument** aAccessibleDocument)
{
  NS_IF_ADDREF(*aAccessibleDocument = mAccessibleDocument);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccAnnouncementEvent::GetDOMNode(nsINode** aDOMNode)
{
  NS_IF_ADDREF(*aDOMNode = mDOMNode);
  return NS_OK;
}

NS_IMETHODIMP
xpcAccAnnouncementEvent::GetIsFromUserInput(bool *aIsFromUserInput)
{
  *aIsFromUserInput = mIsFromUserInput;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccAnnouncementEvent::GetAnnouncement(nsAString& aAnnouncement)
{
  aAnnouncement = mAnnouncement;
  return NS_OK;
}

NS_IMETHODIMP
xpcAccAnnouncementEvent::GetPriority(uint16_t *aPriority)
{
  *aPriority = mPriority;
  return NS_OK;
}

