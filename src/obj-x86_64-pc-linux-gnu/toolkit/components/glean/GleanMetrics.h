// -*- mode: C++ -*-

// AUTOGENERATED BY glean_parser.  DO NOT EDIT.

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#ifndef mozilla_Metrics_h
#define mozilla_Metrics_h

#include "mozilla/glean/bindings/MetricTypes.h"

namespace mozilla::glean {

enum class NoExtraKeys {};


namespace fog {
    /**
     * generated from fog.initialization
     */
    /**
     * Time the FOG initialization takes.
     */
    constexpr impl::TimespanMetric initialization(1);

}
namespace fog_ipc {
    /**
     * generated from fog.ipc.replay_failures
     */
    /**
     * The number of times the ipc buffer failed to be replayed in the
     * parent process.
     */
    constexpr impl::CounterMetric replay_failures(2);

}
namespace fog_validation {
    /**
     * generated from fog_validation.legacy_telemetry_client_id
     */
    /**
     * The Telemetry client_id. To be sent only in the "fog-validation" ping.
     */
    constexpr impl::UuidMetric legacy_telemetry_client_id(3);

    /**
     * generated from fog_validation.os_version
     */
    /**
     * The version of the OS running Firefox, as detected by Gecko. To be sent only in
     * the "fog-validation" ping.
     */
    constexpr impl::StringMetric os_version(4);

    /**
     * generated from fog_validation.profile_disk_is_ssd
     */
    /**
     * True iff the type of the disk the current Firefox profile is stored on is an
     * SSD. (Windows only).
     */
    constexpr impl::BooleanMetric profile_disk_is_ssd(5);

}
namespace test_only {
    /**
     * generated from test_only.bad_code
     */
    /**
     * Number of times we encountered bad code.
     * This is a test-only metric.
     */
    constexpr impl::CounterMetric bad_code(6);

    /**
     * generated from test_only.can_we_time_it
     */
    /**
     * Test metric for a timespan.
     * This is a test-only metric.
     */
    constexpr impl::TimespanMetric can_we_time_it(7);

    /**
     * generated from test_only.cheesy_string
     */
    /**
     * Only the cheesiest of strings.
     * This is a test-only metric.
     */
    constexpr impl::StringMetric cheesy_string(8);

    /**
     * generated from test_only.cheesy_string_list
     */
    /**
     * Only the cheesiest of strings. In list form!
     * This is a test-only metric.
     */
    constexpr impl::StringListMetric cheesy_string_list(9);

    /**
     * generated from test_only.what_a_date
     */
    /**
     * ...To be writing FOG code. This is a test-only metric.
     */
    constexpr impl::DatetimeMetric what_a_date(10);

    /**
     * generated from test_only.what_id_it
     */
    /**
     * Just a UUID.
     * This is a test-only metric.
     */
    constexpr impl::UuidMetric what_id_it(11);

    /**
     * generated from test_only.can_we_flag_it
     */
    /**
     * Test metric for a boolean.
     * This is a test-only metric.
     */
    constexpr impl::BooleanMetric can_we_flag_it(12);

    /**
     * generated from test_only.do_you_remember
     */
    /**
     * They say it's the second thing to go.
     * This is a test-only metric.
     */
    constexpr impl::MemoryDistributionMetric do_you_remember(13);

    /**
     * generated from test_only.what_time_is_it
     */
    /**
     * Adheres to at least two of the top ten fallacies programmers believe
     * about time.
     * This is a test-only metric.
     */
    constexpr impl::TimingDistributionMetric what_time_is_it(14);

    /**
     * generated from test_only.mabels_kitchen_counters
     */
    /**
     * Counts Mabels labeled by their kitchen counters.
     * This is a test-only metric.
     */
    constexpr impl::Labeled<impl::CounterMetric> mabels_kitchen_counters(15);

    /**
     * generated from test_only.mabels_like_balloons
     */
    /**
     * Does the labeled Mabel like balloons?
     * This is a test-only metric.
     */
    constexpr impl::Labeled<impl::BooleanMetric> mabels_like_balloons(16);

    /**
     * generated from test_only.mabels_balloon_strings
     */
    /**
     * What do the labeled Mabel's liked balloons' strings say?
     * This is a test-only metric.
     */
    constexpr impl::Labeled<impl::StringMetric> mabels_balloon_strings(17);

}
namespace test_only_ipc {
    /**
     * generated from test_only.ipc.a_counter
     */
    /**
     * This is a test-only metric.
     * Just counting things.
     */
    constexpr impl::CounterMetric a_counter(18);

    /**
     * generated from test_only.ipc.a_bool
     */
    /**
     * This is a test-only metric.
     * Just flagging things.
     */
    constexpr impl::BooleanMetric a_bool(19);

    /**
     * generated from test_only.ipc.a_date
     */
    /**
     * This is a test-only metric.
     * Just putting things on the calendar.
     */
    constexpr impl::DatetimeMetric a_date(20);

    /**
     * generated from test_only.ipc.a_string
     */
    /**
     * This is a test-only metric.
     * Just setting some strings.
     */
    constexpr impl::StringMetric a_string(21);

    /**
     * generated from test_only.ipc.a_memory_dist
     */
    /**
     * This is a test-only metric.
     * Just measuring memory.
     */
    constexpr impl::MemoryDistributionMetric a_memory_dist(22);

    /**
     * generated from test_only.ipc.a_timing_dist
     */
    /**
     * This is a test-only metric.
     * Just measuring time.
     */
    constexpr impl::TimingDistributionMetric a_timing_dist(23);

    /**
     * generated from test_only.ipc.a_string_list
     */
    /**
     * This is a test-only metric.
     * Just appending some strings.
     */
    constexpr impl::StringListMetric a_string_list(24);

    /**
     * generated from test_only.ipc.an_event
     */
    enum class AnEventKeys : int32_t {
        Extra1,
        Extra2,
    };

    /**
     * This is a test-only metric.
     * Just recording some events.
     */
    constexpr impl::EventMetric<AnEventKeys> an_event(25);

    /**
     * generated from test_only.ipc.no_extra_event
     */
    /**
     * This is a test-only metric.
     * Just recording some events without the extra fuss.
     */
    constexpr impl::EventMetric<uint32_t> no_extra_event(26);

    /**
     * generated from test_only.ipc.a_uuid
     */
    /**
     * This is a test-only metric.
     * Just recording some unique identifiers.
     */
    constexpr impl::UuidMetric a_uuid(27);

}

} // namespace mozilla::glean

#endif // mozilla_Metrics_h
