/* This file was autogenerated by toolkit/crashreporter/generate_crash_reporter_sources.py. DO NOT EDIT */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#ifndef CrashAnnotations_h
#define CrashAnnotations_h

#include <cstddef>
#include <cstdint>

namespace CrashReporter {

// Typed enum representing all crash annotations
enum class Annotation : uint32_t {
  A11yHandlerRegistered = 0,
  AbortMessage = 1,
  Accessibility = 2,
  AccessibilityClient = 3,
  AccessibilityInProcClient = 4,
  ActualStreamLen = 5,
  AdapterDeviceID = 6,
  AdapterDriverVendor = 7,
  AdapterDriverVersion = 8,
  AdapterSubsysID = 9,
  AdapterVendorID = 10,
  Addons = 11,
  AppInitDLLs = 12,
  ApplicationBuildID = 13,
  AsyncShutdownModule = 14,
  AsyncShutdownTimeout = 15,
  AvailablePageFile = 16,
  AvailablePhysicalMemory = 17,
  AvailableSwapMemory = 18,
  AvailableVirtualMemory = 19,
  BIOS_Manufacturer = 20,
  BlockedDllList = 21,
  BlocklistInitFailed = 22,
  Breadcrumbs = 23,
  BreakpadReserveAddress = 24,
  BreakpadReserveSize = 25,
  Bug_1086977 = 26,
  Bug_1541161 = 27,
  BuildID = 28,
  CPUMicrocodeVersion = 29,
  ClassRegistrationInfoChild = 30,
  ClassRegistrationInfoParent = 31,
  CoMarshalInterfaceFailure = 32,
  CoUnmarshalInterfaceResult = 33,
  ContainsMemoryReport = 34,
  ContentSandboxCapabilities = 35,
  ContentSandboxCapable = 36,
  ContentSandboxEnabled = 37,
  ContentSandboxLevel = 38,
  CpuUsageFlashProcess1 = 39,
  CpuUsageFlashProcess2 = 40,
  CrashAddressLikelyWrong = 41,
  CrashTime = 42,
  CreateStreamOnHGlobalFailure = 43,
  CycleCollector = 44,
  DOMFissionEnabled = 45,
  DOMIPCEnabled = 46,
  DesktopEnvironment = 47,
  DeviceResetReason = 48,
  DumperError = 49,
  EMCheckCompatibility = 50,
  EventLoopNestingLevel = 51,
  ExpectedStreamLen = 52,
  ExperimentalFeatures = 53,
  FlashProcessDump = 54,
  FramePoisonBase = 55,
  FramePoisonSize = 56,
  GMPLibraryPath = 57,
  GMPPlugin = 58,
  GPUProcessLaunchCount = 59,
  GPUProcessStatus = 60,
  GetHGlobalFromStreamFailure = 61,
  GraphicsCompileShader = 62,
  GraphicsCriticalError = 63,
  GraphicsSanityTest = 64,
  GraphicsStartupTest = 65,
  HangMonitorDescription = 66,
  HasDeviceTouchScreen = 67,
  IAccessibleConfig = 68,
  IPCFatalErrorMsg = 69,
  IPCFatalErrorProtocol = 70,
  IPCMessageName = 71,
  IPCMessageSize = 72,
  IPCReadErrorReason = 73,
  IPCShutdownState = 74,
  IPCSystemError = 75,
  IPCTransportFailureReason = 76,
  InstallTime = 77,
  InterfaceRegistrationInfoChild = 78,
  InterfaceRegistrationInfoParent = 79,
  IpcCreateEndpointsNsresult = 80,
  IpcCreatePipeCloExecErrno = 81,
  IpcCreatePipeFcntlErrno = 82,
  IpcCreatePipeSocketPairErrno = 83,
  IpcCreateTransportDupErrno = 84,
  IsGarbageCollecting = 85,
  IsWayland = 86,
  IsWaylandDRM = 87,
  IsWebRenderResourcePathOverridden = 88,
  JSActorMessage = 89,
  JSActorName = 90,
  JSLargeAllocationFailure = 91,
  JSOutOfMemory = 92,
  JavaException = 93,
  JavaStackTrace = 94,
  LauncherProcessState = 95,
  LowCommitSpaceEvents = 96,
  MainThreadRunnableName = 97,
  MarshalActCtxManifestPath = 98,
  MemoryErrorCorrection = 99,
  MozCrashReason = 100,
  Notes = 101,
  OOMAllocationSize = 102,
  PHCAllocStack = 103,
  PHCBaseAddress = 104,
  PHCFreeStack = 105,
  PHCKind = 106,
  PHCUsableSize = 107,
  PluginCpuUsage = 108,
  PluginFilename = 109,
  PluginHang = 110,
  PluginHangUIDuration = 111,
  PluginName = 112,
  PluginVersion = 113,
  ProcessType = 114,
  ProductID = 115,
  ProductName = 116,
  ProxyStreamSize = 117,
  ProxyStreamSizeFrom = 118,
  ProxyStreamUnmarshalStatus = 119,
  ProxyStreamValid = 120,
  PurgeablePhysicalMemory = 121,
  QuotaManagerShutdownTimeout = 122,
  RDDProcessStatus = 123,
  ReleaseChannel = 124,
  RemoteType = 125,
  SafeMode = 126,
  SecondsSinceLastCrash = 127,
  ServerURL = 128,
  ShutdownProgress = 129,
  StartupCrash = 130,
  StartupTime = 131,
  StatFailure = 132,
  StorageConnectionNotClosed = 133,
  SubmittedFromInfobar = 134,
  SystemMemoryUsePercentage = 135,
  TelemetryClientId = 136,
  TelemetryEnvironment = 137,
  TelemetryServerURL = 138,
  TelemetrySessionId = 139,
  TestKey = 140,
  TestUnicode = 141,
  TextureUsage = 142,
  ThreadIdNameMapping = 143,
  TotalPageFile = 144,
  TotalPhysicalMemory = 145,
  TotalVirtualMemory = 146,
  URL = 147,
  UnknownNetAddrSocketFamily = 148,
  UnmarshalActCtx = 149,
  UnmarshalActCtxManifestPath = 150,
  UptimeTS = 151,
  User32BeforeBlocklist = 152,
  VRProcessStatus = 153,
  Vendor = 154,
  Version = 155,
  Winsock_LSP = 156,
  additional_minidumps = 157,
  ipc_channel_error = 158,
  nsAsyncShutdownComponent = 159,
  useragent_locale = 160,
  Count = 161
};

// Stringified crash annotation names
const char* const kAnnotationStrings[] = {
  "A11yHandlerRegistered",
  "AbortMessage",
  "Accessibility",
  "AccessibilityClient",
  "AccessibilityInProcClient",
  "ActualStreamLen",
  "AdapterDeviceID",
  "AdapterDriverVendor",
  "AdapterDriverVersion",
  "AdapterSubsysID",
  "AdapterVendorID",
  "Add-ons",
  "AppInitDLLs",
  "ApplicationBuildID",
  "AsyncShutdownModule",
  "AsyncShutdownTimeout",
  "AvailablePageFile",
  "AvailablePhysicalMemory",
  "AvailableSwapMemory",
  "AvailableVirtualMemory",
  "BIOS_Manufacturer",
  "BlockedDllList",
  "BlocklistInitFailed",
  "Breadcrumbs",
  "BreakpadReserveAddress",
  "BreakpadReserveSize",
  "Bug_1086977",
  "Bug_1541161",
  "BuildID",
  "CPUMicrocodeVersion",
  "ClassRegistrationInfoChild",
  "ClassRegistrationInfoParent",
  "CoMarshalInterfaceFailure",
  "CoUnmarshalInterfaceResult",
  "ContainsMemoryReport",
  "ContentSandboxCapabilities",
  "ContentSandboxCapable",
  "ContentSandboxEnabled",
  "ContentSandboxLevel",
  "CpuUsageFlashProcess1",
  "CpuUsageFlashProcess2",
  "CrashAddressLikelyWrong",
  "CrashTime",
  "CreateStreamOnHGlobalFailure",
  "CycleCollector",
  "DOMFissionEnabled",
  "DOMIPCEnabled",
  "DesktopEnvironment",
  "DeviceResetReason",
  "DumperError",
  "EMCheckCompatibility",
  "EventLoopNestingLevel",
  "ExpectedStreamLen",
  "ExperimentalFeatures",
  "FlashProcessDump",
  "FramePoisonBase",
  "FramePoisonSize",
  "GMPLibraryPath",
  "GMPPlugin",
  "GPUProcessLaunchCount",
  "GPUProcessStatus",
  "GetHGlobalFromStreamFailure",
  "GraphicsCompileShader",
  "GraphicsCriticalError",
  "GraphicsSanityTest",
  "GraphicsStartupTest",
  "HangMonitorDescription",
  "HasDeviceTouchScreen",
  "IAccessibleConfig",
  "IPCFatalErrorMsg",
  "IPCFatalErrorProtocol",
  "IPCMessageName",
  "IPCMessageSize",
  "IPCReadErrorReason",
  "IPCShutdownState",
  "IPCSystemError",
  "IPCTransportFailureReason",
  "InstallTime",
  "InterfaceRegistrationInfoChild",
  "InterfaceRegistrationInfoParent",
  "IpcCreateEndpointsNsresult",
  "IpcCreatePipeCloExecErrno",
  "IpcCreatePipeFcntlErrno",
  "IpcCreatePipeSocketPairErrno",
  "IpcCreateTransportDupErrno",
  "IsGarbageCollecting",
  "IsWayland",
  "IsWaylandDRM",
  "IsWebRenderResourcePathOverridden",
  "JSActorMessage",
  "JSActorName",
  "JSLargeAllocationFailure",
  "JSOutOfMemory",
  "JavaException",
  "JavaStackTrace",
  "LauncherProcessState",
  "LowCommitSpaceEvents",
  "MainThreadRunnableName",
  "MarshalActCtxManifestPath",
  "MemoryErrorCorrection",
  "MozCrashReason",
  "Notes",
  "OOMAllocationSize",
  "PHCAllocStack",
  "PHCBaseAddress",
  "PHCFreeStack",
  "PHCKind",
  "PHCUsableSize",
  "PluginCpuUsage",
  "PluginFilename",
  "PluginHang",
  "PluginHangUIDuration",
  "PluginName",
  "PluginVersion",
  "ProcessType",
  "ProductID",
  "ProductName",
  "ProxyStreamSize",
  "ProxyStreamSizeFrom",
  "ProxyStreamUnmarshalStatus",
  "ProxyStreamValid",
  "PurgeablePhysicalMemory",
  "QuotaManagerShutdownTimeout",
  "RDDProcessStatus",
  "ReleaseChannel",
  "RemoteType",
  "SafeMode",
  "SecondsSinceLastCrash",
  "ServerURL",
  "ShutdownProgress",
  "StartupCrash",
  "StartupTime",
  "StatFailure",
  "StorageConnectionNotClosed",
  "SubmittedFromInfobar",
  "SystemMemoryUsePercentage",
  "TelemetryClientId",
  "TelemetryEnvironment",
  "TelemetryServerURL",
  "TelemetrySessionId",
  "TestKey",
  "TestUnicode",
  "TextureUsage",
  "ThreadIdNameMapping",
  "TotalPageFile",
  "TotalPhysicalMemory",
  "TotalVirtualMemory",
  "URL",
  "UnknownNetAddrSocketFamily",
  "UnmarshalActCtx",
  "UnmarshalActCtxManifestPath",
  "UptimeTS",
  "User32BeforeBlocklist",
  "VRProcessStatus",
  "Vendor",
  "Version",
  "Winsock_LSP",
  "additional_minidumps",
  "ipc_channel_error",
  "nsAsyncShutdownComponent",
  "useragent_locale"
};

// Whitelist of crash annotations that can be included in a crash ping
const Annotation kCrashPingWhitelist[] = {
  Annotation::AsyncShutdownTimeout,
  Annotation::AvailablePageFile,
  Annotation::AvailablePhysicalMemory,
  Annotation::AvailableSwapMemory,
  Annotation::AvailableVirtualMemory,
  Annotation::BlockedDllList,
  Annotation::BlocklistInitFailed,
  Annotation::BuildID,
  Annotation::ContainsMemoryReport,
  Annotation::CrashTime,
  Annotation::DOMFissionEnabled,
  Annotation::EventLoopNestingLevel,
  Annotation::ExperimentalFeatures,
  Annotation::IsGarbageCollecting,
  Annotation::LowCommitSpaceEvents,
  Annotation::MainThreadRunnableName,
  Annotation::MemoryErrorCorrection,
  Annotation::MozCrashReason,
  Annotation::OOMAllocationSize,
  Annotation::ProductID,
  Annotation::ProductName,
  Annotation::PurgeablePhysicalMemory,
  Annotation::QuotaManagerShutdownTimeout,
  Annotation::ReleaseChannel,
  Annotation::RemoteType,
  Annotation::SecondsSinceLastCrash,
  Annotation::ShutdownProgress,
  Annotation::StartupCrash,
  Annotation::SystemMemoryUsePercentage,
  Annotation::TextureUsage,
  Annotation::TotalPageFile,
  Annotation::TotalPhysicalMemory,
  Annotation::TotalVirtualMemory,
  Annotation::UptimeTS,
  Annotation::User32BeforeBlocklist,
  Annotation::ipc_channel_error
};

/**
 * Return the string representation of a crash annotation.
 *
 * @param aAnnotation a crash annotation
 * @returns A constant string holding the annotation name
 */
static inline const char* AnnotationToString(Annotation aAnnotation) {
  return kAnnotationStrings[static_cast<uint32_t>(aAnnotation)];
}

/**
 * Converts a string to its corresponding crash annotation.
 *
 * @param aResult a reference where the annotation will be stored
 * @param aValue the string to be converted
 * @return true if the string was successfully converted, false if it did not
 *         correspond to any known annotation
 */
bool AnnotationFromString(Annotation& aResult, const char* aValue);

/**
 * Checks if the given crash annotation is whitelisted for inclusion in the
 * crash ping.
 *
 * @param aAnnotation the crash annotation to be checked
 * @return true if the annotation can be included in the crash ping, false
 *         otherwise
 */
bool IsAnnotationWhitelistedForPing(Annotation aAnnotation);

/**
 * Abstract annotation writer, this is needed only for code that writes out
 * annotations in the exception handler.
 */
class AnnotationWriter {
 public:
  virtual void Write(Annotation aAnnotation, const char* aValue,
                     size_t aLen = 0) = 0;
  virtual void Write(Annotation aAnnotation, uint64_t aValue) = 0;
};

}  // namespace CrashReporter

#endif  // CrashAnnotations_h
