/* THIS FILE IS AUTOGENERATED FROM ReferrerPolicy.webidl BY Codegen.py - DO NOT EDIT */

#include "GeckoProfiler.h"
#include "ReferrerPolicyBinding.h"
#include "js/Object.h"
#include "js/experimental/JitInfo.h"
#include "jsapi.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"

namespace mozilla {
namespace dom {

namespace binding_detail {}; // Just to make sure it's known as a namespace
using namespace mozilla::dom::binding_detail;


namespace ReferrerPolicyValues {
extern const EnumEntry strings[10] = {
  {"", 0},
  {"no-referrer", 11},
  {"no-referrer-when-downgrade", 26},
  {"origin", 6},
  {"origin-when-cross-origin", 24},
  {"unsafe-url", 10},
  {"same-origin", 11},
  {"strict-origin", 13},
  {"strict-origin-when-cross-origin", 31},
  { nullptr, 0 }
};
} // namespace ReferrerPolicyValues

bool
ToJSValue(JSContext* aCx, ReferrerPolicy aArgument, JS::MutableHandle<JS::Value> aValue)
{
  MOZ_ASSERT(uint32_t(aArgument) < ArrayLength(ReferrerPolicyValues::strings));
  JSString* resultStr =
    JS_NewStringCopyN(aCx, ReferrerPolicyValues::strings[uint32_t(aArgument)].value,
                      ReferrerPolicyValues::strings[uint32_t(aArgument)].length);
  if (!resultStr) {
    return false;
  }
  aValue.setString(resultStr);
  return true;
}


} // namespace dom
} // namespace mozilla
