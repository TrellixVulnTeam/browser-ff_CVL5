/* THIS FILE IS AUTOGENERATED FROM KeyframeAnimationOptions.webidl BY Codegen.py - DO NOT EDIT */

#include "GeckoProfiler.h"
#include "KeyframeAnimationOptionsBinding.h"
#include "js/Object.h"
#include "js/experimental/JitInfo.h"
#include "mozilla/dom/BindingCallContext.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/PrimitiveConversions.h"

namespace mozilla {
namespace dom {

namespace binding_detail {}; // Just to make sure it's known as a namespace
using namespace mozilla::dom::binding_detail;


double&
OwningUnrestrictedDoubleOrKeyframeAnimationOptions::RawSetAsUnrestrictedDouble()
{
  if (mType == eUnrestrictedDouble) {
    return mValue.mUnrestrictedDouble.Value();
  }
  MOZ_ASSERT(mType == eUninitialized);
  mType = eUnrestrictedDouble;
  return mValue.mUnrestrictedDouble.SetValue();
}

double&
OwningUnrestrictedDoubleOrKeyframeAnimationOptions::SetAsUnrestrictedDouble()
{
  if (mType == eUnrestrictedDouble) {
    return mValue.mUnrestrictedDouble.Value();
  }
  Uninit();
  mType = eUnrestrictedDouble;
  return mValue.mUnrestrictedDouble.SetValue();
}

bool
OwningUnrestrictedDoubleOrKeyframeAnimationOptions::TrySetToUnrestrictedDouble(JSContext* cx, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl)
{
  tryNext = false;
  { // scope for memberSlot
    double& memberSlot = RawSetAsUnrestrictedDouble();
    if (!ValueToPrimitive<double, eDefault>(cx, value, "Unrestricted double branch of (unrestricted double or KeyframeAnimationOptions)", &memberSlot)) {
      return false;
    }
  }
  return true;
}

void
OwningUnrestrictedDoubleOrKeyframeAnimationOptions::DestroyUnrestrictedDouble()
{
  MOZ_ASSERT(IsUnrestrictedDouble(), "Wrong type!");
  mValue.mUnrestrictedDouble.Destroy();
  mType = eUninitialized;
}




KeyframeAnimationOptions&
OwningUnrestrictedDoubleOrKeyframeAnimationOptions::RawSetAsKeyframeAnimationOptions()
{
  if (mType == eKeyframeAnimationOptions) {
    return mValue.mKeyframeAnimationOptions.Value();
  }
  MOZ_ASSERT(mType == eUninitialized);
  mType = eKeyframeAnimationOptions;
  return mValue.mKeyframeAnimationOptions.SetValue();
}

KeyframeAnimationOptions&
OwningUnrestrictedDoubleOrKeyframeAnimationOptions::SetAsKeyframeAnimationOptions()
{
  if (mType == eKeyframeAnimationOptions) {
    return mValue.mKeyframeAnimationOptions.Value();
  }
  Uninit();
  mType = eKeyframeAnimationOptions;
  return mValue.mKeyframeAnimationOptions.SetValue();
}

bool
OwningUnrestrictedDoubleOrKeyframeAnimationOptions::TrySetToKeyframeAnimationOptions(BindingCallContext& cx, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl)
{
  tryNext = false;
  { // scope for memberSlot
    KeyframeAnimationOptions& memberSlot = RawSetAsKeyframeAnimationOptions();
    if (!IsConvertibleToDictionary(value)) {
      DestroyKeyframeAnimationOptions();
      tryNext = true;
      return true;
    }
    if (!memberSlot.Init(cx, value, "KeyframeAnimationOptions branch of (unrestricted double or KeyframeAnimationOptions)", passedToJSImpl)) {
      return false;
    }
  }
  return true;
}

bool
OwningUnrestrictedDoubleOrKeyframeAnimationOptions::TrySetToKeyframeAnimationOptions(JSContext* cx_, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl)
{
  BindingCallContext cx(cx_, nullptr);
  return TrySetToKeyframeAnimationOptions(cx, value, tryNext, passedToJSImpl);
}

void
OwningUnrestrictedDoubleOrKeyframeAnimationOptions::DestroyKeyframeAnimationOptions()
{
  MOZ_ASSERT(IsKeyframeAnimationOptions(), "Wrong type!");
  mValue.mKeyframeAnimationOptions.Destroy();
  mType = eUninitialized;
}




void
OwningUnrestrictedDoubleOrKeyframeAnimationOptions::Uninit()
{
  switch (mType) {
    case eUninitialized: {
      break;
    }
    case eUnrestrictedDouble: {
      DestroyUnrestrictedDouble();
      break;
    }
    case eKeyframeAnimationOptions: {
      DestroyKeyframeAnimationOptions();
      break;
    }
  }
}

void
OwningUnrestrictedDoubleOrKeyframeAnimationOptions::TraceUnion(JSTracer* trc)
{
}

OwningUnrestrictedDoubleOrKeyframeAnimationOptions&
OwningUnrestrictedDoubleOrKeyframeAnimationOptions::operator=(const OwningUnrestrictedDoubleOrKeyframeAnimationOptions& aOther)
{
  switch (aOther.mType) {
    case eUninitialized: {
      MOZ_ASSERT(mType == eUninitialized,
                 "We need to destroy ourselves?");
      break;
    }
    case eUnrestrictedDouble: {
      SetAsUnrestrictedDouble() = aOther.GetAsUnrestrictedDouble();
      break;
    }
    case eKeyframeAnimationOptions: {
      SetAsKeyframeAnimationOptions() = aOther.GetAsKeyframeAnimationOptions();
      break;
    }
  }
  return *this;
}


} // namespace dom
} // namespace mozilla
