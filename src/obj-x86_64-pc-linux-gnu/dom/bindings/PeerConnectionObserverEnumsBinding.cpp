/* THIS FILE IS AUTOGENERATED FROM PeerConnectionObserverEnums.webidl BY Codegen.py - DO NOT EDIT */

#include "GeckoProfiler.h"
#include "PeerConnectionObserverEnumsBinding.h"
#include "js/Object.h"
#include "js/experimental/JitInfo.h"
#include "jsapi.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"

namespace mozilla {
namespace dom {

namespace binding_detail {}; // Just to make sure it's known as a namespace
using namespace mozilla::dom::binding_detail;


namespace PCObserverStateTypeValues {
extern const EnumEntry strings[5] = {
  {"None", 4},
  {"IceConnectionState", 18},
  {"IceGatheringState", 17},
  {"SignalingState", 14},
  { nullptr, 0 }
};
} // namespace PCObserverStateTypeValues

bool
ToJSValue(JSContext* aCx, PCObserverStateType aArgument, JS::MutableHandle<JS::Value> aValue)
{
  MOZ_ASSERT(uint32_t(aArgument) < ArrayLength(PCObserverStateTypeValues::strings));
  JSString* resultStr =
    JS_NewStringCopyN(aCx, PCObserverStateTypeValues::strings[uint32_t(aArgument)].value,
                      PCObserverStateTypeValues::strings[uint32_t(aArgument)].length);
  if (!resultStr) {
    return false;
  }
  aValue.setString(resultStr);
  return true;
}


namespace PCErrorValues {
extern const EnumEntry strings[12] = {
  {"UnknownError", 12},
  {"InvalidAccessError", 18},
  {"InvalidStateError", 17},
  {"InvalidModificationError", 24},
  {"OperationError", 14},
  {"NotSupportedError", 17},
  {"SyntaxError", 11},
  {"NotReadableError", 16},
  {"TypeError", 9},
  {"RangeError", 10},
  {"InvalidCharacterError", 21},
  { nullptr, 0 }
};
} // namespace PCErrorValues

bool
ToJSValue(JSContext* aCx, PCError aArgument, JS::MutableHandle<JS::Value> aValue)
{
  MOZ_ASSERT(uint32_t(aArgument) < ArrayLength(PCErrorValues::strings));
  JSString* resultStr =
    JS_NewStringCopyN(aCx, PCErrorValues::strings[uint32_t(aArgument)].value,
                      PCErrorValues::strings[uint32_t(aArgument)].length);
  if (!resultStr) {
    return false;
  }
  aValue.setString(resultStr);
  return true;
}


} // namespace dom
} // namespace mozilla
