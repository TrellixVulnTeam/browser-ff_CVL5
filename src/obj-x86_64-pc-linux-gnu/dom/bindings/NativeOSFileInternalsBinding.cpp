/* THIS FILE IS AUTOGENERATED FROM NativeOSFileInternals.webidl BY Codegen.py - DO NOT EDIT */

#include <type_traits>
#include "AtomList.h"
#include "GeckoProfiler.h"
#include "NativeOSFileInternalsBinding.h"
#include "js/Object.h"
#include "js/experimental/JitInfo.h"
#include "mozilla/OwningNonNull.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/PrimitiveConversions.h"
#include "mozilla/dom/ScriptSettings.h"
#include "mozilla/dom/SimpleGlobalObject.h"

namespace mozilla {
namespace dom {

namespace binding_detail {}; // Just to make sure it's known as a namespace
using namespace mozilla::dom::binding_detail;



NativeOSFileReadOptions::NativeOSFileReadOptions()
{
  // Safe to pass a null context if we pass a null value
  Init(nullptr, JS::NullHandleValue);
}



bool
NativeOSFileReadOptions::InitIds(JSContext* cx, NativeOSFileReadOptionsAtoms* atomsCache)
{
  MOZ_ASSERT(JSID_IS_VOID(*reinterpret_cast<jsid*>(atomsCache)));

  // Initialize these in reverse order so that any failure leaves the first one
  // uninitialized.
  if (!atomsCache->encoding_id.init(cx, "encoding") ||
      !atomsCache->bytes_id.init(cx, "bytes")) {
    return false;
  }
  return true;
}

bool
NativeOSFileReadOptions::Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription, bool passedToJSImpl)
{
  // Passing a null JSContext is OK only if we're initing from null,
  // Since in that case we will not have to do any property gets
  // Also evaluate isNullOrUndefined in order to avoid false-positive
  // checkers by static analysis tools
  MOZ_ASSERT_IF(!cx, val.isNull() && val.isNullOrUndefined());
  NativeOSFileReadOptionsAtoms* atomsCache = nullptr;
  if (cx) {
    atomsCache = GetAtomCache<NativeOSFileReadOptionsAtoms>(cx);
    if (JSID_IS_VOID(*reinterpret_cast<jsid*>(atomsCache)) &&
        !InitIds(cx, atomsCache)) {
      return false;
    }
  }

  if (!IsConvertibleToDictionary(val)) {
    return cx.ThrowErrorMessage<MSG_NOT_DICTIONARY>(sourceDescription);
  }

  bool isNull = val.isNullOrUndefined();
  // We only need these if !isNull, in which case we have |cx|.
  Maybe<JS::Rooted<JSObject *> > object;
  Maybe<JS::Rooted<JS::Value> > temp;
  if (!isNull) {
    MOZ_ASSERT(cx);
    object.emplace(cx, &val.toObject());
    temp.emplace(cx);
  }
  if (!isNull) {
    if (!JS_GetPropertyById(cx, *object, atomsCache->bytes_id, temp.ptr())) {
      return false;
    }
  }
  if (!isNull && !temp->isUndefined()) {
    mBytes.Construct();
    if (temp.ref().isNullOrUndefined()) {
      (mBytes.Value()).SetNull();
    } else if (!ValueToPrimitive<uint64_t, eDefault>(cx, temp.ref(), "'bytes' member of NativeOSFileReadOptions", &(mBytes.Value()).SetValue())) {
      return false;
    }
    mIsAnyMemberPresent = true;
  }

  if (!isNull) {
    if (!JS_GetPropertyById(cx, *object, atomsCache->encoding_id, temp.ptr())) {
      return false;
    }
  }
  if (!isNull && !temp->isUndefined()) {
    mEncoding.Construct();
    if (!ConvertJSValueToString(cx, temp.ref(), eNull, eNull, (mEncoding.Value()))) {
      return false;
    }
    mIsAnyMemberPresent = true;
  }
  return true;
}

bool
NativeOSFileReadOptions::Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription, bool passedToJSImpl)
{
  // We don't want to use sourceDescription for our context here;
  // that's not really what it's formatted for.
  BindingCallContext cx(cx_, nullptr);
  return Init(cx, val, sourceDescription, passedToJSImpl);
}

void
NativeOSFileReadOptions::TraceDictionary(JSTracer* trc)
{
}

NativeOSFileReadOptions&
NativeOSFileReadOptions::operator=(const NativeOSFileReadOptions& aOther)
{
  DictionaryBase::operator=(aOther);
  mBytes.Reset();
  if (aOther.mBytes.WasPassed()) {
    mBytes.Construct(aOther.mBytes.Value());
  }
  mEncoding.Reset();
  if (aOther.mEncoding.WasPassed()) {
    mEncoding.Construct(aOther.mEncoding.Value());
  }
  return *this;
}

bool
NativeOSFileReadOptions::operator==(const NativeOSFileReadOptions& aOther) const
{
  if (mBytes != aOther.mBytes) {
      return false;
  }
  if (mEncoding != aOther.mEncoding) {
      return false;
  }
  return true;
}

namespace binding_detail {
} // namespace binding_detail



NativeOSFileWriteAtomicOptions::NativeOSFileWriteAtomicOptions()
{
  // Safe to pass a null context if we pass a null value
  Init(nullptr, JS::NullHandleValue);
}



bool
NativeOSFileWriteAtomicOptions::InitIds(JSContext* cx, NativeOSFileWriteAtomicOptionsAtoms* atomsCache)
{
  MOZ_ASSERT(JSID_IS_VOID(*reinterpret_cast<jsid*>(atomsCache)));

  // Initialize these in reverse order so that any failure leaves the first one
  // uninitialized.
  if (!atomsCache->tmpPath_id.init(cx, "tmpPath") ||
      !atomsCache->noOverwrite_id.init(cx, "noOverwrite") ||
      !atomsCache->flush_id.init(cx, "flush") ||
      !atomsCache->bytes_id.init(cx, "bytes") ||
      !atomsCache->backupTo_id.init(cx, "backupTo")) {
    return false;
  }
  return true;
}

bool
NativeOSFileWriteAtomicOptions::Init(BindingCallContext& cx, JS::Handle<JS::Value> val, const char* sourceDescription, bool passedToJSImpl)
{
  // Passing a null JSContext is OK only if we're initing from null,
  // Since in that case we will not have to do any property gets
  // Also evaluate isNullOrUndefined in order to avoid false-positive
  // checkers by static analysis tools
  MOZ_ASSERT_IF(!cx, val.isNull() && val.isNullOrUndefined());
  NativeOSFileWriteAtomicOptionsAtoms* atomsCache = nullptr;
  if (cx) {
    atomsCache = GetAtomCache<NativeOSFileWriteAtomicOptionsAtoms>(cx);
    if (JSID_IS_VOID(*reinterpret_cast<jsid*>(atomsCache)) &&
        !InitIds(cx, atomsCache)) {
      return false;
    }
  }

  if (!IsConvertibleToDictionary(val)) {
    return cx.ThrowErrorMessage<MSG_NOT_DICTIONARY>(sourceDescription);
  }

  bool isNull = val.isNullOrUndefined();
  // We only need these if !isNull, in which case we have |cx|.
  Maybe<JS::Rooted<JSObject *> > object;
  Maybe<JS::Rooted<JS::Value> > temp;
  if (!isNull) {
    MOZ_ASSERT(cx);
    object.emplace(cx, &val.toObject());
    temp.emplace(cx);
  }
  if (!isNull) {
    if (!JS_GetPropertyById(cx, *object, atomsCache->backupTo_id, temp.ptr())) {
      return false;
    }
  }
  if (!isNull && !temp->isUndefined()) {
    if (!ConvertJSValueToString(cx, temp.ref(), eNull, eNull, mBackupTo)) {
      return false;
    }
  } else {
    mBackupTo.SetIsVoid(true);
  }
  mIsAnyMemberPresent = true;

  if (!isNull) {
    if (!JS_GetPropertyById(cx, *object, atomsCache->bytes_id, temp.ptr())) {
      return false;
    }
  }
  if (!isNull && !temp->isUndefined()) {
    mBytes.Construct();
    if (temp.ref().isNullOrUndefined()) {
      (mBytes.Value()).SetNull();
    } else if (!ValueToPrimitive<uint64_t, eDefault>(cx, temp.ref(), "'bytes' member of NativeOSFileWriteAtomicOptions", &(mBytes.Value()).SetValue())) {
      return false;
    }
    mIsAnyMemberPresent = true;
  }

  if (!isNull) {
    if (!JS_GetPropertyById(cx, *object, atomsCache->flush_id, temp.ptr())) {
      return false;
    }
  }
  if (!isNull && !temp->isUndefined()) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp.ref(), "'flush' member of NativeOSFileWriteAtomicOptions", &mFlush)) {
      return false;
    }
  } else {
    mFlush = false;
  }
  mIsAnyMemberPresent = true;

  if (!isNull) {
    if (!JS_GetPropertyById(cx, *object, atomsCache->noOverwrite_id, temp.ptr())) {
      return false;
    }
  }
  if (!isNull && !temp->isUndefined()) {
    if (!ValueToPrimitive<bool, eDefault>(cx, temp.ref(), "'noOverwrite' member of NativeOSFileWriteAtomicOptions", &mNoOverwrite)) {
      return false;
    }
  } else {
    mNoOverwrite = false;
  }
  mIsAnyMemberPresent = true;

  if (!isNull) {
    if (!JS_GetPropertyById(cx, *object, atomsCache->tmpPath_id, temp.ptr())) {
      return false;
    }
  }
  if (!isNull && !temp->isUndefined()) {
    if (!ConvertJSValueToString(cx, temp.ref(), eNull, eNull, mTmpPath)) {
      return false;
    }
  } else {
    mTmpPath.SetIsVoid(true);
  }
  mIsAnyMemberPresent = true;
  return true;
}

bool
NativeOSFileWriteAtomicOptions::Init(JSContext* cx_, JS::Handle<JS::Value> val, const char* sourceDescription, bool passedToJSImpl)
{
  // We don't want to use sourceDescription for our context here;
  // that's not really what it's formatted for.
  BindingCallContext cx(cx_, nullptr);
  return Init(cx, val, sourceDescription, passedToJSImpl);
}

void
NativeOSFileWriteAtomicOptions::TraceDictionary(JSTracer* trc)
{
}

NativeOSFileWriteAtomicOptions&
NativeOSFileWriteAtomicOptions::operator=(const NativeOSFileWriteAtomicOptions& aOther)
{
  DictionaryBase::operator=(aOther);
  mBackupTo = aOther.mBackupTo;
  mBytes.Reset();
  if (aOther.mBytes.WasPassed()) {
    mBytes.Construct(aOther.mBytes.Value());
  }
  mFlush = aOther.mFlush;
  mNoOverwrite = aOther.mNoOverwrite;
  mTmpPath = aOther.mTmpPath;
  return *this;
}

bool
NativeOSFileWriteAtomicOptions::operator==(const NativeOSFileWriteAtomicOptions& aOther) const
{
  if (mBackupTo != aOther.mBackupTo) {
      return false;
  }
  if (mBytes != aOther.mBytes) {
      return false;
  }
  if (mFlush != aOther.mFlush) {
      return false;
  }
  if (mNoOverwrite != aOther.mNoOverwrite) {
      return false;
  }
  if (mTmpPath != aOther.mTmpPath) {
      return false;
  }
  return true;
}

namespace binding_detail {
} // namespace binding_detail


} // namespace dom
} // namespace mozilla
