/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim:set ts=2 sw=2 sts=2 et cindent: */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/* THIS FILE IS AUTOGENERATED FROM PopupBlockedEvent.webidl BY Codegen.py - DO NOT EDIT */

#include "EventBinding.h"
#include "PopupBlockedEvent.h"
#include "PopupBlockedEventBinding.h"
#include "js/GCAPI.h"
#include "mozilla/dom/BindingCallContext.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/PopupBlockedEvent.h"
#include "mozilla/dom/PrimitiveConversions.h"
#include "nsGlobalWindow.h"
#include "nsIURI.h"

namespace mozilla {
namespace dom {


NS_IMPL_CYCLE_COLLECTION_CLASS(PopupBlockedEvent)

NS_IMPL_ADDREF_INHERITED(PopupBlockedEvent, Event)
NS_IMPL_RELEASE_INHERITED(PopupBlockedEvent, Event)

NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED(PopupBlockedEvent, Event)
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mRequestingWindow)
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mPopupWindowURI)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END

NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN_INHERITED(PopupBlockedEvent, Event)
NS_IMPL_CYCLE_COLLECTION_TRACE_END

NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED(PopupBlockedEvent, Event)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mRequestingWindow)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mPopupWindowURI)
NS_IMPL_CYCLE_COLLECTION_UNLINK_END

NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(PopupBlockedEvent)
NS_INTERFACE_MAP_END_INHERITING(Event)

PopupBlockedEvent::PopupBlockedEvent(mozilla::dom::EventTarget* aOwner)
  : Event(aOwner, nullptr, nullptr)
{
}

PopupBlockedEvent::~PopupBlockedEvent()
{
}

PopupBlockedEvent*
PopupBlockedEvent::AsPopupBlockedEvent()
{
  return this;
}

JSObject*
PopupBlockedEvent::WrapObjectInternal(JSContext* aCx, JS::Handle<JSObject*> aGivenProto)
{
  return PopupBlockedEvent_Binding::Wrap(aCx, this, aGivenProto);
}

already_AddRefed<PopupBlockedEvent>
PopupBlockedEvent::Constructor(mozilla::dom::EventTarget* aOwner, const nsAString& aType, const PopupBlockedEventInit& aEventInitDict)
{
  RefPtr<PopupBlockedEvent> e = new PopupBlockedEvent(aOwner);
  bool trusted = e->Init(aOwner);
  e->InitEvent(aType, aEventInitDict.mBubbles, aEventInitDict.mCancelable);
  e->mRequestingWindow = aEventInitDict.mRequestingWindow;
  e->mPopupWindowURI = aEventInitDict.mPopupWindowURI;
  e->mPopupWindowName = aEventInitDict.mPopupWindowName;
  e->mPopupWindowFeatures = aEventInitDict.mPopupWindowFeatures;
  e->SetTrusted(trusted);
  e->SetComposed(aEventInitDict.mComposed);
  return e.forget();
}

already_AddRefed<PopupBlockedEvent>
PopupBlockedEvent::Constructor(const GlobalObject& aGlobal, const nsAString& aType, const PopupBlockedEventInit& aEventInitDict)
{
  nsCOMPtr<mozilla::dom::EventTarget> owner = do_QueryInterface(aGlobal.GetAsSupports());
  return Constructor(owner, aType, aEventInitDict);
}

nsGlobalWindowInner*
PopupBlockedEvent::GetRequestingWindow() const
{
  return mRequestingWindow;
}

nsIURI*
PopupBlockedEvent::GetPopupWindowURI() const
{
  return mPopupWindowURI;
}

void
PopupBlockedEvent::GetPopupWindowName(nsString& aRetVal) const
{
  aRetVal = mPopupWindowName;
}

void
PopupBlockedEvent::GetPopupWindowFeatures(nsString& aRetVal) const
{
  aRetVal = mPopupWindowFeatures;
}


} // namespace dom
} // namespace mozilla
