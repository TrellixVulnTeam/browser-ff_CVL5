/* THIS FILE IS GENERATED BY Services.py - DO NOT EDIT */

#ifndef mozilla_Services_h
#define mozilla_Services_h

#include "nscore.h"
#include "nsCOMPtr.h"
class nsIChromeRegistry;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetChromeRegistry.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIChromeRegistry* XPCOMService_GetChromeRegistry();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the ChromeRegistry.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIChromeRegistry>
GetChromeRegistry()
{
  return already_AddRefed<nsIChromeRegistry>(XPCOMService_GetChromeRegistry());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIToolkitChromeRegistry;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetToolkitChromeRegistry.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIToolkitChromeRegistry* XPCOMService_GetToolkitChromeRegistry();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the ToolkitChromeRegistry.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIToolkitChromeRegistry>
GetToolkitChromeRegistry()
{
  return already_AddRefed<nsIToolkitChromeRegistry>(XPCOMService_GetToolkitChromeRegistry());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIXULChromeRegistry;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetXULChromeRegistry.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIXULChromeRegistry* XPCOMService_GetXULChromeRegistry();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the XULChromeRegistry.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIXULChromeRegistry>
GetXULChromeRegistry()
{
  return already_AddRefed<nsIXULChromeRegistry>(XPCOMService_GetXULChromeRegistry());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIProperties;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetDirectoryService.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIProperties* XPCOMService_GetDirectoryService();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the DirectoryService.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIProperties>
GetDirectoryService()
{
  return already_AddRefed<nsIProperties>(XPCOMService_GetDirectoryService());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIIOService;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetIOService.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIIOService* XPCOMService_GetIOService();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the IOService.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIIOService>
GetIOService()
{
  return already_AddRefed<nsIIOService>(XPCOMService_GetIOService());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIObserverService;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetObserverService.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIObserverService* XPCOMService_GetObserverService();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the ObserverService.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIObserverService>
GetObserverService()
{
  return already_AddRefed<nsIObserverService>(XPCOMService_GetObserverService());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIStringBundleService;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetStringBundleService.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIStringBundleService* XPCOMService_GetStringBundleService();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the StringBundleService.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIStringBundleService>
GetStringBundleService()
{
  return already_AddRefed<nsIStringBundleService>(XPCOMService_GetStringBundleService());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIPermissionManager;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetPermissionManager.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIPermissionManager* XPCOMService_GetPermissionManager();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the PermissionManager.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIPermissionManager>
GetPermissionManager()
{
  return already_AddRefed<nsIPermissionManager>(XPCOMService_GetPermissionManager());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIPrefService;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetPrefService.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIPrefService* XPCOMService_GetPrefService();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the PrefService.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIPrefService>
GetPrefService()
{
  return already_AddRefed<nsIPrefService>(XPCOMService_GetPrefService());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIServiceWorkerManager;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetServiceWorkerManager.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIServiceWorkerManager* XPCOMService_GetServiceWorkerManager();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the ServiceWorkerManager.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIServiceWorkerManager>
GetServiceWorkerManager()
{
  return already_AddRefed<nsIServiceWorkerManager>(XPCOMService_GetServiceWorkerManager());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIAsyncShutdownService;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetAsyncShutdownService.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIAsyncShutdownService* XPCOMService_GetAsyncShutdownService();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the AsyncShutdownService.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIAsyncShutdownService>
GetAsyncShutdownService()
{
  return already_AddRefed<nsIAsyncShutdownService>(XPCOMService_GetAsyncShutdownService());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIUUIDGenerator;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetUUIDGenerator.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIUUIDGenerator* XPCOMService_GetUUIDGenerator();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the UUIDGenerator.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIUUIDGenerator>
GetUUIDGenerator()
{
  return already_AddRefed<nsIUUIDGenerator>(XPCOMService_GetUUIDGenerator());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIGfxInfo;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetGfxInfo.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIGfxInfo* XPCOMService_GetGfxInfo();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the GfxInfo.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIGfxInfo>
GetGfxInfo()
{
  return already_AddRefed<nsIGfxInfo>(XPCOMService_GetGfxInfo());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsISocketTransportService;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetSocketTransportService.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsISocketTransportService* XPCOMService_GetSocketTransportService();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the SocketTransportService.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsISocketTransportService>
GetSocketTransportService()
{
  return already_AddRefed<nsISocketTransportService>(XPCOMService_GetSocketTransportService());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIStreamTransportService;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetStreamTransportService.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIStreamTransportService* XPCOMService_GetStreamTransportService();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the StreamTransportService.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIStreamTransportService>
GetStreamTransportService()
{
  return already_AddRefed<nsIStreamTransportService>(XPCOMService_GetStreamTransportService());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsICacheStorageService;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetCacheStorageService.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsICacheStorageService* XPCOMService_GetCacheStorageService();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the CacheStorageService.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsICacheStorageService>
GetCacheStorageService()
{
  return already_AddRefed<nsICacheStorageService>(XPCOMService_GetCacheStorageService());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIURIClassifier;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetURIClassifier.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIURIClassifier* XPCOMService_GetURIClassifier();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the URIClassifier.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIURIClassifier>
GetURIClassifier()
{
  return already_AddRefed<nsIURIClassifier>(XPCOMService_GetURIClassifier());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIHttpActivityDistributor;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetHttpActivityDistributor.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIHttpActivityDistributor* XPCOMService_GetHttpActivityDistributor();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the HttpActivityDistributor.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIHttpActivityDistributor>
GetHttpActivityDistributor()
{
  return already_AddRefed<nsIHttpActivityDistributor>(XPCOMService_GetHttpActivityDistributor());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
namespace mozilla {
class IHistory;
} // namespace mozilla

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetHistory.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
mozilla::IHistory* XPCOMService_GetHistory();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the History.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<mozilla::IHistory>
GetHistory()
{
  return already_AddRefed<mozilla::IHistory>(XPCOMService_GetHistory());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class mozIThirdPartyUtil;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetThirdPartyUtil.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
mozIThirdPartyUtil* XPCOMService_GetThirdPartyUtil();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the ThirdPartyUtil.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<mozIThirdPartyUtil>
GetThirdPartyUtil()
{
  return already_AddRefed<mozIThirdPartyUtil>(XPCOMService_GetThirdPartyUtil());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIURIFixup;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetURIFixup.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIURIFixup* XPCOMService_GetURIFixup();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the URIFixup.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIURIFixup>
GetURIFixup()
{
  return already_AddRefed<nsIURIFixup>(XPCOMService_GetURIFixup());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIBits;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetBits.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIBits* XPCOMService_GetBits();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the Bits.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIBits>
GetBits()
{
  return already_AddRefed<nsIBits>(XPCOMService_GetBits());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIXULRuntime;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetXULRuntime.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIXULRuntime* XPCOMService_GetXULRuntime();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the XULRuntime.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIXULRuntime>
GetXULRuntime()
{
  return already_AddRefed<nsIXULRuntime>(XPCOMService_GetXULRuntime());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
class nsIRemoteAgent;

#ifdef MOZILLA_INTERNAL_API
extern "C" {
/**
 * NOTE: Don't call this method directly, instead call mozilla::services::GetRemoteAgent.
 * It is used to expose XPCOM services to rust code. The return value is already addrefed.
 */
nsIRemoteAgent* XPCOMService_GetRemoteAgent();
} // extern "C"

namespace mozilla {
namespace services {
/**
 * Fetch a cached instance of the RemoteAgent.
 * This function will return nullptr during XPCOM shutdown.
 */
inline already_AddRefed<nsIRemoteAgent>
GetRemoteAgent()
{
  return already_AddRefed<nsIRemoteAgent>(XPCOMService_GetRemoteAgent());
}
} // namespace services
} // namespace mozilla
#endif // defined(MOZILLA_INTERNAL_API)
#endif // !defined(mozilla_Services_h)
