diff --git a/browser/base/content/browser-siteIdentity.js b/browser/base/content/browser-siteIdentity.js
index 01d47f0907e6b77423ae4ad00150d71e31eb8ea8..45d75650fe3487f8ea8f6f7c713a17c3050fc37a 100644
--- a/browser/base/content/browser-siteIdentity.js
+++ b/browser/base/content/browser-siteIdentity.js
@@ -57,7 +57,7 @@ var gIdentityHandler = {
    * RegExp used to decide if an about url should be shown as being part of
    * the browser UI.
    */
-  _secureInternalPages: /^(?:accounts|addons|cache|certificate|config|crashes|downloads|license|logins|preferences|protections|rights|sessionrestore|support|welcomeback|ion)(?:[?#]|$)/i,
+  _secureInternalPages: /^(?:accounts|addons|cache|certificate|config|crashes|downloads|license|logins|newpreferences|preferences|protections|rights|sessionrestore|support|welcomeback|ion|history)(?:[?#]|$)/i,
 
   /**
    * Whether the established HTTPS connection is considered "broken".
@@ -265,7 +265,7 @@ var gIdentityHandler = {
   get _identityPopupContentVerif() {
     delete this._identityPopupContentVerif;
     return (this._identityPopupContentVerif = document.getElementById(
-      "identity-popup-content-verifier"
+      "identity-popup-section-subtitle"
     ));
   },
   get _identityPopupCustomRootLearnMore() {
@@ -300,7 +300,7 @@ var gIdentityHandler = {
   get _popupExpander() {
     delete this._popupExpander;
     return (this._popupExpander = document.getElementById(
-      "identity-popup-security-expander"
+      "identity-popup-certificate-expander"
     ));
   },
   get _clearSiteDataFooter() {
@@ -603,7 +603,7 @@ var gIdentityHandler = {
     // SubjectName fields, broken up for individual access
     if (cert.subjectName) {
       result.subjectNameFields = {};
-      cert.subjectName.split(",").forEach(function(v) {
+      cert.subjectName.split(",").forEach(function (v) {
         var field = v.split("=");
         this[field[0]] = field[1];
       }, result.subjectNameFields);
@@ -729,6 +729,15 @@ var gIdentityHandler = {
     return "unknownIdentity";
   },
 
+  /**
+   * Returns the reader mode button element.
+  */
+  get _readerModeButton() {
+    return (this._readerModeButton = document.getElementById(
+      "reader-mode-button"
+    ));
+  },
+
   /**
    * Returns whether the issuer of the current certificate chain is
    * built-in (returns false) or imported (returns true).
@@ -770,12 +779,20 @@ var gIdentityHandler = {
       icon_label = brandBundle.getString("brandShorterName");
     } else if (this._pageExtensionPolicy) {
       // This is a WebExtension page.
-      this._identityBox.className = "extensionPage";
-      let extensionName = this._pageExtensionPolicy.name;
-      icon_label = gNavigatorBundle.getFormattedString(
-        "identity.extension.label",
-        [extensionName]
-      );
+      let displayUri = this._uri.displaySpec || null;
+
+      if (BROWSER_NEW_TAB_URL == displayUri) {
+        this._identityIconLabel.setAttribute("hidden", "true");
+        this._identityBox.setAttribute("pageproxystate", "invalid");
+        gProtectionsHandler._trackingProtectionIconContainer.setAttribute("hidden", true);
+      } else {
+        this._identityBox.className = "extensionPage";
+        let extensionName = this._pageExtensionPolicy.name;
+        icon_label = gNavigatorBundle.getFormattedString(
+          "identity.extension.label",
+          [extensionName]
+        );
+      }
     } else if (this._uriHasHost && this._isSecureConnection) {
       // This is a secure connection.
       this._identityBox.className = "verifiedDomain";
@@ -816,6 +833,12 @@ var gIdentityHandler = {
     } else if (this._isPotentiallyTrustworthy) {
       // This is a local resource (and shouldn't be marked insecure).
       this._identityBox.className = "localResource";
+
+      let readerActive = this._readerModeButton.getAttribute("readeractive");
+
+      if (readerActive == "true") {
+        this._identityBox.className = "readerIdentity";
+      }
     } else {
       // This is an insecure connection.
       let warnOnInsecure =
@@ -1091,9 +1114,14 @@ var gIdentityHandler = {
       [owner]
     );
 
+    document.l10n.setAttributes(
+      this._identityPopupContentVerif,
+      "identity-certificate-issuer",
+      { certIssuer: verifier.split(": ")[1] || "" }
+    );
+
     this._identityPopupContentOwner.textContent = owner;
     this._identityPopupContentSupp.textContent = supplemental;
-    this._identityPopupContentVerif.textContent = verifier;
   },
 
   setURI(uri) {
