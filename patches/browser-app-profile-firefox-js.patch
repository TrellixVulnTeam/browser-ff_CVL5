diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
index ef44a16daa39b28bf0e475ce94c2d249aaeb5f3d..68140e503393e2f5d2b4d07ab0522c0cbcb9009b 100644
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -140,7 +140,7 @@ pref("app.update.notifyDuringDownload", false);
 // should no longer be used directly. Instead, getAppUpdateAutoEnabled and
 // getAppUpdateAutoEnabled from UpdateUtils.jsm should be used.
 #ifndef XP_WIN
-  pref("app.update.auto", true);
+pref("app.update.auto", true);
 #endif
 
 // If set to true, the Update Service will apply updates in the background
@@ -158,13 +158,13 @@ pref("app.update.staging.enabled", true);
 
 // Whether or not to attempt using the service for updates.
 #ifdef MOZ_MAINTENANCE_SERVICE
-  pref("app.update.service.enabled", true);
+pref("app.update.service.enabled", true);
 #endif
 
 #ifdef MOZ_BITS_DOWNLOAD
-  // If set to true, the Update Service will attempt to use Windows BITS to
-  // download updates and will fallback to downloading internally if that fails.
-  pref("app.update.BITS.enabled", true);
+// If set to true, the Update Service will attempt to use Windows BITS to
+// download updates and will fallback to downloading internally if that fails.
+pref("app.update.BITS.enabled", true);
 #endif
 
 pref("app.update.langpack.enabled", true);
@@ -179,14 +179,14 @@ pref("extensions.update.enabled", true);
 pref("extensions.update.url", "https://versioncheck.addons.mozilla.org/update/VersionCheck.php?reqVersion=%REQ_VERSION%&id=%ITEM_ID%&version=%ITEM_VERSION%&maxAppVersion=%ITEM_MAXAPPVERSION%&status=%ITEM_STATUS%&appID=%APP_ID%&appVersion=%APP_VERSION%&appOS=%APP_OS%&appABI=%APP_ABI%&locale=%APP_LOCALE%&currentAppVersion=%CURRENT_APP_VERSION%&updateType=%UPDATE_TYPE%&compatMode=%COMPATIBILITY_MODE%");
 pref("extensions.update.background.url", "https://versioncheck-bg.addons.mozilla.org/update/VersionCheck.php?reqVersion=%REQ_VERSION%&id=%ITEM_ID%&version=%ITEM_VERSION%&maxAppVersion=%ITEM_MAXAPPVERSION%&status=%ITEM_STATUS%&appID=%APP_ID%&appVersion=%APP_VERSION%&appOS=%APP_OS%&appABI=%APP_ABI%&locale=%APP_LOCALE%&currentAppVersion=%CURRENT_APP_VERSION%&updateType=%UPDATE_TYPE%&compatMode=%COMPATIBILITY_MODE%");
 pref("extensions.update.interval", 86400);  // Check for updates to Extensions and
-                                            // Themes every day
+// Themes every day
 
 pref("lightweightThemes.getMoreURL", "https://addons.mozilla.org/%LOCALE%/firefox/themes");
 
 #if defined(MOZ_WIDEVINE_EME)
-  pref("browser.eme.ui.enabled", true);
+pref("browser.eme.ui.enabled", true);
 #else
-  pref("browser.eme.ui.enabled", false);
+pref("browser.eme.ui.enabled", false);
 #endif
 
 // UI tour experience.
@@ -219,9 +219,9 @@ pref("browser.fixup.domainsuffixwhitelist.local", true);
 pref("browser.fixup.dns_first_for_single_words", false);
 
 #ifdef UNIX_BUT_NOT_MAC
-  pref("general.autoScroll", false);
+pref("general.autoScroll", false);
 #else
-  pref("general.autoScroll", true);
+pref("general.autoScroll", true);
 #endif
 
 // UI density of the browser chrome. This mostly affects toolbarbutton
@@ -233,7 +233,7 @@ pref("browser.touchmode.auto", true);
 
 // At startup, check if we're the default browser and prompt user if not.
 pref("browser.shell.checkDefaultBrowser", true);
-pref("browser.shell.shortcutFavicons",true);
+pref("browser.shell.shortcutFavicons", true);
 pref("browser.shell.mostRecentDateSetAsDefault", "");
 pref("browser.shell.skipDefaultBrowserCheckOnFirstRun", true);
 pref("browser.shell.didSkipDefaultBrowserCheckOnFirstRun", false);
@@ -248,8 +248,8 @@ pref("browser.defaultbrowser.notificationbar.checklimit", 10000);
 
 // 0 = blank, 1 = home (browser.startup.homepage), 2 = last visited page, 3 = resume previous browser session
 // The behavior of option 3 is detailed at: http://wiki.mozilla.org/Session_Restore
-pref("browser.startup.page",                1);
-pref("browser.startup.homepage",            "about:home");
+pref("browser.startup.page", 1);
+pref("browser.startup.homepage", "about:home");
 #ifdef NIGHTLY_BUILD
 pref("browser.startup.homepage.abouthome_cache.enabled", true);
 #else
@@ -264,9 +264,9 @@ pref("browser.startup.firstrunSkipsHomepage", true);
 // Held to nightly on Linux due to bug 1450626.
 // Disabled on Mac because the bouncing dock icon already provides feedback.
 #if defined(XP_WIN) || defined(MOZ_WIDGET_GTK) && defined(NIGHTLY_BUILD)
-  pref("browser.startup.blankWindow", true);
+pref("browser.startup.blankWindow", true);
 #else
-  pref("browser.startup.blankWindow", false);
+pref("browser.startup.blankWindow", false);
 #endif
 
 // Show a skeleton UI window prior to loading libxul. Only visible for windows
@@ -325,13 +325,13 @@ pref("browser.urlbar.maxHistoricalSearchSuggestions", 2);
 
 // The default behavior for the urlbar can be configured to use any combination
 // of the match filters with each additional filter adding more results (union).
-pref("browser.urlbar.suggest.bookmark",             true);
-pref("browser.urlbar.suggest.history",              true);
-pref("browser.urlbar.suggest.openpage",             true);
-pref("browser.urlbar.suggest.searches",             true);
-pref("browser.urlbar.suggest.topsites",             true);
-pref("browser.urlbar.suggest.engines",              true);
-pref("browser.urlbar.suggest.quicksuggest",         true);
+pref("browser.urlbar.suggest.bookmark", true);
+pref("browser.urlbar.suggest.history", true);
+pref("browser.urlbar.suggest.openpage", true);
+pref("browser.urlbar.suggest.searches", true);
+pref("browser.urlbar.suggest.topsites", true);
+pref("browser.urlbar.suggest.engines", true);
+pref("browser.urlbar.suggest.quicksuggest", true);
 
 // Whether the QuickSuggest experiment is enabled.
 pref("browser.urlbar.quicksuggest.enabled", false);
@@ -435,7 +435,7 @@ pref("browser.download.viewableInternally.enabledTypes", "xml,svg,webp,avif");
 pref("browser.download.autohideButton", true);
 
 #ifndef XP_MACOSX
-  pref("browser.helperApps.deleteTempFileOnExit", true);
+pref("browser.helperApps.deleteTempFileOnExit", true);
 #endif
 
 // This controls the visibility of the radio button in the
@@ -447,7 +447,7 @@ pref("browser.helperApps.showOpenOptionForPdfJS", true);
 pref("browser.helperApps.showOpenOptionForViewableInternally", true);
 
 // search engines URL
-pref("browser.search.searchEnginesURL",      "https://addons.mozilla.org/%LOCALE%/firefox/search-engines/");
+pref("browser.search.searchEnginesURL", "https://addons.mozilla.org/%LOCALE%/firefox/search-engines/");
 
 // search bar results always open in a new tab
 pref("browser.search.openintab", false);
@@ -509,9 +509,9 @@ pref("browser.link.open_newwindow.restriction", 2);
 // We set this differently on Mac because the fullscreen implementation there is
 // different.
 #ifdef XP_MACOSX
-  pref("browser.link.open_newwindow.disabled_in_fullscreen", true);
+pref("browser.link.open_newwindow.disabled_in_fullscreen", true);
 #else
-  pref("browser.link.open_newwindow.disabled_in_fullscreen", false);
+pref("browser.link.open_newwindow.disabled_in_fullscreen", false);
 #endif
 
 // Tabbed browser
@@ -541,7 +541,7 @@ pref("browser.tabs.tabMinWidth", 76);
 // Initial titlebar state is managed by -moz-gtk-csd-hide-titlebar-by-default
 // on Linux.
 #ifndef UNIX_BUT_NOT_MAC
-  pref("browser.tabs.drawInTitlebar", true);
+pref("browser.tabs.drawInTitlebar", true);
 #endif
 
 //Control the visibility of Tab Manager Menu.
@@ -568,9 +568,9 @@ pref("browser.tabs.delayHidingAudioPlayingIconMS", 3000);
 pref("browser.tabs.remote.separatePrivilegedContentProcess", true);
 
 #if defined(NIGHTLY_BUILD) && !defined(MOZ_ASAN)
-  // This pref will cause assertions when a remoteType triggers a process switch
-  // to a new remoteType it should not be able to trigger.
-  pref("browser.tabs.remote.enforceRemoteTypeRestrictions", true);
+// This pref will cause assertions when a remoteType triggers a process switch
+// to a new remoteType it should not be able to trigger.
+pref("browser.tabs.remote.enforceRemoteTypeRestrictions", true);
 #endif
 
 // Pref to control whether we use a separate privileged content process
@@ -599,13 +599,13 @@ pref("browser.ctrlTab.recentlyUsedOrder", true);
 // By default, do not export HTML at shutdown.
 // If true, at shutdown the bookmarks in your menu and toolbar will
 // be exported as HTML to the bookmarks.html file.
-pref("browser.bookmarks.autoExportHTML",          false);
+pref("browser.bookmarks.autoExportHTML", false);
 
 // The maximum number of daily bookmark backups to
 // keep in {PROFILEDIR}/bookmarkbackups. Special values:
 // -1: unlimited
 //  0: no backups created (and deletes all existing backups)
-pref("browser.bookmarks.max_backups",             15);
+pref("browser.bookmarks.max_backups", 15);
 
 // Whether menu should close after Ctrl-click, middle-click, etc.
 pref("browser.bookmarks.openInTabClosesMenu", true);
@@ -623,43 +623,43 @@ pref("browser.bookmarks.openInTabClosesMenu", true);
 pref("browser.bookmarks.defaultLocation", "toolbar");
 
 // Scripts & Windows prefs
-pref("dom.disable_open_during_load",              true);
-pref("javascript.options.showInConsole",          true);
+pref("dom.disable_open_during_load", true);
+pref("javascript.options.showInConsole", true);
 
 // allow JS to move and resize existing windows
-pref("dom.disable_window_move_resize",            false);
+pref("dom.disable_window_move_resize", false);
 // prevent JS from monkeying with window focus, etc
-pref("dom.disable_window_flip",                   true);
+pref("dom.disable_window_flip", true);
 
 // popups.policy 1=allow,2=reject
-pref("privacy.popups.policy",               1);
-pref("privacy.popups.usecustom",            true);
-pref("privacy.popups.showBrowserMessage",   true);
-
-pref("privacy.item.cookies",                false);
-
-pref("privacy.clearOnShutdown.history",     true);
-pref("privacy.clearOnShutdown.formdata",    true);
-pref("privacy.clearOnShutdown.downloads",   true);
-pref("privacy.clearOnShutdown.cookies",     true);
-pref("privacy.clearOnShutdown.cache",       true);
-pref("privacy.clearOnShutdown.sessions",    true);
+pref("privacy.popups.policy", 1);
+pref("privacy.popups.usecustom", true);
+pref("privacy.popups.showBrowserMessage", true);
+
+pref("privacy.item.cookies", false);
+
+pref("privacy.clearOnShutdown.history", true);
+pref("privacy.clearOnShutdown.formdata", true);
+pref("privacy.clearOnShutdown.downloads", true);
+pref("privacy.clearOnShutdown.cookies", true);
+pref("privacy.clearOnShutdown.cache", true);
+pref("privacy.clearOnShutdown.sessions", true);
 pref("privacy.clearOnShutdown.offlineApps", false);
 pref("privacy.clearOnShutdown.siteSettings", false);
 pref("privacy.clearOnShutdown.openWindows", false);
 
-pref("privacy.cpd.history",                 true);
-pref("privacy.cpd.formdata",                true);
-pref("privacy.cpd.passwords",               false);
-pref("privacy.cpd.downloads",               true);
-pref("privacy.cpd.cookies",                 true);
-pref("privacy.cpd.cache",                   true);
-pref("privacy.cpd.sessions",                true);
-pref("privacy.cpd.offlineApps",             false);
-pref("privacy.cpd.siteSettings",            false);
-pref("privacy.cpd.openWindows",             false);
+pref("privacy.cpd.history", true);
+pref("privacy.cpd.formdata", true);
+pref("privacy.cpd.passwords", false);
+pref("privacy.cpd.downloads", true);
+pref("privacy.cpd.cookies", true);
+pref("privacy.cpd.cache", true);
+pref("privacy.cpd.sessions", true);
+pref("privacy.cpd.offlineApps", false);
+pref("privacy.cpd.siteSettings", false);
+pref("privacy.cpd.openWindows", false);
 
-pref("privacy.history.custom",              false);
+pref("privacy.history.custom", false);
 
 // What default should we use for the time span in the sanitizer:
 // 0 - Clear everything
@@ -671,14 +671,14 @@ pref("privacy.history.custom",              false);
 // 6 - Last 24 hours
 pref("privacy.sanitize.timeSpan", 1);
 
-pref("privacy.sanitize.migrateFx3Prefs",    false);
+pref("privacy.sanitize.migrateFx3Prefs", false);
 
-pref("privacy.panicButton.enabled",         true);
+pref("privacy.panicButton.enabled", true);
 
 // Time until temporary permissions expire, in ms
-pref("privacy.temporary_permission_expire_time_ms",  3600000);
+pref("privacy.temporary_permission_expire_time_ms", 3600000);
 
-pref("network.proxy.share_proxy_settings",  false); // use the same proxy settings for all protocols
+pref("network.proxy.share_proxy_settings", false); // use the same proxy settings for all protocols
 
 // simple gestures support
 pref("browser.gesture.swipe.left", "Browser:BackOrBackDuplicate");
@@ -688,17 +688,17 @@ pref("browser.gesture.swipe.down", "cmd_scrollBottom");
 pref("browser.gesture.pinch.latched", false);
 pref("browser.gesture.pinch.threshold", 25);
 #if defined(XP_WIN) || defined(MOZ_WIDGET_GTK)
-  // Enabled for touch input display zoom.
-  pref("browser.gesture.pinch.out", "cmd_fullZoomEnlarge");
-  pref("browser.gesture.pinch.in", "cmd_fullZoomReduce");
-  pref("browser.gesture.pinch.out.shift", "cmd_fullZoomReset");
-  pref("browser.gesture.pinch.in.shift", "cmd_fullZoomReset");
+// Enabled for touch input display zoom.
+pref("browser.gesture.pinch.out", "cmd_fullZoomEnlarge");
+pref("browser.gesture.pinch.in", "cmd_fullZoomReduce");
+pref("browser.gesture.pinch.out.shift", "cmd_fullZoomReset");
+pref("browser.gesture.pinch.in.shift", "cmd_fullZoomReset");
 #else
-  // Disabled by default due to issues with track pad input.
-  pref("browser.gesture.pinch.out", "");
-  pref("browser.gesture.pinch.in", "");
-  pref("browser.gesture.pinch.out.shift", "");
-  pref("browser.gesture.pinch.in.shift", "");
+// Disabled by default due to issues with track pad input.
+pref("browser.gesture.pinch.out", "");
+pref("browser.gesture.pinch.in", "");
+pref("browser.gesture.pinch.out.shift", "");
+pref("browser.gesture.pinch.in.shift", "");
 #endif
 pref("browser.gesture.twist.latched", false);
 pref("browser.gesture.twist.threshold", 0);
@@ -716,33 +716,33 @@ pref("browser.history_swipe_animation.disabled", false);
 // 4: Treat vertical wheel as horizontal scroll
 // 5: Zoom in or out (pinch zoom).
 #ifdef XP_MACOSX
-  // On macOS, if the wheel has one axis only, shift+wheel comes through as a
-  // horizontal scroll event. Thus, we can't assign anything other than normal
-  // scrolling to shift+wheel.
-  pref("mousewheel.with_shift.action", 1);
-  pref("mousewheel.with_alt.action", 2);
-  // On MacOS X, control+wheel is typically handled by system and we don't
-  // receive the event.  So, command key which is the main modifier key for
-  // acceleration is the best modifier for zoom-in/out.  However, we should keep
-  // the control key setting for backward compatibility.
-  pref("mousewheel.with_meta.action", 3); // command key on Mac
-  // Disable control-/meta-modified horizontal wheel events, since those are
-  // used on Mac as part of modified swipe gestures (e.g. Left swipe+Cmd is
-  // "go back" in a new tab).
-  pref("mousewheel.with_control.action.override_x", 0);
-  pref("mousewheel.with_meta.action.override_x", 0);
+// On macOS, if the wheel has one axis only, shift+wheel comes through as a
+// horizontal scroll event. Thus, we can't assign anything other than normal
+// scrolling to shift+wheel.
+pref("mousewheel.with_shift.action", 1);
+pref("mousewheel.with_alt.action", 2);
+// On MacOS X, control+wheel is typically handled by system and we don't
+// receive the event.  So, command key which is the main modifier key for
+// acceleration is the best modifier for zoom-in/out.  However, we should keep
+// the control key setting for backward compatibility.
+pref("mousewheel.with_meta.action", 3); // command key on Mac
+// Disable control-/meta-modified horizontal wheel events, since those are
+// used on Mac as part of modified swipe gestures (e.g. Left swipe+Cmd is
+// "go back" in a new tab).
+pref("mousewheel.with_control.action.override_x", 0);
+pref("mousewheel.with_meta.action.override_x", 0);
 #else
-  // On the other platforms (non-macOS), user may use legacy mouse which
-  // supports only vertical wheel but want to scroll horizontally.  For such
-  // users, we should provide horizontal scroll with shift+wheel (same as
-  // Chrome). However, shift+wheel was used for navigating history.  For users
-  // who want to keep using this feature, let's enable it with alt+wheel.  This
-  // is better for consistency with macOS users.
-  pref("mousewheel.with_shift.action", 4);
-  pref("mousewheel.with_alt.action", 2);
-  pref("mousewheel.with_meta.action", 1); // win key on Win, Super/Hyper on Linux
-#endif
-pref("mousewheel.with_control.action",3);
+// On the other platforms (non-macOS), user may use legacy mouse which
+// supports only vertical wheel but want to scroll horizontally.  For such
+// users, we should provide horizontal scroll with shift+wheel (same as
+// Chrome). However, shift+wheel was used for navigating history.  For users
+// who want to keep using this feature, let's enable it with alt+wheel.  This
+// is better for consistency with macOS users.
+pref("mousewheel.with_shift.action", 4);
+pref("mousewheel.with_alt.action", 2);
+pref("mousewheel.with_meta.action", 1); // win key on Win, Super/Hyper on Linux
+#endif
+pref("mousewheel.with_control.action", 3);
 pref("mousewheel.with_win.action", 1);
 
 pref("browser.xul.error_pages.expert_bad_cert", false);
@@ -760,7 +760,7 @@ pref("network.protocol-handler.external.news", true);   // for news
 pref("network.protocol-handler.external.snews", true);  // for secure news
 pref("network.protocol-handler.external.nntp", true);   // also news
 #ifdef XP_WIN
-  pref("network.protocol-handler.external.ms-windows-store", true);
+pref("network.protocol-handler.external.ms-windows-store", true);
 #endif
 
 // ...without warning dialogs
@@ -769,7 +769,7 @@ pref("network.protocol-handler.warn-external.news", false);
 pref("network.protocol-handler.warn-external.snews", false);
 pref("network.protocol-handler.warn-external.nntp", false);
 #ifdef XP_WIN
-  pref("network.protocol-handler.warn-external.ms-windows-store", false);
+pref("network.protocol-handler.warn-external.ms-windows-store", false);
 #endif
 
 // By default, all protocol handlers are exposed.  This means that
@@ -797,9 +797,9 @@ pref("plugins.testmode", false);
 pref("plugins.show_infobar", false);
 
 #if defined(_ARM64_) && defined(XP_WIN)
-  pref("plugin.default.state", 0);
+pref("plugin.default.state", 0);
 #else
-  pref("plugin.default.state", 1);
+pref("plugin.default.state", 1);
 #endif
 
 // Enables the download and use of the flash blocklists.
@@ -814,9 +814,9 @@ pref("plugins.favorfallback.mode", "follow-ctp");
 pref("plugins.favorfallback.rules", "nosrc,video");
 
 #ifdef XP_WIN
-  pref("browser.preferences.instantApply", false);
+pref("browser.preferences.instantApply", false);
 #else
-  pref("browser.preferences.instantApply", true);
+pref("browser.preferences.instantApply", true);
 #endif
 
 // Toggling Search bar on and off in about:preferences
@@ -1035,20 +1035,20 @@ pref("breakpad.reportURL", "https://crash-stats.mozilla.org/report/index/");
 
 // URL for "Learn More" for DataCollection
 pref("toolkit.datacollection.infoURL",
-     "https://www.mozilla.org/legal/privacy/firefox.html");
+  "https://www.mozilla.org/legal/privacy/firefox.html");
 
 // URL for "Learn More" for Crash Reporter
 pref("toolkit.crashreporter.infoURL",
-     "https://www.mozilla.org/legal/privacy/firefox.html#crash-reporter");
+  "https://www.mozilla.org/legal/privacy/firefox.html#crash-reporter");
 
 // base URL for web-based support pages
 pref("app.support.baseURL", "https://support.mozilla.org/1/firefox/%VERSION%/%OS%/%LOCALE%/");
 
 // base url for web-based feedback pages
 #ifdef MOZ_DEV_EDITION
-  pref("app.feedback.baseURL", "https://input.mozilla.org/%LOCALE%/feedback/firefoxdev/%VERSION%/");
+pref("app.feedback.baseURL", "https://input.mozilla.org/%LOCALE%/feedback/firefoxdev/%VERSION%/");
 #else
-  pref("app.feedback.baseURL", "https://input.mozilla.org/%LOCALE%/feedback/%APP%/%VERSION%/");
+pref("app.feedback.baseURL", "https://input.mozilla.org/%LOCALE%/feedback/%APP%/%VERSION%/");
 #endif
 
 // Name of alternate about: page for certificate errors (when undefined, defaults to about:neterror)
@@ -1081,116 +1081,116 @@ pref("browser.flash-protected-mode-flip.done", false);
 pref("dom.ipc.shims.enabledWarnings", false);
 
 #if defined(XP_WIN) && defined(MOZ_SANDBOX)
-  // Controls whether and how the Windows NPAPI plugin process is sandboxed.
-  // To get a different setting for a particular plugin replace "default", with
-  // the plugin's nice file name, see: nsPluginTag::GetNiceFileName.
-  // On windows these levels are:
-  // 0 - no sandbox
-  // 1 - sandbox with USER_NON_ADMIN access token level
-  // 2 - a more strict sandbox, which might cause functionality issues. This now
-  //     includes running at low integrity.
-  // 3 - the strongest settings we seem to be able to use without breaking
-  //     everything, but will probably cause some functionality restrictions
-  pref("dom.ipc.plugins.sandbox-level.default", 0);
+// Controls whether and how the Windows NPAPI plugin process is sandboxed.
+// To get a different setting for a particular plugin replace "default", with
+// the plugin's nice file name, see: nsPluginTag::GetNiceFileName.
+// On windows these levels are:
+// 0 - no sandbox
+// 1 - sandbox with USER_NON_ADMIN access token level
+// 2 - a more strict sandbox, which might cause functionality issues. This now
+//     includes running at low integrity.
+// 3 - the strongest settings we seem to be able to use without breaking
+//     everything, but will probably cause some functionality restrictions
+pref("dom.ipc.plugins.sandbox-level.default", 0);
   #if defined(_AMD64_)
-    // The base sandbox level in nsPluginTag::InitSandboxLevel must be
-    // updated to keep in sync with this value.
-    pref("dom.ipc.plugins.sandbox-level.flash", 3);
+// The base sandbox level in nsPluginTag::InitSandboxLevel must be
+// updated to keep in sync with this value.
+pref("dom.ipc.plugins.sandbox-level.flash", 3);
   #else
-    pref("dom.ipc.plugins.sandbox-level.flash", 0);
+pref("dom.ipc.plugins.sandbox-level.flash", 0);
   #endif
 
-  // This controls the strength of the Windows content process sandbox for
-  // testing purposes. This will require a restart.
-  // On windows these levels are:
-  // See - security/sandbox/win/src/sandboxbroker/sandboxBroker.cpp
-  // SetSecurityLevelForContentProcess() for what the different settings mean.
-  pref("security.sandbox.content.level", 6);
+// This controls the strength of the Windows content process sandbox for
+// testing purposes. This will require a restart.
+// On windows these levels are:
+// See - security/sandbox/win/src/sandboxbroker/sandboxBroker.cpp
+// SetSecurityLevelForContentProcess() for what the different settings mean.
+pref("security.sandbox.content.level", 6);
 
-  // This controls the strength of the Windows GPU process sandbox.  Changes
-  // will require restart.
-  // For information on what the level number means, see
-  // SetSecurityLevelForGPUProcess() in
-  // security/sandbox/win/src/sandboxbroker/sandboxBroker.cpp
-  pref("security.sandbox.gpu.level", 0);
+// This controls the strength of the Windows GPU process sandbox.  Changes
+// will require restart.
+// For information on what the level number means, see
+// SetSecurityLevelForGPUProcess() in
+// security/sandbox/win/src/sandboxbroker/sandboxBroker.cpp
+pref("security.sandbox.gpu.level", 0);
 #endif
 
 #if defined(XP_MACOSX) && defined(MOZ_SANDBOX)
-  // This pref is discussed in bug 1083344, the naming is inspired from its
-  // Windows counterpart, but on Mac it's an integer which means:
-  // 0 -> "no sandbox" (nightly only)
-  // 1 -> "preliminary content sandboxing enabled: write access to
-  //       home directory is prevented"
-  // 2 -> "preliminary content sandboxing enabled with profile protection:
-  //       write access to home directory is prevented, read and write access
-  //       to ~/Library and profile directories are prevented (excluding
-  //       $PROFILE/{extensions,chrome})"
-  // 3 -> "no global read/write access, read access permitted to
-  //       $PROFILE/{extensions,chrome}"
-  // This setting is read when the content process is started. On Mac the
-  // content process is killed when all windows are closed, so a change will
-  // take effect when the 1st window is opened.
-  pref("security.sandbox.content.level", 3);
-
-  // Prefs for controlling whether and how the Mac NPAPI Flash plugin process is
-  // sandboxed. On Mac these levels are:
-  // 0 - "no sandbox"
-  // 1 - "global read access, limited write access for Flash functionality"
-  // 2 - "read access triggered by file dialog activity, limited read/write"
-  //     "access for Flash functionality"
-  // 3 - "limited read/write access for Flash functionality"
-  pref("dom.ipc.plugins.sandbox-level.flash", 1);
-  // Controls the level used on older OS X versions. Is overriden when the
-  // "dom.ipc.plugins.sandbox-level.flash" is set to 0.
-  pref("dom.ipc.plugins.sandbox-level.flash.legacy", 1);
-  // The max OS minor version where we use the above legacy sandbox level.
-  pref("dom.ipc.plugins.sandbox-level.flash.max-legacy-os-minor", 10);
-  // Controls the sandbox level used by plugins other than Flash. On Mac,
-  // no other plugins are supported and this pref is only used for test
-  // plugins used in automated tests.
-  pref("dom.ipc.plugins.sandbox-level.default", 1);
+// This pref is discussed in bug 1083344, the naming is inspired from its
+// Windows counterpart, but on Mac it's an integer which means:
+// 0 -> "no sandbox" (nightly only)
+// 1 -> "preliminary content sandboxing enabled: write access to
+//       home directory is prevented"
+// 2 -> "preliminary content sandboxing enabled with profile protection:
+//       write access to home directory is prevented, read and write access
+//       to ~/Library and profile directories are prevented (excluding
+//       $PROFILE/{extensions,chrome})"
+// 3 -> "no global read/write access, read access permitted to
+//       $PROFILE/{extensions,chrome}"
+// This setting is read when the content process is started. On Mac the
+// content process is killed when all windows are closed, so a change will
+// take effect when the 1st window is opened.
+pref("security.sandbox.content.level", 3);
+
+// Prefs for controlling whether and how the Mac NPAPI Flash plugin process is
+// sandboxed. On Mac these levels are:
+// 0 - "no sandbox"
+// 1 - "global read access, limited write access for Flash functionality"
+// 2 - "read access triggered by file dialog activity, limited read/write"
+//     "access for Flash functionality"
+// 3 - "limited read/write access for Flash functionality"
+pref("dom.ipc.plugins.sandbox-level.flash", 1);
+// Controls the level used on older OS X versions. Is overriden when the
+// "dom.ipc.plugins.sandbox-level.flash" is set to 0.
+pref("dom.ipc.plugins.sandbox-level.flash.legacy", 1);
+// The max OS minor version where we use the above legacy sandbox level.
+pref("dom.ipc.plugins.sandbox-level.flash.max-legacy-os-minor", 10);
+// Controls the sandbox level used by plugins other than Flash. On Mac,
+// no other plugins are supported and this pref is only used for test
+// plugins used in automated tests.
+pref("dom.ipc.plugins.sandbox-level.default", 1);
 #endif
 
 #if defined(XP_LINUX) && defined(MOZ_SANDBOX)
-  // This pref is introduced as part of bug 742434, the naming is inspired from
-  // its Windows/Mac counterpart, but on Linux it's an integer which means:
-  // 0 -> "no sandbox"
-  // 1 -> "content sandbox using seccomp-bpf when available" + ipc restrictions
-  // 2 -> "seccomp-bpf + write file broker"
-  // 3 -> "seccomp-bpf + read/write file brokering"
-  // 4 -> all of the above + network/socket restrictions + chroot
-  //
-  // The purpose of this setting is to allow Linux users or distros to disable
-  // the sandbox while we fix their problems, or to allow running Firefox with
-  // exotic configurations we can't reasonably support out of the box.
-  //
-  pref("security.sandbox.content.level", 4);
-  // Introduced as part of bug 1608558.  Linux is currently the only platform
-  // that uses a sandbox level for the socket process.  There are currently
-  // only 2 levels:
-  // 0 -> "no sandbox"
-  // 1 -> "sandboxed, allows socket operations and reading necessary certs"
-  pref("security.sandbox.socket.process.level", 1);
-  pref("security.sandbox.content.write_path_whitelist", "");
-  pref("security.sandbox.content.read_path_whitelist", "");
-  pref("security.sandbox.content.syscall_whitelist", "");
+// This pref is introduced as part of bug 742434, the naming is inspired from
+// its Windows/Mac counterpart, but on Linux it's an integer which means:
+// 0 -> "no sandbox"
+// 1 -> "content sandbox using seccomp-bpf when available" + ipc restrictions
+// 2 -> "seccomp-bpf + write file broker"
+// 3 -> "seccomp-bpf + read/write file brokering"
+// 4 -> all of the above + network/socket restrictions + chroot
+//
+// The purpose of this setting is to allow Linux users or distros to disable
+// the sandbox while we fix their problems, or to allow running Firefox with
+// exotic configurations we can't reasonably support out of the box.
+//
+pref("security.sandbox.content.level", 4);
+// Introduced as part of bug 1608558.  Linux is currently the only platform
+// that uses a sandbox level for the socket process.  There are currently
+// only 2 levels:
+// 0 -> "no sandbox"
+// 1 -> "sandboxed, allows socket operations and reading necessary certs"
+pref("security.sandbox.socket.process.level", 1);
+pref("security.sandbox.content.write_path_whitelist", "");
+pref("security.sandbox.content.read_path_whitelist", "");
+pref("security.sandbox.content.syscall_whitelist", "");
 #endif
 
 #if defined(XP_OPENBSD) && defined(MOZ_SANDBOX)
-  pref("security.sandbox.content.level", 1);
+pref("security.sandbox.content.level", 1);
 #endif
 
 #if defined(MOZ_SANDBOX)
-  // ID (a UUID when set by gecko) that is used to form the name of a
-  // sandbox-writable temporary directory to be used by content processes
-  // when a temporary writable file is required in a level 1 sandbox.
-  pref("security.sandbox.content.tempDirSuffix", "");
-  pref("security.sandbox.plugin.tempDirSuffix", "");
+// ID (a UUID when set by gecko) that is used to form the name of a
+// sandbox-writable temporary directory to be used by content processes
+// when a temporary writable file is required in a level 1 sandbox.
+pref("security.sandbox.content.tempDirSuffix", "");
+pref("security.sandbox.plugin.tempDirSuffix", "");
 
   // This pref determines if messages relevant to sandbox violations are
   // logged.
   #if defined(XP_WIN) || defined(XP_MACOSX)
-    pref("security.sandbox.logging.enabled", false);
+pref("security.sandbox.logging.enabled", false);
   #endif
 #endif
 
@@ -1202,19 +1202,19 @@ pref("dom.ipc.shims.enabledWarnings", false);
 // NPAPI to manipulate the cursor, and these workarounds will be removed.
 // See bug 621117.
 #ifdef XP_MACOSX
-  pref("dom.ipc.plugins.nativeCursorSupport", true);
+pref("dom.ipc.plugins.nativeCursorSupport", true);
 #endif
 
 #ifdef XP_WIN
-  pref("browser.taskbar.previews.enable", false);
-  pref("browser.taskbar.previews.max", 20);
-  pref("browser.taskbar.previews.cachetime", 5);
-  pref("browser.taskbar.lists.enabled", true);
-  pref("browser.taskbar.lists.frequent.enabled", true);
-  pref("browser.taskbar.lists.recent.enabled", false);
-  pref("browser.taskbar.lists.maxListItemCount", 7);
-  pref("browser.taskbar.lists.tasks.enabled", true);
-  pref("browser.taskbar.lists.refreshInSeconds", 120);
+pref("browser.taskbar.previews.enable", false);
+pref("browser.taskbar.previews.max", 20);
+pref("browser.taskbar.previews.cachetime", 5);
+pref("browser.taskbar.lists.enabled", true);
+pref("browser.taskbar.lists.frequent.enabled", true);
+pref("browser.taskbar.lists.recent.enabled", false);
+pref("browser.taskbar.lists.maxListItemCount", 7);
+pref("browser.taskbar.lists.tasks.enabled", true);
+pref("browser.taskbar.lists.refreshInSeconds", 120);
 #endif
 
 // Preferences to be synced by default
@@ -1368,17 +1368,17 @@ pref("prompts.tabChromePromptSubDialog", true);
 // Whether to show the dialogs opened at the content level, such as
 // alert() or prompt(), using a SubDialogManager in the TabDialogBox.
 #ifdef EARLY_BETA_OR_EARLIER
-  pref("prompts.contentPromptSubDialog", true);
+pref("prompts.contentPromptSubDialog", true);
 #else
-  pref("prompts.contentPromptSubDialog", false);
+pref("prompts.contentPromptSubDialog", false);
 #endif
 
 // Whether to show window-modal dialogs opened for browser windows
 // in a SubDialog inside their parent, instead of an OS level window.
 #ifdef NIGHTLY_BUILD
-  pref("prompts.windowPromptSubDialog", true);
+pref("prompts.windowPromptSubDialog", true);
 #else
-  pref("prompts.windowPromptSubDialog", false);
+pref("prompts.windowPromptSubDialog", false);
 #endif
 
 
@@ -1395,7 +1395,7 @@ pref("browser.newtabpage.activity-stream.newNewtabExperience.colors", "#0090ED,#
 
 // Activity Stream prefs that control to which page to redirect
 #ifndef RELEASE_OR_BETA
-  pref("browser.newtabpage.activity-stream.debug", false);
+pref("browser.newtabpage.activity-stream.debug", false);
 #endif
 
 // The remote FxA root content URL for the Activity Stream firstrun page.
@@ -1432,9 +1432,9 @@ pref("browser.newtabpage.activity-stream.discoverystream.spocs-endpoint-query",
 pref("browser.newtabpage.activity-stream.discoverystream.region-stories-block", "FR");
 // List of locales that get stories, regardless of region-stories-config.
 #ifdef NIGHTLY_BUILD
-  pref("browser.newtabpage.activity-stream.discoverystream.locale-list-config", "en-US,en-CA,en-GB");
+pref("browser.newtabpage.activity-stream.discoverystream.locale-list-config", "en-US,en-CA,en-GB");
 #else
-  pref("browser.newtabpage.activity-stream.discoverystream.locale-list-config", "");
+pref("browser.newtabpage.activity-stream.discoverystream.locale-list-config", "");
 #endif
 // List of regions that get stories by default.
 pref("browser.newtabpage.activity-stream.discoverystream.region-stories-config", "US,DE,CA,GB,IE,CH,AT,BE,IN");
@@ -1459,9 +1459,9 @@ pref("browser.newtabpage.activity-stream.feeds.section.topstories", true);
 
 // The pref controls if search hand-off is enabled for Activity Stream.
 #ifdef NIGHTLY_BUILD
-  pref("browser.newtabpage.activity-stream.improvesearch.handoffToAwesomebar", true);
+pref("browser.newtabpage.activity-stream.improvesearch.handoffToAwesomebar", true);
 #else
-  pref("browser.newtabpage.activity-stream.improvesearch.handoffToAwesomebar", false);
+pref("browser.newtabpage.activity-stream.improvesearch.handoffToAwesomebar", false);
 #endif
 
 pref("browser.newtabpage.activity-stream.logowordmark.alwaysVisible", false);
@@ -1497,7 +1497,7 @@ pref("toolkit.startup.max_resumed_crashes", 3);
 // Whether to use RegisterApplicationRestart to restart the browser and resume
 // the session on next Windows startup
 #if defined(XP_WIN)
-  pref("toolkit.winRegisterApplicationRestart", true);
+pref("toolkit.winRegisterApplicationRestart", true);
 #endif
 
 // Completely disable pdf.js as an option to preview pdfs within firefox.
@@ -1602,9 +1602,9 @@ pref("identity.mobilepromo.ios", "https://www.mozilla.org/firefox/ios/?utm_sourc
 // Migrate any existing Firefox Account data from the default profile to the
 // Developer Edition profile.
 #ifdef MOZ_DEV_EDITION
-  pref("identity.fxaccounts.migrateToDevEdition", true);
+pref("identity.fxaccounts.migrateToDevEdition", true);
 #else
-  pref("identity.fxaccounts.migrateToDevEdition", false);
+pref("identity.fxaccounts.migrateToDevEdition", false);
 #endif
 
 // If activated, send tab will use the new FxA commands backend.
@@ -1626,8 +1626,8 @@ pref("media.gmp.trial-create.enabled", true);
 // unsupported.
 
 #ifdef MOZ_WIDEVINE_EME
-  pref("media.gmp-widevinecdm.visible", true);
-  pref("media.gmp-widevinecdm.enabled", true);
+pref("media.gmp-widevinecdm.visible", true);
+pref("media.gmp-widevinecdm.enabled", true);
 #endif
 
 pref("media.gmp-gmpopenh264.visible", true);
@@ -1637,10 +1637,10 @@ pref("media.gmp-gmpopenh264.enabled", true);
 pref("media.autoplay.default", 1); // 0=Allowed, 1=Blocked, 5=All Blocked
 
 #ifdef NIGHTLY_BUILD
-  // Block WebAudio from playing automatically.
-  pref("media.autoplay.block-webaudio", true);
+// Block WebAudio from playing automatically.
+pref("media.autoplay.block-webaudio", true);
 #else
-  pref("media.autoplay.block-webaudio", false);
+pref("media.autoplay.block-webaudio", false);
 #endif
 
 pref("media.videocontrols.picture-in-picture.enabled", true);
@@ -1648,11 +1648,11 @@ pref("media.videocontrols.picture-in-picture.video-toggle.enabled", true);
 pref("media.videocontrols.picture-in-picture.keyboard-controls.enabled", true);
 
 #ifdef NIGHTLY_BUILD
-  // Show the audio toggle for Picture-in-Picture.
-  pref("media.videocontrols.picture-in-picture.audio-toggle.enabled", true);
+// Show the audio toggle for Picture-in-Picture.
+pref("media.videocontrols.picture-in-picture.audio-toggle.enabled", true);
   // Enable keyboard controls for Picture-in-Picture.
 #else
-  pref("media.videocontrols.picture-in-picture.audio-toggle.enabled", false);
+pref("media.videocontrols.picture-in-picture.audio-toggle.enabled", false);
 #endif
 
 pref("browser.translation.detectLanguage", false);
@@ -1797,19 +1797,19 @@ pref("browser.contentblocking.cfr-milestone.milestones", "[1000, 5000, 10000, 25
 
 // Enables the new Protections Panel.
 #ifdef NIGHTLY_BUILD
-  pref("browser.protections_panel.enabled", true);
-  pref("browser.protections_panel.infoMessage.seen", false);
+pref("browser.protections_panel.enabled", true);
+pref("browser.protections_panel.infoMessage.seen", false);
 #endif
 
 // Always enable newtab segregation using containers
 pref("privacy.usercontext.about_newtab_segregation.enabled", true);
 // Enable Contextual Identity Containers
 #ifdef NIGHTLY_BUILD
-  pref("privacy.userContext.enabled", true);
-  pref("privacy.userContext.ui.enabled", true);
+pref("privacy.userContext.enabled", true);
+pref("privacy.userContext.ui.enabled", true);
 #else
-  pref("privacy.userContext.enabled", false);
-  pref("privacy.userContext.ui.enabled", false);
+pref("privacy.userContext.enabled", false);
+pref("privacy.userContext.ui.enabled", false);
 #endif
 pref("privacy.userContext.extension", "");
 // allows user to open container menu on a left click instead of a new
@@ -1843,9 +1843,9 @@ pref("browser.tabs.remote.desktopbehavior", true);
 
 // Run media transport in a separate process?
 #ifdef EARLY_BETA_OR_EARLIER
-  pref("media.peerconnection.mtransport_process", true);
+pref("media.peerconnection.mtransport_process", true);
 #else
-  pref("media.peerconnection.mtransport_process", false);
+pref("media.peerconnection.mtransport_process", false);
 #endif
 
 // For speculatively warming up tabs to improve perceived
@@ -1871,8 +1871,8 @@ pref("browser.tabs.crashReporting.email", "");
 pref("extensions.experiments.enabled", false);
 
 #if defined(XP_WIN)
-  // Allows us to deprioritize the processes of background tabs at an OS level
-  pref("dom.ipc.processPriorityManager.enabled", true);
+// Allows us to deprioritize the processes of background tabs at an OS level
+pref("dom.ipc.processPriorityManager.enabled", true);
 #endif
 
 // Don't limit how many nodes we care about on desktop:
@@ -1934,7 +1934,7 @@ pref("signon.management.page.sort", "name");
 // where it is clicked). Be sure that if these two prefs are updated, that
 // the utm_creative param be last.
 pref("signon.management.page.breachAlertUrl",
-     "https://monitor.firefox.com/breach-details/");
+  "https://monitor.firefox.com/breach-details/");
 pref("signon.management.page.showPasswordSyncNotification", true);
 pref("signon.passwordEditCapture.enabled", true);
 pref("signon.showAutoCompleteFooter", true);
@@ -1953,9 +1953,9 @@ pref("webchannel.allowObject.urlWhitelist", "https://content.cdn.mozilla.net htt
 // crash reports, and then show a notification for submitting
 // those reports.
 #ifdef NIGHTLY_BUILD
-  pref("browser.crashReports.unsubmittedCheck.enabled", true);
+pref("browser.crashReports.unsubmittedCheck.enabled", true);
 #else
-  pref("browser.crashReports.unsubmittedCheck.enabled", false);
+pref("browser.crashReports.unsubmittedCheck.enabled", false);
 #endif
 
 // chancesUntilSuppress is how many times we'll show the unsubmitted
@@ -2026,7 +2026,7 @@ pref("doh-rollout.clearModeOnShutdown", false);
 
 // URL for Learn More link for browser error logging in preferences
 pref("browser.chrome.errorReporter.infoURL",
-     "https://support.mozilla.org/1/firefox/%VERSION%/%OS%/%LOCALE%/nightly-error-collection");
+  "https://support.mozilla.org/1/firefox/%VERSION%/%OS%/%LOCALE%/nightly-error-collection");
 
 // Normandy client preferences
 pref("app.normandy.api_url", "https://normandy.cdn.mozilla.net/api/v1");
@@ -2039,19 +2039,19 @@ pref("app.normandy.shieldLearnMoreUrl", "https://support.mozilla.org/1/firefox/%
 pref("app.normandy.last_seen_buildid", "");
 pref("app.normandy.onsync_skew_sec", 600);
 #ifdef MOZ_DATA_REPORTING
-  pref("app.shield.optoutstudies.enabled", true);
+pref("app.shield.optoutstudies.enabled", true);
 #else
-  pref("app.shield.optoutstudies.enabled", false);
+pref("app.shield.optoutstudies.enabled", false);
 #endif
 
 // Multi-lingual preferences
 #if defined(RELEASE_OR_BETA) && !defined(MOZ_DEV_EDITION)
-  pref("intl.multilingual.enabled", true);
-  pref("intl.multilingual.downloadEnabled", true);
+pref("intl.multilingual.enabled", true);
+pref("intl.multilingual.downloadEnabled", true);
 #else
-  pref("intl.multilingual.enabled", false);
-  // AMO only serves language packs for release and beta versions.
-  pref("intl.multilingual.downloadEnabled", false);
+pref("intl.multilingual.enabled", false);
+// AMO only serves language packs for release and beta versions.
+pref("intl.multilingual.downloadEnabled", false);
 #endif
 
 // Simulate conditions that will happen when the browser
@@ -2146,7 +2146,7 @@ pref("devtools.command-button-measure.enabled", false);
 pref("devtools.command-button-noautohide.enabled", false);
 pref("devtools.command-button-errorcount.enabled", true);
 #ifndef MOZILLA_OFFICIAL
-  pref("devtools.command-button-fission-prefs.enabled", true);
+pref("devtools.command-button-fission-prefs.enabled", true);
 #endif
 
 // Inspector preferences
@@ -2204,9 +2204,9 @@ pref("devtools.layout.grid.opened", true);
 // Enable hovering Box Model values and jumping to their source CSS rule in the
 // rule-view.
 #if defined(NIGHTLY_BUILD)
-  pref("devtools.layout.boxmodel.highlightProperty", true);
+pref("devtools.layout.boxmodel.highlightProperty", true);
 #else
-  pref("devtools.layout.boxmodel.highlightProperty", false);
+pref("devtools.layout.boxmodel.highlightProperty", false);
 #endif
 
 // By how many times eyedropper will magnify pixels
@@ -2265,9 +2265,9 @@ pref("devtools.performance.ui.enable-memory-flame", false);
 
 // Enable experimental options in the UI only in Nightly
 #if defined(NIGHTLY_BUILD)
-  pref("devtools.performance.ui.experimental", true);
+pref("devtools.performance.ui.experimental", true);
 #else
-  pref("devtools.performance.ui.experimental", false);
+pref("devtools.performance.ui.experimental", false);
 #endif
 
 // The default cache UI setting
@@ -2292,7 +2292,7 @@ pref("devtools.netmonitor.panes-search-width", 550);
 pref("devtools.netmonitor.panes-search-height", 450);
 pref("devtools.netmonitor.filters", "[\"all\"]");
 pref("devtools.netmonitor.visibleColumns",
-    "[\"status\",\"method\",\"domain\",\"file\",\"initiator\",\"type\",\"transferred\",\"contentSize\",\"waterfall\"]"
+  "[\"status\",\"method\",\"domain\",\"file\",\"initiator\",\"type\",\"transferred\",\"contentSize\",\"waterfall\"]"
 );
 pref("devtools.netmonitor.columnsData",
   '[{"name":"status","minWidth":30,"width":5}, {"name":"method","minWidth":30,"width":5}, {"name":"domain","minWidth":30,"width":10}, {"name":"file","minWidth":30,"width":25}, {"name":"url","minWidth":30,"width":25},{"name":"initiator","minWidth":30,"width":10},{"name":"type","minWidth":30,"width":5},{"name":"transferred","minWidth":30,"width":10},{"name":"contentSize","minWidth":30,"width":5},{"name":"waterfall","minWidth":150,"width":15}]');
@@ -2358,13 +2358,13 @@ pref("devtools.webconsole.filter.net", false);
 pref("devtools.webconsole.filter.netxhr", false);
 
 // Webconsole autocomplete preference
-pref("devtools.webconsole.input.autocomplete",true);
+pref("devtools.webconsole.input.autocomplete", true);
 
 // Show context selector in console input, in the browser toolbox
 #if defined(NIGHTLY_BUILD)
-  pref("devtools.webconsole.input.context", true);
+pref("devtools.webconsole.input.context", true);
 #else
-  pref("devtools.webconsole.input.context", false);
+pref("devtools.webconsole.input.context", false);
 #endif
 
 // Show context selector in console input, in the content toolbox
@@ -2400,9 +2400,9 @@ pref("devtools.webconsole.timestampMessages", false);
 
 // Enable the webconsole sidebar toggle in Nightly builds.
 #if defined(NIGHTLY_BUILD)
-  pref("devtools.webconsole.sidebarToggle", true);
+pref("devtools.webconsole.sidebarToggle", true);
 #else
-  pref("devtools.webconsole.sidebarToggle", false);
+pref("devtools.webconsole.sidebarToggle", false);
 #endif
 
 // Saved editor mode state in the console.
@@ -2418,9 +2418,9 @@ pref("devtools.webconsole.input.editorOnboarding", true);
 
 // Enable the new performance recording panel in Nightly builds.
 #if defined(NIGHTLY_BUILD)
-  pref("devtools.performance.new-panel-enabled", true);
+pref("devtools.performance.new-panel-enabled", true);
 #else
-  pref("devtools.performance.new-panel-enabled", false);
+pref("devtools.performance.new-panel-enabled", false);
 #endif
 
 // Enable message grouping in the console, true by default
@@ -2476,16 +2476,16 @@ pref("devtools.responsive.userAgent", "");
 
 // Show the custom user agent input only in Nightly.
 #if defined(NIGHTLY_BUILD)
-  pref("devtools.responsive.showUserAgentInput", true);
+pref("devtools.responsive.showUserAgentInput", true);
 #else
-  pref("devtools.responsive.showUserAgentInput", false);
+pref("devtools.responsive.showUserAgentInput", false);
 #endif
 
 // Show tab debug targets for This Firefox (on by default for local builds).
 #ifdef MOZILLA_OFFICIAL
-  pref("devtools.aboutdebugging.local-tab-debugging", false);
+pref("devtools.aboutdebugging.local-tab-debugging", false);
 #else
-  pref("devtools.aboutdebugging.local-tab-debugging", true);
+pref("devtools.aboutdebugging.local-tab-debugging", true);
 #endif
 
 // Show process debug targets.
@@ -2503,9 +2503,9 @@ pref("devtools.aboutdebugging.collapsibilities.temporaryExtension", false);
 // about:debugging: only show system and hidden extensions in local builds by
 // default.
 #ifdef MOZILLA_OFFICIAL
-  pref("devtools.aboutdebugging.showHiddenAddons", false);
+pref("devtools.aboutdebugging.showHiddenAddons", false);
 #else
-  pref("devtools.aboutdebugging.showHiddenAddons", true);
+pref("devtools.aboutdebugging.showHiddenAddons", true);
 #endif
 
 // Map top-level await expressions in the console
@@ -2527,12 +2527,114 @@ pref("first-startup.timeout", 30000);
 // The agent still runs as scheduled if this pref is disabled,
 // but it exits immediately before taking any action.
 #ifdef XP_WIN
-  pref("default-browser-agent.enabled", true);
+pref("default-browser-agent.enabled", true);
 #endif
 
 // Test Prefs that do nothing for testing
 #if defined(EARLY_BETA_OR_EARLIER)
-  pref("app.normandy.test-prefs.bool", false);
-  pref("app.normandy.test-prefs.integer", 0);
-  pref("app.normandy.test-prefs.string", "");
+pref("app.normandy.test-prefs.bool", false);
+pref("app.normandy.test-prefs.integer", 0);
+pref("app.normandy.test-prefs.string", "");
 #endif
+
+// Dot Browser Modifications
+
+// General
+pref("general.autoScroll", true);
+pref("browser.preferences.experimental.hidden", true);
+pref("browser.preferences.experimental", false);
+pref("app.feedback.baseURL", "https://services.dothq.co/feedback/send?product=dot&version=%VERSION%&channel=unknown");
+
+// Network
+pref("dom.security.https_only_mode", true); // Enable HTTPS-only mode
+pref("network.trr.mode", 2); // Enable DNS-over-HTTPS by default
+pref("network.trr.uri", "https://trr.dns.nextdns.io/");
+
+pref("network.security.esni.enabled", true); // Encrypted SNI support
+pref("network.http.http3.enabled", true); // HTTP3 support
+pref("network.cookie.cookieBehavior", 1); // Block third-party cookies
+
+pref("network.IDN_show_punycode", true);  // Convert non-unicode domains to Unicode to stop phishing
+
+pref("network.http.referer.XOriginTrimmingPolicy", 2); // Tighten referrer handling policy
+pref("network.http.referer.XOriginPolicy", 2);
+
+pref("network.dns.disablePrefetch", true); // Disable prefetch which exposes your IP to unvisited sites
+pref("network.dns.disablePrefetchFromHTTPS", true);
+pref("network.predictor.enabled", false);
+pref("network.predictor.enable-prefetch", false);
+pref("network.prefetch-next", false);
+
+pref("network.captive-portal-service.enabled", false);
+
+// Opt out of studies, experiments and telemetry
+pref("app.shield.optoutstudies.enabled", false);
+pref("browser.onboarding.enabled", false);
+pref("experiments.enabled", false);
+pref("network.allow-experiments", false);
+pref("browser.discovery.enabled", false);
+
+// Disable Safebrowsing
+// todo: Swap out Safe Browsing for open-source alternative
+pref("browser.safebrowsing.malware.enabled", false);
+pref("browser.safebrowsing.phishing.enabled", false);
+pref("browser.safebrowsing.downloads.enabled", false);
+pref("browser.safebrowsing.downloads.remote.block_dangerous", false);
+pref("browser.safebrowsing.downloads.remote.block_dangerous_host", false);
+pref("browser.safebrowsing.downloads.remote.enabled", false);
+pref("browser.safebrowsing.downloads.remote.block_potentially_unwanted", false);
+pref("browser.safebrowsing.downloads.remote.block_uncommon", false);
+pref("browser.safebrowsing.blockedURIs.enabled", false);
+
+pref("browser.safebrowsing.downloads.remote.url", "");
+pref("browser.safebrowsing.provider.google4.dataSharing.enabled", "");
+pref("browser.safebrowsing.provider.google4.updateURL", "");
+pref("browser.safebrowsing.provider.google4.reportURL", "");
+pref("browser.safebrowsing.provider.google4.reportPhishMistakeURL", "");
+pref("browser.safebrowsing.provider.google4.reportMalwareMistakeURL", "");
+pref("browser.safebrowsing.provider.google4.lists", "");
+pref("browser.safebrowsing.provider.google4.gethashURL", "");
+pref("browser.safebrowsing.provider.google4.dataSharingURL", "");
+pref("browser.safebrowsing.provider.google4.dataSharing.enabled", false);
+pref("browser.safebrowsing.provider.google4.advisoryURL", "");
+pref("browser.safebrowsing.provider.google4.advisoryName", "");
+pref("browser.safebrowsing.provider.google.updateURL", "");
+pref("browser.safebrowsing.provider.google.reportURL", "");
+pref("browser.safebrowsing.provider.google.reportPhishMistakeURL", "");
+pref("browser.safebrowsing.provider.google.reportMalwareMistakeURL", "");
+pref("browser.safebrowsing.provider.google.pver", "");
+pref("browser.safebrowsing.provider.google.lists", "");
+pref("browser.safebrowsing.provider.google.gethashURL", "");
+pref("browser.safebrowsing.provider.google.advisoryURL", "");
+
+// Security
+pref("security.insecure_connection_text.enabled", true);
+pref("privacy.donottrackheader.enabled", true);
+pref("browser.contentblocking.category", "strict");
+pref("privacy.resistFingerprinting", true);
+pref("security.ssl3.ecdhe_ecdsa_aes_128_sha", false);
+pref("security.ssl3.ecdhe_ecdsa_aes_256_sha", false);
+
+// Pocket
+pref("extensions.pocket.api", "");
+pref("extensions.pocket.enabled", false);
+pref("extensions.pocket.oAuthConsumerKey", "");
+pref("extensions.pocket.site", "");
+pref("extensions.pocket.onSaveRecs", false);
+pref("extensions.pocket.onSaveRecs.locales", "");
+
+// Appearance
+pref("layout.css.backdrop-filter.enabled", true);
+pref("gfx.webrender.all", true);
+pref("browser.tabs.drawInTitlebar", true);
+pref("browser.toolbars.bookmarks.visibility", "never");
+
+// Firefox Services
+pref("browser.contentblocking.report.lockwise.enabled", false);
+
+// Sidebar
+pref("sidebar.disabled", false);
+pref("sidebar.pinned", false);
+pref("sidebar.selected", "");
+pref("sidebar.startItems", "");
+pref("sidebar.endItems", "");
\ No newline at end of file
